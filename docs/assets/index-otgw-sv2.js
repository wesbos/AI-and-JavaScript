(function(){const C=document.createElement("link").relList;if(C&&C.supports&&C.supports("modulepreload"))return;for(const T of document.querySelectorAll('link[rel="modulepreload"]'))k(T);new MutationObserver(T=>{for(const L of T)if(L.type==="childList")for(const N of L.addedNodes)N.tagName==="LINK"&&N.rel==="modulepreload"&&k(N)}).observe(document,{childList:!0,subtree:!0});function d(T){const L={};return T.integrity&&(L.integrity=T.integrity),T.referrerPolicy&&(L.referrerPolicy=T.referrerPolicy),T.crossOrigin==="use-credentials"?L.credentials="include":T.crossOrigin==="anonymous"?L.credentials="omit":L.credentials="same-origin",L}function k(T){if(T.ep)return;T.ep=!0;const L=d(T);fetch(T.href,L)}})();let Ag=["far-past","past","current","next","far-next"],rh=15,Hr,mi;typeof document<"u"&&!("classList"in document.createElement("a"))&&function(I){let C="classList",d="prototype",k=(I.HTMLElement||I.Element)[d],T=Object;if(strTrim=String[d].trim||function(){return this.replace(/^\s+|\s+$/g,"")},arrIndexOf=Array[d].indexOf||function(L){for(let N=0,j=this.length;N<j;N++)if(N in this&&this[N]===L)return N;return-1},DOMEx=function(L,N){this.name=L,this.code=DOMException[L],this.message=N},checkTokenAndGetIndex=function(L,N){if(N==="")throw new DOMEx("SYNTAX_ERR","An invalid or illegal string was specified");if(/\s/.test(N))throw new DOMEx("INVALID_CHARACTER_ERR","String contains an invalid character");return arrIndexOf.call(L,N)},ClassList=function(L){let N=strTrim.call(L.className),j=N?N.split(/\s+/):[];for(let q=0,W=j.length;q<W;q++)this.push(j[q]);this._updateClassName=function(){L.className=this.toString()}},classListProto=ClassList[d]=[],classListGetter=function(){return new ClassList(this)},DOMEx[d]=Error[d],classListProto.item=function(L){return this[L]||null},classListProto.contains=function(L){return L+="",checkTokenAndGetIndex(this,L)!==-1},classListProto.add=function(L){L+="",checkTokenAndGetIndex(this,L)===-1&&(this.push(L),this._updateClassName())},classListProto.remove=function(L){L+="";let N=checkTokenAndGetIndex(this,L);N!==-1&&(this.splice(N,1),this._updateClassName())},classListProto.toggle=function(L){L+="",checkTokenAndGetIndex(this,L)===-1?this.add(L):this.remove(L)},classListProto.toString=function(){return this.join(" ")},T.defineProperty){let L={get:classListGetter,enumerable:!0,configurable:!0};try{T.defineProperty(k,C,L)}catch(N){N.number===-2146823252&&(L.enumerable=!1,T.defineProperty(k,C,L))}}else T[d].__defineGetter__&&k.__defineGetter__(C,classListGetter)}(self);function G1(I){return I<0||I>=mi.length?null:mi[I]}function a2(I,C){let d=G1(I);if(d){C&&d.classList.add(C);for(let k in Ag)C!=Ag[k]&&d.classList.remove(Ag[k])}}function dg(){for(let I=0;I<mi.length;I++)switch(I){case Hr-2:a2(I,"far-past");break;case Hr-1:a2(I,"past");break;case Hr:a2(I,"current");break;case Hr+1:a2(I,"next");break;case Hr+2:a2(I,"far-next");break;default:a2(I);break}ih(Hr-1),sh(Hr),window.setTimeout(()=>{oh(Hr-2)},301),y1(Hr-1),y1(Hr+2),fo()&&fd(mi[Hr]),ph()}function ah(){let I=mi[Hr].querySelectorAll(".to-build");return I.length?(I[0].classList.remove("to-build"),fo()&&fd(I[0]),!0):!1}function nc(){Hr>0&&(Hr--,dg())}function oc(){ah()||Hr<mi.length-1&&(Hr++,dg())}function sh(I){let C=G1(I);if(!C)return;let d=C.getAttribute("onslideenter");d&&new Function(d).call(C);let k=document.createEvent("Event");k.initEvent("slideenter",!0,!0),k.slideNumber=I+1,C.dispatchEvent(k)}function ih(I){let C=G1(I);if(!C)return;let d=C.getAttribute("onslideleave");d&&new Function(d).call(C);let k=document.createEvent("Event");k.initEvent("slideleave",!0,!0),k.slideNumber=I+1,C.dispatchEvent(k)}function nh(I){I.touches.length==1&&(touchDX=0,touchDY=0,touchStartX=I.touches[0].pageX,touchStartY=I.touches[0].pageY,document.body.addEventListener("touchmove",cd,!0),document.body.addEventListener("touchend",gd,!0))}function cd(I){I.touches.length>1?ud():(touchDX=I.touches[0].pageX-touchStartX,touchDY=I.touches[0].pageY-touchStartY)}function gd(I){let C=Math.abs(touchDX),d=Math.abs(touchDY);C>rh&&d<C*2/3&&(touchDX>0?nc():oc()),ud()}function ud(){document.body.removeEventListener("touchmove",cd,!0),document.body.removeEventListener("touchend",gd,!0)}function oh(I){let C=G1(I);if(!C)return;let d=C.getElementsByTagName("iframe");for(var k=0,T;T=d[k];k++)dd(T)}function y1(I){let C=G1(I);if(!C)return;let d=C.getElementsByTagName("iframe");for(var k=0,T;T=d[k];k++)lh(T)}function dd(I){I.src="about:blank"}function lh(I){let C=I._src;I.src!=C&&C!="about:blank"&&(I.src=C)}function ch(){let I=document.querySelectorAll("iframe");for(var C=0,d;d=I[C];C++)d._src=d.src,dd(d);y1(Hr),y1(Hr+1),y1(Hr+2)}function gh(){var I=document.createElement("div");I.className="slide-area",I.id="prev-slide-area",I.addEventListener("click",nc,!1),document.querySelector("section.slides").appendChild(I);var I=document.createElement("div");I.className="slide-area",I.id="next-slide-area",I.addEventListener("click",oc,!1),document.querySelector("section.slides").appendChild(I),document.body.addEventListener("touchstart",nh,!1)}function fo(){return!(typeof cvox>"u")}function fd(I){if(!fo())return;cvox.ChromeVox.navigationManager.switchToStrategy(cvox.ChromeVoxNavigationManager.STRATEGIES.LINEARDOM,0,!0),cvox.ChromeVox.navigationManager.syncToNode(I),cvox.ChromeVoxUserCommands.finishNavCommand("");let C=I;for(;C.firstChild;)C=C.firstChild;cvox.ChromeVox.navigationManager.syncToNode(C)}function uh(){if(fo()){if(cvox.ChromeVox.navigationManager.switchToStrategy(cvox.ChromeVoxNavigationManager.STRATEGIES.LINEARDOM,0,!0),cvox.ChromeVox.navigationManager.next(!0),!cvox.DomUtil.isDescendantOfNode(cvox.ChromeVox.navigationManager.getCurrentNode(),mi[Hr])){let I=mi[Hr];for(;I.firstChild;)I=I.firstChild;cvox.ChromeVox.navigationManager.syncToNode(I),cvox.ChromeVox.navigationManager.next(!0)}cvox.ChromeVoxUserCommands.finishNavCommand("")}}function dh(){if(fo()){if(cvox.ChromeVox.navigationManager.switchToStrategy(cvox.ChromeVoxNavigationManager.STRATEGIES.LINEARDOM,0,!0),cvox.ChromeVox.navigationManager.previous(!0),!cvox.DomUtil.isDescendantOfNode(cvox.ChromeVox.navigationManager.getCurrentNode(),mi[Hr])){let I=mi[Hr];for(;I.lastChild;)I=I.lastChild;cvox.ChromeVox.navigationManager.syncToNode(I),cvox.ChromeVox.navigationManager.previous(!0)}cvox.ChromeVoxUserCommands.finishNavCommand("")}}function fh(){let I=parseInt(location.hash.substr(1));I?Hr=I-1:Hr=0}function ph(){location.replace(`#${Hr+1}`)}function hh(I){switch(I.keyCode){case 39:case 13:case 32:case 34:oc(),I.preventDefault();break;case 37:case 8:case 33:nc(),I.preventDefault();break;case 40:fo()?uh():oc(),I.preventDefault();break;case 38:fo()?dh():nc(),I.preventDefault();break}}function mh(){document.addEventListener("keydown",hh,!1)}function Ch(){for(var I=Hr,C;C=mi[I];I++){let T=C.querySelectorAll(".build > *");for(var d=0,k;k=T[d];d++)k.classList&&k.classList.add("to-build")}}function qu(){mi=document.querySelectorAll("section.slides > article"),ch(),mh(),dg(),gh(),Ch(),document.body.classList.add("loaded")}function bh(){fh(),window._DCL?qu():document.addEventListener("DOMContentLoaded",qu,!1)}if(!window._DEBUG&&document.location.href.indexOf("?debug")!==-1){document.addEventListener("DOMContentLoaded",function(){window._DCL=!0},!1),window._DEBUG=!0;let I=document.createElement("script");I.type="text/javascript",I.src="../slides.js";let C=document.getElementsByTagName("script")[0];C.parentNode.insertBefore(I,C),C.parentNode.removeChild(C)}else bh();console.log("autoplay");const Ih=document.querySelectorAll("video"),wh=new IntersectionObserver(I=>{I.forEach(C=>{C.isIntersecting?(console.log("playing",C.target),C.target.play(),C.target.currentTime=0):(console.log("pausing",C.target),C.target.pause())})});Ih.forEach(I=>{wh.observe(I)});var tg={},rg,s2,pd={"./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm":(I,C,d)=>{I.exports=d.p+"ort-wasm-simd-threaded.jsep.wasm"},"./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs?46eb":(I,C,d)=>{I.exports=d.p+"ort.bundle.min.mjs"},"?2ce3":()=>{},"?7a2c":()=>{},"?a42a":()=>{},"?2b25":()=>{},"?569f":()=>{},"?3f59":()=>{},"?154a":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(I,C,d)=>{d.r(C),d.d(C,{Environment:()=>EA,Interpreter:()=>FA,Template:()=>OA,parse:()=>Ie,tokenize:()=>F});var k=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",NullLiteral:"NullLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator",Macro:"Macro",EndMacro:"EndMacro"}),T=Object.freeze({set:k.Set,for:k.For,in:k.In,is:k.Is,if:k.If,else:k.Else,endif:k.EndIf,elif:k.ElseIf,endfor:k.EndFor,and:k.And,or:k.Or,not:k.Not,"not in":k.NotIn,macro:k.Macro,endmacro:k.EndMacro,true:k.BooleanLiteral,false:k.BooleanLiteral,none:k.NullLiteral,True:k.BooleanLiteral,False:k.BooleanLiteral,None:k.NullLiteral}),L=class{constructor(ge,$){this.value=ge,this.type=$}};function N(ge){return/\w/.test(ge)}function j(ge){return/[0-9]/.test(ge)}var q=[["{%",k.OpenStatement],["%}",k.CloseStatement],["{{",k.OpenExpression],["}}",k.CloseExpression],["(",k.OpenParen],[")",k.CloseParen],["{",k.OpenCurlyBracket],["}",k.CloseCurlyBracket],["[",k.OpenSquareBracket],["]",k.CloseSquareBracket],[",",k.Comma],[".",k.Dot],[":",k.Colon],["|",k.Pipe],["<=",k.ComparisonBinaryOperator],[">=",k.ComparisonBinaryOperator],["==",k.ComparisonBinaryOperator],["!=",k.ComparisonBinaryOperator],["<",k.ComparisonBinaryOperator],[">",k.ComparisonBinaryOperator],["+",k.AdditiveBinaryOperator],["-",k.AdditiveBinaryOperator],["*",k.MultiplicativeBinaryOperator],["/",k.MultiplicativeBinaryOperator],["%",k.MultiplicativeBinaryOperator],["=",k.Equals]],W=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function F(ge,$={}){const me=[],Fe=function(oA,vA={}){return oA.endsWith(`
`)&&(oA=oA.slice(0,-1)),oA=oA.replace(/{#.*?#}/gs,"{##}"),vA.lstrip_blocks&&(oA=oA.replace(/^[ \t]*({[#%])/gm,"$1")),vA.trim_blocks&&(oA=oA.replace(/([#%]})\n/g,"$1")),oA.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}(ge,$);let qe=0;const dA=oA=>{let vA="";for(;oA(Fe[qe]);)if(Fe[qe]!=="\\"){if(vA+=Fe[qe++],qe>=Fe.length)throw new SyntaxError("Unexpected end of input")}else{if(++qe,qe>=Fe.length)throw new SyntaxError("Unexpected end of input");const QA=Fe[qe++],TA=W.get(QA);if(TA===void 0)throw new SyntaxError(`Unexpected escaped character: ${QA}`);vA+=TA}return vA};e:for(;qe<Fe.length;){const oA=me.at(-1)?.type;if(oA===void 0||oA===k.CloseStatement||oA===k.CloseExpression){let QA="";for(;qe<Fe.length&&(Fe[qe]!=="{"||Fe[qe+1]!=="%"&&Fe[qe+1]!=="{");)QA+=Fe[qe++];if(QA.length>0){me.push(new L(QA,k.Text));continue}}dA(QA=>/\s/.test(QA));const vA=Fe[qe];if(vA==="-"||vA==="+"){const QA=me.at(-1)?.type;if(QA===k.Text||QA===void 0)throw new SyntaxError(`Unexpected character: ${vA}`);switch(QA){case k.Identifier:case k.NumericLiteral:case k.BooleanLiteral:case k.NullLiteral:case k.StringLiteral:case k.CloseParen:case k.CloseSquareBracket:break;default:{++qe;const TA=dA(j);me.push(new L(`${vA}${TA}`,TA.length>0?k.NumericLiteral:k.UnaryOperator));continue}}}for(const[QA,TA]of q)if(Fe.slice(qe,qe+QA.length)===QA){me.push(new L(QA,TA)),qe+=QA.length;continue e}if(vA!=="'"&&vA!=='"')if(j(vA)){const QA=dA(j);me.push(new L(QA,k.NumericLiteral))}else{if(!N(vA))throw new SyntaxError(`Unexpected character: ${vA}`);{const QA=dA(N),TA=Object.hasOwn(T,QA)?T[QA]:k.Identifier;TA===k.In&&me.at(-1)?.type===k.Not?(me.pop(),me.push(new L("not in",k.NotIn))):me.push(new L(QA,TA))}}else{++qe;const QA=dA(TA=>TA!==vA);me.push(new L(QA,k.StringLiteral)),++qe}}return me}var X=class{type="Statement"},R=class extends X{constructor(ge){super(),this.body=ge}type="Program"},re=class extends X{constructor(ge,$,me){super(),this.test=ge,this.body=$,this.alternate=me}type="If"},be=class extends X{constructor(ge,$,me,Fe){super(),this.loopvar=ge,this.iterable=$,this.body=me,this.defaultBlock=Fe}type="For"},xe=class extends X{constructor(ge,$){super(),this.assignee=ge,this.value=$}type="Set"},ye=class extends X{constructor(ge,$,me){super(),this.name=ge,this.args=$,this.body=me}type="Macro"},se=class extends X{type="Expression"},ne=class extends se{constructor(ge,$,me){super(),this.object=ge,this.property=$,this.computed=me}type="MemberExpression"},we=class extends se{constructor(ge,$){super(),this.callee=ge,this.args=$}type="CallExpression"},g=class extends se{constructor(ge){super(),this.value=ge}type="Identifier"},b=class extends se{constructor(ge){super(),this.value=ge}type="Literal"},e=class extends b{type="NumericLiteral"},l=class extends b{type="StringLiteral"},M=class extends b{type="BooleanLiteral"},ue=class extends b{type="NullLiteral"},D=class extends b{type="ArrayLiteral"},z=class extends b{type="TupleLiteral"},Re=class extends b{type="ObjectLiteral"},Ne=class extends se{constructor(ge,$,me){super(),this.operator=ge,this.left=$,this.right=me}type="BinaryExpression"},Ye=class extends se{constructor(ge,$){super(),this.operand=ge,this.filter=$}type="FilterExpression"},Je=class extends se{constructor(ge,$){super(),this.iterable=ge,this.test=$}type="SelectExpression"},AA=class extends se{constructor(ge,$,me){super(),this.operand=ge,this.negate=$,this.test=me}type="TestExpression"},xA=class extends se{constructor(ge,$){super(),this.operator=ge,this.argument=$}type="UnaryExpression"},GA=class extends se{constructor(ge=void 0,$=void 0,me=void 0){super(),this.start=ge,this.stop=$,this.step=me}type="SliceExpression"},Ge=class extends se{constructor(ge,$){super(),this.key=ge,this.value=$}type="KeywordArgumentExpression"};function Ie(ge){const $=new R([]);let me=0;function Fe(ZA,$A){const PA=ge[me++];if(!PA||PA.type!==ZA)throw new Error(`Parser Error: ${$A}. ${PA.type} !== ${ZA}.`);return PA}function qe(){switch(ge[me].type){case k.Text:return new l(Fe(k.Text,"Expected text token").value);case k.OpenStatement:return function(){let ZA;switch(Fe(k.OpenStatement,"Expected opening statement token"),ge[me].type){case k.Set:++me,ZA=vA(),Fe(k.CloseStatement,"Expected closing statement token");break;case k.If:++me,ZA=QA(),Fe(k.OpenStatement,"Expected {% token"),Fe(k.EndIf,"Expected endif token"),Fe(k.CloseStatement,"Expected %} token");break;case k.Macro:++me,ZA=function(){const $A=wa();if($A.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const PA=tr();Fe(k.CloseStatement,"Expected closing statement token");const qt=[];for(;dA(k.OpenStatement,k.EndMacro);)qt.push(qe());return new ye($A,PA,qt)}(),Fe(k.OpenStatement,"Expected {% token"),Fe(k.EndMacro,"Expected endmacro token"),Fe(k.CloseStatement,"Expected %} token");break;case k.For:++me,ZA=function(){const $A=TA(!0);if(!($A instanceof g||$A instanceof z))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${$A.type} instead`);Fe(k.In,"Expected `in` keyword following loop variable");const PA=Mt();Fe(k.CloseStatement,"Expected closing statement token");const qt=[];for(;dA(k.OpenStatement,k.EndFor)&&dA(k.OpenStatement,k.Else);)qt.push(qe());const gs=[];if(oA(k.OpenStatement,k.Else))for(++me,++me,Fe(k.CloseStatement,"Expected closing statement token");dA(k.OpenStatement,k.EndFor);)gs.push(qe());return new be($A,PA,qt,gs)}(),Fe(k.OpenStatement,"Expected {% token"),Fe(k.EndFor,"Expected endfor token"),Fe(k.CloseStatement,"Expected %} token");break;default:throw new SyntaxError(`Unknown statement type: ${ge[me].type}`)}return ZA}();case k.OpenExpression:return function(){Fe(k.OpenExpression,"Expected opening expression token");const ZA=Mt();return Fe(k.CloseExpression,"Expected closing expression token"),ZA}();default:throw new SyntaxError(`Unexpected token type: ${ge[me].type}`)}}function dA(...ZA){return me+ZA.length<=ge.length&&ZA.some(($A,PA)=>$A!==ge[me+PA].type)}function oA(...ZA){return me+ZA.length<=ge.length&&ZA.every(($A,PA)=>$A===ge[me+PA].type)}function vA(){const ZA=Mt();if(oA(k.Equals)){++me;const $A=vA();return new xe(ZA,$A)}return ZA}function QA(){const ZA=Mt();Fe(k.CloseStatement,"Expected closing statement token");const $A=[],PA=[];for(;ge[me]?.type!==k.OpenStatement||ge[me+1]?.type!==k.ElseIf&&ge[me+1]?.type!==k.Else&&ge[me+1]?.type!==k.EndIf;)$A.push(qe());if(ge[me]?.type===k.OpenStatement&&ge[me+1]?.type!==k.EndIf)if(++me,oA(k.ElseIf))Fe(k.ElseIf,"Expected elseif token"),PA.push(QA());else for(Fe(k.Else,"Expected else token"),Fe(k.CloseStatement,"Expected closing statement token");ge[me]?.type!==k.OpenStatement||ge[me+1]?.type!==k.EndIf;)PA.push(qe());return new re(ZA,$A,PA)}function TA(ZA=!1){const $A=ZA?wa:Mt,PA=[$A()],qt=oA(k.Comma);for(;qt&&(++me,PA.push($A()),oA(k.Comma)););return qt?new z(PA):PA[0]}function Mt(){return function(){const ZA=Tt();if(oA(k.If)){++me;const $A=Tt();if(oA(k.Else)){++me;const PA=Tt();return new re($A,[ZA],[PA])}return new Je(ZA,$A)}return ZA}()}function Tt(){let ZA=ut();for(;oA(k.Or);){const $A=ge[me];++me;const PA=ut();ZA=new Ne($A,ZA,PA)}return ZA}function ut(){let ZA=Ct();for(;oA(k.And);){const $A=ge[me];++me;const PA=Ct();ZA=new Ne($A,ZA,PA)}return ZA}function Ct(){let ZA;for(;oA(k.Not);){const $A=ge[me];++me;const PA=Ct();ZA=new xA($A,PA)}return ZA??function(){let $A=$t();for(;oA(k.ComparisonBinaryOperator)||oA(k.In)||oA(k.NotIn);){const PA=ge[me];++me;const qt=$t();$A=new Ne(PA,$A,qt)}return $A}()}function $t(){let ZA=Za();for(;oA(k.AdditiveBinaryOperator);){const $A=ge[me];++me;const PA=Za();ZA=new Ne($A,ZA,PA)}return ZA}function Qr(ZA){let $A=new we(ZA,tr());return $A=bt($A),oA(k.OpenParen)&&($A=Qr($A)),$A}function tr(){Fe(k.OpenParen,"Expected opening parenthesis for arguments list");const ZA=function(){const $A=[];for(;!oA(k.CloseParen);){let PA=Mt();if(oA(k.Equals)){if(++me,!(PA instanceof g))throw new SyntaxError("Expected identifier for keyword argument");const qt=Mt();PA=new Ge(PA,qt)}$A.push(PA),oA(k.Comma)&&++me}return $A}();return Fe(k.CloseParen,"Expected closing parenthesis for arguments list"),ZA}function fa(){const ZA=[];let $A=!1;for(;!oA(k.CloseSquareBracket);)oA(k.Colon)?(ZA.push(void 0),++me,$A=!0):(ZA.push(Mt()),oA(k.Colon)&&(++me,$A=!0));if(ZA.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if($A){if(ZA.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new GA(...ZA)}return ZA[0]}function bt(ZA){for(;oA(k.Dot)||oA(k.OpenSquareBracket);){const $A=ge[me];let PA;++me;const qt=$A.type!==k.Dot;if(qt)PA=fa(),Fe(k.CloseSquareBracket,"Expected closing square bracket");else if(PA=wa(),PA.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");ZA=new ne(ZA,PA,qt)}return ZA}function Za(){let ZA=La();for(;oA(k.MultiplicativeBinaryOperator);){const $A=ge[me];++me;const PA=La();ZA=new Ne($A,ZA,PA)}return ZA}function La(){let ZA=function(){let $A=function(){const PA=bt(wa());return oA(k.OpenParen)?Qr(PA):PA}();for(;oA(k.Pipe);){++me;let PA=wa();if(!(PA instanceof g))throw new SyntaxError("Expected identifier for the filter");oA(k.OpenParen)&&(PA=Qr(PA)),$A=new Ye($A,PA)}return $A}();for(;oA(k.Is);){++me;const $A=oA(k.Not);$A&&++me;let PA=wa();if(PA instanceof M?PA=new g(PA.value.toString()):PA instanceof ue&&(PA=new g("none")),!(PA instanceof g))throw new SyntaxError("Expected identifier for the test");ZA=new AA(ZA,$A,PA)}return ZA}function wa(){const ZA=ge[me];switch(ZA.type){case k.NumericLiteral:return++me,new e(Number(ZA.value));case k.StringLiteral:return++me,new l(ZA.value);case k.BooleanLiteral:return++me,new M(ZA.value.toLowerCase()==="true");case k.NullLiteral:return++me,new ue(null);case k.Identifier:return++me,new g(ZA.value);case k.OpenParen:{++me;const $A=TA();if(ge[me].type!==k.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${ge[me].type} instead`);return++me,$A}case k.OpenSquareBracket:{++me;const $A=[];for(;!oA(k.CloseSquareBracket);)$A.push(Mt()),oA(k.Comma)&&++me;return++me,new D($A)}case k.OpenCurlyBracket:{++me;const $A=new Map;for(;!oA(k.CloseCurlyBracket);){const PA=Mt();Fe(k.Colon,"Expected colon between key and value in object literal");const qt=Mt();$A.set(PA,qt),oA(k.Comma)&&++me}return++me,new Re($A)}default:throw new SyntaxError(`Unexpected token: ${ZA.type}`)}}for(;me<ge.length;)$.body.push(qe());return $}function ze(ge,$,me=1){$===void 0&&($=ge,ge=0);const Fe=[];for(let qe=ge;qe<$;qe+=me)Fe.push(qe);return Fe}function Ue(ge,$,me,Fe=1){const qe=Math.sign(Fe);qe>=0?($=($??=0)<0?Math.max(ge.length+$,0):Math.min($,ge.length),me=(me??=ge.length)<0?Math.max(ge.length+me,0):Math.min(me,ge.length)):($=($??=ge.length-1)<0?Math.max(ge.length+$,-1):Math.min($,ge.length-1),me=(me??=-1)<-1?Math.max(ge.length+me,-1):Math.min(me,ge.length-1));const dA=[];for(let oA=$;qe*oA<qe*me;oA+=Fe)dA.push(ge[oA]);return dA}function Pe(ge){return ge.replace(/\b\w/g,$=>$.toUpperCase())}var kA=class{type="RuntimeValue";value;builtins=new Map;constructor(ge=void 0){this.value=ge}__bool__(){return new yA(!!this.value)}},aA=class extends kA{type="NumericValue"},iA=class extends kA{type="StringValue";builtins=new Map([["upper",new CA(()=>new iA(this.value.toUpperCase()))],["lower",new CA(()=>new iA(this.value.toLowerCase()))],["strip",new CA(()=>new iA(this.value.trim()))],["title",new CA(()=>new iA(Pe(this.value)))],["length",new aA(this.value.length)],["rstrip",new CA(()=>new iA(this.value.trimEnd()))],["lstrip",new CA(()=>new iA(this.value.trimStart()))],["split",new CA(ge=>{const $=ge[0]??new Te;if(!($ instanceof iA||$ instanceof Te))throw new Error("sep argument must be a string or null");const me=ge[1]??new aA(-1);if(!(me instanceof aA))throw new Error("maxsplit argument must be a number");let Fe=[];if($ instanceof Te){const qe=this.value.trimStart();for(const{0:dA,index:oA}of qe.matchAll(/\S+/g)){if(me.value!==-1&&Fe.length>=me.value&&oA!==void 0){Fe.push(dA+qe.slice(oA+dA.length));break}Fe.push(dA)}}else{if($.value==="")throw new Error("empty separator");Fe=this.value.split($.value),me.value!==-1&&Fe.length>me.value&&Fe.push(Fe.splice(me.value).join($.value))}return new Ze(Fe.map(qe=>new iA(qe)))})]])},yA=class extends kA{type="BooleanValue"},nA=class extends kA{type="ObjectValue";__bool__(){return new yA(this.value.size>0)}builtins=new Map([["get",new CA(([ge,$])=>{if(!(ge instanceof iA))throw new Error(`Object key must be a string: got ${ge.type}`);return this.value.get(ge.value)??$??new Te})],["items",new CA(()=>new Ze(Array.from(this.value.entries()).map(([ge,$])=>new Ze([new iA(ge),$]))))]])},Se=class extends nA{type="KeywordArgumentsValue"},Ze=class extends kA{type="ArrayValue";builtins=new Map([["length",new aA(this.value.length)]]);__bool__(){return new yA(this.value.length>0)}},mA=class extends Ze{type="TupleValue"},CA=class extends kA{type="FunctionValue"},Te=class extends kA{type="NullValue"},pA=class extends kA{type="UndefinedValue"},EA=class{constructor(ge){this.parent=ge}variables=new Map([["namespace",new CA(ge=>{if(ge.length===0)return new nA(new Map);if(ge.length!==1||!(ge[0]instanceof nA))throw new Error("`namespace` expects either zero arguments or a single object argument");return ge[0]})]]);tests=new Map([["boolean",ge=>ge.type==="BooleanValue"],["callable",ge=>ge instanceof CA],["odd",ge=>{if(ge.type!=="NumericValue")throw new Error(`Cannot apply test "odd" to type: ${ge.type}`);return ge.value%2!=0}],["even",ge=>{if(ge.type!=="NumericValue")throw new Error(`Cannot apply test "even" to type: ${ge.type}`);return ge.value%2==0}],["false",ge=>ge.type==="BooleanValue"&&!ge.value],["true",ge=>ge.type==="BooleanValue"&&ge.value],["none",ge=>ge.type==="NullValue"],["string",ge=>ge.type==="StringValue"],["number",ge=>ge.type==="NumericValue"],["integer",ge=>ge.type==="NumericValue"&&Number.isInteger(ge.value)],["iterable",ge=>ge.type==="ArrayValue"||ge.type==="StringValue"],["mapping",ge=>ge.type==="ObjectValue"],["lower",ge=>{const $=ge.value;return ge.type==="StringValue"&&$===$.toLowerCase()}],["upper",ge=>{const $=ge.value;return ge.type==="StringValue"&&$===$.toUpperCase()}],["none",ge=>ge.type==="NullValue"],["defined",ge=>ge.type!=="UndefinedValue"],["undefined",ge=>ge.type==="UndefinedValue"],["equalto",(ge,$)=>ge.value===$.value],["eq",(ge,$)=>ge.value===$.value]]);set(ge,$){return this.declareVariable(ge,YA($))}declareVariable(ge,$){if(this.variables.has(ge))throw new SyntaxError(`Variable already declared: ${ge}`);return this.variables.set(ge,$),$}setVariable(ge,$){return this.variables.set(ge,$),$}resolve(ge){if(this.variables.has(ge))return this;if(this.parent)return this.parent.resolve(ge);throw new Error(`Unknown variable: ${ge}`)}lookupVariable(ge){try{return this.resolve(ge).variables.get(ge)??new pA}catch{return new pA}}},FA=class{global;constructor(ge){this.global=ge??new EA}run(ge){return this.evaluate(ge,this.global)}evaluateBinaryExpression(ge,$){const me=this.evaluate(ge.left,$);switch(ge.operator.value){case"and":return me.__bool__().value?this.evaluate(ge.right,$):me;case"or":return me.__bool__().value?me:this.evaluate(ge.right,$)}const Fe=this.evaluate(ge.right,$);switch(ge.operator.value){case"==":return new yA(me.value==Fe.value);case"!=":return new yA(me.value!=Fe.value)}if(me instanceof pA||Fe instanceof pA)throw new Error("Cannot perform operation on undefined values");if(me instanceof Te||Fe instanceof Te)throw new Error("Cannot perform operation on null values");if(me instanceof aA&&Fe instanceof aA)switch(ge.operator.value){case"+":return new aA(me.value+Fe.value);case"-":return new aA(me.value-Fe.value);case"*":return new aA(me.value*Fe.value);case"/":return new aA(me.value/Fe.value);case"%":return new aA(me.value%Fe.value);case"<":return new yA(me.value<Fe.value);case">":return new yA(me.value>Fe.value);case">=":return new yA(me.value>=Fe.value);case"<=":return new yA(me.value<=Fe.value)}else if(me instanceof Ze&&Fe instanceof Ze){if(ge.operator.value==="+")return new Ze(me.value.concat(Fe.value))}else if(Fe instanceof Ze){const qe=Fe.value.find(dA=>dA.value===me.value)!==void 0;switch(ge.operator.value){case"in":return new yA(qe);case"not in":return new yA(!qe)}}if((me instanceof iA||Fe instanceof iA)&&ge.operator.value==="+")return new iA(me.value.toString()+Fe.value.toString());if(me instanceof iA&&Fe instanceof iA)switch(ge.operator.value){case"in":return new yA(Fe.value.includes(me.value));case"not in":return new yA(!Fe.value.includes(me.value))}if(me instanceof iA&&Fe instanceof nA)switch(ge.operator.value){case"in":return new yA(Fe.value.has(me.value));case"not in":return new yA(!Fe.value.has(me.value))}throw new SyntaxError(`Unknown operator "${ge.operator.value}" between ${me.type} and ${Fe.type}`)}evaluateArguments(ge,$){const me=[],Fe=new Map;for(const qe of ge)if(qe.type==="KeywordArgumentExpression"){const dA=qe;Fe.set(dA.key.value,this.evaluate(dA.value,$))}else{if(Fe.size>0)throw new Error("Positional arguments must come before keyword arguments");me.push(this.evaluate(qe,$))}return[me,Fe]}evaluateFilterExpression(ge,$){const me=this.evaluate(ge.operand,$);if(ge.filter.type==="Identifier"){const Fe=ge.filter;if(Fe.value==="tojson")return new iA(J(me));if(me instanceof Ze)switch(Fe.value){case"list":return me;case"first":return me.value[0];case"last":return me.value[me.value.length-1];case"length":return new aA(me.value.length);case"reverse":return new Ze(me.value.reverse());case"sort":return new Ze(me.value.sort((qe,dA)=>{if(qe.type!==dA.type)throw new Error(`Cannot compare different types: ${qe.type} and ${dA.type}`);switch(qe.type){case"NumericValue":return qe.value-dA.value;case"StringValue":return qe.value.localeCompare(dA.value);default:throw new Error(`Cannot compare type: ${qe.type}`)}}));case"join":return new iA(me.value.map(qe=>qe.value).join(""));default:throw new Error(`Unknown ArrayValue filter: ${Fe.value}`)}else if(me instanceof iA)switch(Fe.value){case"length":return new aA(me.value.length);case"upper":return new iA(me.value.toUpperCase());case"lower":return new iA(me.value.toLowerCase());case"title":return new iA(Pe(me.value));case"capitalize":return new iA(me.value.charAt(0).toUpperCase()+me.value.slice(1));case"trim":return new iA(me.value.trim());case"indent":return new iA(me.value.split(`
`).map((qe,dA)=>dA===0||qe.length===0?qe:"    "+qe).join(`
`));case"join":case"string":return me;default:throw new Error(`Unknown StringValue filter: ${Fe.value}`)}else{if(me instanceof aA){if(Fe.value==="abs")return new aA(Math.abs(me.value));throw new Error(`Unknown NumericValue filter: ${Fe.value}`)}if(me instanceof nA)switch(Fe.value){case"items":return new Ze(Array.from(me.value.entries()).map(([qe,dA])=>new Ze([new iA(qe),dA])));case"length":return new aA(me.value.size);default:throw new Error(`Unknown ObjectValue filter: ${Fe.value}`)}}throw new Error(`Cannot apply filter "${Fe.value}" to type: ${me.type}`)}if(ge.filter.type==="CallExpression"){const Fe=ge.filter;if(Fe.callee.type!=="Identifier")throw new Error(`Unknown filter: ${Fe.callee.type}`);const qe=Fe.callee.value;if(qe==="tojson"){const[,dA]=this.evaluateArguments(Fe.args,$),oA=dA.get("indent")??new Te;if(!(oA instanceof aA||oA instanceof Te))throw new Error("If set, indent must be a number");return new iA(J(me,oA.value))}if(qe==="join"){let dA;if(me instanceof iA)dA=Array.from(me.value);else{if(!(me instanceof Ze))throw new Error(`Cannot apply filter "${qe}" to type: ${me.type}`);dA=me.value.map(TA=>TA.value)}const[oA,vA]=this.evaluateArguments(Fe.args,$),QA=oA.at(0)??vA.get("separator")??new iA("");if(!(QA instanceof iA))throw new Error("separator must be a string");return new iA(dA.join(QA.value))}if(me instanceof Ze){switch(qe){case"selectattr":case"rejectattr":{const dA=qe==="selectattr";if(me.value.some(Tt=>!(Tt instanceof nA)))throw new Error(`\`${qe}\` can only be applied to array of objects`);if(Fe.args.some(Tt=>Tt.type!=="StringLiteral"))throw new Error(`arguments of \`${qe}\` must be strings`);const[oA,vA,QA]=Fe.args.map(Tt=>this.evaluate(Tt,$));let TA;if(vA){const Tt=$.tests.get(vA.value);if(!Tt)throw new Error(`Unknown test: ${vA.value}`);TA=Tt}else TA=(...Tt)=>Tt[0].__bool__().value;const Mt=me.value.filter(Tt=>{const ut=Tt.value.get(oA.value),Ct=!!ut&&TA(ut,QA);return dA?Ct:!Ct});return new Ze(Mt)}case"map":{const[,dA]=this.evaluateArguments(Fe.args,$);if(dA.has("attribute")){const oA=dA.get("attribute");if(!(oA instanceof iA))throw new Error("attribute must be a string");const vA=dA.get("default"),QA=me.value.map(TA=>{if(!(TA instanceof nA))throw new Error("items in map must be an object");return TA.value.get(oA.value)??vA??new pA});return new Ze(QA)}throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${qe}`)}if(me instanceof iA){if(qe==="indent"){const[dA,oA]=this.evaluateArguments(Fe.args,$),vA=dA.at(0)??oA.get("width")??new aA(4);if(!(vA instanceof aA))throw new Error("width must be a number");const QA=dA.at(1)??oA.get("first")??new yA(!1),TA=dA.at(2)??oA.get("blank")??new yA(!1),Mt=me.value.split(`
`),Tt=" ".repeat(vA.value),ut=Mt.map((Ct,$t)=>!QA.value&&$t===0||!TA.value&&Ct.length===0?Ct:Tt+Ct);return new iA(ut.join(`
`))}throw new Error(`Unknown StringValue filter: ${qe}`)}throw new Error(`Cannot apply filter "${qe}" to type: ${me.type}`)}throw new Error(`Unknown filter: ${ge.filter.type}`)}evaluateTestExpression(ge,$){const me=this.evaluate(ge.operand,$),Fe=$.tests.get(ge.test.value);if(!Fe)throw new Error(`Unknown test: ${ge.test.value}`);const qe=Fe(me);return new yA(ge.negate?!qe:qe)}evaluateUnaryExpression(ge,$){const me=this.evaluate(ge.argument,$);if(ge.operator.value==="not")return new yA(!me.value);throw new SyntaxError(`Unknown operator: ${ge.operator.value}`)}evalProgram(ge,$){return this.evaluateBlock(ge.body,$)}evaluateBlock(ge,$){let me="";for(const Fe of ge){const qe=this.evaluate(Fe,$);qe.type!=="NullValue"&&qe.type!=="UndefinedValue"&&(me+=qe.value)}return new iA(me)}evaluateIdentifier(ge,$){return $.lookupVariable(ge.value)}evaluateCallExpression(ge,$){const[me,Fe]=this.evaluateArguments(ge.args,$);Fe.size>0&&me.push(new Se(Fe));const qe=this.evaluate(ge.callee,$);if(qe.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${qe.type}`);return qe.value(me,$)}evaluateSliceExpression(ge,$,me){if(!(ge instanceof Ze||ge instanceof iA))throw new Error("Slice object must be an array or string");const Fe=this.evaluate($.start,me),qe=this.evaluate($.stop,me),dA=this.evaluate($.step,me);if(!(Fe instanceof aA||Fe instanceof pA))throw new Error("Slice start must be numeric or undefined");if(!(qe instanceof aA||qe instanceof pA))throw new Error("Slice stop must be numeric or undefined");if(!(dA instanceof aA||dA instanceof pA))throw new Error("Slice step must be numeric or undefined");return ge instanceof Ze?new Ze(Ue(ge.value,Fe.value,qe.value,dA.value)):new iA(Ue(Array.from(ge.value),Fe.value,qe.value,dA.value).join(""))}evaluateMemberExpression(ge,$){const me=this.evaluate(ge.object,$);let Fe,qe;if(ge.computed){if(ge.property.type==="SliceExpression")return this.evaluateSliceExpression(me,ge.property,$);Fe=this.evaluate(ge.property,$)}else Fe=new iA(ge.property.value);if(me instanceof nA){if(!(Fe instanceof iA))throw new Error(`Cannot access property with non-string: got ${Fe.type}`);qe=me.value.get(Fe.value)??me.builtins.get(Fe.value)}else if(me instanceof Ze||me instanceof iA)if(Fe instanceof aA)qe=me.value.at(Fe.value),me instanceof iA&&(qe=new iA(me.value.at(Fe.value)));else{if(!(Fe instanceof iA))throw new Error(`Cannot access property with non-string/non-number: got ${Fe.type}`);qe=me.builtins.get(Fe.value)}else{if(!(Fe instanceof iA))throw new Error(`Cannot access property with non-string: got ${Fe.type}`);qe=me.builtins.get(Fe.value)}return qe instanceof kA?qe:new pA}evaluateSet(ge,$){const me=this.evaluate(ge.value,$);if(ge.assignee.type==="Identifier"){const Fe=ge.assignee.value;$.setVariable(Fe,me)}else{if(ge.assignee.type!=="MemberExpression")throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(ge.assignee)}`);{const Fe=ge.assignee,qe=this.evaluate(Fe.object,$);if(!(qe instanceof nA))throw new Error("Cannot assign to member of non-object");if(Fe.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");qe.value.set(Fe.property.value,me)}}return new Te}evaluateIf(ge,$){const me=this.evaluate(ge.test,$);return this.evaluateBlock(me.__bool__().value?ge.body:ge.alternate,$)}evaluateFor(ge,$){const me=new EA($);let Fe,qe;if(ge.iterable.type==="SelectExpression"){const TA=ge.iterable;qe=this.evaluate(TA.iterable,me),Fe=TA.test}else qe=this.evaluate(ge.iterable,me);if(!(qe instanceof Ze))throw new Error(`Expected iterable type in for loop: got ${qe.type}`);const dA=[],oA=[];for(let TA=0;TA<qe.value.length;++TA){const Mt=new EA(me),Tt=qe.value[TA];let ut;if(ge.loopvar.type==="Identifier")ut=Ct=>Ct.setVariable(ge.loopvar.value,Tt);else{if(ge.loopvar.type!=="TupleLiteral")throw new Error(`Invalid loop variable(s): ${ge.loopvar.type}`);{const Ct=ge.loopvar;if(Tt.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${Tt.type}`);const $t=Tt;if(Ct.value.length!==$t.value.length)throw new Error(`Too ${Ct.value.length>$t.value.length?"few":"many"} items to unpack`);ut=Qr=>{for(let tr=0;tr<Ct.value.length;++tr){if(Ct.value[tr].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${Ct.value[tr].type}`);Qr.setVariable(Ct.value[tr].value,$t.value[tr])}}}}Fe&&(ut(Mt),!this.evaluate(Fe,Mt).__bool__().value)||(dA.push(Tt),oA.push(ut))}let vA="",QA=!0;for(let TA=0;TA<dA.length;++TA){const Mt=new Map([["index",new aA(TA+1)],["index0",new aA(TA)],["revindex",new aA(dA.length-TA)],["revindex0",new aA(dA.length-TA-1)],["first",new yA(TA===0)],["last",new yA(TA===dA.length-1)],["length",new aA(dA.length)],["previtem",TA>0?dA[TA-1]:new pA],["nextitem",TA<dA.length-1?dA[TA+1]:new pA]]);me.setVariable("loop",new nA(Mt)),oA[TA](me),vA+=this.evaluateBlock(ge.body,me).value,QA=!1}return QA&&(vA+=this.evaluateBlock(ge.defaultBlock,me).value),new iA(vA)}evaluateMacro(ge,$){return $.setVariable(ge.name.value,new CA((me,Fe)=>{const qe=new EA(Fe);let dA;me=me.slice(),me.at(-1)?.type==="KeywordArgumentsValue"&&(dA=me.pop());for(let oA=0;oA<ge.args.length;++oA){const vA=ge.args[oA],QA=me[oA];if(vA.type==="Identifier"){const TA=vA;if(!QA)throw new Error(`Missing positional argument: ${TA.value}`);qe.setVariable(TA.value,QA)}else{if(vA.type!=="KeywordArgumentExpression")throw new Error(`Unknown argument type: ${vA.type}`);{const TA=vA,Mt=QA??dA?.value.get(TA.key.value)??this.evaluate(TA.value,qe);qe.setVariable(TA.key.value,Mt)}}}return this.evaluateBlock(ge.body,qe)})),new Te}evaluate(ge,$){if(ge===void 0)return new pA;switch(ge.type){case"Program":return this.evalProgram(ge,$);case"Set":return this.evaluateSet(ge,$);case"If":return this.evaluateIf(ge,$);case"For":return this.evaluateFor(ge,$);case"Macro":return this.evaluateMacro(ge,$);case"NumericLiteral":return new aA(Number(ge.value));case"StringLiteral":return new iA(ge.value);case"BooleanLiteral":return new yA(ge.value);case"NullLiteral":return new Te(ge.value);case"ArrayLiteral":return new Ze(ge.value.map(me=>this.evaluate(me,$)));case"TupleLiteral":return new mA(ge.value.map(me=>this.evaluate(me,$)));case"ObjectLiteral":{const me=new Map;for(const[Fe,qe]of ge.value){const dA=this.evaluate(Fe,$);if(!(dA instanceof iA))throw new Error(`Object keys must be strings: got ${dA.type}`);me.set(dA.value,this.evaluate(qe,$))}return new nA(me)}case"Identifier":return this.evaluateIdentifier(ge,$);case"CallExpression":return this.evaluateCallExpression(ge,$);case"MemberExpression":return this.evaluateMemberExpression(ge,$);case"UnaryExpression":return this.evaluateUnaryExpression(ge,$);case"BinaryExpression":return this.evaluateBinaryExpression(ge,$);case"FilterExpression":return this.evaluateFilterExpression(ge,$);case"TestExpression":return this.evaluateTestExpression(ge,$);default:throw new SyntaxError(`Unknown node type: ${ge.type}`)}}};function YA(ge){switch(typeof ge){case"number":return new aA(ge);case"string":return new iA(ge);case"boolean":return new yA(ge);case"undefined":return new pA;case"object":return ge===null?new Te:Array.isArray(ge)?new Ze(ge.map(YA)):new nA(new Map(Object.entries(ge).map(([$,me])=>[$,YA(me)])));case"function":return new CA(($,me)=>{const Fe=ge(...$.map(qe=>qe.value))??null;return YA(Fe)});default:throw new Error(`Cannot convert to runtime value: ${ge}`)}}function J(ge,$,me){const Fe=me??0;switch(ge.type){case"NullValue":case"UndefinedValue":return"null";case"NumericValue":case"StringValue":case"BooleanValue":return JSON.stringify(ge.value);case"ArrayValue":case"ObjectValue":{const qe=$?" ".repeat($):"",dA=`
`+qe.repeat(Fe),oA=dA+qe;if(ge.type==="ArrayValue"){const vA=ge.value.map(QA=>J(QA,$,Fe+1));return $?`[${oA}${vA.join(`,${oA}`)}${dA}]`:`[${vA.join(", ")}]`}{const vA=Array.from(ge.value.entries()).map(([QA,TA])=>{const Mt=`"${QA}": ${J(TA,$,Fe+1)}`;return $?`${oA}${Mt}`:Mt});return $?`{${vA.join(",")}${dA}}`:`{${vA.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${ge.type}`)}}var OA=class{parsed;constructor(ge){const $=F(ge,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=Ie($)}render(ge){const $=new EA;if($.set("false",!1),$.set("true",!0),$.set("raise_exception",me=>{throw new Error(me)}),$.set("range",ze),ge)for(const[me,Fe]of Object.entries(ge))$.set(me,Fe);return new FA($).run(this.parsed).value}}},"./node_modules/onnxruntime-common/dist/esm/backend-impl.js":(I,C,d)=>{d.r(C),d.d(C,{registerBackend:()=>L,resolveBackendAndExecutionProviders:()=>j});const k=new Map,T=[],L=(q,W,F)=>{if(!W||typeof W.init!="function"||typeof W.createInferenceSessionHandler!="function")throw new TypeError("not a valid backend");{const X=k.get(q);if(X===void 0)k.set(q,{backend:W,priority:F});else{if(X.priority>F)return;if(X.priority===F&&X.backend!==W)throw new Error(`cannot register backend "${q}" using priority ${F}`)}if(F>=0){const R=T.indexOf(q);R!==-1&&T.splice(R,1);for(let re=0;re<T.length;re++)if(k.get(T[re]).priority<=F)return void T.splice(re,0,q);T.push(q)}}},N=async q=>{const W=k.get(q);if(!W)return"backend not found.";if(W.initialized)return W.backend;if(W.aborted)return W.error;{const F=!!W.initPromise;try{return F||(W.initPromise=W.backend.init(q)),await W.initPromise,W.initialized=!0,W.backend}catch(X){return F||(W.error=`${X}`,W.aborted=!0),W.error}finally{delete W.initPromise}}},j=async q=>{const W=q.executionProviders||[],F=W.map(ye=>typeof ye=="string"?ye:ye.name),X=F.length===0?T:F;let R;const re=[],be=new Set;for(const ye of X){const se=await N(ye);typeof se=="string"?re.push({name:ye,err:se}):(R||(R=se),R===se&&be.add(ye))}if(!R)throw new Error(`no available backend found. ERR: ${re.map(ye=>`[${ye.name}] ${ye.err}`).join(", ")}`);for(const{name:ye,err:se}of re)F.includes(ye)&&console.warn(`removing requested execution provider "${ye}" from session options because it is not available: ${se}`);const xe=W.filter(ye=>be.has(typeof ye=="string"?ye:ye.name));return[R,new Proxy(q,{get:(ye,se)=>se==="executionProviders"?xe:Reflect.get(ye,se)})]}},"./node_modules/onnxruntime-common/dist/esm/backend.js":(I,C,d)=>{d.r(C),d.d(C,{registerBackend:()=>k.registerBackend});var k=d("./node_modules/onnxruntime-common/dist/esm/backend-impl.js")},"./node_modules/onnxruntime-common/dist/esm/env-impl.js":(I,C,d)=>{d.r(C),d.d(C,{env:()=>L});var k=d("./node_modules/onnxruntime-common/dist/esm/version.js");let T="warning";const L={wasm:{},webgl:{},webgpu:{},versions:{common:k.version},set logLevel(N){if(N!==void 0){if(typeof N!="string"||["verbose","info","warning","error","fatal"].indexOf(N)===-1)throw new Error(`Unsupported logging level: ${N}`);T=N}},get logLevel(){return T}};Object.defineProperty(L,"logLevel",{enumerable:!0})},"./node_modules/onnxruntime-common/dist/esm/env.js":(I,C,d)=>{d.r(C),d.d(C,{env:()=>k});const k=d("./node_modules/onnxruntime-common/dist/esm/env-impl.js").env},"./node_modules/onnxruntime-common/dist/esm/index.js":(I,C,d)=>{d.r(C),d.d(C,{InferenceSession:()=>L.InferenceSession,TRACE:()=>j.TRACE,TRACE_FUNC_BEGIN:()=>j.TRACE_FUNC_BEGIN,TRACE_FUNC_END:()=>j.TRACE_FUNC_END,Tensor:()=>N.Tensor,TrainingSession:()=>q.TrainingSession,env:()=>T.env,registerBackend:()=>k.registerBackend});var k=d("./node_modules/onnxruntime-common/dist/esm/backend.js"),T=d("./node_modules/onnxruntime-common/dist/esm/env.js"),L=d("./node_modules/onnxruntime-common/dist/esm/inference-session.js"),N=d("./node_modules/onnxruntime-common/dist/esm/tensor.js");d("./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js"),d("./node_modules/onnxruntime-common/dist/esm/tensor-factory.js");var j=d("./node_modules/onnxruntime-common/dist/esm/trace.js");d("./node_modules/onnxruntime-common/dist/esm/onnx-model.js"),d("./node_modules/onnxruntime-common/dist/esm/onnx-value.js");var q=d("./node_modules/onnxruntime-common/dist/esm/training-session.js")},"./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js":(I,C,d)=>{d.r(C),d.d(C,{InferenceSession:()=>N});var k=d("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),T=d("./node_modules/onnxruntime-common/dist/esm/tensor.js"),L=d("./node_modules/onnxruntime-common/dist/esm/trace.js");class N{constructor(q){this.handler=q}async run(q,W,F){(0,L.TRACE_FUNC_BEGIN)();const X={};let R={};if(typeof q!="object"||q===null||q instanceof T.Tensor||Array.isArray(q))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let re=!0;if(typeof W=="object"){if(W===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(W instanceof T.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(W)){if(W.length===0)throw new TypeError("'fetches' cannot be an empty array.");re=!1;for(const ye of W){if(typeof ye!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(ye)===-1)throw new RangeError(`'fetches' contains invalid output name: ${ye}.`);X[ye]=null}if(typeof F=="object"&&F!==null)R=F;else if(F!==void 0)throw new TypeError("'options' must be an object.")}else{let ye=!1;const se=Object.getOwnPropertyNames(W);for(const ne of this.outputNames)if(se.indexOf(ne)!==-1){const we=W[ne];(we===null||we instanceof T.Tensor)&&(ye=!0,re=!1,X[ne]=we)}if(ye){if(typeof F=="object"&&F!==null)R=F;else if(F!==void 0)throw new TypeError("'options' must be an object.")}else R=W}}else if(W!==void 0)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const ye of this.inputNames)if(q[ye]===void 0)throw new Error(`input '${ye}' is missing in 'feeds'.`);if(re)for(const ye of this.outputNames)X[ye]=null;const be=await this.handler.run(q,X,R),xe={};for(const ye in be)if(Object.hasOwnProperty.call(be,ye)){const se=be[ye];se instanceof T.Tensor?xe[ye]=se:xe[ye]=new T.Tensor(se.type,se.data,se.dims)}return(0,L.TRACE_FUNC_END)(),xe}async release(){return this.handler.dispose()}static async create(q,W,F,X){let R;(0,L.TRACE_FUNC_BEGIN)();let re={};if(typeof q=="string"){if(R=q,typeof W=="object"&&W!==null)re=W;else if(W!==void 0)throw new TypeError("'options' must be an object.")}else if(q instanceof Uint8Array){if(R=q,typeof W=="object"&&W!==null)re=W;else if(W!==void 0)throw new TypeError("'options' must be an object.")}else{if(!(q instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&q instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{const se=q;let ne=0,we=q.byteLength;if(typeof W=="object"&&W!==null)re=W;else if(typeof W=="number"){if(ne=W,!Number.isSafeInteger(ne))throw new RangeError("'byteOffset' must be an integer.");if(ne<0||ne>=se.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${se.byteLength}).`);if(we=q.byteLength-ne,typeof F=="number"){if(we=F,!Number.isSafeInteger(we))throw new RangeError("'byteLength' must be an integer.");if(we<=0||ne+we>se.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${se.byteLength-ne}].`);if(typeof X=="object"&&X!==null)re=X;else if(X!==void 0)throw new TypeError("'options' must be an object.")}else if(F!==void 0)throw new TypeError("'byteLength' must be a number.")}else if(W!==void 0)throw new TypeError("'options' must be an object.");R=new Uint8Array(se,ne,we)}}const[be,xe]=await(0,k.resolveBackendAndExecutionProviders)(re),ye=await be.createInferenceSessionHandler(R,xe);return(0,L.TRACE_FUNC_END)(),new N(ye)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}},"./node_modules/onnxruntime-common/dist/esm/inference-session.js":(I,C,d)=>{d.r(C),d.d(C,{InferenceSession:()=>k});const k=d("./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js").InferenceSession},"./node_modules/onnxruntime-common/dist/esm/onnx-model.js":(I,C,d)=>{d.r(C)},"./node_modules/onnxruntime-common/dist/esm/onnx-value.js":(I,C,d)=>{d.r(C)},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js":(I,C,d)=>{d.r(C),d.d(C,{tensorToDataURL:()=>k,tensorToImageData:()=>T});const k=(L,N)=>{const j=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);j.width=L.dims[3],j.height=L.dims[2];const q=j.getContext("2d");if(q!=null){let W,F;N?.tensorLayout!==void 0&&N.tensorLayout==="NHWC"?(W=L.dims[2],F=L.dims[3]):(W=L.dims[3],F=L.dims[2]);const X=N?.format!==void 0?N.format:"RGB",R=N?.norm;let re,be;R===void 0||R.mean===void 0?re=[255,255,255,255]:typeof R.mean=="number"?re=[R.mean,R.mean,R.mean,R.mean]:(re=[R.mean[0],R.mean[1],R.mean[2],0],R.mean[3]!==void 0&&(re[3]=R.mean[3])),R===void 0||R.bias===void 0?be=[0,0,0,0]:typeof R.bias=="number"?be=[R.bias,R.bias,R.bias,R.bias]:(be=[R.bias[0],R.bias[1],R.bias[2],0],R.bias[3]!==void 0&&(be[3]=R.bias[3]));const xe=F*W;let ye=0,se=xe,ne=2*xe,we=-1;X==="RGBA"?(ye=0,se=xe,ne=2*xe,we=3*xe):X==="RGB"?(ye=0,se=xe,ne=2*xe):X==="RBG"&&(ye=0,ne=xe,se=2*xe);for(let g=0;g<F;g++)for(let b=0;b<W;b++){const e=(L.data[ye++]-be[0])*re[0],l=(L.data[se++]-be[1])*re[1],M=(L.data[ne++]-be[2])*re[2],ue=we===-1?255:(L.data[we++]-be[3])*re[3];q.fillStyle="rgba("+e+","+l+","+M+","+ue+")",q.fillRect(b,g,1,1)}if("toDataURL"in j)return j.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},T=(L,N)=>{const j=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let q;if(j==null)throw new Error("Can not access image data");{let W,F,X;N?.tensorLayout!==void 0&&N.tensorLayout==="NHWC"?(W=L.dims[2],F=L.dims[1],X=L.dims[3]):(W=L.dims[3],F=L.dims[2],X=L.dims[1]);const R=N!==void 0&&N.format!==void 0?N.format:"RGB",re=N?.norm;let be,xe;re===void 0||re.mean===void 0?be=[255,255,255,255]:typeof re.mean=="number"?be=[re.mean,re.mean,re.mean,re.mean]:(be=[re.mean[0],re.mean[1],re.mean[2],255],re.mean[3]!==void 0&&(be[3]=re.mean[3])),re===void 0||re.bias===void 0?xe=[0,0,0,0]:typeof re.bias=="number"?xe=[re.bias,re.bias,re.bias,re.bias]:(xe=[re.bias[0],re.bias[1],re.bias[2],0],re.bias[3]!==void 0&&(xe[3]=re.bias[3]));const ye=F*W;if(N!==void 0&&(N.format!==void 0&&X===4&&N.format!=="RGBA"||X===3&&N.format!=="RGB"&&N.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const se=4;let ne=0,we=1,g=2,b=3,e=0,l=ye,M=2*ye,ue=-1;R==="RGBA"?(e=0,l=ye,M=2*ye,ue=3*ye):R==="RGB"?(e=0,l=ye,M=2*ye):R==="RBG"&&(e=0,M=ye,l=2*ye),q=j.createImageData(W,F);for(let D=0;D<F*W;ne+=se,we+=se,g+=se,b+=se,D++)q.data[ne]=(L.data[e++]-xe[0])*be[0],q.data[we]=(L.data[l++]-xe[1])*be[1],q.data[g]=(L.data[M++]-xe[2])*be[2],q.data[b]=ue===-1?255:(L.data[ue++]-xe[3])*be[3]}return q}},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js":(I,C,d)=>{d.r(C)},"./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js":(I,C,d)=>{d.r(C),d.d(C,{bufferToTensor:()=>T,tensorFromGpuBuffer:()=>j,tensorFromImage:()=>L,tensorFromMLTensor:()=>q,tensorFromPinnedBuffer:()=>W,tensorFromTexture:()=>N});var k=d("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const T=(F,X)=>{if(F===void 0)throw new Error("Image buffer must be defined");if(X.height===void 0||X.width===void 0)throw new Error("Image height and width must be defined");if(X.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:R,width:re}=X,be=X.norm??{mean:255,bias:0};let xe,ye;xe=typeof be.mean=="number"?[be.mean,be.mean,be.mean,be.mean]:[be.mean[0],be.mean[1],be.mean[2],be.mean[3]??255],ye=typeof be.bias=="number"?[be.bias,be.bias,be.bias,be.bias]:[be.bias[0],be.bias[1],be.bias[2],be.bias[3]??0];const se=X.format!==void 0?X.format:"RGBA",ne=X.tensorFormat!==void 0&&X.tensorFormat!==void 0?X.tensorFormat:"RGB",we=R*re,g=ne==="RGBA"?new Float32Array(4*we):new Float32Array(3*we);let b=4,e=0,l=1,M=2,ue=3,D=0,z=we,Re=2*we,Ne=-1;se==="RGB"&&(b=3,e=0,l=1,M=2,ue=-1),ne==="RGBA"?Ne=3*we:ne==="RBG"?(D=0,Re=we,z=2*we):ne==="BGR"&&(Re=0,z=we,D=2*we);for(let Ye=0;Ye<we;Ye++,e+=b,M+=b,l+=b,ue+=b)g[D++]=(F[e]+ye[0])/xe[0],g[z++]=(F[l]+ye[1])/xe[1],g[Re++]=(F[M]+ye[2])/xe[2],Ne!==-1&&ue!==-1&&(g[Ne++]=(F[ue]+ye[3])/xe[3]);return ne==="RGBA"?new k.Tensor("float32",g,[1,4,R,re]):new k.Tensor("float32",g,[1,3,R,re])},L=async(F,X)=>{const R=typeof HTMLImageElement<"u"&&F instanceof HTMLImageElement,re=typeof ImageData<"u"&&F instanceof ImageData,be=typeof ImageBitmap<"u"&&F instanceof ImageBitmap,xe=typeof F=="string";let ye,se=X??{};const ne=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},we=g=>typeof HTMLCanvasElement<"u"&&g instanceof HTMLCanvasElement||g instanceof OffscreenCanvas?g.getContext("2d"):null;if(R){const g=ne();g.width=F.width,g.height=F.height;const b=we(g);if(b==null)throw new Error("Can not access image data");{let e=F.height,l=F.width;if(X!==void 0&&X.resizedHeight!==void 0&&X.resizedWidth!==void 0&&(e=X.resizedHeight,l=X.resizedWidth),X!==void 0){if(se=X,X.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");se.tensorFormat="RGBA",se.height=e,se.width=l}else se.tensorFormat="RGBA",se.height=e,se.width=l;b.drawImage(F,0,0),ye=b.getImageData(0,0,l,e).data}}else{if(!re){if(be){if(X===void 0)throw new Error("Please provide image config with format for Imagebitmap");const g=ne();g.width=F.width,g.height=F.height;const b=we(g);if(b!=null){const e=F.height,l=F.width;return b.drawImage(F,0,0,l,e),ye=b.getImageData(0,0,l,e).data,se.height=e,se.width=l,T(ye,se)}throw new Error("Can not access image data")}if(xe)return new Promise((g,b)=>{const e=ne(),l=we(e);if(!F||!l)return b();const M=new Image;M.crossOrigin="Anonymous",M.src=F,M.onload=()=>{e.width=M.width,e.height=M.height,l.drawImage(M,0,0,e.width,e.height);const ue=l.getImageData(0,0,e.width,e.height);se.height=e.height,se.width=e.width,g(T(ue.data,se))}});throw new Error("Input data provided is not supported - aborted tensor creation")}{let g,b;if(X!==void 0&&X.resizedWidth!==void 0&&X.resizedHeight!==void 0?(g=X.resizedHeight,b=X.resizedWidth):(g=F.height,b=F.width),X!==void 0&&(se=X),se.format="RGBA",se.height=g,se.width=b,X!==void 0){const e=ne();e.width=b,e.height=g;const l=we(e);if(l==null)throw new Error("Can not access image data");l.putImageData(F,0,0),ye=l.getImageData(0,0,b,g).data}else ye=F.data}}if(ye!==void 0)return T(ye,se);throw new Error("Input data provided is not supported - aborted tensor creation")},N=(F,X)=>{const{width:R,height:re,download:be,dispose:xe}=X,ye=[1,re,R,4];return new k.Tensor({location:"texture",type:"float32",texture:F,dims:ye,download:be,dispose:xe})},j=(F,X)=>{const{dataType:R,dims:re,download:be,dispose:xe}=X;return new k.Tensor({location:"gpu-buffer",type:R??"float32",gpuBuffer:F,dims:re,download:be,dispose:xe})},q=(F,X)=>{const{dataType:R,dims:re,download:be,dispose:xe}=X;return new k.Tensor({location:"ml-tensor",type:R??"float32",mlTensor:F,dims:re,download:be,dispose:xe})},W=(F,X,R)=>new k.Tensor({location:"cpu-pinned",type:F,data:X,dims:R??[X.length]})},"./node_modules/onnxruntime-common/dist/esm/tensor-factory.js":(I,C,d)=>{d.r(C)},"./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js":(I,C,d)=>{d.r(C),d.d(C,{NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP:()=>T,NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP:()=>k,checkTypedArray:()=>N});const k=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),T=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let L=!1;const N=()=>{if(!L){L=!0;const j=typeof BigInt64Array<"u"&&BigInt64Array.from,q=typeof BigUint64Array<"u"&&BigUint64Array.from,W=typeof Float16Array<"u"&&Float16Array.from;j&&(k.set("int64",BigInt64Array),T.set(BigInt64Array,"int64")),q&&(k.set("uint64",BigUint64Array),T.set(BigUint64Array,"uint64")),W?(k.set("float16",Float16Array),T.set(Float16Array,"float16")):k.set("float16",Uint16Array)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-impl.js":(I,C,d)=>{d.r(C),d.d(C,{Tensor:()=>j});var k=d("./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"),T=d("./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"),L=d("./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"),N=d("./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js");class j{constructor(W,F,X){let R,re;if((0,L.checkTypedArray)(),typeof W=="object"&&"location"in W)switch(this.dataLocation=W.location,R=W.type,re=W.dims,W.location){case"cpu-pinned":{const xe=L.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(R);if(!xe)throw new TypeError(`unsupported type "${R}" to create tensor from pinned buffer`);if(!(W.data instanceof xe))throw new TypeError(`buffer should be of type ${xe.name}`);this.cpuData=W.data;break}case"texture":if(R!=="float32")throw new TypeError(`unsupported type "${R}" to create tensor from texture`);this.gpuTextureData=W.texture,this.downloader=W.download,this.disposer=W.dispose;break;case"gpu-buffer":if(R!=="float32"&&R!=="float16"&&R!=="int32"&&R!=="int64"&&R!=="uint32"&&R!=="uint8"&&R!=="bool"&&R!=="uint4"&&R!=="int4")throw new TypeError(`unsupported type "${R}" to create tensor from gpu buffer`);this.gpuBufferData=W.gpuBuffer,this.downloader=W.download,this.disposer=W.dispose;break;case"ml-tensor":if(R!=="float32"&&R!=="float16"&&R!=="int32"&&R!=="int64"&&R!=="uint32"&&R!=="uint64"&&R!=="int8"&&R!=="uint8"&&R!=="bool")throw new TypeError(`unsupported type "${R}" to create tensor from MLTensor`);this.mlTensorData=W.mlTensor,this.downloader=W.download,this.disposer=W.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let xe,ye;if(typeof W=="string")if(R=W,ye=X,W==="string"){if(!Array.isArray(F))throw new TypeError("A string tensor's data must be a string array.");xe=F}else{const se=L.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(W);if(se===void 0)throw new TypeError(`Unsupported tensor type: ${W}.`);if(Array.isArray(F)){if(W==="float16"&&se===Uint16Array||W==="uint4"||W==="int4")throw new TypeError(`Creating a ${W} tensor from number array is not supported. Please use ${se.name} as data.`);xe=W==="uint64"||W==="int64"?se.from(F,BigInt):se.from(F)}else if(F instanceof se)xe=F;else{if(!(F instanceof Uint8ClampedArray))throw new TypeError(`A ${R} tensor's data must be type of ${se}`);if(W!=="uint8")throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");xe=Uint8Array.from(F)}}else if(ye=F,Array.isArray(W)){if(W.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const se=typeof W[0];if(se==="string")R="string",xe=W;else{if(se!=="boolean")throw new TypeError(`Invalid element type of data array: ${se}.`);R="bool",xe=Uint8Array.from(W)}}else if(W instanceof Uint8ClampedArray)R="uint8",xe=Uint8Array.from(W);else{const se=L.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(W.constructor);if(se===void 0)throw new TypeError(`Unsupported type for tensor data: ${W.constructor}.`);R=se,xe=W}if(ye===void 0)ye=[xe.length];else if(!Array.isArray(ye))throw new TypeError("A tensor's dims must be a number array");re=ye,this.cpuData=xe,this.dataLocation="cpu"}const be=(0,N.calculateSize)(re);if(this.cpuData&&be!==this.cpuData.length&&(R!=="uint4"&&R!=="int4"||Math.ceil(be/2)!==this.cpuData.length))throw new Error(`Tensor's size(${be}) does not match data length(${this.cpuData.length}).`);this.type=R,this.dims=re,this.size=be}static async fromImage(W,F){return(0,T.tensorFromImage)(W,F)}static fromTexture(W,F){return(0,T.tensorFromTexture)(W,F)}static fromGpuBuffer(W,F){return(0,T.tensorFromGpuBuffer)(W,F)}static fromMLTensor(W,F){return(0,T.tensorFromMLTensor)(W,F)}static fromPinnedBuffer(W,F,X){return(0,T.tensorFromPinnedBuffer)(W,F,X)}toDataURL(W){return(0,k.tensorToDataURL)(this,W)}toImageData(W){return(0,k.tensorToImageData)(this,W)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(W){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const F=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=F,W&&this.disposer&&(this.disposer(),this.disposer=void 0),F}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(W){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return(0,N.tensorReshape)(this,W)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js":(I,C,d)=>{d.r(C),d.d(C,{calculateSize:()=>T,tensorReshape:()=>L});var k=d("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const T=N=>{let j=1;for(let q=0;q<N.length;q++){const W=N[q];if(typeof W!="number"||!Number.isSafeInteger(W))throw new TypeError(`dims[${q}] must be an integer, got: ${W}`);if(W<0)throw new RangeError(`dims[${q}] must be a non-negative integer, got: ${W}`);j*=W}return j},L=(N,j)=>{switch(N.location){case"cpu":return new k.Tensor(N.type,N.data,j);case"cpu-pinned":return new k.Tensor({location:"cpu-pinned",data:N.data,type:N.type,dims:j});case"texture":return new k.Tensor({location:"texture",texture:N.texture,type:N.type,dims:j});case"gpu-buffer":return new k.Tensor({location:"gpu-buffer",gpuBuffer:N.gpuBuffer,type:N.type,dims:j});case"ml-tensor":return new k.Tensor({location:"ml-tensor",mlTensor:N.mlTensor,type:N.type,dims:j});default:throw new Error(`tensorReshape: tensor location ${N.location} is not supported`)}}},"./node_modules/onnxruntime-common/dist/esm/tensor.js":(I,C,d)=>{d.r(C),d.d(C,{Tensor:()=>k});const k=d("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js").Tensor},"./node_modules/onnxruntime-common/dist/esm/trace.js":(I,C,d)=>{d.r(C),d.d(C,{TRACE:()=>T,TRACE_FUNC_BEGIN:()=>N,TRACE_FUNC_END:()=>j});var k=d("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const T=(q,W)=>{(k.env.trace===void 0?k.env.wasm.trace:k.env.trace)&&console.timeStamp(`${q}::ORT::${W}`)},L=(q,W)=>{const F=new Error().stack?.split(/\r\n|\r|\n/g)||[];let X=!1;for(let R=0;R<F.length;R++){if(X&&!F[R].includes("TRACE_FUNC")){let re=`FUNC_${q}::${F[R].trim().split(" ")[1]}`;return W&&(re+=`::${W}`),void T("CPU",re)}F[R].includes("TRACE_FUNC")&&(X=!0)}},N=q=>{(k.env.trace===void 0?k.env.wasm.trace:k.env.trace)&&L("BEGIN",q)},j=q=>{(k.env.trace===void 0?k.env.wasm.trace:k.env.trace)&&L("END",q)}},"./node_modules/onnxruntime-common/dist/esm/training-session-impl.js":(I,C,d)=>{d.r(C),d.d(C,{TrainingSession:()=>L});var k=d("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),T=d("./node_modules/onnxruntime-common/dist/esm/tensor.js");class L{constructor(j,q,W){this.handler=j,this.hasOptimizerModel=q,this.hasEvalModel=W}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(j,q){const W=j.evalModel||"",F=j.optimizerModel||"",X=q||{},[R,re]=await(0,k.resolveBackendAndExecutionProviders)(X);if(R.createTrainingSessionHandler){const be=await R.createTrainingSessionHandler(j.checkpointState,j.trainModel,W,F,re);return new L(be,!!j.optimizerModel,!!j.evalModel)}throw new Error("Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.")}typeNarrowingForRunStep(j,q,W,F,X){const R={};let re={};if(typeof W!="object"||W===null||W instanceof T.Tensor||Array.isArray(W))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let be=!0;if(typeof F=="object"){if(F===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(F instanceof T.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(F)){if(F.length===0)throw new TypeError("'fetches' cannot be an empty array.");be=!1;for(const xe of F){if(typeof xe!="string")throw new TypeError("'fetches' must be a string array or an object.");if(q.indexOf(xe)===-1)throw new RangeError(`'fetches' contains invalid output name: ${xe}.`);R[xe]=null}if(typeof X=="object"&&X!==null)re=X;else if(X!==void 0)throw new TypeError("'options' must be an object.")}else{let xe=!1;const ye=Object.getOwnPropertyNames(F);for(const se of q)if(ye.indexOf(se)!==-1){const ne=F[se];(ne===null||ne instanceof T.Tensor)&&(xe=!0,be=!1,R[se]=ne)}if(xe){if(typeof X=="object"&&X!==null)re=X;else if(X!==void 0)throw new TypeError("'options' must be an object.")}else re=F}}else if(F!==void 0)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const xe of j)if(W[xe]===void 0)throw new Error(`input '${xe}' is missing in 'feeds'.`);if(be)for(const xe of q)R[xe]=null;return[R,re]}convertHandlerReturnTypeToMapOfTensors(j){const q={};for(const W in j)if(Object.hasOwnProperty.call(j,W)){const F=j[W];F instanceof T.Tensor?q[W]=F:q[W]=new T.Tensor(F.type,F.data,F.dims)}return q}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(j,q,W){const[F,X]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,j,q,W),R=await this.handler.runTrainStep(j,F,X);return this.convertHandlerReturnTypeToMapOfTensors(R)}async runOptimizerStep(j){if(!this.hasOptimizerModel)throw new Error("This TrainingSession has no OptimizerModel loaded.");await this.handler.runOptimizerStep(j||{})}async runEvalStep(j,q,W){if(this.hasEvalModel){const[F,X]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,j,q,W),R=await this.handler.runEvalStep(j,F,X);return this.convertHandlerReturnTypeToMapOfTensors(R)}throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(j=!0){return this.handler.getParametersSize(j)}async loadParametersBuffer(j,q=!0){const W=await this.getParametersSize(q);if(j.length!==4*W)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(j,q)}async getContiguousParameters(j=!0){return this.handler.getContiguousParameters(j)}async release(){return this.handler.dispose()}}},"./node_modules/onnxruntime-common/dist/esm/training-session.js":(I,C,d)=>{d.r(C),d.d(C,{TrainingSession:()=>k});const k=d("./node_modules/onnxruntime-common/dist/esm/training-session-impl.js").TrainingSession},"./node_modules/onnxruntime-common/dist/esm/version.js":(I,C,d)=>{d.r(C),d.d(C,{version:()=>k});const k="1.20.1"},"./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs?3a96":(I,C,d)=>{d.r(C),d.d(C,{InferenceSession:()=>xA,TRACE:()=>Re,TRACE_FUNC_BEGIN:()=>Ye,TRACE_FUNC_END:()=>Je,Tensor:()=>z,default:()=>Of,env:()=>X,registerBackend:()=>L});var k,T,L,N,j,q,W,F,X,R,re,be,xe,ye,se,ne,we,g,b,e,l,M,ue,D,z,Re,Ne,Ye,Je,AA,xA,GA=Object.defineProperty,Ge=Object.getOwnPropertyDescriptor,Ie=Object.getOwnPropertyNames,ze=Object.prototype.hasOwnProperty,Ue=(n=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(n,{get:(u,h)=>(typeof require<"u"?require:u)[h]}):n)(function(n){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+n+'" is not supported')}),Pe=(n,u)=>()=>(n&&(u=n(n=0)),u),kA=(n,u)=>{for(var h in u)GA(n,h,{get:u[h],enumerable:!0})},aA=n=>((u,h,x,v)=>{if(h&&typeof h=="object"||typeof h=="function")for(let B of Ie(h))!ze.call(u,B)&&B!==x&&GA(u,B,{get:()=>h[B],enumerable:!(v=Ge(h,B))||v.enumerable});return u})(GA({},"__esModule",{value:!0}),n),iA=Pe(()=>{k=new Map,T=[],L=(n,u,h)=>{if(!u||typeof u.init!="function"||typeof u.createInferenceSessionHandler!="function")throw new TypeError("not a valid backend");{let x=k.get(n);if(x===void 0)k.set(n,{backend:u,priority:h});else{if(x.priority>h)return;if(x.priority===h&&x.backend!==u)throw new Error(`cannot register backend "${n}" using priority ${h}`)}if(h>=0){let v=T.indexOf(n);v!==-1&&T.splice(v,1);for(let B=0;B<T.length;B++)if(k.get(T[B]).priority<=h)return void T.splice(B,0,n);T.push(n)}}},N=async n=>{let u=k.get(n);if(!u)return"backend not found.";if(u.initialized)return u.backend;if(u.aborted)return u.error;{let h=!!u.initPromise;try{return h||(u.initPromise=u.backend.init(n)),await u.initPromise,u.initialized=!0,u.backend}catch(x){return h||(u.error=`${x}`,u.aborted=!0),u.error}finally{delete u.initPromise}}},j=async n=>{let u,h=n.executionProviders||[],x=h.map(O=>typeof O=="string"?O:O.name),v=x.length===0?T:x,B=[],y=new Set;for(let O of v){let H=await N(O);typeof H=="string"?B.push({name:O,err:H}):(u||(u=H),u===H&&y.add(O))}if(!u)throw new Error(`no available backend found. ERR: ${B.map(O=>`[${O.name}] ${O.err}`).join(", ")}`);for(let{name:O,err:H}of B)x.includes(O)&&console.warn(`removing requested execution provider "${O}" from session options because it is not available: ${H}`);let S=h.filter(O=>y.has(typeof O=="string"?O:O.name));return[u,new Proxy(n,{get:(O,H)=>H==="executionProviders"?S:Reflect.get(O,H)})]}}),yA=Pe(()=>{iA()}),nA=Pe(()=>{q="1.21.0-dev.20250206-d981b153d3"}),Se=Pe(()=>{nA(),W="warning",F={wasm:{},webgl:{},webgpu:{},versions:{common:q},set logLevel(n){if(n!==void 0){if(typeof n!="string"||["verbose","info","warning","error","fatal"].indexOf(n)===-1)throw new Error(`Unsupported logging level: ${n}`);W=n}},get logLevel(){return W}},Object.defineProperty(F,"logLevel",{enumerable:!0})}),Ze=Pe(()=>{Se(),X=F}),mA=Pe(()=>{R=(n,u)=>{let h=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);h.width=n.dims[3],h.height=n.dims[2];let x=h.getContext("2d");if(x!=null){let v,B;u?.tensorLayout!==void 0&&u.tensorLayout==="NHWC"?(v=n.dims[2],B=n.dims[3]):(v=n.dims[3],B=n.dims[2]);let y,S,O=u?.format!==void 0?u.format:"RGB",H=u?.norm;H===void 0||H.mean===void 0?y=[255,255,255,255]:typeof H.mean=="number"?y=[H.mean,H.mean,H.mean,H.mean]:(y=[H.mean[0],H.mean[1],H.mean[2],0],H.mean[3]!==void 0&&(y[3]=H.mean[3])),H===void 0||H.bias===void 0?S=[0,0,0,0]:typeof H.bias=="number"?S=[H.bias,H.bias,H.bias,H.bias]:(S=[H.bias[0],H.bias[1],H.bias[2],0],H.bias[3]!==void 0&&(S[3]=H.bias[3]));let te=B*v,Q=0,ie=te,oe=2*te,de=-1;O==="RGBA"?(Q=0,ie=te,oe=2*te,de=3*te):O==="RGB"?(Q=0,ie=te,oe=2*te):O==="RBG"&&(Q=0,oe=te,ie=2*te);for(let fe=0;fe<B;fe++)for(let ke=0;ke<v;ke++){let Me=(n.data[Q++]-S[0])*y[0],De=(n.data[ie++]-S[1])*y[1],Le=(n.data[oe++]-S[2])*y[2],Xe=de===-1?255:(n.data[de++]-S[3])*y[3];x.fillStyle="rgba("+Me+","+De+","+Le+","+Xe+")",x.fillRect(ke,fe,1,1)}if("toDataURL"in h)return h.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},re=(n,u)=>{let h,x=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");if(x==null)throw new Error("Can not access image data");{let v,B,y;u?.tensorLayout!==void 0&&u.tensorLayout==="NHWC"?(v=n.dims[2],B=n.dims[1],y=n.dims[3]):(v=n.dims[3],B=n.dims[2],y=n.dims[1]);let S,O,H=u!==void 0&&u.format!==void 0?u.format:"RGB",te=u?.norm;te===void 0||te.mean===void 0?S=[255,255,255,255]:typeof te.mean=="number"?S=[te.mean,te.mean,te.mean,te.mean]:(S=[te.mean[0],te.mean[1],te.mean[2],255],te.mean[3]!==void 0&&(S[3]=te.mean[3])),te===void 0||te.bias===void 0?O=[0,0,0,0]:typeof te.bias=="number"?O=[te.bias,te.bias,te.bias,te.bias]:(O=[te.bias[0],te.bias[1],te.bias[2],0],te.bias[3]!==void 0&&(O[3]=te.bias[3]));let Q=B*v;if(u!==void 0&&(u.format!==void 0&&y===4&&u.format!=="RGBA"||y===3&&u.format!=="RGB"&&u.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let ie=4,oe=0,de=1,fe=2,ke=3,Me=0,De=Q,Le=2*Q,Xe=-1;H==="RGBA"?(Me=0,De=Q,Le=2*Q,Xe=3*Q):H==="RGB"?(Me=0,De=Q,Le=2*Q):H==="RBG"&&(Me=0,Le=Q,De=2*Q),h=x.createImageData(v,B);for(let _e=0;_e<B*v;oe+=ie,de+=ie,fe+=ie,ke+=ie,_e++)h.data[oe]=(n.data[Me++]-O[0])*S[0],h.data[de]=(n.data[De++]-O[1])*S[1],h.data[fe]=(n.data[Le++]-O[2])*S[2],h.data[ke]=Xe===-1?255:(n.data[Xe++]-O[3])*S[3]}return h}}),CA=Pe(()=>{EA(),be=(n,u)=>{if(n===void 0)throw new Error("Image buffer must be defined");if(u.height===void 0||u.width===void 0)throw new Error("Image height and width must be defined");if(u.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let h,x,{height:v,width:B}=u,y=u.norm??{mean:255,bias:0};h=typeof y.mean=="number"?[y.mean,y.mean,y.mean,y.mean]:[y.mean[0],y.mean[1],y.mean[2],y.mean[3]??255],x=typeof y.bias=="number"?[y.bias,y.bias,y.bias,y.bias]:[y.bias[0],y.bias[1],y.bias[2],y.bias[3]??0];let S=u.format!==void 0?u.format:"RGBA",O=u.tensorFormat!==void 0&&u.tensorFormat!==void 0?u.tensorFormat:"RGB",H=v*B,te=O==="RGBA"?new Float32Array(4*H):new Float32Array(3*H),Q=4,ie=0,oe=1,de=2,fe=3,ke=0,Me=H,De=2*H,Le=-1;S==="RGB"&&(Q=3,ie=0,oe=1,de=2,fe=-1),O==="RGBA"?Le=3*H:O==="RBG"?(ke=0,De=H,Me=2*H):O==="BGR"&&(De=0,Me=H,ke=2*H);for(let Xe=0;Xe<H;Xe++,ie+=Q,de+=Q,oe+=Q,fe+=Q)te[ke++]=(n[ie]+x[0])/h[0],te[Me++]=(n[oe]+x[1])/h[1],te[De++]=(n[de]+x[2])/h[2],Le!==-1&&fe!==-1&&(te[Le++]=(n[fe]+x[3])/h[3]);return new D("float32",te,O==="RGBA"?[1,4,v,B]:[1,3,v,B])},xe=async(n,u)=>{let h,x=typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement,v=typeof ImageData<"u"&&n instanceof ImageData,B=typeof ImageBitmap<"u"&&n instanceof ImageBitmap,y=typeof n=="string",S=u??{},O=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},H=te=>typeof HTMLCanvasElement<"u"&&te instanceof HTMLCanvasElement||te instanceof OffscreenCanvas?te.getContext("2d"):null;if(x){let te=O();te.width=n.width,te.height=n.height;let Q=H(te);if(Q==null)throw new Error("Can not access image data");{let ie=n.height,oe=n.width;if(u!==void 0&&u.resizedHeight!==void 0&&u.resizedWidth!==void 0&&(ie=u.resizedHeight,oe=u.resizedWidth),u!==void 0){if(S=u,u.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");S.tensorFormat="RGBA",S.height=ie,S.width=oe}else S.tensorFormat="RGBA",S.height=ie,S.width=oe;Q.drawImage(n,0,0),h=Q.getImageData(0,0,oe,ie).data}}else{if(!v){if(B){if(u===void 0)throw new Error("Please provide image config with format for Imagebitmap");let te=O();te.width=n.width,te.height=n.height;let Q=H(te);if(Q!=null){let ie=n.height,oe=n.width;return Q.drawImage(n,0,0,oe,ie),h=Q.getImageData(0,0,oe,ie).data,S.height=ie,S.width=oe,be(h,S)}throw new Error("Can not access image data")}if(y)return new Promise((te,Q)=>{let ie=O(),oe=H(ie);if(!n||!oe)return Q();let de=new Image;de.crossOrigin="Anonymous",de.src=n,de.onload=()=>{ie.width=de.width,ie.height=de.height,oe.drawImage(de,0,0,ie.width,ie.height);let fe=oe.getImageData(0,0,ie.width,ie.height);S.height=ie.height,S.width=ie.width,te(be(fe.data,S))}});throw new Error("Input data provided is not supported - aborted tensor creation")}{let te,Q;if(u!==void 0&&u.resizedWidth!==void 0&&u.resizedHeight!==void 0?(te=u.resizedHeight,Q=u.resizedWidth):(te=n.height,Q=n.width),u!==void 0&&(S=u),S.format="RGBA",S.height=te,S.width=Q,u!==void 0){let ie=O();ie.width=Q,ie.height=te;let oe=H(ie);if(oe==null)throw new Error("Can not access image data");oe.putImageData(n,0,0),h=oe.getImageData(0,0,Q,te).data}else h=n.data}}if(h!==void 0)return be(h,S);throw new Error("Input data provided is not supported - aborted tensor creation")},ye=(n,u)=>{let{width:h,height:x,download:v,dispose:B}=u;return new D({location:"texture",type:"float32",texture:n,dims:[1,x,h,4],download:v,dispose:B})},se=(n,u)=>{let{dataType:h,dims:x,download:v,dispose:B}=u;return new D({location:"gpu-buffer",type:h??"float32",gpuBuffer:n,dims:x,download:v,dispose:B})},ne=(n,u)=>{let{dataType:h,dims:x,download:v,dispose:B}=u;return new D({location:"ml-tensor",type:h??"float32",mlTensor:n,dims:x,download:v,dispose:B})},we=(n,u,h)=>new D({location:"cpu-pinned",type:n,data:u,dims:h??[u.length]})}),Te=Pe(()=>{g=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),b=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),e=!1,l=()=>{if(!e){e=!0;let n=typeof BigInt64Array<"u"&&BigInt64Array.from,u=typeof BigUint64Array<"u"&&BigUint64Array.from,h=typeof Float16Array<"u"&&Float16Array.from;n&&(g.set("int64",BigInt64Array),b.set(BigInt64Array,"int64")),u&&(g.set("uint64",BigUint64Array),b.set(BigUint64Array,"uint64")),h?(g.set("float16",Float16Array),b.set(Float16Array,"float16")):g.set("float16",Uint16Array)}}}),pA=Pe(()=>{EA(),M=n=>{let u=1;for(let h=0;h<n.length;h++){let x=n[h];if(typeof x!="number"||!Number.isSafeInteger(x))throw new TypeError(`dims[${h}] must be an integer, got: ${x}`);if(x<0)throw new RangeError(`dims[${h}] must be a non-negative integer, got: ${x}`);u*=x}return u},ue=(n,u)=>{switch(n.location){case"cpu":return new D(n.type,n.data,u);case"cpu-pinned":return new D({location:"cpu-pinned",data:n.data,type:n.type,dims:u});case"texture":return new D({location:"texture",texture:n.texture,type:n.type,dims:u});case"gpu-buffer":return new D({location:"gpu-buffer",gpuBuffer:n.gpuBuffer,type:n.type,dims:u});case"ml-tensor":return new D({location:"ml-tensor",mlTensor:n.mlTensor,type:n.type,dims:u});default:throw new Error(`tensorReshape: tensor location ${n.location} is not supported`)}}}),EA=Pe(()=>{mA(),CA(),Te(),pA(),D=class{constructor(n,u,h){let x,v;if(l(),typeof n=="object"&&"location"in n)switch(this.dataLocation=n.location,x=n.type,v=n.dims,n.location){case"cpu-pinned":{let y=g.get(x);if(!y)throw new TypeError(`unsupported type "${x}" to create tensor from pinned buffer`);if(!(n.data instanceof y))throw new TypeError(`buffer should be of type ${y.name}`);this.cpuData=n.data;break}case"texture":if(x!=="float32")throw new TypeError(`unsupported type "${x}" to create tensor from texture`);this.gpuTextureData=n.texture,this.downloader=n.download,this.disposer=n.dispose;break;case"gpu-buffer":if(x!=="float32"&&x!=="float16"&&x!=="int32"&&x!=="int64"&&x!=="uint32"&&x!=="uint8"&&x!=="bool"&&x!=="uint4"&&x!=="int4")throw new TypeError(`unsupported type "${x}" to create tensor from gpu buffer`);this.gpuBufferData=n.gpuBuffer,this.downloader=n.download,this.disposer=n.dispose;break;case"ml-tensor":if(x!=="float32"&&x!=="float16"&&x!=="int32"&&x!=="int64"&&x!=="uint32"&&x!=="uint64"&&x!=="int8"&&x!=="uint8"&&x!=="bool"&&x!=="uint4"&&x!=="int4")throw new TypeError(`unsupported type "${x}" to create tensor from MLTensor`);this.mlTensorData=n.mlTensor,this.downloader=n.download,this.disposer=n.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let y,S;if(typeof n=="string")if(x=n,S=h,n==="string"){if(!Array.isArray(u))throw new TypeError("A string tensor's data must be a string array.");y=u}else{let O=g.get(n);if(O===void 0)throw new TypeError(`Unsupported tensor type: ${n}.`);if(Array.isArray(u)){if(n==="float16"&&O===Uint16Array||n==="uint4"||n==="int4")throw new TypeError(`Creating a ${n} tensor from number array is not supported. Please use ${O.name} as data.`);y=n==="uint64"||n==="int64"?O.from(u,BigInt):O.from(u)}else if(u instanceof O)y=u;else{if(!(u instanceof Uint8ClampedArray))throw new TypeError(`A ${x} tensor's data must be type of ${O}`);if(n!=="uint8")throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");y=Uint8Array.from(u)}}else if(S=u,Array.isArray(n)){if(n.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let O=typeof n[0];if(O==="string")x="string",y=n;else{if(O!=="boolean")throw new TypeError(`Invalid element type of data array: ${O}.`);x="bool",y=Uint8Array.from(n)}}else if(n instanceof Uint8ClampedArray)x="uint8",y=Uint8Array.from(n);else{let O=b.get(n.constructor);if(O===void 0)throw new TypeError(`Unsupported type for tensor data: ${n.constructor}.`);x=O,y=n}if(S===void 0)S=[y.length];else if(!Array.isArray(S))throw new TypeError("A tensor's dims must be a number array");v=S,this.cpuData=y,this.dataLocation="cpu"}let B=M(v);if(this.cpuData&&B!==this.cpuData.length&&(x!=="uint4"&&x!=="int4"||Math.ceil(B/2)!==this.cpuData.length))throw new Error(`Tensor's size(${B}) does not match data length(${this.cpuData.length}).`);this.type=x,this.dims=v,this.size=B}static async fromImage(n,u){return xe(n,u)}static fromTexture(n,u){return ye(n,u)}static fromGpuBuffer(n,u){return se(n,u)}static fromMLTensor(n,u){return ne(n,u)}static fromPinnedBuffer(n,u,h){return we(n,u,h)}toDataURL(n){return R(this,n)}toImageData(n){return re(this,n)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(n){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let u=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=u,n&&this.disposer&&(this.disposer(),this.disposer=void 0),u}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(n){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return ue(this,n)}}}),FA=Pe(()=>{EA(),z=D}),YA=Pe(()=>{Se(),Re=(n,u)=>{(typeof F.trace>"u"?!F.wasm.trace:!F.trace)||console.timeStamp(`${n}::ORT::${u}`)},Ne=(n,u)=>{let h=new Error().stack?.split(/\r\n|\r|\n/g)||[],x=!1;for(let v=0;v<h.length;v++){if(x&&!h[v].includes("TRACE_FUNC")){let B=`FUNC_${n}::${h[v].trim().split(" ")[1]}`;return u&&(B+=`::${u}`),void Re("CPU",B)}h[v].includes("TRACE_FUNC")&&(x=!0)}},Ye=n=>{(typeof F.trace>"u"?!F.wasm.trace:!F.trace)||Ne("BEGIN",n)},Je=n=>{(typeof F.trace>"u"?!F.wasm.trace:!F.trace)||Ne("END",n)}}),J=Pe(()=>{iA(),FA(),YA(),AA=class hd{constructor(u){this.handler=u}async run(u,h,x){Ye();let v={},B={};if(typeof u!="object"||u===null||u instanceof z||Array.isArray(u))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let y=!0;if(typeof h=="object"){if(h===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(h instanceof z)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(h)){if(h.length===0)throw new TypeError("'fetches' cannot be an empty array.");y=!1;for(let H of h){if(typeof H!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(H)===-1)throw new RangeError(`'fetches' contains invalid output name: ${H}.`);v[H]=null}if(typeof x=="object"&&x!==null)B=x;else if(typeof x<"u")throw new TypeError("'options' must be an object.")}else{let H=!1,te=Object.getOwnPropertyNames(h);for(let Q of this.outputNames)if(te.indexOf(Q)!==-1){let ie=h[Q];(ie===null||ie instanceof z)&&(H=!0,y=!1,v[Q]=ie)}if(H){if(typeof x=="object"&&x!==null)B=x;else if(typeof x<"u")throw new TypeError("'options' must be an object.")}else B=h}}else if(typeof h<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let H of this.inputNames)if(typeof u[H]>"u")throw new Error(`input '${H}' is missing in 'feeds'.`);if(y)for(let H of this.outputNames)v[H]=null;let S=await this.handler.run(u,v,B),O={};for(let H in S)if(Object.hasOwnProperty.call(S,H)){let te=S[H];O[H]=te instanceof z?te:new z(te.type,te.data,te.dims)}return Je(),O}async release(){return this.handler.dispose()}static async create(u,h,x,v){Ye();let B,y={};if(typeof u=="string"){if(B=u,typeof h=="object"&&h!==null)y=h;else if(typeof h<"u")throw new TypeError("'options' must be an object.")}else if(u instanceof Uint8Array){if(B=u,typeof h=="object"&&h!==null)y=h;else if(typeof h<"u")throw new TypeError("'options' must be an object.")}else{if(!(u instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&u instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{let te=u,Q=0,ie=u.byteLength;if(typeof h=="object"&&h!==null)y=h;else if(typeof h=="number"){if(Q=h,!Number.isSafeInteger(Q))throw new RangeError("'byteOffset' must be an integer.");if(Q<0||Q>=te.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${te.byteLength}).`);if(ie=u.byteLength-Q,typeof x=="number"){if(ie=x,!Number.isSafeInteger(ie))throw new RangeError("'byteLength' must be an integer.");if(ie<=0||Q+ie>te.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${te.byteLength-Q}].`);if(typeof v=="object"&&v!==null)y=v;else if(typeof v<"u")throw new TypeError("'options' must be an object.")}else if(typeof x<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof h<"u")throw new TypeError("'options' must be an object.");B=new Uint8Array(te,Q,ie)}}let[S,O]=await j(y),H=await S.createInferenceSessionHandler(B,O);return Je(),new hd(H)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}}),OA=Pe(()=>{J(),xA=AA}),ge=Pe(()=>{}),$=Pe(()=>{}),me=Pe(()=>{}),Fe=Pe(()=>{}),qe={};kA(qe,{InferenceSession:()=>xA,TRACE:()=>Re,TRACE_FUNC_BEGIN:()=>Ye,TRACE_FUNC_END:()=>Je,Tensor:()=>z,env:()=>X,registerBackend:()=>L});var dA=Pe(()=>{yA(),Ze(),OA(),FA(),ge(),$(),YA(),me(),Fe()}),oA=Pe(()=>{}),vA={};kA(vA,{default:()=>Mt});var QA,TA,Mt,Tt=Pe(()=>{Eg(),rn(),Jo(),QA="ort-wasm-proxy-worker",(TA=globalThis.self?.name===QA)&&(self.onmessage=n=>{let{type:u,in:h}=n.data;try{switch(u){case"init-wasm":Ma(h.wasm).then(()=>{Gr(h).then(()=>{postMessage({type:u})},x=>{postMessage({type:u,err:x})})},x=>{postMessage({type:u,err:x})});break;case"init-ep":{let{epName:x,env:v}=h;la(v,x).then(()=>{postMessage({type:u})},B=>{postMessage({type:u,err:B})});break}case"copy-from":{let{buffer:x}=h,v=Si(x);postMessage({type:u,out:v});break}case"create":{let{model:x,options:v}=h;L0(x,v).then(B=>{postMessage({type:u,out:B})},B=>{postMessage({type:u,err:B})});break}case"release":to(h),postMessage({type:u});break;case"run":{let{sessionId:x,inputIndices:v,inputs:B,outputIndices:y,options:S}=h;ao(x,v,B,y,new Array(y.length).fill(null),S).then(O=>{O.some(H=>H[3]!=="cpu")?postMessage({type:u,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:u,out:O},so([...B,...O]))},O=>{postMessage({type:u,err:O})});break}case"end-profiling":C1(h),postMessage({type:u})}}catch(x){postMessage({type:u,err:x})}}),Mt=TA?null:n=>new Worker(n??fa,{type:"module",name:QA})}),ut={};kA(ut,{default:()=>Qr});var Ct,$t,Qr,tr,fa,bt,Za,La,wa,ZA,$A,PA,qt,gs,Xa,Ss,ks,xs,Fs,ea,xt,Ma,Tr,Rr,us,Kt,qa,ds,Ci,$s,ei,bi,Kr,rs,fs,Ai,Ja,vs,kr,Ns,Os,Ii,Ls,Bs,Ys,ys,wt,Pt,ka,ti,Es,Hs,as,Rs,tA,_,ve,Oe,We,$e,fA,NA,He,WA,bA,Yt,Wt,cr,sr,jt,jA,KA,Jt,Ya,pa,ir,rt,dr,gA,JA,ha,Nr,Vr,Pr,Cr,Ut,xr,ri,Ha,Ni,Ga,Oi,Gt,Aa,Wa,n0,o0,l0,c0,ai,Vs,g0,Li,Ta,Zr,qA,Da,pn,Yi,hn,u0,d0,mn,K0,Pa,rr,wi,ki,xa,Ws,ss,Cn,bn,js,In,wn,kn,DA,Us,RA,xn,Hi,va,za,si,xi,vn,zr,f0,p0,Ms,ii,h0,Ri,ni,HA,_a,Bn,vi,ps,yn,m0,C0,Vi,b0,I0,Or,w0,k0,It,Ht,En,is,x0,ta,hs,ra,ms,Wi,Mn,v0,ji,Br,Bi,Gn,aa,oi,Cs,Dn,Qn,Tn,Ui,ns,Ki,B0,Pn,zn,bs,Zi,Lr,Sn,Xi,yi,Sa,Ei,Fn,$a,Nn,qi,On,li,Ln,y0,E0,sa,Mi,ma,Yn,Ji,ja,fr,Hn,Gs,ci,M0,Rn,Vn,G0,Ds,es,Wn,Gi,Xr,ar,gi,D0,Qs,Ts,Ks,jn,Ca,Q0,Un,ui,Di,ia,Kn,_i,Zs,T0,di,ct,A,t,r,a,s,i,o,c,f,m,p,w,E,P,Y,Z,ee,ce,he,Be,Qe,Ve,Ke,rA,cA,MA,zA,et,at,dt,St,Zt,er,pr,hr,yr,Er,Sr,Wr,na,qr,oa,Ba,As,os,ls,Ps,Qi,fi,pi,Ti,Zn,P0,z0,$i,d2,f2,p2,h2,m2,po,C2,b2,ho,I2,w2,k2,x2,mo,v2,B2,Co,y2,E2,bo,M2,Xs,qs,en,An,G2,D2,Io,Q2,T2,P2,z2,S2,F2,Ra,N2,O2,Z0,L2,S0,Pi,Y2,H2,R2,V2,X0,W2,j2,U2,K2,F0,Z2,wo,X2,N0,q2,J2,_2,$2,q0,el,Al,tl,D1,rl,al,sl,Xn,il,nl,ol,ll,cl,gl,ul,tn,dl,ko,xo,vo,fl,pl,J0,Bo,hl,yo,Eo,ml,Mo,Go,Cl,_0,bl,Il,wl,kl,Do,$0,Q1,xl,vl,Qo,Bl,yl,To,El,Ml,Po,Gl,T1,zo,So,Dl,Ql,Fo,Tl,Pl,eo,zl,Sl,No,Fl,Nl,Ol,Ll,Yl,Hl,Rl,Vl,Wl,Oo,jl,O0,Lo,Yo,Ul,br,P1,z1,S1,Ho,Kl,Zl,Ro,Xl,Vo,Wo,F1,ql,Jl,jo,N1,O1,_l,$l,e1,A1,t1,r1,Uo,a1,Ko,Zo,Xo,s1,L1,qo,i1,n1,Y1=Pe(()=>{Ct=import.meta.url,$t=async function(n={}){function u(){return lt.buffer!=At.buffer&&ga(),At}function h(){return lt.buffer!=At.buffer&&ga(),yt}function x(){return lt.buffer!=At.buffer&&ga(),gr}function v(){return lt.buffer!=At.buffer&&ga(),ca}function B(){return lt.buffer!=At.buffer&&ga(),Fi}function y(){return lt.buffer!=At.buffer&&ga(),A0}function S(){return lt.buffer!=At.buffer&&ga(),e2}function O(){return lt.buffer!=At.buffer&&ga(),io}var H,te,Q=Object.assign({},n),ie=new Promise((G,V)=>{H=G,te=V}),oe=typeof window=="object",de=typeof importScripts=="function",fe=de&&self.name=="em-pthread";Q.mountExternalData=(G,V)=>{G.startsWith("./")&&(G=G.substring(2)),(Q.Fb||(Q.Fb=new Map)).set(G,V)},Q.unmountExternalData=()=>{delete Q.Fb};var ke=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor;let Me=()=>{let G=(Ae,le,Ce)=>(...je)=>{let IA=dn,BA=le?.();je=Ae(...je);let it=le?.();return BA!==it&&(Ae=it,Ce(BA),le=Ce=null),dn!=IA?new Promise((nt,Et)=>{Kc={resolve:nt,reject:Et}}):je},V=Ae=>async(...le)=>{try{if(Q.Gb)throw Error("Session already started");let Ce=Q.Gb={hc:le[0],errors:[]},je=await Ae(...le);if(Q.Gb!==Ce)throw Error("Session mismatch");Q.Hb?.flush();let IA=Ce.errors;if(0<IA.length){let BA=await Promise.all(IA);if(BA=BA.filter(it=>it),0<BA.length)throw Error(BA.join(`
`))}return je}finally{Q.Gb=null}};Q._OrtCreateSession=G(Q._OrtCreateSession,()=>Q._OrtCreateSession,Ae=>Q._OrtCreateSession=Ae),Q._OrtRun=V(G(Q._OrtRun,()=>Q._OrtRun,Ae=>Q._OrtRun=Ae)),Q._OrtRunWithBinding=V(G(Q._OrtRunWithBinding,()=>Q._OrtRunWithBinding,Ae=>Q._OrtRunWithBinding=Ae)),Q._OrtBindInput=G(Q._OrtBindInput,()=>Q._OrtBindInput,Ae=>Q._OrtBindInput=Ae),Me=void 0};Q.jsepInit=(G,V)=>{if(Me?.(),G==="webgpu"){[Q.Hb,Q.Vb,Q.Zb,Q.Ob,Q.Yb,Q.kb,Q.$b,Q.cc,Q.Wb,Q.Xb,Q.ac]=V;let Ae=Q.Hb;Q.jsepRegisterBuffer=(le,Ce,je,IA)=>Ae.registerBuffer(le,Ce,je,IA),Q.jsepGetBuffer=le=>Ae.getBuffer(le),Q.jsepCreateDownloader=(le,Ce,je)=>Ae.createDownloader(le,Ce,je),Q.jsepOnCreateSession=le=>{Ae.onCreateSession(le)},Q.jsepOnReleaseSession=le=>{Ae.onReleaseSession(le)},Q.jsepOnRunStart=le=>Ae.onRunStart(le),Q.dc=(le,Ce)=>{Ae.upload(le,Ce)}}else if(G==="webnn"){[Q.Hb,Q.bc,Q.Pb,Q.jsepEnsureTensor,Q.ec,Q.jsepDownloadTensor]=V,Q.jsepReleaseTensorId=Q.Pb;let Ae=Q.Hb;Q.jsepOnRunStart=le=>Ae.onRunStart(le),Q.jsepRegisterMLContext=(le,Ce)=>{Ae.registerMLContext(le,Ce)},Q.jsepOnReleaseSession=le=>{Ae.onReleaseSession(le)},Q.jsepCreateMLTensorDownloader=(le,Ce)=>Ae.createMLTensorDownloader(le,Ce),Q.jsepRegisterMLTensor=(le,Ce,je)=>Ae.registerMLTensor(le,Ce,je),Q.jsepCreateMLContext=le=>Ae.createMLContext(le),Q.jsepRegisterMLConstant=(le,Ce,je,IA,BA)=>Ae.registerMLConstant(le,Ce,je,IA,BA,Q.Fb)}};var De,Le,Xe=Object.assign({},Q),_e=(G,V)=>{throw V},lA="";(oe||de)&&(de?lA=self.location.href:typeof document<"u"&&document.currentScript&&(lA=document.currentScript.src),Ct&&(lA=Ct),lA=lA.startsWith("blob:")?"":lA.substr(0,lA.replace(/[?#].*/,"").lastIndexOf("/")+1),de&&(Le=G=>{var V=new XMLHttpRequest;return V.open("GET",G,!1),V.responseType="arraybuffer",V.send(null),new Uint8Array(V.response)}),De=(G,V,Ae)=>{var le=new XMLHttpRequest;le.open("GET",G,!0),le.responseType="arraybuffer",le.onload=()=>{le.status==200||le.status==0&&le.response?V(le.response):Ae()},le.onerror=Ae,le.send(null)});var LA,st=console.log.bind(console),ht=console.error.bind(console),pt=st,mt=ht;if(Object.assign(Q,Xe),Xe=null,fe){let G=function(V){try{var Ae=V.data,le=Ae.cmd;if(le==="load"){let Ce=[];self.onmessage=je=>Ce.push(je),self.startWorker=()=>{postMessage({cmd:"loaded"});for(let je of Ce)G(je);self.onmessage=G};for(let je of Ae.handlers)Q[je]&&!Q[je].proxy||(Q[je]=(...IA)=>{postMessage({Nb:"callHandler",pc:je,args:IA})},je=="print"&&(pt=Q[je]),je=="printErr"&&(mt=Q[je]));lt=Ae.wasmMemory,ga(),Bt(Ae.wasmModule)}else if(le==="run"){Jc(Ae.pthread_ptr,0,0,1,0,0),jc(Ae.pthread_ptr),Hf(),Hg(),tt||(Ou(),tt=!0);try{Rf(Ae.start_routine,Ae.arg)}catch(Ce){if(Ce!="unwind")throw Ce}}else le==="cancel"?r2()&&ac(-1):Ae.target!=="setimmediate"&&(le==="checkMailbox"?tt&&Z1():le&&(mt(`worker: received unknown command ${le}`),mt(Ae)))}catch(Ce){throw Lu(),Ce}};var Bt,tt=!1;mt=function(...V){V=V.join(" "),console.error(V)},self.alert=function(...V){postMessage({Nb:"alert",text:V.join(" "),rc:r2()})},Q.instantiateWasm=(V,Ae)=>new Promise(le=>{Bt=Ce=>{Ce=new WebAssembly.Instance(Ce,Fg()),Ae(Ce),le()}}),self.onunhandledrejection=V=>{throw V.reason||V},self.onmessage=G}Q.wasmBinary&&(LA=Q.wasmBinary);var lt,wA,UA,At,yt,gr,ca,Fi,A0,e2,Oa,cn,io,Fr=!1;function ga(){var G=lt.buffer;Q.HEAP8=At=new Int8Array(G),Q.HEAP16=gr=new Int16Array(G),Q.HEAPU8=yt=new Uint8Array(G),Q.HEAPU16=ca=new Uint16Array(G),Q.HEAP32=Fi=new Int32Array(G),Q.HEAPU32=A0=new Uint32Array(G),Q.HEAPF32=e2=new Float32Array(G),Q.HEAPF64=io=new Float64Array(G),Q.HEAP64=Oa=new BigInt64Array(G),Q.HEAPU64=cn=new BigUint64Array(G)}if(!fe){if(!((lt=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof ke))throw mt("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");ga()}var Y0=[],I1=[],Tc=[],w1=0,k1=null;function Qg(){if(--w1==0&&k1){var G=k1;k1=null,G()}}function H0(G){throw mt(G="Aborted("+G+")"),Fr=!0,UA=1,G=new WebAssembly.RuntimeError(G+". Build with -sASSERTIONS for more info."),te(G),G}var Pc,Tg=G=>G.startsWith("data:application/octet-stream;base64,"),Pg=G=>G.startsWith("file://");function zg(G){if(G==Pc&&LA)return new Uint8Array(LA);if(Le)return Le(G);throw"both async and sync fetching of the wasm failed"}function Sg(G,V,Ae){return function(le){if(!LA&&(oe||de)){if(typeof fetch=="function"&&!Pg(le))return fetch(le,{credentials:"same-origin"}).then(Ce=>{if(!Ce.ok)throw`failed to load wasm binary file at '${le}'`;return Ce.arrayBuffer()}).catch(()=>zg(le));if(De)return new Promise((Ce,je)=>{De(le,IA=>Ce(new Uint8Array(IA)),je)})}return Promise.resolve().then(()=>zg(le))}(G).then(le=>WebAssembly.instantiate(le,V)).then(Ae,le=>{mt(`failed to asynchronously prepare wasm: ${le}`),H0(le)})}function Fg(){return{a:{O:Yf,Aa:Lf,b:Wf,aa:jg,B:Zg,qa:Xg,Y:Jg,_:_g,ra:$g,oa:eu,ha:Au,na:tu,L:ru,Z:au,W:su,pa:iu,X:nu,va:jf,F:Uf,Q:Kf,P:Xf,E:Jf,u:_f,q:$f,G:ep,A:np,R:op,ua:lp,ka:cp,U:gp,ba:up,H:dp,ja:jc,ta:fp,t:pp,Ba:hp,x:bp,o:Ip,m:kp,c:Vc,n:xp,k:yp,w:Ep,p:Mp,f:Gp,s:Dp,l:Qp,e:Tp,j:Pp,i:zp,g:Sp,d:Fp,ea:Np,fa:Op,ga:Lp,ca:wu,da:ku,T:Yp,h:Hp,D:Rp,I:Vp,M:Wp,y:jp,sa:Up,V:Kp,v:vu,z:Zp,N:Xp,S:qp,za:Jp,ya:_p,la:Eu,ma:Mu,$:Oc,C:Gu,K:Du,ia:Qu,J:Tu,a:lt,xa:Nc,wa:Su,r:Ah}}}var zc={916868:(G,V,Ae,le,Ce)=>{if(Q===void 0||!Q.Fb)return 1;if((G=ya(Number(G>>>0))).startsWith("./")&&(G=G.substring(2)),!(G=Q.Fb.get(G)))return 2;if(V=Number(V>>>0),Ae=Number(Ae>>>0),le=Number(le>>>0),V+Ae>G.byteLength)return 3;try{let je=G.subarray(V,V+Ae);switch(Ce){case 0:h().set(je,le>>>0);break;case 1:Q.dc(le,je);break;default:return 4}return 0}catch{return 4}},917583:(G,V,Ae)=>{Q.ec(G,h().subarray(V>>>0,V+Ae>>>0))},917646:()=>Q.bc(),917687:G=>{Q.Pb(G)},917723:()=>{Q.Wb()},917754:()=>{Q.Xb()},917783:()=>{Q.ac()},917808:G=>Q.Vb(G),917841:G=>Q.Zb(G),917873:(G,V,Ae)=>{Q.Ob(Number(G),Number(V),Number(Ae),!0)},917936:(G,V,Ae)=>{Q.Ob(Number(G),Number(V),Number(Ae))},917993:()=>typeof wasmOffsetConverter<"u",918050:G=>{Q.kb("Abs",G,void 0)},918101:G=>{Q.kb("Neg",G,void 0)},918152:G=>{Q.kb("Floor",G,void 0)},918205:G=>{Q.kb("Ceil",G,void 0)},918257:G=>{Q.kb("Reciprocal",G,void 0)},918315:G=>{Q.kb("Sqrt",G,void 0)},918367:G=>{Q.kb("Exp",G,void 0)},918418:G=>{Q.kb("Erf",G,void 0)},918469:G=>{Q.kb("Sigmoid",G,void 0)},918524:(G,V,Ae)=>{Q.kb("HardSigmoid",G,{alpha:V,beta:Ae})},918603:G=>{Q.kb("Log",G,void 0)},918654:G=>{Q.kb("Sin",G,void 0)},918705:G=>{Q.kb("Cos",G,void 0)},918756:G=>{Q.kb("Tan",G,void 0)},918807:G=>{Q.kb("Asin",G,void 0)},918859:G=>{Q.kb("Acos",G,void 0)},918911:G=>{Q.kb("Atan",G,void 0)},918963:G=>{Q.kb("Sinh",G,void 0)},919015:G=>{Q.kb("Cosh",G,void 0)},919067:G=>{Q.kb("Asinh",G,void 0)},919120:G=>{Q.kb("Acosh",G,void 0)},919173:G=>{Q.kb("Atanh",G,void 0)},919226:G=>{Q.kb("Tanh",G,void 0)},919278:G=>{Q.kb("Not",G,void 0)},919329:(G,V,Ae)=>{Q.kb("Clip",G,{min:V,max:Ae})},919398:G=>{Q.kb("Clip",G,void 0)},919450:(G,V)=>{Q.kb("Elu",G,{alpha:V})},919508:G=>{Q.kb("Gelu",G,void 0)},919560:G=>{Q.kb("Relu",G,void 0)},919612:(G,V)=>{Q.kb("LeakyRelu",G,{alpha:V})},919676:(G,V)=>{Q.kb("ThresholdedRelu",G,{alpha:V})},919746:(G,V)=>{Q.kb("Cast",G,{to:V})},919804:G=>{Q.kb("Add",G,void 0)},919855:G=>{Q.kb("Sub",G,void 0)},919906:G=>{Q.kb("Mul",G,void 0)},919957:G=>{Q.kb("Div",G,void 0)},920008:G=>{Q.kb("Pow",G,void 0)},920059:G=>{Q.kb("Equal",G,void 0)},920112:G=>{Q.kb("Greater",G,void 0)},920167:G=>{Q.kb("GreaterOrEqual",G,void 0)},920229:G=>{Q.kb("Less",G,void 0)},920281:G=>{Q.kb("LessOrEqual",G,void 0)},920340:(G,V,Ae,le,Ce)=>{Q.kb("ReduceMean",G,{keepDims:!!V,noopWithEmptyAxes:!!Ae,axes:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},920515:(G,V,Ae,le,Ce)=>{Q.kb("ReduceMax",G,{keepDims:!!V,noopWithEmptyAxes:!!Ae,axes:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},920689:(G,V,Ae,le,Ce)=>{Q.kb("ReduceMin",G,{keepDims:!!V,noopWithEmptyAxes:!!Ae,axes:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},920863:(G,V,Ae,le,Ce)=>{Q.kb("ReduceProd",G,{keepDims:!!V,noopWithEmptyAxes:!!Ae,axes:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},921038:(G,V,Ae,le,Ce)=>{Q.kb("ReduceSum",G,{keepDims:!!V,noopWithEmptyAxes:!!Ae,axes:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},921212:(G,V,Ae,le,Ce)=>{Q.kb("ReduceL1",G,{keepDims:!!V,noopWithEmptyAxes:!!Ae,axes:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},921385:(G,V,Ae,le,Ce)=>{Q.kb("ReduceL2",G,{keepDims:!!V,noopWithEmptyAxes:!!Ae,axes:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},921558:(G,V,Ae,le,Ce)=>{Q.kb("ReduceLogSum",G,{keepDims:!!V,noopWithEmptyAxes:!!Ae,axes:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},921735:(G,V,Ae,le,Ce)=>{Q.kb("ReduceSumSquare",G,{keepDims:!!V,noopWithEmptyAxes:!!Ae,axes:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},921915:(G,V,Ae,le,Ce)=>{Q.kb("ReduceLogSumExp",G,{keepDims:!!V,noopWithEmptyAxes:!!Ae,axes:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},922095:G=>{Q.kb("Where",G,void 0)},922148:(G,V,Ae)=>{Q.kb("Transpose",G,{perm:V?Array.from(B().subarray(Number(V)>>>0,Number(Ae)>>>0)):[]})},922272:(G,V,Ae,le)=>{Q.kb("DepthToSpace",G,{blocksize:V,mode:ya(Ae),format:le?"NHWC":"NCHW"})},922405:(G,V,Ae,le)=>{Q.kb("DepthToSpace",G,{blocksize:V,mode:ya(Ae),format:le?"NHWC":"NCHW"})},922538:(G,V,Ae,le,Ce,je,IA,BA,it,nt,Et,nr,wr,hA,lr)=>{Q.kb("ConvTranspose",G,{format:it?"NHWC":"NCHW",autoPad:V,dilations:[Ae],group:le,kernelShape:[Ce],pads:[je,IA],strides:[BA],wIsConst:()=>!!u()[nt>>>0],outputPadding:Et?Array.from(B().subarray(Number(Et)>>>0,Number(nr)>>>0)):[],outputShape:wr?Array.from(B().subarray(Number(wr)>>>0,Number(hA)>>>0)):[],activation:ya(lr)})},922971:(G,V,Ae,le,Ce,je,IA,BA,it,nt,Et,nr,wr,hA)=>{Q.kb("ConvTranspose",G,{format:BA?"NHWC":"NCHW",autoPad:V,dilations:Array.from(B().subarray(Number(Ae)>>>0,2+(Number(Ae)>>>0)>>>0)),group:le,kernelShape:Array.from(B().subarray(Number(Ce)>>>0,2+(Number(Ce)>>>0)>>>0)),pads:Array.from(B().subarray(Number(je)>>>0,4+(Number(je)>>>0)>>>0)),strides:Array.from(B().subarray(Number(IA)>>>0,2+(Number(IA)>>>0)>>>0)),wIsConst:()=>!!u()[it>>>0],outputPadding:nt?Array.from(B().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],outputShape:nr?Array.from(B().subarray(Number(nr)>>>0,Number(wr)>>>0)):[],activation:ya(hA)})},923632:(G,V,Ae,le,Ce,je,IA,BA,it,nt,Et,nr,wr,hA,lr)=>{Q.kb("ConvTranspose",G,{format:it?"NHWC":"NCHW",autoPad:V,dilations:[Ae],group:le,kernelShape:[Ce],pads:[je,IA],strides:[BA],wIsConst:()=>!!u()[nt>>>0],outputPadding:Et?Array.from(B().subarray(Number(Et)>>>0,Number(nr)>>>0)):[],outputShape:wr?Array.from(B().subarray(Number(wr)>>>0,Number(hA)>>>0)):[],activation:ya(lr)})},924065:(G,V,Ae,le,Ce,je,IA,BA,it,nt,Et,nr,wr,hA)=>{Q.kb("ConvTranspose",G,{format:BA?"NHWC":"NCHW",autoPad:V,dilations:Array.from(B().subarray(Number(Ae)>>>0,2+(Number(Ae)>>>0)>>>0)),group:le,kernelShape:Array.from(B().subarray(Number(Ce)>>>0,2+(Number(Ce)>>>0)>>>0)),pads:Array.from(B().subarray(Number(je)>>>0,4+(Number(je)>>>0)>>>0)),strides:Array.from(B().subarray(Number(IA)>>>0,2+(Number(IA)>>>0)>>>0)),wIsConst:()=>!!u()[it>>>0],outputPadding:nt?Array.from(B().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],outputShape:nr?Array.from(B().subarray(Number(nr)>>>0,Number(wr)>>>0)):[],activation:ya(hA)})},924726:(G,V)=>{Q.kb("GlobalAveragePool",G,{format:V?"NHWC":"NCHW"})},924817:(G,V,Ae,le,Ce,je,IA,BA,it,nt,Et,nr,wr,hA)=>{Q.kb("AveragePool",G,{format:hA?"NHWC":"NCHW",auto_pad:V,ceil_mode:Ae,count_include_pad:le,storage_order:Ce,dilations:je?Array.from(B().subarray(Number(je)>>>0,Number(IA)>>>0)):[],kernel_shape:BA?Array.from(B().subarray(Number(BA)>>>0,Number(it)>>>0)):[],pads:nt?Array.from(B().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],strides:nr?Array.from(B().subarray(Number(nr)>>>0,Number(wr)>>>0)):[]})},925296:(G,V)=>{Q.kb("GlobalAveragePool",G,{format:V?"NHWC":"NCHW"})},925387:(G,V,Ae,le,Ce,je,IA,BA,it,nt,Et,nr,wr,hA)=>{Q.kb("AveragePool",G,{format:hA?"NHWC":"NCHW",auto_pad:V,ceil_mode:Ae,count_include_pad:le,storage_order:Ce,dilations:je?Array.from(B().subarray(Number(je)>>>0,Number(IA)>>>0)):[],kernel_shape:BA?Array.from(B().subarray(Number(BA)>>>0,Number(it)>>>0)):[],pads:nt?Array.from(B().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],strides:nr?Array.from(B().subarray(Number(nr)>>>0,Number(wr)>>>0)):[]})},925866:(G,V)=>{Q.kb("GlobalMaxPool",G,{format:V?"NHWC":"NCHW"})},925953:(G,V,Ae,le,Ce,je,IA,BA,it,nt,Et,nr,wr,hA)=>{Q.kb("MaxPool",G,{format:hA?"NHWC":"NCHW",auto_pad:V,ceil_mode:Ae,count_include_pad:le,storage_order:Ce,dilations:je?Array.from(B().subarray(Number(je)>>>0,Number(IA)>>>0)):[],kernel_shape:BA?Array.from(B().subarray(Number(BA)>>>0,Number(it)>>>0)):[],pads:nt?Array.from(B().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],strides:nr?Array.from(B().subarray(Number(nr)>>>0,Number(wr)>>>0)):[]})},926428:(G,V)=>{Q.kb("GlobalMaxPool",G,{format:V?"NHWC":"NCHW"})},926515:(G,V,Ae,le,Ce,je,IA,BA,it,nt,Et,nr,wr,hA)=>{Q.kb("MaxPool",G,{format:hA?"NHWC":"NCHW",auto_pad:V,ceil_mode:Ae,count_include_pad:le,storage_order:Ce,dilations:je?Array.from(B().subarray(Number(je)>>>0,Number(IA)>>>0)):[],kernel_shape:BA?Array.from(B().subarray(Number(BA)>>>0,Number(it)>>>0)):[],pads:nt?Array.from(B().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],strides:nr?Array.from(B().subarray(Number(nr)>>>0,Number(wr)>>>0)):[]})},926990:(G,V,Ae,le,Ce)=>{Q.kb("Gemm",G,{alpha:V,beta:Ae,transA:le,transB:Ce})},927094:G=>{Q.kb("MatMul",G,void 0)},927148:(G,V,Ae,le)=>{Q.kb("ArgMax",G,{keepDims:!!V,selectLastIndex:!!Ae,axis:le})},927256:(G,V,Ae,le)=>{Q.kb("ArgMin",G,{keepDims:!!V,selectLastIndex:!!Ae,axis:le})},927364:(G,V)=>{Q.kb("Softmax",G,{axis:V})},927427:(G,V)=>{Q.kb("Concat",G,{axis:V})},927487:(G,V,Ae,le,Ce)=>{Q.kb("Split",G,{axis:V,numOutputs:Ae,splitSizes:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},927643:G=>{Q.kb("Expand",G,void 0)},927697:(G,V)=>{Q.kb("Gather",G,{axis:Number(V)})},927768:(G,V)=>{Q.kb("GatherElements",G,{axis:Number(V)})},927847:(G,V)=>{Q.kb("GatherND",G,{batch_dims:Number(V)})},927926:(G,V,Ae,le,Ce,je,IA,BA,it,nt,Et)=>{Q.kb("Resize",G,{antialias:V,axes:Ae?Array.from(B().subarray(Number(Ae)>>>0,Number(le)>>>0)):[],coordinateTransformMode:ya(Ce),cubicCoeffA:je,excludeOutside:IA,extrapolationValue:BA,keepAspectRatioPolicy:ya(it),mode:ya(nt),nearestMode:ya(Et)})},928288:(G,V,Ae,le,Ce,je,IA)=>{Q.kb("Slice",G,{starts:V?Array.from(B().subarray(Number(V)>>>0,Number(Ae)>>>0)):[],ends:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[],axes:je?Array.from(B().subarray(Number(je)>>>0,Number(IA)>>>0)):[]})},928552:G=>{Q.kb("Tile",G,void 0)},928604:(G,V,Ae)=>{Q.kb("InstanceNormalization",G,{epsilon:V,format:Ae?"NHWC":"NCHW"})},928718:(G,V,Ae)=>{Q.kb("InstanceNormalization",G,{epsilon:V,format:Ae?"NHWC":"NCHW"})},928832:G=>{Q.kb("Range",G,void 0)},928885:(G,V)=>{Q.kb("Einsum",G,{equation:ya(V)})},928966:(G,V,Ae,le,Ce)=>{Q.kb("Pad",G,{mode:V,value:Ae,pads:le?Array.from(B().subarray(Number(le)>>>0,Number(Ce)>>>0)):[]})},929109:(G,V,Ae,le,Ce,je)=>{Q.kb("BatchNormalization",G,{epsilon:V,momentum:Ae,spatial:!!Ce,trainingMode:!!le,format:je?"NHWC":"NCHW"})},929278:(G,V,Ae,le,Ce,je)=>{Q.kb("BatchNormalization",G,{epsilon:V,momentum:Ae,spatial:!!Ce,trainingMode:!!le,format:je?"NHWC":"NCHW"})},929447:(G,V,Ae)=>{Q.kb("CumSum",G,{exclusive:Number(V),reverse:Number(Ae)})},929544:(G,V,Ae)=>{Q.kb("DequantizeLinear",G,{axis:V,blockSize:Ae})},929634:(G,V,Ae,le,Ce)=>{Q.kb("GridSample",G,{align_corners:V,mode:ya(Ae),padding_mode:ya(le),format:Ce?"NHWC":"NCHW"})},929804:(G,V,Ae,le,Ce)=>{Q.kb("GridSample",G,{align_corners:V,mode:ya(Ae),padding_mode:ya(le),format:Ce?"NHWC":"NCHW"})},929974:(G,V,Ae,le,Ce,je,IA,BA,it)=>{Q.kb("Attention",G,{numHeads:V,isUnidirectional:Ae,maskFilterValue:le,scale:Ce,doRotary:je,qkvHiddenSizes:IA?Array.from(B().subarray(Number(BA)>>>0,Number(BA)+IA>>>0)):[],pastPresentShareBuffer:!!it})},930246:G=>{Q.kb("BiasAdd",G,void 0)},930301:G=>{Q.kb("BiasSplitGelu",G,void 0)},930362:G=>{Q.kb("FastGelu",G,void 0)},930418:(G,V,Ae,le,Ce,je,IA,BA,it,nt,Et,nr,wr,hA,lr,Ia)=>{Q.kb("Conv",G,{format:nr?"NHWC":"NCHW",auto_pad:V,dilations:Ae?Array.from(B().subarray(Number(Ae)>>>0,Number(le)>>>0)):[],group:Ce,kernel_shape:je?Array.from(B().subarray(Number(je)>>>0,Number(IA)>>>0)):[],pads:BA?Array.from(B().subarray(Number(BA)>>>0,Number(it)>>>0)):[],strides:nt?Array.from(B().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],w_is_const:()=>!!u()[Number(wr)>>>0],activation:ya(hA),activation_params:lr?Array.from(S().subarray(Number(lr)>>>0,Number(Ia)>>>0)):[]})},931002:G=>{Q.kb("Gelu",G,void 0)},931054:(G,V,Ae,le,Ce,je,IA,BA,it)=>{Q.kb("GroupQueryAttention",G,{numHeads:V,kvNumHeads:Ae,scale:le,softcap:Ce,doRotary:je,rotaryInterleaved:IA,smoothSoftmax:BA,localWindowSize:it})},931271:(G,V,Ae,le)=>{Q.kb("LayerNormalization",G,{axis:V,epsilon:Ae,simplified:!!le})},931382:(G,V,Ae,le)=>{Q.kb("LayerNormalization",G,{axis:V,epsilon:Ae,simplified:!!le})},931493:(G,V,Ae,le,Ce,je)=>{Q.kb("MatMulNBits",G,{k:V,n:Ae,accuracyLevel:le,bits:Ce,blockSize:je})},931620:(G,V,Ae,le,Ce,je)=>{Q.kb("MultiHeadAttention",G,{numHeads:V,isUnidirectional:Ae,maskFilterValue:le,scale:Ce,doRotary:je})},931779:(G,V)=>{Q.kb("QuickGelu",G,{alpha:V})},931843:(G,V,Ae,le,Ce)=>{Q.kb("RotaryEmbedding",G,{interleaved:!!V,numHeads:Ae,rotaryEmbeddingDim:le,scale:Ce})},931982:(G,V,Ae)=>{Q.kb("SkipLayerNormalization",G,{epsilon:V,simplified:!!Ae})},932084:(G,V,Ae)=>{Q.kb("SkipLayerNormalization",G,{epsilon:V,simplified:!!Ae})},932186:(G,V,Ae,le)=>{Q.kb("GatherBlockQuantized",G,{gatherAxis:V,quantizeAxis:Ae,blockSize:le})},932307:G=>{Q.$b(G)},932341:(G,V)=>Q.cc(Number(G),Number(V),Q.Gb.hc,Q.Gb.errors)};function Lf(G,V,Ae){return hu(async()=>{await Q.Yb(Number(G),Number(V),Number(Ae))})}function Yf(){return typeof wasmOffsetConverter<"u"}function Sc(G){this.name="ExitStatus",this.message=`Program terminated with exit(${G})`,this.status=G}var Fc=G=>{G.terminate(),G.onmessage=()=>{}},Ng=G=>{R0.length==0&&(Vg(),Rg(R0[0]));var V=R0.pop();if(!V)return 6;oo.push(V),gn[G.Bb]=V,V.Bb=G.Bb;var Ae={cmd:"run",start_routine:G.ic,arg:G.Rb,pthread_ptr:G.Bb};return V.postMessage(Ae,G.nc),0},no=0,ua=(G,V,...Ae)=>{for(var le=2*Ae.length,Ce=eg(),je=$c(8*le),IA=je>>>3,BA=0;BA<Ae.length;BA++){var it=Ae[BA];typeof it=="bigint"?(Oa[IA+2*BA]=1n,Oa[IA+2*BA+1]=it):(Oa[IA+2*BA]=0n,O()[IA+2*BA+1>>>0]=it)}return G=Yu(G,0,le,je,V),sc(Ce),G};function Nc(G){if(fe)return ua(0,1,G);if(UA=G,!(0<no)){for(var V of oo)Fc(V);for(V of R0)Fc(V);R0=[],oo=[],gn=[],Fr=!0}_e(0,new Sc(G))}function Og(G){if(fe)return ua(1,0,G);Oc(G)}var Oc=G=>{if(UA=G,fe)throw Og(G),"unwind";Nc(G)},R0=[],oo=[],Lg=[],gn={},Yg=G=>{var V=G.Bb;delete gn[V],R0.push(G),oo.splice(oo.indexOf(G),1),G.Bb=0,_c(V)};function Hg(){Lg.forEach(G=>G())}var Rg=G=>new Promise(V=>{G.onmessage=Ce=>{var je=(Ce=Ce.data).cmd;if(Ce.targetThread&&Ce.targetThread!=r2()){var IA=gn[Ce.targetThread];IA?IA.postMessage(Ce,Ce.transferList):mt(`Internal error! Worker sent a message "${je}" to target pthread ${Ce.targetThread}, but that thread no longer exists!`)}else je==="checkMailbox"?Z1():je==="spawnThread"?Ng(Ce):je==="cleanupThread"?Yg(gn[Ce.thread]):je==="killThread"?(Ce=Ce.thread,je=gn[Ce],delete gn[Ce],Fc(je),_c(Ce),oo.splice(oo.indexOf(je),1),je.Bb=0):je==="cancelThread"?gn[Ce.thread].postMessage({cmd:"cancel"}):je==="loaded"?(G.loaded=!0,V(G)):je==="alert"?alert(`Thread ${Ce.threadId}: ${Ce.text}`):Ce.target==="setimmediate"?G.postMessage(Ce):je==="callHandler"?Q[Ce.handler](...Ce.args):je&&mt(`worker sent an unknown command ${je}`)},G.onerror=Ce=>{throw mt(`worker sent an error! ${Ce.filename}:${Ce.lineno}: ${Ce.message}`),Ce};var Ae,le=[];for(Ae of[])Q.hasOwnProperty(Ae)&&le.push(Ae);G.postMessage({cmd:"load",handlers:le,wasmMemory:lt,wasmModule:wA})});function Vg(){var G=new Worker(import.meta.url.startsWith("file:")?new URL(d("./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs?46eb"),d.b):new URL(import.meta.url),{type:"module",workerData:"em-pthread",name:"em-pthread"});R0.push(G)}var K1=G=>{for(;0<G.length;)G.shift()(Q)},Hf=()=>{var G=r2(),V=y()[G+52>>>2>>>0];G=y()[G+56>>>2>>>0],Ru(V,V-G),sc(V)},Rf=(G,V)=>{no=0,G=Vu(G,V),0<no?UA=G:ac(G)};class Vf{constructor(V){this.Kb=V-24}}function Wf(G,V,Ae){var le=new Vf(G>>>=0);throw V>>>=0,Ae>>>=0,y()[le.Kb+16>>>2>>>0]=0,y()[le.Kb+4>>>2>>>0]=V,y()[le.Kb+8>>>2>>>0]=Ae,G}function Wg(G,V,Ae,le){return fe?ua(2,1,G,V,Ae,le):jg(G,V,Ae,le)}function jg(G,V,Ae,le){if(G>>>=0,V>>>=0,Ae>>>=0,le>>>=0,ke===void 0)return mt("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var Ce=[];return fe&&Ce.length===0?Wg(G,V,Ae,le):(G={ic:Ae,Bb:G,Rb:le,nc:Ce},fe?(G.Nb="spawnThread",postMessage(G,Ce),0):Ng(G))}var Ug=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Kg=(G,V,Ae)=>{var le=(V>>>=0)+Ae;for(Ae=V;G[Ae]&&!(Ae>=le);)++Ae;if(16<Ae-V&&G.buffer&&Ug)return Ug.decode(G.buffer instanceof ke?G.slice(V,Ae):G.subarray(V,Ae));for(le="";V<Ae;){var Ce=G[V++];if(128&Ce){var je=63&G[V++];if((224&Ce)==192)le+=String.fromCharCode((31&Ce)<<6|je);else{var IA=63&G[V++];65536>(Ce=(240&Ce)==224?(15&Ce)<<12|je<<6|IA:(7&Ce)<<18|je<<12|IA<<6|63&G[V++])?le+=String.fromCharCode(Ce):(Ce-=65536,le+=String.fromCharCode(55296|Ce>>10,56320|1023&Ce))}}else le+=String.fromCharCode(Ce)}return le},ya=(G,V)=>(G>>>=0)?Kg(h(),G,V):"";function Zg(G,V,Ae){return fe?ua(3,1,G,V,Ae):0}function Xg(G,V){if(fe)return ua(4,1,G,V)}var Lc=G=>{for(var V=0,Ae=0;Ae<G.length;++Ae){var le=G.charCodeAt(Ae);127>=le?V++:2047>=le?V+=2:55296<=le&&57343>=le?(V+=4,++Ae):V+=3}return V},qg=(G,V,Ae,le)=>{if(!(0<le))return 0;var Ce=Ae>>>=0;le=Ae+le-1;for(var je=0;je<G.length;++je){var IA=G.charCodeAt(je);if(55296<=IA&&57343>=IA&&(IA=65536+((1023&IA)<<10)|1023&G.charCodeAt(++je)),127>=IA){if(Ae>=le)break;V[Ae++>>>0]=IA}else{if(2047>=IA){if(Ae+1>=le)break;V[Ae++>>>0]=192|IA>>6}else{if(65535>=IA){if(Ae+2>=le)break;V[Ae++>>>0]=224|IA>>12}else{if(Ae+3>=le)break;V[Ae++>>>0]=240|IA>>18,V[Ae++>>>0]=128|IA>>12&63}V[Ae++>>>0]=128|IA>>6&63}V[Ae++>>>0]=128|63&IA}}return V[Ae>>>0]=0,Ae-Ce},A2=(G,V,Ae)=>qg(G,h(),V,Ae);function Jg(G,V){if(fe)return ua(5,1,G,V)}function _g(G,V,Ae){if(fe)return ua(6,1,G,V,Ae)}function $g(G,V,Ae){return fe?ua(7,1,G,V,Ae):0}function eu(G,V){if(fe)return ua(8,1,G,V)}function Au(G,V,Ae){if(fe)return ua(9,1,G,V,Ae)}function tu(G,V,Ae,le){if(fe)return ua(10,1,G,V,Ae,le)}function ru(G,V,Ae,le){if(fe)return ua(11,1,G,V,Ae,le)}function au(G,V,Ae,le){if(fe)return ua(12,1,G,V,Ae,le)}function su(G){if(fe)return ua(13,1,G)}function iu(G,V){if(fe)return ua(14,1,G,V)}function nu(G,V,Ae){if(fe)return ua(15,1,G,V,Ae)}var ou,V0,jf=()=>{H0("")},un=G=>{for(var V="";h()[G>>>0];)V+=ou[h()[G++>>>0]];return V},Yc={},Hc={};function t0(G,V,Ae={}){if(!("argPackAdvance"in V))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(le,Ce,je={}){var IA=Ce.name;if(!le)throw new V0(`type "${IA}" must have a positive integer typeid pointer`);if(Hc.hasOwnProperty(le)){if(je.Tb)return;throw new V0(`Cannot register type '${IA}' twice`)}Hc[le]=Ce,Yc.hasOwnProperty(le)&&(Ce=Yc[le],delete Yc[le],Ce.forEach(BA=>BA()))}(G,V,Ae)}var lu=(G,V,Ae)=>{switch(V){case 1:return Ae?le=>u()[le>>>0]:le=>h()[le>>>0];case 2:return Ae?le=>x()[le>>>1>>>0]:le=>v()[le>>>1>>>0];case 4:return Ae?le=>B()[le>>>2>>>0]:le=>y()[le>>>2>>>0];case 8:return Ae?le=>Oa[le>>>3]:le=>cn[le>>>3];default:throw new TypeError(`invalid integer width (${V}): ${G}`)}};function Uf(G,V,Ae){Ae>>>=0,t0(G>>>=0,{name:V=un(V>>>0),fromWireType:le=>le,toWireType:function(le,Ce){if(typeof Ce!="bigint"&&typeof Ce!="number")throw Ce=Ce===null?"null":(le=typeof Ce)=="object"||le==="array"||le==="function"?Ce.toString():""+Ce,new TypeError(`Cannot convert "${Ce}" to ${this.name}`);return typeof Ce=="number"&&(Ce=BigInt(Ce)),Ce},argPackAdvance:W0,readValueFromPointer:lu(V,Ae,V.indexOf("u")==-1),Eb:null})}var W0=8;function Kf(G,V,Ae,le){t0(G>>>=0,{name:V=un(V>>>0),fromWireType:function(Ce){return!!Ce},toWireType:function(Ce,je){return je?Ae:le},argPackAdvance:W0,readValueFromPointer:function(Ce){return this.fromWireType(h()[Ce>>>0])},Eb:null})}var Rc=[],r0=[];function Vc(G){9<(G>>>=0)&&--r0[G+1]==0&&(r0[G]=void 0,Rc.push(G))}var _s=G=>{if(!G)throw new V0("Cannot use deleted val. handle = "+G);return r0[G]},hi=G=>{switch(G){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let V=Rc.pop()||r0.length;return r0[V]=G,r0[V+1]=1,V}};function Wc(G){return this.fromWireType(y()[G>>>2>>>0])}var Zf={name:"emscripten::val",fromWireType:G=>{var V=_s(G);return Vc(G),V},toWireType:(G,V)=>hi(V),argPackAdvance:W0,readValueFromPointer:Wc,Eb:null};function Xf(G){return t0(G>>>0,Zf)}var qf=(G,V)=>{switch(V){case 4:return function(Ae){return this.fromWireType(S()[Ae>>>2>>>0])};case 8:return function(Ae){return this.fromWireType(O()[Ae>>>3>>>0])};default:throw new TypeError(`invalid float width (${V}): ${G}`)}};function Jf(G,V,Ae){Ae>>>=0,t0(G>>>=0,{name:V=un(V>>>0),fromWireType:le=>le,toWireType:(le,Ce)=>Ce,argPackAdvance:W0,readValueFromPointer:qf(V,Ae),Eb:null})}function _f(G,V,Ae,le,Ce){if(G>>>=0,Ae>>>=0,V=un(V>>>0),Ce===-1&&(Ce=4294967295),Ce=BA=>BA,le===0){var je=32-8*Ae;Ce=BA=>BA<<je>>>je}var IA=V.includes("unsigned")?function(BA,it){return it>>>0}:function(BA,it){return it};t0(G,{name:V,fromWireType:Ce,toWireType:IA,argPackAdvance:W0,readValueFromPointer:lu(V,Ae,le!==0),Eb:null})}function $f(G,V,Ae){function le(je){var IA=y()[je>>>2>>>0];return je=y()[je+4>>>2>>>0],new Ce(u().buffer,je,IA)}var Ce=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][V];t0(G>>>=0,{name:Ae=un(Ae>>>0),fromWireType:le,argPackAdvance:W0,readValueFromPointer:le},{Tb:!0})}function ep(G,V){G>>>=0;var Ae=(V=un(V>>>0))==="std::string";t0(G,{name:V,fromWireType:function(le){var Ce=y()[le>>>2>>>0],je=le+4;if(Ae)for(var IA=je,BA=0;BA<=Ce;++BA){var it=je+BA;if(BA==Ce||h()[it>>>0]==0){if(IA=ya(IA,it-IA),nt===void 0)var nt=IA;else nt+="\0",nt+=IA;IA=it+1}}else{for(nt=Array(Ce),BA=0;BA<Ce;++BA)nt[BA]=String.fromCharCode(h()[je+BA>>>0]);nt=nt.join("")}return fn(le),nt},toWireType:function(le,Ce){Ce instanceof ArrayBuffer&&(Ce=new Uint8Array(Ce));var je=typeof Ce=="string";if(!(je||Ce instanceof Uint8Array||Ce instanceof Uint8ClampedArray||Ce instanceof Int8Array))throw new V0("Cannot pass non-string to std::string");var IA=Ae&&je?Lc(Ce):Ce.length,BA=rc(4+IA+1),it=BA+4;if(y()[BA>>>2>>>0]=IA,Ae&&je)A2(Ce,it,IA+1);else if(je)for(je=0;je<IA;++je){var nt=Ce.charCodeAt(je);if(255<nt)throw fn(it),new V0("String has UTF-16 code units that do not fit in 8 bits");h()[it+je>>>0]=nt}else for(je=0;je<IA;++je)h()[it+je>>>0]=Ce[je];return le!==null&&le.push(fn,BA),BA},argPackAdvance:W0,readValueFromPointer:Wc,Eb(le){fn(le)}})}var cu=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Ap=(G,V)=>{for(var Ae=G>>1,le=Ae+V/2;!(Ae>=le)&&v()[Ae>>>0];)++Ae;if(32<(Ae<<=1)-G&&cu)return cu.decode(h().slice(G,Ae));for(Ae="",le=0;!(le>=V/2);++le){var Ce=x()[G+2*le>>>1>>>0];if(Ce==0)break;Ae+=String.fromCharCode(Ce)}return Ae},tp=(G,V,Ae)=>{if(Ae??=2147483647,2>Ae)return 0;var le=V;Ae=(Ae-=2)<2*G.length?Ae/2:G.length;for(var Ce=0;Ce<Ae;++Ce){var je=G.charCodeAt(Ce);x()[V>>>1>>>0]=je,V+=2}return x()[V>>>1>>>0]=0,V-le},rp=G=>2*G.length,ap=(G,V)=>{for(var Ae=0,le="";!(Ae>=V/4);){var Ce=B()[G+4*Ae>>>2>>>0];if(Ce==0)break;++Ae,65536<=Ce?(Ce-=65536,le+=String.fromCharCode(55296|Ce>>10,56320|1023&Ce)):le+=String.fromCharCode(Ce)}return le},sp=(G,V,Ae)=>{if(V>>>=0,Ae??=2147483647,4>Ae)return 0;var le=V;Ae=le+Ae-4;for(var Ce=0;Ce<G.length;++Ce){var je=G.charCodeAt(Ce);if(55296<=je&&57343>=je&&(je=65536+((1023&je)<<10)|1023&G.charCodeAt(++Ce)),B()[V>>>2>>>0]=je,(V+=4)+4>Ae)break}return B()[V>>>2>>>0]=0,V-le},ip=G=>{for(var V=0,Ae=0;Ae<G.length;++Ae){var le=G.charCodeAt(Ae);55296<=le&&57343>=le&&++Ae,V+=4}return V};function np(G,V,Ae){if(G>>>=0,V>>>=0,Ae=un(Ae>>>=0),V===2)var le=Ap,Ce=tp,je=rp,IA=BA=>v()[BA>>>1>>>0];else V===4&&(le=ap,Ce=sp,je=ip,IA=BA=>y()[BA>>>2>>>0]);t0(G,{name:Ae,fromWireType:BA=>{for(var it,nt=y()[BA>>>2>>>0],Et=BA+4,nr=0;nr<=nt;++nr){var wr=BA+4+nr*V;nr!=nt&&IA(wr)!=0||(Et=le(Et,wr-Et),it===void 0?it=Et:(it+="\0",it+=Et),Et=wr+V)}return fn(BA),it},toWireType:(BA,it)=>{if(typeof it!="string")throw new V0(`Cannot pass non-string to C++ string type ${Ae}`);var nt=je(it),Et=rc(4+nt+V);return y()[Et>>>2>>>0]=nt/V,Ce(it,Et+4,nt+V),BA!==null&&BA.push(fn,Et),Et},argPackAdvance:W0,readValueFromPointer:Wc,Eb(BA){fn(BA)}})}function op(G,V){t0(G>>>=0,{Ub:!0,name:V=un(V>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})}var lp=()=>1;function cp(G){Jc(G>>>0,!de,1,!oe,131072,!1),Hg()}var gu=G=>{if(!Fr)try{if(G(),!(0<no))try{fe?ac(UA):Oc(UA)}catch(V){V instanceof Sc||V=="unwind"||_e(0,V)}}catch(V){V instanceof Sc||V=="unwind"||_e(0,V)}};function jc(G){G>>>=0,typeof Atomics.oc=="function"&&(Atomics.oc(B(),G>>>2,G).value.then(Z1),G+=128,Atomics.store(B(),G>>>2,1))}var Z1=()=>{var G=r2();G&&(jc(G),gu(Hu))};function gp(G,V){(G>>>=0)==V>>>0?setTimeout(Z1):fe?postMessage({targetThread:G,cmd:"checkMailbox"}):(G=gn[G])&&G.postMessage({cmd:"checkMailbox"})}var Uc=[];function up(G,V,Ae,le,Ce){for(V>>>=0,le/=2,Uc.length=le,Ae=Ce>>>0>>>3,Ce=0;Ce<le;Ce++)Uc[Ce]=Oa[Ae+2*Ce]?Oa[Ae+2*Ce+1]:O()[Ae+2*Ce+1>>>0];return(V?zc[V]:th[G])(...Uc)}function dp(G){G>>>=0,fe?postMessage({cmd:"cleanupThread",thread:G}):Yg(gn[G])}function fp(G){}var X1=(G,V)=>{var Ae=Hc[G];if(Ae===void 0)throw G=Nu(G),Ae=un(G),fn(G),new V0(`${V} has unknown type ${Ae}`);return Ae},uu=(G,V,Ae)=>{var le=[];return G=G.toWireType(le,Ae),le.length&&(y()[V>>>2>>>0]=hi(le)),G};function pp(G,V,Ae){return V>>>=0,Ae>>>=0,G=_s(G>>>0),V=X1(V,"emval::as"),uu(V,Ae,G)}function hp(G,V){return V>>>=0,G=_s(G>>>0),(V=X1(V,"emval::as")).toWireType(null,G)}var q1=G=>{try{G()}catch(V){H0(V)}},j0=0,dn=null,du=0,J1=[],fu={},pu={},mp=0,Kc=null,Cp=[];function hu(G){return function(){if(!Fr){if(j0===0){var V=!1,Ae=!1;(le=>{G().then(le)})((le=0)=>{if(!Fr&&(du=le,V=!0,Ae)){j0=2,q1(()=>Uu(dn)),typeof Browser<"u"&&Browser.Lb.Sb&&Browser.Lb.resume(),le=!1;try{var Ce=function(){var BA=B()[dn+8>>>2>>>0];return BA=kt[pu[BA]],--no,BA()}()}catch(BA){Ce=BA,le=!0}var je=!1;if(!dn){var IA=Kc;IA&&(Kc=null,(le?IA.reject:IA.resolve)(Ce),je=!0)}if(le&&!je)throw Ce}}),Ae=!0,V||(j0=1,dn=function(){var le=rc(65548),Ce=le+12;y()[le>>>2>>>0]=Ce,y()[le+4>>>2>>>0]=Ce+65536,Ce=J1[0];var je=fu[Ce];return je===void 0&&(je=mp++,fu[Ce]=je,pu[je]=Ce),Ce=je,B()[le+8>>>2>>>0]=Ce,le}(),typeof Browser<"u"&&Browser.Lb.Sb&&Browser.Lb.pause(),q1(()=>Wu(dn)))}else j0===2?(j0=0,q1(Ku),fn(dn),dn=null,Cp.forEach(gu)):H0(`invalid state: ${j0}`);return du}}()}function bp(G){return G>>>=0,hu(()=>(G=_s(G)).then(hi))}var _1=[];function Ip(G,V,Ae,le){return Ae>>>=0,le>>>=0,(G=_1[G>>>0])(null,V=_s(V>>>0),Ae,le)}var wp={},$1=G=>{var V=wp[G];return V===void 0?un(G):V};function kp(G,V,Ae,le,Ce){return Ae>>>=0,le>>>=0,Ce>>>=0,(G=_1[G>>>0])(V=_s(V>>>0),V[Ae=$1(Ae)],le,Ce)}var mu=()=>typeof globalThis=="object"?globalThis:Function("return this")();function xp(G){return(G>>>=0)==0?hi(mu()):(G=$1(G),hi(mu()[G]))}var vp=G=>{var V=_1.length;return _1.push(G),V},Bp=(G,V)=>{for(var Ae=Array(G),le=0;le<G;++le)Ae[le]=X1(y()[V+4*le>>>2>>>0],"parameter "+le);return Ae},Cu=(G,V)=>Object.defineProperty(V,"name",{value:G});function yp(G,V,Ae){var le=(V=Bp(G,V>>>0)).shift();G--;var Ce=`return function (obj, func, destructorsRef, args) {
`,je=0,IA=[];Ae===0&&IA.push("obj");for(var BA=["retType"],it=[le],nt=0;nt<G;++nt)IA.push("arg"+nt),BA.push("argType"+nt),it.push(V[nt]),Ce+=`  var arg${nt} = argType${nt}.readValueFromPointer(args${je?"+"+je:""});
`,je+=V[nt].argPackAdvance;return Ce+=`  var rv = ${Ae===1?"new func":"func.call"}(${IA.join(", ")});
`,le.Ub||(BA.push("emval_returnValue"),it.push(uu),Ce+=`  return emval_returnValue(retType, destructorsRef, rv);
`),BA.push(Ce+`};
`),G=function(Et){var nr=Function;if(!(nr instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof nr} which is not a function`);var wr=Cu(nr.name||"unknownFunctionName",function(){});return wr.prototype=nr.prototype,wr=new wr,(Et=nr.apply(wr,Et))instanceof Object?Et:wr}(BA)(...it),Ae=`methodCaller<(${V.map(Et=>Et.name).join(", ")}) => ${le.name}>`,vp(Cu(Ae,G))}function Ep(G){return G=$1(G>>>0),hi(Q[G])}function Mp(G,V){return V>>>=0,G=_s(G>>>0),V=_s(V),hi(G[V])}function Gp(G){9<(G>>>=0)&&(r0[G+1]+=1)}function Dp(){return hi([])}function Qp(G){G=_s(G>>>0);for(var V=Array(G.length),Ae=0;Ae<G.length;Ae++)V[Ae]=G[Ae];return hi(V)}function Tp(G){return hi($1(G>>>0))}function Pp(){return hi({})}function zp(G){for(var V=_s(G>>>=0);V.length;){var Ae=V.pop();V.pop()(Ae)}Vc(G)}function Sp(G,V,Ae){V>>>=0,Ae>>>=0,G=_s(G>>>0),V=_s(V),Ae=_s(Ae),G[V]=Ae}function Fp(G,V){return V>>>=0,G=(G=X1(G>>>0,"_emval_take_value")).readValueFromPointer(V),hi(G)}function Np(G,V){G=-9007199254740992>G||9007199254740992<G?NaN:Number(G),V>>>=0,G=new Date(1e3*G),B()[V>>>2>>>0]=G.getUTCSeconds(),B()[V+4>>>2>>>0]=G.getUTCMinutes(),B()[V+8>>>2>>>0]=G.getUTCHours(),B()[V+12>>>2>>>0]=G.getUTCDate(),B()[V+16>>>2>>>0]=G.getUTCMonth(),B()[V+20>>>2>>>0]=G.getUTCFullYear()-1900,B()[V+24>>>2>>>0]=G.getUTCDay(),G=(G.getTime()-Date.UTC(G.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,B()[V+28>>>2>>>0]=G}var t2=G=>G%4==0&&(G%100!=0||G%400==0),bu=[0,31,60,91,121,152,182,213,244,274,305,335],Iu=[0,31,59,90,120,151,181,212,243,273,304,334];function Op(G,V){G=-9007199254740992>G||9007199254740992<G?NaN:Number(G),V>>>=0,G=new Date(1e3*G),B()[V>>>2>>>0]=G.getSeconds(),B()[V+4>>>2>>>0]=G.getMinutes(),B()[V+8>>>2>>>0]=G.getHours(),B()[V+12>>>2>>>0]=G.getDate(),B()[V+16>>>2>>>0]=G.getMonth(),B()[V+20>>>2>>>0]=G.getFullYear()-1900,B()[V+24>>>2>>>0]=G.getDay();var Ae=(t2(G.getFullYear())?bu:Iu)[G.getMonth()]+G.getDate()-1|0;B()[V+28>>>2>>>0]=Ae,B()[V+36>>>2>>>0]=-60*G.getTimezoneOffset(),Ae=new Date(G.getFullYear(),6,1).getTimezoneOffset();var le=new Date(G.getFullYear(),0,1).getTimezoneOffset();G=0|(Ae!=le&&G.getTimezoneOffset()==Math.min(le,Ae)),B()[V+32>>>2>>>0]=G}function Lp(G){G>>>=0;var V=new Date(B()[G+20>>>2>>>0]+1900,B()[G+16>>>2>>>0],B()[G+12>>>2>>>0],B()[G+8>>>2>>>0],B()[G+4>>>2>>>0],B()[G>>>2>>>0],0),Ae=B()[G+32>>>2>>>0],le=V.getTimezoneOffset(),Ce=new Date(V.getFullYear(),6,1).getTimezoneOffset(),je=new Date(V.getFullYear(),0,1).getTimezoneOffset(),IA=Math.min(je,Ce);return 0>Ae?B()[G+32>>>2>>>0]=+(Ce!=je&&IA==le):0<Ae!=(IA==le)&&(Ce=Math.max(je,Ce),V.setTime(V.getTime()+6e4*((0<Ae?IA:Ce)-le))),B()[G+24>>>2>>>0]=V.getDay(),Ae=(t2(V.getFullYear())?bu:Iu)[V.getMonth()]+V.getDate()-1|0,B()[G+28>>>2>>>0]=Ae,B()[G>>>2>>>0]=V.getSeconds(),B()[G+4>>>2>>>0]=V.getMinutes(),B()[G+8>>>2>>>0]=V.getHours(),B()[G+12>>>2>>>0]=V.getDate(),B()[G+16>>>2>>>0]=V.getMonth(),B()[G+20>>>2>>>0]=V.getYear(),G=V.getTime(),BigInt(isNaN(G)?-1:G/1e3)}function wu(G,V,Ae,le,Ce,je,IA){return fe?ua(16,1,G,V,Ae,le,Ce,je,IA):-52}function ku(G,V,Ae,le,Ce,je){if(fe)return ua(17,1,G,V,Ae,le,Ce,je)}function Yp(G,V,Ae,le){G>>>=0,V>>>=0,Ae>>>=0,le>>>=0;var Ce=new Date().getFullYear(),je=new Date(Ce,0,1),IA=new Date(Ce,6,1);Ce=je.getTimezoneOffset();var BA=IA.getTimezoneOffset(),it=Math.max(Ce,BA);y()[G>>>2>>>0]=60*it,B()[V>>>2>>>0]=+(Ce!=BA),je=(G=nt=>nt.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:"short"}).split(" ")[1])(je),IA=G(IA),BA<Ce?(A2(je,Ae,17),A2(IA,le,17)):(A2(je,le,17),A2(IA,Ae,17))}var Zc=[],xu=(G,V)=>{Zc.length=0;for(var Ae;Ae=h()[G++>>>0];){var le=Ae!=105;V+=(le&=Ae!=112)&&V%8?4:0,Zc.push(Ae==112?y()[V>>>2>>>0]:Ae==106?Oa[V>>>3]:Ae==105?B()[V>>>2>>>0]:O()[V>>>3>>>0]),V+=le?8:4}return Zc};function Hp(G,V,Ae){return G>>>=0,V=xu(V>>>0,Ae>>>0),zc[G](...V)}function Rp(G,V,Ae){return G>>>=0,V=xu(V>>>0,Ae>>>0),zc[G](...V)}var Vp=()=>{},Wp=()=>Date.now();function jp(G,V){return mt(ya(G>>>0,V>>>0))}var vu,Up=()=>{throw no+=1,"unwind"};function Kp(){return 4294901760}vu=()=>performance.timeOrigin+performance.now();var Zp=()=>navigator.hardwareConcurrency;function Xp(){return H0("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function qp(G){G>>>=0;var V=h().length;if(G<=V||4294901760<G)return!1;for(var Ae=1;4>=Ae;Ae*=2){var le=V*(1+.2/Ae);le=Math.min(le,G+100663296);var Ce=Math;le=Math.max(G,le);e:{Ce=(Ce.min.call(Ce,4294901760,le+(65536-le%65536)%65536)-lt.buffer.byteLength+65535)/65536;try{lt.grow(Ce),ga();var je=1;break e}catch{}je=void 0}if(je)return!0}return!1}var ec=()=>(H0("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),x1={},Bu=G=>{G.forEach(V=>{ec()})};function Jp(){var G=Error().stack.toString().split(`
`);return G[0]=="Error"&&G.shift(),Bu(G),x1.Qb=ec(),x1.fc=G,x1.Qb}function _p(G,V,Ae){if(G>>>=0,V>>>=0,x1.Qb==G)var le=x1.fc;else(le=Error().stack.toString().split(`
`))[0]=="Error"&&le.shift(),Bu(le);for(var Ce=3;le[Ce]&&ec()!=G;)++Ce;for(G=0;G<Ae&&le[G+Ce];++G)B()[V+4*G>>>2>>>0]=ec();return G}var Xc,qc={},yu=()=>{if(!Xc){var G,V={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:"./this.program"};for(G in qc)qc[G]===void 0?delete V[G]:V[G]=qc[G];var Ae=[];for(G in V)Ae.push(`${G}=${V[G]}`);Xc=Ae}return Xc};function Eu(G,V){if(fe)return ua(18,1,G,V);G>>>=0,V>>>=0;var Ae=0;return yu().forEach((le,Ce)=>{var je=V+Ae;for(Ce=y()[G+4*Ce>>>2>>>0]=je,je=0;je<le.length;++je)u()[Ce++>>>0]=le.charCodeAt(je);u()[Ce>>>0]=0,Ae+=le.length+1}),0}function Mu(G,V){if(fe)return ua(19,1,G,V);G>>>=0,V>>>=0;var Ae=yu();y()[G>>>2>>>0]=Ae.length;var le=0;return Ae.forEach(Ce=>le+=Ce.length+1),y()[V>>>2>>>0]=le,0}function Gu(G){return fe?ua(20,1,G):52}function Du(G,V,Ae,le){return fe?ua(21,1,G,V,Ae,le):52}function Qu(G,V,Ae,le){return fe?ua(22,1,G,V,Ae,le):70}var $p=[null,[],[]];function Tu(G,V,Ae,le){if(fe)return ua(23,1,G,V,Ae,le);V>>>=0,Ae>>>=0,le>>>=0;for(var Ce=0,je=0;je<Ae;je++){var IA=y()[V>>>2>>>0],BA=y()[V+4>>>2>>>0];V+=8;for(var it=0;it<BA;it++){var nt=h()[IA+it>>>0],Et=$p[G];nt===0||nt===10?((G===1?pt:mt)(Kg(Et,0)),Et.length=0):Et.push(nt)}Ce+=BA}return y()[le>>>2>>>0]=Ce,0}var Pu=[31,29,31,30,31,30,31,31,30,31,30,31],zu=[31,28,31,30,31,30,31,31,30,31,30,31],eh=(G,V)=>{u().set(G,V>>>0)};function Su(G,V,Ae,le){function Ce(hA,lr,Ia){for(hA=typeof hA=="number"?hA.toString():hA||"";hA.length<lr;)hA=Ia[0]+hA;return hA}function je(hA,lr){return Ce(hA,lr,"0")}function IA(hA,lr){function Ia(Xu){return 0>Xu?-1:0<Xu?1:0}var lo;return(lo=Ia(hA.getFullYear()-lr.getFullYear()))===0&&(lo=Ia(hA.getMonth()-lr.getMonth()))===0&&(lo=Ia(hA.getDate()-lr.getDate())),lo}function BA(hA){switch(hA.getDay()){case 0:return new Date(hA.getFullYear()-1,11,29);case 1:return hA;case 2:return new Date(hA.getFullYear(),0,3);case 3:return new Date(hA.getFullYear(),0,2);case 4:return new Date(hA.getFullYear(),0,1);case 5:return new Date(hA.getFullYear()-1,11,31);case 6:return new Date(hA.getFullYear()-1,11,30)}}function it(hA){var lr=hA.Cb;for(hA=new Date(new Date(hA.Db+1900,0,1).getTime());0<lr;){var Ia=hA.getMonth(),lo=(t2(hA.getFullYear())?Pu:zu)[Ia];if(!(lr>lo-hA.getDate())){hA.setDate(hA.getDate()+lr);break}lr-=lo-hA.getDate()+1,hA.setDate(1),11>Ia?hA.setMonth(Ia+1):(hA.setMonth(0),hA.setFullYear(hA.getFullYear()+1))}return Ia=new Date(hA.getFullYear()+1,0,4),lr=BA(new Date(hA.getFullYear(),0,4)),Ia=BA(Ia),0>=IA(lr,hA)?0>=IA(Ia,hA)?hA.getFullYear()+1:hA.getFullYear():hA.getFullYear()-1}G>>>=0,V>>>=0,Ae>>>=0,le>>>=0;var nt=y()[le+40>>>2>>>0];for(var Et in le={lc:B()[le>>>2>>>0],kc:B()[le+4>>>2>>>0],Ib:B()[le+8>>>2>>>0],Mb:B()[le+12>>>2>>>0],Jb:B()[le+16>>>2>>>0],Db:B()[le+20>>>2>>>0],vb:B()[le+24>>>2>>>0],Cb:B()[le+28>>>2>>>0],sc:B()[le+32>>>2>>>0],jc:B()[le+36>>>2>>>0],mc:nt?ya(nt):""},Ae=ya(Ae),nt={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})Ae=Ae.replace(new RegExp(Et,"g"),nt[Et]);var nr="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),wr="January February March April May June July August September October November December".split(" ");for(Et in nt={"%a":hA=>nr[hA.vb].substring(0,3),"%A":hA=>nr[hA.vb],"%b":hA=>wr[hA.Jb].substring(0,3),"%B":hA=>wr[hA.Jb],"%C":hA=>je((hA.Db+1900)/100|0,2),"%d":hA=>je(hA.Mb,2),"%e":hA=>Ce(hA.Mb,2," "),"%g":hA=>it(hA).toString().substring(2),"%G":it,"%H":hA=>je(hA.Ib,2),"%I":hA=>((hA=hA.Ib)==0?hA=12:12<hA&&(hA-=12),je(hA,2)),"%j":hA=>{for(var lr=0,Ia=0;Ia<=hA.Jb-1;lr+=(t2(hA.Db+1900)?Pu:zu)[Ia++]);return je(hA.Mb+lr,3)},"%m":hA=>je(hA.Jb+1,2),"%M":hA=>je(hA.kc,2),"%n":()=>`
`,"%p":hA=>0<=hA.Ib&&12>hA.Ib?"AM":"PM","%S":hA=>je(hA.lc,2),"%t":()=>"	","%u":hA=>hA.vb||7,"%U":hA=>je(Math.floor((hA.Cb+7-hA.vb)/7),2),"%V":hA=>{var lr=Math.floor((hA.Cb+7-(hA.vb+6)%7)/7);if(2>=(hA.vb+371-hA.Cb-2)%7&&lr++,lr)lr==53&&((Ia=(hA.vb+371-hA.Cb)%7)==4||Ia==3&&t2(hA.Db)||(lr=1));else{lr=52;var Ia=(hA.vb+7-hA.Cb-1)%7;(Ia==4||Ia==5&&t2(hA.Db%400-1))&&lr++}return je(lr,2)},"%w":hA=>hA.vb,"%W":hA=>je(Math.floor((hA.Cb+7-(hA.vb+6)%7)/7),2),"%y":hA=>(hA.Db+1900).toString().substring(2),"%Y":hA=>hA.Db+1900,"%z":hA=>(0<=(hA=hA.jc)?"+":"-")+("0000"+((hA=Math.abs(hA)/60)/60*100+hA%60)).slice(-4),"%Z":hA=>hA.mc,"%%":()=>"%"},Ae=Ae.replace(/%%/g,"\0\0"),nt)Ae.includes(Et)&&(Ae=Ae.replace(new RegExp(Et,"g"),nt[Et](le)));return Et=function(hA){var lr=Array(Lc(hA)+1);return qg(hA,lr,0,lr.length),lr}(Ae=Ae.replace(/\0\0/g,"%")),Et.length>V?0:(eh(Et,G),Et.length-1)}function Ah(G,V,Ae,le){return Su(G>>>0,V>>>0,Ae>>>0,le>>>0)}fe||function(){for(var G=Q.numThreads-1;G--;)Vg();Y0.unshift(()=>{w1++,function(V){fe?V():Promise.all(R0.map(Rg)).then(V)}(()=>Qg())})}();for(var Fu=Array(256),Ac=0;256>Ac;++Ac)Fu[Ac]=String.fromCharCode(Ac);ou=Fu,V0=Q.BindingError=class extends Error{constructor(G){super(G),this.name="BindingError"}},Q.InternalError=class extends Error{constructor(G){super(G),this.name="InternalError"}},r0.push(0,1,void 0,1,null,1,!0,1,!1,1),Q.count_emval_handles=()=>r0.length/2-5-Rc.length;var th=[Nc,Og,Wg,Zg,Xg,Jg,_g,$g,eu,Au,tu,ru,au,su,iu,nu,wu,ku,Eu,Mu,Gu,Du,Qu,Tu],kt=function(){function G(Ae,le){return kt=Ae.exports,kt=function(){var Ce=kt,je={};for(let[IA,BA]of Object.entries(Ce))je[IA]=typeof BA=="function"?(...it)=>{J1.push(IA);try{return BA(...it)}finally{Fr||(J1.pop(),dn&&j0===1&&J1.length===0&&(j0=0,no+=1,q1(ju),typeof Fibers<"u"&&Fibers.tc()))}}:BA;return je}(),kt=function(){var Ce=kt,je=BA=>it=>BA(it)>>>0,IA=BA=>()=>BA()>>>0;return(Ce=Object.assign({},Ce)).Da=je(Ce.Da),Ce.gb=IA(Ce.gb),Ce.ib=je(Ce.ib),Ce.emscripten_main_runtime_thread_id=IA(Ce.emscripten_main_runtime_thread_id),Ce.tb=je(Ce.tb),Ce.ub=IA(Ce.ub),Ce}(),Lg.push(kt.jb),I1.unshift(kt.Ca),wA=le,Qg(),kt}var V=Fg();if(w1++,Q.instantiateWasm)try{return Q.instantiateWasm(V,G)}catch(Ae){mt(`Module.instantiateWasm callback failed with error: ${Ae}`),te(Ae)}return Pc||=Q.locateFile?Tg("ort-wasm-simd-threaded.jsep.wasm")?"ort-wasm-simd-threaded.jsep.wasm":Q.locateFile?Q.locateFile("ort-wasm-simd-threaded.jsep.wasm",lA):lA+"ort-wasm-simd-threaded.jsep.wasm":new URL(d("./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm"),d.b).href,function(Ae,le){var Ce=Pc;return LA||typeof WebAssembly.instantiateStreaming!="function"||Tg(Ce)||Pg(Ce)||typeof fetch!="function"?Sg(Ce,Ae,le):fetch(Ce,{credentials:"same-origin"}).then(je=>WebAssembly.instantiateStreaming(je,Ae).then(le,function(IA){return mt(`wasm streaming compile failed: ${IA}`),mt("falling back to ArrayBuffer instantiation"),Sg(Ce,Ae,le)}))}(V,function(Ae){G(Ae.instance,Ae.module)}).catch(te),{}}(),Nu=G=>(Nu=kt.Da)(G),Ou=()=>(Ou=kt.Ea)();Q._OrtInit=(G,V)=>(Q._OrtInit=kt.Fa)(G,V),Q._OrtGetLastError=(G,V)=>(Q._OrtGetLastError=kt.Ga)(G,V),Q._OrtCreateSessionOptions=(G,V,Ae,le,Ce,je,IA,BA,it,nt)=>(Q._OrtCreateSessionOptions=kt.Ha)(G,V,Ae,le,Ce,je,IA,BA,it,nt),Q._OrtAppendExecutionProvider=(G,V)=>(Q._OrtAppendExecutionProvider=kt.Ia)(G,V),Q._OrtAddFreeDimensionOverride=(G,V,Ae)=>(Q._OrtAddFreeDimensionOverride=kt.Ja)(G,V,Ae),Q._OrtAddSessionConfigEntry=(G,V,Ae)=>(Q._OrtAddSessionConfigEntry=kt.Ka)(G,V,Ae),Q._OrtReleaseSessionOptions=G=>(Q._OrtReleaseSessionOptions=kt.La)(G),Q._OrtCreateSession=(G,V,Ae)=>(Q._OrtCreateSession=kt.Ma)(G,V,Ae),Q._OrtReleaseSession=G=>(Q._OrtReleaseSession=kt.Na)(G),Q._OrtGetInputOutputCount=(G,V,Ae)=>(Q._OrtGetInputOutputCount=kt.Oa)(G,V,Ae),Q._OrtGetInputName=(G,V)=>(Q._OrtGetInputName=kt.Pa)(G,V),Q._OrtGetOutputName=(G,V)=>(Q._OrtGetOutputName=kt.Qa)(G,V),Q._OrtFree=G=>(Q._OrtFree=kt.Ra)(G),Q._OrtCreateTensor=(G,V,Ae,le,Ce,je)=>(Q._OrtCreateTensor=kt.Sa)(G,V,Ae,le,Ce,je),Q._OrtGetTensorData=(G,V,Ae,le,Ce)=>(Q._OrtGetTensorData=kt.Ta)(G,V,Ae,le,Ce),Q._OrtReleaseTensor=G=>(Q._OrtReleaseTensor=kt.Ua)(G),Q._OrtCreateRunOptions=(G,V,Ae,le)=>(Q._OrtCreateRunOptions=kt.Va)(G,V,Ae,le),Q._OrtAddRunConfigEntry=(G,V,Ae)=>(Q._OrtAddRunConfigEntry=kt.Wa)(G,V,Ae),Q._OrtReleaseRunOptions=G=>(Q._OrtReleaseRunOptions=kt.Xa)(G),Q._OrtCreateBinding=G=>(Q._OrtCreateBinding=kt.Ya)(G),Q._OrtBindInput=(G,V,Ae)=>(Q._OrtBindInput=kt.Za)(G,V,Ae),Q._OrtBindOutput=(G,V,Ae,le)=>(Q._OrtBindOutput=kt._a)(G,V,Ae,le),Q._OrtClearBoundOutputs=G=>(Q._OrtClearBoundOutputs=kt.$a)(G),Q._OrtReleaseBinding=G=>(Q._OrtReleaseBinding=kt.ab)(G),Q._OrtRunWithBinding=(G,V,Ae,le,Ce)=>(Q._OrtRunWithBinding=kt.bb)(G,V,Ae,le,Ce),Q._OrtRun=(G,V,Ae,le,Ce,je,IA,BA)=>(Q._OrtRun=kt.cb)(G,V,Ae,le,Ce,je,IA,BA),Q._OrtEndProfiling=G=>(Q._OrtEndProfiling=kt.db)(G),Q._JsepOutput=(G,V,Ae)=>(Q._JsepOutput=kt.eb)(G,V,Ae),Q._JsepGetNodeName=G=>(Q._JsepGetNodeName=kt.fb)(G);var tc,r2=()=>(r2=kt.gb)(),fn=Q._free=G=>(fn=Q._free=kt.hb)(G),rc=Q._malloc=G=>(rc=Q._malloc=kt.ib)(G),Jc=(G,V,Ae,le,Ce,je)=>(Jc=kt.lb)(G,V,Ae,le,Ce,je),Lu=()=>(Lu=kt.mb)(),Yu=(G,V,Ae,le,Ce)=>(Yu=kt.nb)(G,V,Ae,le,Ce),_c=G=>(_c=kt.ob)(G),ac=G=>(ac=kt.pb)(G),Hu=()=>(Hu=kt.qb)(),Ru=(G,V)=>(Ru=kt.rb)(G,V),sc=G=>(sc=kt.sb)(G),$c=G=>($c=kt.tb)(G),eg=()=>(eg=kt.ub)(),Vu=Q.dynCall_ii=(G,V)=>(Vu=Q.dynCall_ii=kt.wb)(G,V),Wu=G=>(Wu=kt.xb)(G),ju=()=>(ju=kt.yb)(),Uu=G=>(Uu=kt.zb)(G),Ku=()=>(Ku=kt.Ab)();function Zu(){0<w1||(fe?(H(Q),fe||K1(I1),startWorker(Q)):(K1(Y0),0<w1||tc||(tc=!0,Q.calledRun=!0,Fr||(fe||K1(I1),H(Q),fe||K1(Tc)))))}return Q.___start_em_js=932469,Q.___stop_em_js=932715,Q.stackSave=()=>eg(),Q.stackRestore=G=>sc(G),Q.stackAlloc=G=>$c(G),Q.setValue=function(G,V,Ae="i8"){switch(Ae.endsWith("*")&&(Ae="*"),Ae){case"i1":case"i8":u()[G>>>0]=V;break;case"i16":x()[G>>>1>>>0]=V;break;case"i32":B()[G>>>2>>>0]=V;break;case"i64":Oa[G>>>3]=BigInt(V);break;case"float":S()[G>>>2>>>0]=V;break;case"double":O()[G>>>3>>>0]=V;break;case"*":y()[G>>>2>>>0]=V;break;default:H0(`invalid type for setValue: ${Ae}`)}},Q.getValue=function(G,V="i8"){switch(V.endsWith("*")&&(V="*"),V){case"i1":case"i8":return u()[G>>>0];case"i16":return x()[G>>>1>>>0];case"i32":return B()[G>>>2>>>0];case"i64":return Oa[G>>>3];case"float":return S()[G>>>2>>>0];case"double":return O()[G>>>3>>>0];case"*":return y()[G>>>2>>>0];default:H0(`invalid type for getValue: ${V}`)}},Q.UTF8ToString=ya,Q.stringToUTF8=A2,Q.lengthBytesUTF8=Lc,k1=function G(){tc||Zu(),tc||(k1=G)},Zu(),Q.PTR_SIZE=4,ie},Qr=$t,globalThis.self?.name==="em-pthread"&&$t()}),Jo=Pe(()=>{oA(),tr=typeof location>"u"?void 0:location.origin,fa=import.meta.url?.startsWith("file:")?new URL(new URL(d("./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs?46eb"),d.b).href,tr).href:import.meta.url,bt=()=>{if(fa&&!fa.startsWith("blob:"))return fa.substring(0,fa.lastIndexOf("/")+1)},Za=(n,u)=>{try{let h=u??fa;return(h?new URL(n,h):new URL(n)).origin===tr}catch{return!1}},La=(n,u)=>{let h=u??fa;try{return(h?new URL(n,h):new URL(n)).href}catch{return}},wa=(n,u)=>`${u??"./"}${n}`,ZA=async n=>{let u=await(await fetch(n,{credentials:"same-origin"})).blob();return URL.createObjectURL(u)},$A=async n=>(await import(n)).default,PA=(Tt(),aA(vA)).default,qt=async()=>{if(!fa)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Za(fa))return[void 0,PA()];let n=await ZA(fa);return[n,PA(n)]},gs=(Y1(),aA(ut)).default,Xa=async(n,u,h)=>{if(!n&&!u&&gs&&fa&&Za(fa))return[void 0,gs];{let x="ort-wasm-simd-threaded.jsep.mjs",v=n??La(x,u),B=h&&v&&!Za(v,u),y=B?await ZA(v):v??wa(x,u);return[B?y:void 0,await $A(y)]}}}),rn=Pe(()=>{Jo(),ks=!1,xs=!1,Fs=!1,ea=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},xt=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Ma=async n=>{if(ks)return Promise.resolve();if(xs)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Fs)throw new Error("previous call to 'initializeWebAssembly()' failed.");xs=!0;let u=n.initTimeout,h=n.numThreads;if(!xt())throw new Error("WebAssembly SIMD is not supported in the current environment.");let x=ea();h>1&&!x&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+h+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),n.numThreads=h=1);let v=n.wasmPaths,B=typeof v=="string"?v:void 0,y=v?.mjs,S=y?.href??y,O=v?.wasm,H=O?.href??O,te=n.wasmBinary,[Q,ie]=await Xa(S,B,h>1),oe=!1,de=[];if(u>0&&de.push(new Promise(fe=>{setTimeout(()=>{oe=!0,fe()},u)})),de.push(new Promise((fe,ke)=>{let Me={numThreads:h};if(te)Me.wasmBinary=te;else if(H||B)Me.locateFile=De=>H??B+De;else if(S&&S.indexOf("blob:")!==0)Me.locateFile=De=>new URL(De,S).href;else if(Q){let De=bt();De&&(Me.locateFile=Le=>De+Le)}ie(Me).then(De=>{xs=!1,ks=!0,Ss=De,fe(),Q&&URL.revokeObjectURL(Q)},De=>{xs=!1,Fs=!0,ke(De)})})),await Promise.race(de),oe)throw new Error(`WebAssembly backend initializing failed due to timeout: ${u}ms`)},Tr=()=>{if(ks&&Ss)return Ss;throw new Error("WebAssembly is not initialized yet.")}}),o1=Pe(()=>{rn(),Rr=(n,u)=>{let h=Tr(),x=h.lengthBytesUTF8(n)+1,v=h._malloc(x);return h.stringToUTF8(n,v,x),u.push(v),v},us=(n,u,h,x)=>{if(typeof n=="object"&&n!==null){if(h.has(n))throw new Error("Circular reference in options");h.add(n)}Object.entries(n).forEach(([v,B])=>{let y=u?u+v:v;if(typeof B=="object")us(B,y+".",h,x);else if(typeof B=="string"||typeof B=="number")x(y,B.toString());else{if(typeof B!="boolean")throw new Error("Can't handle extra config type: "+typeof B);x(y,B?"1":"0")}})},Kt=n=>{let u=Tr(),h=u.stackSave();try{let x=u.PTR_SIZE,v=u.stackAlloc(2*x);u._OrtGetLastError(v,v+x);let B=Number(u.getValue(v,x===4?"i32":"i64")),y=u.getValue(v+x,"*"),S=y?u.UTF8ToString(y):"";throw new Error(`${n} ERROR_CODE: ${B}, ERROR_MESSAGE: ${S}`)}finally{u.stackRestore(h)}}}),fc=Pe(()=>{rn(),o1(),qa=n=>{let u=Tr(),h=0,x=[],v=n||{};try{if(n?.logSeverityLevel===void 0)v.logSeverityLevel=2;else if(typeof n.logSeverityLevel!="number"||!Number.isInteger(n.logSeverityLevel)||n.logSeverityLevel<0||n.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${n.logSeverityLevel}`);if(n?.logVerbosityLevel===void 0)v.logVerbosityLevel=0;else if(typeof n.logVerbosityLevel!="number"||!Number.isInteger(n.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${n.logVerbosityLevel}`);n?.terminate===void 0&&(v.terminate=!1);let B=0;return n?.tag!==void 0&&(B=Rr(n.tag,x)),h=u._OrtCreateRunOptions(v.logSeverityLevel,v.logVerbosityLevel,!!v.terminate,B),h===0&&Kt("Can't create run options."),n?.extra!==void 0&&us(n.extra,"",new WeakSet,(y,S)=>{let O=Rr(y,x),H=Rr(S,x);u._OrtAddRunConfigEntry(h,O,H)!==0&&Kt(`Can't set a run config entry: ${y} - ${S}.`)}),[h,x]}catch(B){throw h!==0&&u._OrtReleaseRunOptions(h),x.forEach(y=>u._free(y)),B}}}),pc=Pe(()=>{rn(),o1(),ds=n=>{switch(n){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${n}`)}},Ci=n=>{switch(n){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${n}`)}},$s=n=>{n.extra||(n.extra={}),n.extra.session||(n.extra.session={});let u=n.extra.session;u.use_ort_model_bytes_directly||(u.use_ort_model_bytes_directly="1"),n.executionProviders&&n.executionProviders.some(h=>(typeof h=="string"?h:h.name)==="webgpu")&&(n.enableMemPattern=!1)},ei=(n,u,h)=>{for(let x of u){let v=typeof x=="string"?x:x.name;switch(v){case"webnn":if(v="WEBNN",typeof x!="string"){let y=x?.deviceType;if(y){let S=Rr("deviceType",h),O=Rr(y,h);Tr()._OrtAddSessionConfigEntry(n,S,O)!==0&&Kt(`Can't set a session config entry: 'deviceType' - ${y}.`)}}break;case"webgpu":if(v="JS",typeof x!="string"){let y=x;if(y?.preferredLayout){if(y.preferredLayout!=="NCHW"&&y.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${y.preferredLayout}`);let S=Rr("preferredLayout",h),O=Rr(y.preferredLayout,h);Tr()._OrtAddSessionConfigEntry(n,S,O)!==0&&Kt(`Can't set a session config entry: 'preferredLayout' - ${y.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${v}`)}let B=Rr(v,h);Tr()._OrtAppendExecutionProvider(n,B)!==0&&Kt(`Can't append execution provider: ${v}.`)}},bi=n=>{let u=Tr(),h=0,x=[],v=n||{};$s(v);try{let B=ds(v.graphOptimizationLevel??"all"),y=Ci(v.executionMode??"sequential"),S=typeof v.logId=="string"?Rr(v.logId,x):0,O=v.logSeverityLevel??2;if(!Number.isInteger(O)||O<0||O>4)throw new Error(`log serverity level is not valid: ${O}`);let H=v.logVerbosityLevel??0;if(!Number.isInteger(H)||H<0||H>4)throw new Error(`log verbosity level is not valid: ${H}`);let te=typeof v.optimizedModelFilePath=="string"?Rr(v.optimizedModelFilePath,x):0;if(h=u._OrtCreateSessionOptions(B,!!v.enableCpuMemArena,!!v.enableMemPattern,y,!!v.enableProfiling,0,S,O,H,te),h===0&&Kt("Can't create session options."),v.executionProviders&&ei(h,v.executionProviders,x),v.enableGraphCapture!==void 0){if(typeof v.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${v.enableGraphCapture}`);let Q=Rr("enableGraphCapture",x),ie=Rr(v.enableGraphCapture.toString(),x);u._OrtAddSessionConfigEntry(h,Q,ie)!==0&&Kt(`Can't set a session config entry: 'enableGraphCapture' - ${v.enableGraphCapture}.`)}if(v.freeDimensionOverrides)for(let[Q,ie]of Object.entries(v.freeDimensionOverrides)){if(typeof Q!="string")throw new Error(`free dimension override name must be a string: ${Q}`);if(typeof ie!="number"||!Number.isInteger(ie)||ie<0)throw new Error(`free dimension override value must be a non-negative integer: ${ie}`);let oe=Rr(Q,x);u._OrtAddFreeDimensionOverride(h,oe,ie)!==0&&Kt(`Can't set a free dimension override: ${Q} - ${ie}.`)}return v.extra!==void 0&&us(v.extra,"",new WeakSet,(Q,ie)=>{let oe=Rr(Q,x),de=Rr(ie,x);u._OrtAddSessionConfigEntry(h,oe,de)!==0&&Kt(`Can't set a session config entry: ${Q} - ${ie}.`)}),[h,x]}catch(B){throw h!==0&&u._OrtReleaseSessionOptions(h)!==0&&Kt("Can't release session options."),x.forEach(y=>u._free(y)),B}}}),Dt=Pe(()=>{Kr=n=>{switch(n){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${n}`)}},rs=n=>{switch(n){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${n}`)}},fs=(n,u)=>{let h=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][n],x=typeof u=="number"?u:u.reduce((v,B)=>v*B,1);return h>0?Math.ceil(x*h):void 0},Ai=n=>{switch(n){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${n}`)}},Ja=n=>{switch(n){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${n}`)}},vs=n=>n==="float32"||n==="float16"||n==="int32"||n==="int64"||n==="uint32"||n==="uint8"||n==="bool"||n==="uint4"||n==="int4",kr=n=>n==="float32"||n==="float16"||n==="int32"||n==="int64"||n==="uint32"||n==="uint64"||n==="int8"||n==="uint8"||n==="bool"||n==="uint4"||n==="int4",Ns=n=>{switch(n){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${n}`)}}}),H1=Pe(()=>{oA(),Os=async n=>{if(typeof n=="string"){let u=await fetch(n);if(!u.ok)throw new Error(`failed to load external data file: ${n}`);let h=u.headers.get("Content-Length"),x=h?parseInt(h,10):0;if(x<1073741824)return new Uint8Array(await u.arrayBuffer());{if(!u.body)throw new Error(`failed to load external data file: ${n}, no response body.`);let v,B=u.body.getReader();try{v=new ArrayBuffer(x)}catch(S){if(!(S instanceof RangeError))throw S;{let O=Math.ceil(x/65536);v=new WebAssembly.Memory({initial:O,maximum:O}).buffer}}let y=0;for(;;){let{done:S,value:O}=await B.read();if(S)break;let H=O.byteLength;new Uint8Array(v,y,H).set(O),y+=H}return new Uint8Array(v,0,x)}}return n instanceof Blob?new Uint8Array(await n.arrayBuffer()):n instanceof Uint8Array?n:new Uint8Array(n)}}),zi=Pe(()=>{Dt(),Ii=["V","I","W","E","F"],Ls=(n,u)=>{console.log(`[${Ii[n]},${new Date().toISOString()}]${u}`)},ys=(n,u)=>{Bs=n,Ys=u},wt=(n,u)=>{let h=Ja(n);h>=Ja(Bs)&&Ls(h,typeof u=="function"?u():u)},Pt=(...n)=>{Ys&&wt(...n)}}),R1=Pe(()=>{Dt(),ka=(n,u)=>new(Ai(u))(n)}),l1=Pe(()=>{}),hc=Pe(()=>{zi(),l1(),ti=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),Es=[],Hs=n=>16*Math.ceil(Number(n)/16),as=n=>{for(let u=0;u<Es.length;u++){let h=Es[u];if(n<=h)return h}return 16*Math.ceil(n/16)},Rs=1,tA=()=>Rs++,_=async(n,u,h,x)=>{let v=Hs(h),B=n.device.createBuffer({size:v,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let y=n.getCommandEncoder();n.endComputePass(),y.copyBufferToBuffer(u,0,B,0,v),n.flush(),await B.mapAsync(GPUMapMode.READ);let S=B.getMappedRange();if(x){let O=x();return O.set(new Uint8Array(S,0,h)),O}return new Uint8Array(S.slice(0,h))}finally{B.destroy()}},ve=class{constructor(n){this.backend=n,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[u]of ti)Es.push(u),this.freeBuffers.set(u,[]),this.freeUniformBuffers.set(u,[]);this.sessionCount=0}upload(n,u){let h=u.buffer,x=u.byteOffset,v=u.byteLength,B=Hs(v),y=this.storageCache.get(n);if(!y)throw new Error("gpu data for uploading does not exist");if(Number(y.originalSize)!==v)throw new Error(`inconsistent data size. gpu data size=${y.originalSize}, data size=${v}`);let S=this.backend.device.createBuffer({mappedAtCreation:!0,size:B,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),O=S.getMappedRange();new Uint8Array(O).set(new Uint8Array(h,x,v)),S.unmap();let H=this.backend.device.createCommandEncoder();H.copyBufferToBuffer(S,0,y.gpuData.buffer,0,B),this.backend.device.queue.submit([H.finish()]),S.destroy(),Pt("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${n})`)}memcpy(n,u){let h=this.storageCache.get(n);if(!h)throw new Error("source gpu data for memcpy does not exist");let x=this.storageCache.get(u);if(!x)throw new Error("destination gpu data for memcpy does not exist");if(h.originalSize!==x.originalSize)throw new Error("inconsistent source and destination gpu data size");let v=Hs(h.originalSize),B=this.backend.getCommandEncoder();this.backend.endComputePass(),B.copyBufferToBuffer(h.gpuData.buffer,0,x.gpuData.buffer,0,v)}registerExternalBuffer(n,u,h){let x;if(h){if(x=h[0],n===h[1])return Pt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${u}) => id=${x}, buffer is the same, skip.`),x;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else x=tA();return this.storageCache.set(x,{gpuData:{id:x,type:0,buffer:n},originalSize:u}),Pt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${u}) => id=${x}, registered.`),x}unregisterExternalBuffer(n){n!==void 0&&(this.storageCache.delete(n),Pt("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${n}`))}create(n,u=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let h,x=as(n),v=(u&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,B=(u&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(v||B){let S=(v?this.freeBuffers:this.freeUniformBuffers).get(x);h=S&&S.length>0?S.pop():this.backend.device.createBuffer({size:x,usage:u})}else h=this.backend.device.createBuffer({size:x,usage:u});let y={id:tA(),type:0,buffer:h};return this.storageCache.set(y.id,{gpuData:y,originalSize:Number(n)}),Pt("verbose",()=>`[WebGPU] GpuDataManager.create(size=${n}) => id=${y.id}`),y}get(n){return this.storageCache.get(n)?.gpuData}release(n){let u=typeof n=="bigint"?Number(n):n,h=this.storageCache.get(u);if(!h){if(this.storageCache.size===0)return 0;throw new Error("releasing data does not exist")}return Pt("verbose",()=>`[WebGPU] GpuDataManager.release(id=${u}), gpuDataId=${h.gpuData.id}`),this.storageCache.delete(u),this.buffersPending.push(h.gpuData.buffer),h.originalSize}async download(n,u){let h=this.storageCache.get(Number(n));if(!h)throw new Error("data does not exist");await _(this.backend,h.gpuData.buffer,h.originalSize,u)}refreshPendingBuffers(){if(this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let n of this.buffersPending){let u=ti.get(n.size);if((n.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let h=this.freeBuffers.get(n.size)||[];u===void 0||h.length>=u?n.destroy():h.push(n)}else if((n.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let h=this.freeUniformBuffers.get(n.size)||[];u===void 0||h.length>=u?n.destroy():h.push(n)}else n.destroy()}this.buffersPending=[]}else{let n=this.capturedPendingBuffers.get(this.backend.currentSessionId);n||(n=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,n));for(let u of this.buffersPending)n.push(u);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(n=>{n.forEach(u=>{u.destroy()})}),this.freeUniformBuffers.forEach(n=>{n.forEach(u=>{u.destroy()})}),this.storageCache.forEach(n=>{n.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(n=>{n.forEach(u=>{u.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(n){let u=this.capturedPendingBuffers.get(n);u&&(u.forEach(h=>{h.destroy()}),this.capturedPendingBuffers.delete(n)),this.sessionCount-=1,this.sessionCount===0&&(Pt("warning",()=>"[WebGPU] Clearing webgpu buffer cache"),this.storageCache.forEach(h=>{h.gpuData.buffer.destroy()}),this.storageCache=new Map)}},Oe=(...n)=>new ve(...n)}),Jr=Pe(()=>{We=class{constructor(n){Object.assign(this,n)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(n=>`${this[n]}`).join(";")),this.key}},$e=n=>new We(n)}),Ft=Pe(()=>{fA=class{static calcMatMulShape(n,u){return n[1]!==u[0]?void 0:[n[0],u[1]]}},NA=class{static calcShape(n,u,h=!1){let x=n.length,v=u.length;if(x===0)return u;if(v===0)return n;let B=Math.max(n.length,u.length),y=new Array(B);if(h){if(x<2||v<2)return;let S=fA.calcMatMulShape([n[x-2],n[x-1]],[u[v-2],u[v-1]]);if(S===void 0)return;[y[B-2],y[B-1]]=S}for(let S=h?3:1;S<=B;S++){let O=x-S<0?1:n[x-S],H=v-S<0?1:u[v-S];if(O!==H&&O>1&&H>1)return;let te=Math.max(O,H);if(O&&H)y[B-S]=Math.max(O,H);else{if(te>1)return;y[B-S]=0}}return y}static isValidBroadcast(n,u){let h=n.length,x=u.length;if(h>x)return!1;for(let v=1;v<=h;v++)if(n[h-v]!==1&&n[h-v]!==u[x-v])return!1;return!0}},He=class ic{static size(u){return ic.getSizeFromDimensionRange(u,0,u.length)}static convertShape(u,h=4){let x=u.length;if(x===0)return[];let v=new Array(x),B=x-1;for(;B>=0;){if(u[B]%h==0){v[B]=u[B]/h;break}if(h%u[B]!=0)throw new Error("cannot convert shape");v[B]=1,h/=u[B],B--}for(B--;B>=0;B--)v[B]=u[B];return v}static sizeFromDimension(u,h){if(h<0||h>u.length)throw new Error(`invalid dimension of ${h} for sizeFromDimension as Tensor has ${u.length} dimensions.`);return ic.getSizeFromDimensionRange(u,h,u.length)}static sizeToDimension(u,h){if(h<0||h>u.length)throw new Error(`invalid dimension of ${h} for sizeToDimension as Tensor has ${u.length} dimensions.`);return ic.getSizeFromDimensionRange(u,0,h)}static getSizeFromDimensionRange(u,h,x){let v=1;for(let B=h;B<x;B++){if(u[B]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");v*=Number(u[B])}return v}static computeStrides(u){let h=u.length;if(h===0)return[];if(h===1)return[1];let x=new Array(h);x[h-1]=1,x[h-2]=u[h-1];for(let v=h-3;v>=0;--v)x[v]=x[v+1]*u[v+1];return x}static normalizeAxis(u,h){if(u<-h&&u>=h)throw new Error("unsupported axis for this operation.");return u<0?u+h:u}static normalizeAxes(u,h){return u.map(x=>this.normalizeAxis(x,h??u.length))}static sortBasedOnPerm(u,h){return h?h.map(x=>u[x]):u.slice().reverse()}static padShape(u,h){let x=u.length;return u.map((v,B)=>v+h[B]+h[B+x])}static areEqual(u,h){return u.length===h.length&&u.every((x,v)=>x===h[v])}},WA=class B1{static adjustPoolAttributes(u,h,x,v,B,y){if(!u&&x.length!==h.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(u)for(let S=0;S<h.length-2;S++)S>=x.length?x.push(h[S+2]):x[S]=h[S+2];for(let S=0;S<x.length;S++)if(S<v.length){if(v[S]<0)throw new Error("strides should be greater than or equal to 1")}else v.push(1);for(let S=0;S<x.length;S++)if(S<B.length){if(B[S]<0)throw new Error("dilations should be greater than or equal to 1")}else B.push(1);for(let S=0;S<2*x.length;S++)if(S<y.length){if(y[S]<0)throw new Error("pad should be greater than or equal to 1")}else y.push(0);for(let S=0;S<x.length;S++){if(x[S]<=0)throw new Error("kernel shapes need to be greater than 0");if(y[S]>=x[S]||y[S+x.length]>=x[S])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(u,h,x,v,B,y,S){if(S){if(B.length!==2*(u.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(h.length!==u.length-2)throw new Error("length of strides should be the length of data dimensions");if(v.length!==u.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let O=0;O<u.length-2;O++)B1.adjustPadAndReturnShape(u[O+(y?1:2)],h[O],x[O],v[O],B,O,O+u.length-2,S)}}static computePoolOutputShape(u,h,x,v,B,y,S){if(h.length<=0)throw new Error("input shape must be of size greater than 0");let O=[h[0],h[1]];return B1.computeShapeHelper(u,h,O,x,v,B,y,S),O}static computeConvOutputShape(u,h,x,v,B,y,S){if(u.length<=0||h.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let O=[u[0],h[0]];return B1.computeShapeHelper(!1,u,O,x,v,B,y,S),O}static computeShapeHelper(u,h,x,v,B,y,S,O){if(u)for(let H=0;H<h.length-2;H++)x.push(1);else for(let H=0;H<h.length-2;H++)x.push(B1.adjustPadAndReturnShape(h[H+2],v[H],B[H],y[H],S,H,H+h.length-2,O))}static adjustPadAndReturnShape(u,h,x,v,B,y,S,O){let H=x*(v-1)+1;if(!O||O==="NOTSET")return Math.floor((u+B[y]+B[S]-H)/h+1);switch(O){case"VALID":return B[y]=0,B[S]=0,Math.floor((u-H)/h+1);case"SAME_LOWER":case"SAME_UPPER":if(x!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let te=((u+h-1)/h-1)*h+v-u;return B[y]=Math.floor(O==="SAME_LOWER"?(te+1)/2:te/2),B[S]=te-B[y],Math.floor((u+te-v)/h+1)}default:throw new Error("Unsupported AutoPad type")}}},bA=class{static getShapeOfGemmResult(n,u,h,x,v){if(n.length!==2||h.length!==2)throw new Error("shape need to be of size 2");let B,y,S;u?(B=n[1],y=n[0]):(B=n[0],y=n[1]);let O=-1;if(x?(S=h[0],O=1):(S=h[1],O=0),h[O]!==y)throw new Error("dimension mismatch");if(B<=0||S<=0||y<=0)throw new Error("invalid shape specified");if(v&&!NA.isValidBroadcast(v,[B,S]))throw new Error("gemm: invalid bias shape for broadcast");return[B,S,y]}},Yt=-34028234663852886e22,Wt=34028234663852886e22}),Rt=Pe(()=>{Dt(),Ft(),cr=64,sr=(n,u)=>{if(u===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(n)){case 10:return u>1?`vec${u}<f16>`:"f16";case 1:return u>1?`vec${u}<f32>`:"f32";case 6:return u>1?`vec${u}<i32>`:"i32";case 12:return u>1?`vec${u}<u32>`:"u32";case 7:if(u>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(u>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(u!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${n}`)}},jt=(n,u=1)=>{let h=sr(n,u);return typeof h=="string"?h:h[0]},jA=(n,u=1)=>{let h=sr(n,u);return typeof h=="string"?h:h[1]},KA=(...n)=>{let u=[];return n.forEach(h=>{h.length!==0&&u.push({type:12,data:h},{type:12,data:He.computeStrides(h)})}),u},Jt=n=>n%4==0?4:n%2==0?2:1,Ya=(n="f32",u,h="0")=>u&&u!==1?`vec${u}<${n}>(${h})`:`${n}(${h})`,pa=(n,u,h)=>n==="f32"?h:u===1?`f32(${h})`:`vec${u}<f32>(${h})`,ir=(n,u)=>u===4?`(${n}.x + ${n}.y + ${n}.z + ${n}.w)`:u===2?`(${n}.x + ${n}.y)`:u===3?`(${n}.x + ${n}.y + ${n}.z)`:n,rt=(n,u,h,x)=>n.startsWith("uniforms.")&&h>4?typeof u=="string"?x==="f16"?`${n}[(${u}) / 8][(${u}) % 8 / 4][(${u}) % 8 % 4]`:`${n}[(${u}) / 4][(${u}) % 4]`:x==="f16"?`${n}[${Math.floor(u/8)}][${Math.floor(u%8/4)}][${u%8%4}]`:`${n}[${Math.floor(u/4)}][${u%4}]`:h>1?`${n}[${u}]`:n,dr=(n,u,h,x,v)=>{let B=typeof h=="number",y=B?h:h.length,S=[...new Array(y).keys()],O=y<2?"u32":y<=4?`vec${y}<u32>`:`array<u32, ${y}>`,H=sr(u,v),te=typeof H=="string"?H:H[1],Q=typeof H=="string"?H:H[0],ie={indices:O,value:te,storage:Q,tensor:u},oe=wA=>typeof wA=="string"?wA:`${wA}u`,de={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},fe=B?"uniforms.":"",ke=`${fe}${n}_shape`,Me=`${fe}${n}_strides`,De="";for(let wA=0;wA<y-1;wA++)De+=`
    let dim${wA} = current / ${rt(Me,wA,y)};
    let rest${wA} = current % ${rt(Me,wA,y)};
    indices[${wA}] = dim${wA};
    current = rest${wA};
    `;De+=`indices[${y-1}] = current;`;let Le=y<2?"":`
  fn o2i_${n}(offset: u32) -> ${ie.indices} {
    var indices: ${ie.indices};
    var current = offset;
    ${De}
    return indices;
  }`,Xe=[];if(y>=2)for(let wA=y-1;wA>=0;wA--)Xe.push(`${rt(Me,wA,y)} * (indices[${wA}])`);let _e=y<2?"":`
  fn i2o_${n}(indices: ${ie.indices}) -> u32 {
    return ${Xe.join("+")};
  }`,lA=(...wA)=>y===0?"0u":`${ie.indices}(${wA.map(oe).join(",")})`,LA=(wA,UA)=>y<2?`${wA}`:`${rt(wA,UA,y)}`,st={},ht=(wA,UA)=>(()=>{if(ie.storage===ie.value)return`${n}[${wA}]=${UA};`;if(ie.storage==="vec2<u32>"&&ie.value==="i32")return`${n}[${wA}]=vec2<u32>(u32(${UA}), select(0u, 0xFFFFFFFFu, ${UA} < 0));`;if(ie.storage==="vec2<u32>"&&ie.value==="u32")return`${n}[${wA}]=vec2<u32>(u32(${UA}), 0u);`;if(ie.storage==="u32"&&ie.value==="vec4<bool>")return`${n}[${wA}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${UA}));`;throw new Error(`not supported combination of storage type ${ie.storage} and value type ${ie.value} yet`)})(),pt=wA=>(()=>{if(ie.storage===ie.value)return`${n}[${wA}]`;if(ie.storage==="vec2<u32>"&&ie.value==="i32")return`i32(${n}[${wA}].x)`;if(ie.storage==="vec2<u32>"&&ie.value==="u32")return`u32(${n}[${wA}].x)`;if(ie.storage==="u32"&&ie.value==="vec4<bool>")return`vec4<bool>(bool(${n}[${wA}] & 0xFFu), bool(${n}[${wA}] & 0xFF00u), bool(${n}[${wA}] & 0xFF0000u), bool(${n}[${wA}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${ie.storage} and value type ${ie.value} yet`)})(),mt=y<2?"":`
  fn get_${n}ByIndices(indices: ${ie.indices}) -> ${te} {
    return ${pt(`i2o_${n}(indices)`)};
  }`,Bt=y<2?"":(()=>{let wA=S.map(At=>`d${At}: u32`).join(", "),UA=S.map(At=>`d${At}`).join(", ");return`
  fn get_${n}(${wA}) -> ${te} {
    return get_${n}ByIndices(${lA(UA)});
  }`})(),tt=y<2?"":`
  fn set_${n}ByIndices(indices: ${ie.indices}, value: ${te}) {
    ${ht(`i2o_${n}(indices)`,"value")}
  }`,lt=y<2?"":(()=>{let wA=S.map(At=>`d${At}: u32`).join(", "),UA=S.map(At=>`d${At}`).join(", ");return`
  fn set_${n}(${wA}, value: ${te}) {
    set_${n}ByIndices(${lA(UA)}, value);
  }`})();return{impl:()=>{let wA=[],UA=!1;return de.offsetToIndices&&(wA.push(Le),UA=!0),de.indicesToOffset&&(wA.push(_e),UA=!0),de.broadcastedIndicesToOffset&&(Object.values(st).forEach(At=>wA.push(At)),UA=!0),de.set&&(wA.push(lt),UA=!0),de.setByIndices&&(wA.push(tt),UA=!0),de.get&&(wA.push(Bt),UA=!0),de.getByIndices&&(wA.push(mt),UA=!0),!B&&UA&&wA.unshift(`const ${ke} = ${ie.indices}(${h.join(",")});`,`const ${Me} = ${ie.indices}(${He.computeStrides(h).join(",")});`),wA.join(`
`)},type:ie,offsetToIndices:wA=>(de.offsetToIndices=!0,y<2?wA:`o2i_${n}(${wA})`),indicesToOffset:wA=>(de.indicesToOffset=!0,y<2?wA:`i2o_${n}(${wA})`),broadcastedIndicesToOffset:(wA,UA)=>{de.broadcastedIndicesToOffset=!0;let At=`${UA.name}broadcastedIndicesTo${n}Offset`;if(At in st)return`${At}(${wA})`;let yt=[];for(let gr=y-1;gr>=0;gr--){let ca=UA.indicesGet("outputIndices",gr+UA.rank-y);yt.push(`${LA(Me,gr)} * (${ca} % ${LA(ke,gr)})`)}return st[At]=`fn ${At}(outputIndices: ${UA.type.indices}) -> u32 {
             return ${yt.length>0?yt.join("+"):"0u"};
           }`,`${At}(${wA})`},indices:lA,indicesGet:LA,indicesSet:(wA,UA,At)=>y<2?`${wA}=${At};`:`${rt(wA,UA,y)}=${At};`,set:(...wA)=>{if(wA.length!==y+1)throw new Error(`indices length must be ${y}`);let UA=wA[y];if(typeof UA!="string")throw new Error("value must be string");let At=wA.slice(0,y).map(oe).join(",");return y===0?ht("0u",UA):y===1?ht(At[0],UA):(de.set=!0,de.setByIndices=!0,de.indicesToOffset=!0,`set_${n}(${At}, ${UA})`)},setByOffset:ht,setByIndices:(wA,UA)=>y<2?ht(wA,UA):(de.setByIndices=!0,de.indicesToOffset=!0,`set_${n}ByIndices(${wA}, ${UA});`),get:(...wA)=>{if(wA.length!==y)throw new Error(`indices length must be ${y}`);let UA=wA.map(oe).join(",");return y===0?pt("0u"):y===1?pt(UA[0]):(de.get=!0,de.getByIndices=!0,de.indicesToOffset=!0,`get_${n}(${UA})`)},getByOffset:pt,getByIndices:wA=>y<2?pt(wA):(de.getByIndices=!0,de.indicesToOffset=!0,`get_${n}ByIndices(${wA})`),usage:x,name:n,strides:Me,shape:ke,rank:y}},gA=(n,u,h,x=1)=>dr(n,u,h,"input",x),JA=(n,u,h,x=1)=>dr(n,u,h,"output",x),ha=(n,u,h)=>dr(n,u,h,"atomicOutput",1),Nr=(n,u,h,x=1)=>dr(n,u,h,"internal",x),Vr=class{constructor(n,u){this.normalizedDispatchGroup=n,this.limits=u,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(n){return`if (global_idx >= ${typeof n=="number"?`${n}u`:n}) { return; }`}mainStart(n=cr){let u=typeof n=="number"?n:n[0],h=typeof n=="number"?1:n[1],x=typeof n=="number"?1:n[2];if(u>this.limits.maxComputeWorkgroupSizeX||h>this.limits.maxComputeWorkgroupSizeY||x>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${u}, ${h}, ${x}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(u*h*x>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${u}, ${h}, ${x}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let v=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1;return`@compute @workgroup_size(${u}, ${h}, ${x})
  fn main(${v?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`}) {
    ${v?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${u*h*x}u + local_idx;`}
  `}appendVariableUniforms(n){n.rank!==0&&(n.shape.startsWith("uniforms.")&&this.uniforms.push({name:n.shape.replace("uniforms.",""),type:"u32",length:n.rank}),n.strides.startsWith("uniforms.")&&this.uniforms.push({name:n.strides.replace("uniforms.",""),type:"u32",length:n.rank}))}declareVariable(n,u){if(n.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(n),this.appendVariableUniforms(n);let h=n.usage==="input"?"read":"read_write",x=n.usage==="atomicOutput"?"atomic<i32>":n.type.storage;return`@group(0) @binding(${u}) var<storage, ${h}> ${n.name}: array<${x}>;`}declareVariables(...n){return n.map(u=>this.declareVariable(u,this.variableIndex++)).join(`
`)}registerInternalVariable(n){if(n.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(n),this.appendVariableUniforms(n)}registerInternalVariables(...n){return n.forEach(u=>this.registerInternalVariable(u)),this}registerUniform(n,u,h=1){return this.uniforms.push({name:n,type:u,length:h}),this}registerUniforms(n){return this.uniforms=this.uniforms.concat(n),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let n=[];for(let{name:u,type:h,length:x}of this.uniforms)if(x&&x>4)h==="f16"?n.push(`@align(16) ${u}:array<mat2x4<${h}>, ${Math.ceil(x/8)}>`):n.push(`${u}:array<vec4<${h}>, ${Math.ceil(x/4)}>`);else{let v=x==null||x===1?h:`vec${x}<${h}>`;n.push(`${u}:${v}`)}return`
      struct Uniforms { ${n.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(n=>n.impl()).join(`
`)+this.internalVariables.map(n=>n.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let n=u=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(u)];return this.uniforms.map(u=>[n(u.type),u.length??1])}},Pr=(n,u)=>new Vr(n,u)}),an=Pe(()=>{Dt(),Ft(),Jr(),Rt(),Cr=(n,u)=>{if(!n||n.length!==1)throw new Error("Transpose requires 1 input.");if(u.length!==0&&u.length!==n[0].dims.length)throw new Error(`perm size ${u.length} does not match input rank ${n[0].dims.length}`)},Ut=(n,u)=>u.length!==0?u:[...new Array(n).keys()].reverse(),xr=(n,u)=>He.sortBasedOnPerm(n,Ut(n.length,u)),ri=(n,u,h,x)=>{let v=`fn perm(i: ${x.type.indices}) -> ${h.type.indices} {
    var a: ${h.type.indices};`;for(let B=0;B<u;++B)v+=`a[${n[B]}]=i[${B}];`;return v+"return a;}"},Ha=(n,u)=>{let h=[],x=[];for(let v=0;v<n.length;++v)n[v]!==1&&h.push(n[v]),n[u[v]]!==1&&x.push(u[v]);return{newShape:h,newPerm:x}},Ni=(n,u)=>{let h=0;for(let x=0;x<n.length;++x)if(u[n[x]]!==1){if(n[x]<h)return!1;h=n[x]}return!0},Ga=(n,u)=>{let h,x=n.dataType,v=n.dims.length,B=Ut(v,u),y=xr(n.dims,B),S=n.dims,O=y;if(v<2||Ni(B,n.dims))return h=oe=>{let de=gA("input",x,S,4),fe=JA("output",x,O,4);return`
  ${oe.registerUniform("output_size","u32").declareVariables(de,fe)}
  ${oe.mainStart()}
    ${oe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let oe=He.size(y);return{outputs:[{dims:y,dataType:n.dataType}],dispatchGroup:{x:Math.ceil(oe/64/4)},programUniforms:[{type:12,data:Math.ceil(oe/4)}]}},getShaderSource:h};let{newShape:H,newPerm:te}=Ha(n.dims,B),Q=He.areEqual(te,[2,3,1]),ie=He.areEqual(te,[3,1,2]);if(H.length===2||Q||ie){S=Q?[H[0],H[1]*H[2]]:ie?[H[0]*H[1],H[2]]:H,O=[S[1],S[0]];let oe=16;return h=de=>{let fe=gA("a",x,S.length),ke=JA("output",x,O.length);return`
  ${de.registerUniform("output_size","u32").declareVariables(fe,ke)}
  var<workgroup> tile : array<array<${ke.type.value}, ${oe+1}>, ${oe}>;
  ${de.mainStart([oe,oe,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${oe} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${oe}u + local_id.x;
    let input_row = workgroup_id_x * ${oe}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${fe.getByIndices(`${fe.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${oe}u + local_id.x;
    let output_row = workgroup_id_y * ${oe}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${ke.setByIndices(`${ke.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let de=He.size(y);return{outputs:[{dims:y,dataType:n.dataType}],dispatchGroup:{x:Math.ceil(O[1]/oe),y:Math.ceil(O[0]/oe)},programUniforms:[{type:12,data:de},...KA(S,O)]}},getShaderSource:h}}return h=oe=>{let de=gA("a",x,S.length),fe=JA("output",x,O.length);return`
  ${oe.registerUniform("output_size","u32").declareVariables(de,fe)}

  ${ri(B,v,de,fe)}

  ${oe.mainStart()}
    ${oe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${fe.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${fe.setByOffset("global_idx",de.getByIndices("aIndices"))}
  }`},{name:"Transpose",shaderCache:{hint:`${u}`,inputDependencies:["rank"]},getRunData:()=>{let oe=He.size(y);return{outputs:[{dims:y,dataType:n.dataType}],dispatchGroup:{x:Math.ceil(oe/64)},programUniforms:[{type:12,data:oe},...KA(S,O)]}},getShaderSource:h}},Oi=(n,u)=>{Cr(n.inputs,u.perm),n.compute(Ga(n.inputs[0],u.perm))},Gt=n=>$e({perm:n.perm})}),mc=Pe(()=>{Dt(),Ft(),Rt(),c1(),an(),Aa={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Wa={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},n0={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},o0={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},l0=(n,u)=>{let h=[];for(let x=u-n;x<u;++x)h.push(x);return h},c0=(n,u)=>{let h=[],x=n.length;for(let B=0;B<x;B++)u.indexOf(B)===-1&&h.push(n[B]);let v=u.map(B=>n[B]);return[h,v]},ai=(n,u)=>{let h=n.length+u.length,x=[],v=0;for(let B=0;B<h;B++)u.indexOf(B)===-1?x.push(n[v++]):x.push(1);return x},Vs=(n,u)=>{for(let h=0;h<n.length;++h)if(n[n.length-h-1]!==u-1-h)return!1;return!0},g0=(n,u)=>{let h=[];if(!Vs(n,u)){for(let x=0;x<u;++x)n.indexOf(x)===-1&&h.push(x);n.forEach(x=>h.push(x))}return h},Li=(n,u,h,x,v,B,y)=>{let S=h[0].dims,O=He.size(B),H=He.size(y),te=gA("_A",h[0].dataType,S),Q=JA("output",v,B),ie=64;O===1&&(ie=256);let oe=`
          var<workgroup> aBestValues : array<f32, ${ie}>;
       `;return{name:n,shaderCache:{hint:`${u};${ie}`,inputDependencies:["type"]},getShaderSource:de=>`
        ${de.registerUniform("reduceSize","u32").declareVariables(te,Q)}
        ${oe}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${de.mainStart(ie)}

          let outputIndex = global_idx / ${ie};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${n0[x]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${ie}) {
           let candidate = f32(${te.getByOffset("offset + k")});
           bestValue = ${Aa[x]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${ie}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${Wa[x]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${Q.setByOffset("outputIndex",x==="mean"?`${Q.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${Q.type.storage}(${o0[x]})`)};
         }
        }`,getRunData:()=>({outputs:[{dims:B,dataType:v}],dispatchGroup:{x:O},programUniforms:[{type:12,data:H}]})}},Ta=(n,u,h,x)=>{let v=n.inputs.length===1?h:ki(n.inputs,h),B=v.axes;B.length===0&&!v.noopWithEmptyAxes&&(B=n.inputs[0].dims.map((oe,de)=>de));let y=He.normalizeAxes(B,n.inputs[0].dims.length),S=y,O=n.inputs[0],H=g0(S,n.inputs[0].dims.length);H.length>0&&(O=n.compute(Ga(n.inputs[0],H),{inputs:[0],outputs:[-1]})[0],S=l0(S.length,O.dims.length));let[te,Q]=c0(O.dims,S),ie=te;v.keepDims&&(ie=ai(te,y)),n.compute(Li(u,v.cacheKey,[O],x,n.inputs[0].dataType,ie,Q),{inputs:[O]})},Zr=(n,u)=>{Ta(n,"ReduceMeanShared",u,"mean")},qA=(n,u)=>{Ta(n,"ReduceL1Shared",u,"l1")},Da=(n,u)=>{Ta(n,"ReduceL2Shared",u,"l2")},pn=(n,u)=>{Ta(n,"ReduceLogSumExpShared",u,"logSumExp")},Yi=(n,u)=>{Ta(n,"ReduceMaxShared",u,"max")},hn=(n,u)=>{Ta(n,"ReduceMinShared",u,"min")},u0=(n,u)=>{Ta(n,"ReduceProdShared",u,"prod")},d0=(n,u)=>{Ta(n,"ReduceSumShared",u,"sum")},mn=(n,u)=>{Ta(n,"ReduceSumSquareShared",u,"sumSquare")},K0=(n,u)=>{Ta(n,"ReduceLogSumShared",u,"logSum")}}),c1=Pe(()=>{Dt(),Ft(),Jr(),Rt(),mc(),Pa=n=>{if(!n||n.length===0||n.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(n.length===2&&n[1].dims.length!==1)throw new Error("Invalid axes input dims.")},rr=n=>["","",`var value = ${n.getByIndices("input_indices")};`,""],wi=(n,u,h,x,v,B,y=!1,S=!1)=>{let O=[],H=h[0].dims,te=H.length,Q=He.normalizeAxes(v,te),ie=!S&&Q.length===0;H.forEach((fe,ke)=>{ie||Q.indexOf(ke)>=0?y&&O.push(1):O.push(fe)});let oe=O.length,de=He.size(O);return{name:n,shaderCache:u,getShaderSource:fe=>{let ke=[],Me=gA("_A",h[0].dataType,te),De=JA("output",B,oe),Le=x(Me,De,Q),Xe=Le[2];for(let _e=0,lA=0;_e<te;_e++)ie||Q.indexOf(_e)>=0?(y&&lA++,Xe=`for(var j${_e}: u32 = 0; j${_e} < ${H[_e]}; j${_e}++) {
                  ${Le[2].includes("last_index")?`let last_index = j${_e};`:""}
                  ${Me.indicesSet("input_indices",_e,`j${_e}`)}
                  ${Xe}
                }`):(ke.push(`${Me.indicesSet("input_indices",_e,De.indicesGet("output_indices",lA))};`),lA++);return`

        ${fe.registerUniform("output_size","u32").declareVariables(Me,De)}

        ${fe.mainStart()}
          ${fe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${Me.type.indices};
          let output_indices = ${De.offsetToIndices("global_idx")};

          ${ke.join(`
`)}
          ${Le[0]}       // init ops for reduce max/min
          ${Le[1]}
          ${Xe}
          ${Le[3]}
          ${Le.length===4?De.setByOffset("global_idx","value"):Le.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:O,dataType:B}],dispatchGroup:{x:Math.ceil(de/64)},programUniforms:[{type:12,data:de},...KA(H,O)]})}},ki=(n,u)=>{let h=[];return n[1].dims[0]>0&&n[1].getBigInt64Array().forEach(x=>h.push(Number(x))),$e({axes:h,keepDims:u.keepDims,noopWithEmptyAxes:u.noopWithEmptyAxes})},xa=(n,u,h,x)=>{let v=n.inputs,B=v.length===1?h:ki(v,h);n.compute(wi(u,{hint:B.cacheKey,inputDependencies:["rank"]},[v[0]],B.noopWithEmptyAxes&&B.axes.length===0?rr:x,B.axes,v[0].dataType,B.keepDims,B.noopWithEmptyAxes),{inputs:[0]})},Ws=(n,u)=>{Pa(n.inputs),xa(n,"ReduceLogSum",u,(h,x)=>[`var value = ${x.type.storage}(0);`,"",`value += ${h.getByIndices("input_indices")};`,"value = log(value);"])},ss=(n,u)=>{Pa(n.inputs),xa(n,"ReduceL1",u,(h,x)=>[`var value = ${x.type.storage}(0);`,"",`value += abs(${h.getByIndices("input_indices")});`,""])},Cn=(n,u)=>{Pa(n.inputs),xa(n,"ReduceL2",u,(h,x)=>[`var t = ${x.type.value}(0); var value = ${x.type.value}(0);`,"",`t = ${h.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},bn=(n,u)=>{Pa(n.inputs),xa(n,"ReduceLogSumExp",u,(h,x)=>[`var value = ${x.type.storage}(0);`,"",`value += exp(${h.getByIndices("input_indices")});`,"value = log(value);"])},js=(n,u)=>{Pa(n.inputs),xa(n,"ReduceMax",u,(h,x,v)=>{let B=[];for(let y=0;y<h.rank;y++)(v.indexOf(y)>=0||v.length===0)&&B.push(h.indicesSet("input_indices",y,0));return[`${B.join(`
`)}`,`var value = ${h.getByIndices("input_indices")};`,`value = max(value, ${h.getByIndices("input_indices")});`,""]})},In=(n,u)=>{Pa(n.inputs),xa(n,"ReduceMean",u,(h,x,v)=>{let B=1;for(let y=0;y<h.rank;y++)(v.indexOf(y)>=0||v.length===0)&&(B*=n.inputs[0].dims[y]);return["var sum = f32(0);","",`sum += f32(${h.getByIndices("input_indices")});`,`let value = ${x.type.value}(sum / ${B});`]})},wn=(n,u)=>{Pa(n.inputs),xa(n,"ReduceMin",u,(h,x,v)=>{let B=[];for(let y=0;y<h.rank;y++)(v.indexOf(y)>=0||v.length===0)&&B.push(`input_indices[${y}] = 0;`);return[`${B.join(`
`)}`,`var value = ${h.getByIndices("input_indices")};`,`value = min(value, ${h.getByIndices("input_indices")});`,""]})},kn=(n,u)=>{Pa(n.inputs),xa(n,"ReduceProd",u,(h,x)=>[`var value = ${x.type.storage}(1);`,"",`value *= ${h.getByIndices("input_indices")};`,""])},DA=(n,u)=>{Pa(n.inputs),xa(n,"ReduceSum",u,(h,x)=>[`var value = ${x.type.storage}(0);`,"",`value += ${h.getByIndices("input_indices")};`,""])},Us=(n,u)=>{Pa(n.inputs),xa(n,"ReduceSumSquare",u,(h,x)=>[`var t = ${x.type.value}(0); var value = ${x.type.value}(0);`,"",`t = ${h.getByIndices("input_indices")}; value += t * t;`,""])},RA=(n,u,h)=>{if(u.length===0)return h;let x=1,v=1;for(let B=0;B<u.length;B++)u.indexOf(B)===-1?x*=n[B]:v*=n[B];return v<32&&x>1024},xn=(n,u)=>{RA(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?In(n,u):Zr(n,u)},Hi=(n,u)=>{RA(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?ss(n,u):qA(n,u)},va=(n,u)=>{RA(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?Cn(n,u):Da(n,u)},za=(n,u)=>{RA(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?bn(n,u):pn(n,u)},si=(n,u)=>{RA(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?js(n,u):Yi(n,u)},xi=(n,u)=>{RA(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?wn(n,u):hn(n,u)},vn=(n,u)=>{RA(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?kn(n,u):u0(n,u)},zr=(n,u)=>{RA(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?DA(n,u):d0(n,u)},f0=(n,u)=>{RA(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?Us(n,u):mn(n,u)},p0=(n,u)=>{RA(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?Ws(n,u):K0(n,u)}}),Cc=Pe(()=>{Dt(),Jr(),c1(),Ms=n=>{if(!n||n.length===0||n.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(n[0].dataType!==1)throw new Error("Invalid input type.")},ii=(n,u)=>{Ms(n.inputs),n.compute(wi("ArgMin",{hint:u.cacheKey,inputDependencies:["rank"]},[n.inputs[0]],(h,x,v)=>{let B=[];for(let y=0;y<h.rank;y++)(v.indexOf(y)>=0||v.length===0)&&B.push(`input_indices[${y}] = 0;`);return[`${B.join(`
`)}`,`var value = ${h.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${h.getByIndices("input_indices")} ${u.selectLastIndex>0?"<=":"<"} value) {
         value = ${h.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",x.setByOffset("global_idx","best_index")]},[u.axis],7,u.keepDims),{inputs:[0]})},h0=(n,u)=>{Ms(n.inputs),n.compute(wi("argMax",{hint:u.cacheKey,inputDependencies:["rank"]},[n.inputs[0]],(h,x,v)=>{let B=[];for(let y=0;y<h.rank;y++)(v.indexOf(y)>=0||v.length===0)&&B.push(`input_indices[${y}] = 0;`);return[`${B.join(`
`)}`,`var value = ${h.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${h.getByIndices("input_indices")} ${u.selectLastIndex>0?">=":">"} value) {
         value = ${h.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",x.setByOffset("global_idx","best_index")]},[u.axis],7,u.keepDims),{inputs:[0]})},Ri=n=>$e(n)}),g1=Pe(()=>{Dt(),Ft(),l1(),Rt(),ni=(n,u)=>{let h=n[0],x=n[1],v=n[2],B=n[3],y=n[4],S=n[5];if(y&&S)throw new Error("Attention cannot have both past and attention_bias");if(h.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let O=h.dims[0],H=h.dims[1],te=h.dims[2];if(v.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(x.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(x.dims[0]!==te)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(v.dims[0]!==x.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let Q=v.dims[0]/3,ie=Q,oe=ie;if(u.qkvHiddenSizes.length>0){if(u.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let Me of u.qkvHiddenSizes)if(Me%u.numHeads!=0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");Q=u.qkvHiddenSizes[0],ie=u.qkvHiddenSizes[1],oe=u.qkvHiddenSizes[2]}let de=H;if(Q!==ie)throw new Error("qkv_hidden_sizes first element should be same as the second");if(v.dims[0]!==Q+ie+oe)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let fe=0;if(y){if(ie!==oe)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(y.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(y.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(y.dims[1]!==O)throw new Error('Input "past" second dimension must be batch_size');if(y.dims[2]!==u.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(y.dims[4]!==ie/u.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');u.pastPresentShareBuffer||(fe=y.dims[3])}let ke=de+fe;if(B)throw new Error("Mask not supported");if(y)throw new Error("past is not supported");if(S){if(S.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(S.dims[0]!==O||S.dims[1]!==u.numHeads||S.dims[2]!==H||S.dims[3]!==ke)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:O,sequenceLength:H,pastSequenceLength:fe,kvSequenceLength:de,totalSequenceLength:ke,maxSequenceLength:-1,inputHiddenSize:te,hiddenSize:Q,vHiddenSize:oe,headSize:Math.floor(Q/u.numHeads),vHeadSize:Math.floor(oe/u.numHeads),numHeads:u.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:u.maskFilterValue,maskType:0,scale:u.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},HA=(n,u,h)=>u&&n?`
      let total_sequence_length_input = u32(${u.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${n?.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       `:`
    ${h?"let past_sequence_length = uniforms.past_sequence_length":""};
    let present_sequence_length = total_sequence_length;
    `,_a=(n,u,h,x,v,B,y,S)=>{let O=Jt(y?1:B),H=64,te=B/O;te<H&&(H=32);let Q=Math.ceil(B/O/H),ie=[{type:12,data:u},{type:12,data:h},{type:12,data:x},{type:12,data:v},{type:12,data:te},{type:12,data:Q}],oe=jt(n.dataType,O),de=jA(1,O),fe=["type"];return y&&fe.push("type"),S&&fe.push("type"),{name:"AttentionProbsSoftmax",shaderCache:{hint:`${H};${oe};${O}`,inputDependencies:fe},getShaderSource:ke=>{let Me=JA("x",n.dataType,n.dims,O),De=[Me],Le=y?gA("seq_lens",y.dataType,y.dims):void 0;Le&&De.push(Le);let Xe=S?gA("total_sequence_length_input",S.dataType,S.dims):void 0;Xe&&De.push(Xe);let _e=jA(n.dataType);return`
  var<workgroup> thread_max: array<f32, ${H}>;
  var<workgroup> thread_sum: array<f32, ${H}>;
  ${ke.registerUniforms([{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}]).declareVariables(...De)}
  ${ke.mainStart([H,1,1])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${HA(Le,Xe,!1)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${H}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${y?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};
    var thread_max_vector = ${de}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${de}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(O){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${O}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${H}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${de}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${de}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(O){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${O}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${H}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${Me.type.value}(${_e}(1.0) / ${_e}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${de}(x[offset + i]);
        x[offset + i] = ${Me.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${y?`
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${Me.type.value}(${_e}(0));
        }`:""};
  }`},getRunData:()=>({outputs:[],dispatchGroup:{x:Math.ceil(B/H),y:v,z:u*h},programUniforms:ie})}},Bn=(n,u,h,x,v,B,y,S,O)=>{let H=y+B.kvSequenceLength,te=[B.batchSize,B.numHeads,B.sequenceLength,H],Q=n>1&&x,ie=B.kvNumHeads?B.kvNumHeads:B.numHeads,oe=Q?[B.batchSize,ie,H,B.headSize]:void 0,de=B.nReps?B.nReps:1,fe=B.scale===0?1/Math.sqrt(B.headSize):B.scale,ke=Jt(B.headSize),Me=B.headSize/ke,De=12,Le={x:Math.ceil(H/De),y:Math.ceil(B.sequenceLength/De),z:B.batchSize*B.numHeads},Xe=[{type:12,data:B.sequenceLength},{type:12,data:Me},{type:12,data:H},{type:12,data:B.numHeads},{type:12,data:B.headSize},{type:1,data:fe},{type:12,data:y},{type:12,data:B.kvSequenceLength},{type:12,data:de}],_e=Q&&x&&He.size(x.dims)>0,lA=["type","type"];_e&&lA.push("type"),v&&lA.push("type"),S&&lA.push("type"),O&&lA.push("type");let LA=[{dims:te,dataType:u.dataType,gpuDataType:0}];return Q&&LA.push({dims:oe,dataType:u.dataType,gpuDataType:0}),{name:"AttentionProbs",shaderCache:{hint:`${ke};${v!==void 0};${x!==void 0};${n}`,inputDependencies:lA},getRunData:()=>({outputs:LA,dispatchGroup:Le,programUniforms:Xe}),getShaderSource:st=>{let ht=gA("q",u.dataType,u.dims,ke),pt=[ht,gA("key",h.dataType,h.dims,ke)];if(_e){let UA=gA("past_key",x.dataType,x.dims,ke);pt.push(UA)}v&&pt.push(gA("attention_bias",v.dataType,v.dims));let mt=S?gA("seq_lens",S.dataType,S.dims):void 0;mt&&pt.push(mt);let Bt=O?gA("total_sequence_length_input",O.dataType,O.dims):void 0;Bt&&pt.push(Bt);let tt=JA("output",u.dataType,te),lt=[tt];Q&&lt.push(JA("present_key",u.dataType,oe,ke));let wA=jA(1,ke);return`
  const TILE_SIZE = 12u;

  var<workgroup> tileQ: array<${ht.type.storage}, 144>;
  var<workgroup> tileK: array<${ht.type.storage}, 144>;
  ${st.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}]).declareVariables(...pt,...lt)}
  ${st.mainStart([De,De,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${de===1?"headIdx":"headIdx / uniforms.n_reps"};
    let kv_num_heads = ${de===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${HA(mt,Bt,!0)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${_e&&Q?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${Q?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}
    var value = ${wA}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${_e&&Q?`
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }`:`
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${Q?`if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }`:""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${wA}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(ke){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${ke}`)}})()};
        output[outputIdx] = ${tt.type.value} (sum * uniforms.alpha) + ${v?"attention_bias[outputIdx]":"0.0"};
    }
  }`}}},vi=(n,u,h,x,v,B,y=void 0,S=void 0)=>{let O=B+v.kvSequenceLength,H=v.nReps?v.nReps:1,te=v.vHiddenSize*H,Q=n>1&&x,ie=v.kvNumHeads?v.kvNumHeads:v.numHeads,oe=Q?[v.batchSize,ie,O,v.headSize]:void 0,de=[v.batchSize,v.sequenceLength,te],fe=12,ke={x:Math.ceil(v.vHeadSize/fe),y:Math.ceil(v.sequenceLength/fe),z:v.batchSize*v.numHeads},Me=[{type:12,data:v.sequenceLength},{type:12,data:O},{type:12,data:v.vHeadSize},{type:12,data:v.numHeads},{type:12,data:v.headSize},{type:12,data:te},{type:12,data:B},{type:12,data:v.kvSequenceLength},{type:12,data:H}],De=Q&&x&&He.size(x.dims)>0,Le=["type","type"];De&&Le.push("type"),y&&Le.push("type"),S&&Le.push("type");let Xe=[{dims:de,dataType:u.dataType,gpuDataType:0}];return Q&&Xe.push({dims:oe,dataType:u.dataType,gpuDataType:0}),{name:"AttentionScore",shaderCache:{hint:`${x!==void 0};${n}`,inputDependencies:Le},getRunData:()=>({outputs:Xe,dispatchGroup:ke,programUniforms:Me}),getShaderSource:_e=>{let lA=gA("probs",u.dataType,u.dims),LA=[lA,gA("v",h.dataType,h.dims)];De&&LA.push(gA("past_value",x.dataType,x.dims));let st=y?gA("seq_lens",y.dataType,y.dims):void 0;y&&LA.push(st);let ht=S?gA("total_sequence_length_input",S.dataType,S.dims):void 0;S&&LA.push(ht);let pt=[JA("output",u.dataType,de)];return Q&&pt.push(JA("present_value",u.dataType,oe)),`
  const TILE_SIZE = 12u;
  var<workgroup> tileQ: array<${lA.type.value}, 144>;
  var<workgroup> tileV: array<${lA.type.value}, 144>;
  ${_e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}]).declareVariables(...LA,...pt)}
  ${_e.mainStart([fe,fe,1])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${H===1?"headIdx":"headIdx / uniforms.n_reps"};
   let kv_num_heads = ${H===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${HA(st,ht,!0)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${De&&Q?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${Q?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${lA.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${De&&Q?`
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      `:`
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${Q?`
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }`:""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`}}},ps=(n,u,h,x,v,B,y,S,O,H,te=void 0,Q=void 0)=>{let ie=Math.min(n.outputCount,1+(y?1:0)+(S?1:0)),oe=ie>1?H.pastSequenceLength:0,de=oe+H.kvSequenceLength,fe=O&&He.size(O.dims)>0?O:void 0,ke=[u,h];ie>1&&y&&He.size(y.dims)>0&&ke.push(y),fe&&ke.push(fe),te&&ke.push(te),Q&&ke.push(Q);let Me=n.compute(Bn(ie,u,h,y,fe,H,oe,te,Q),{inputs:ke,outputs:ie>1?[-1,1]:[-1]})[0];n.compute(_a(Me,H.batchSize,H.numHeads,oe,H.sequenceLength,de,te,Q),{inputs:te&&Q?[Me,te,Q]:[Me],outputs:[]});let De=[Me,x];ie>1&&S&&He.size(S.dims)>0&&De.push(S),te&&De.push(te),Q&&De.push(Q),n.compute(vi(ie,Me,x,S,H,oe,te,Q),{inputs:De,outputs:ie>1?[0,2]:[0]})},yn=(n,u)=>{let h=[u.batchSize,u.numHeads,u.sequenceLength,u.headSize],x=u.sequenceLength,v=u.inputHiddenSize,B=u.headSize,y=12,S={x:Math.ceil(u.headSize/y),y:Math.ceil(u.sequenceLength/y),z:u.batchSize*u.numHeads},O=[n.inputs[0],n.inputs[1],n.inputs[2]],H=[{type:12,data:x},{type:12,data:v},{type:12,data:B},{type:12,data:u.numHeads},{type:12,data:u.headSize},{type:12,data:u.hiddenSize},{type:12,data:u.hiddenSize+u.hiddenSize+u.vHiddenSize}];return n.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:h,dataType:n.inputs[0].dataType,gpuDataType:0},{dims:h,dataType:n.inputs[0].dataType,gpuDataType:0},{dims:h,dataType:n.inputs[0].dataType,gpuDataType:0}],dispatchGroup:S,programUniforms:H}),getShaderSource:te=>{let Q=JA("output_q",O[0].dataType,h),ie=JA("output_k",O[0].dataType,h),oe=JA("output_v",O[0].dataType,h),de=gA("input",O[0].dataType,O[0].dims),fe=gA("weight",O[1].dataType,O[1].dims),ke=gA("bias",O[2].dataType,O[2].dims),Me=de.type.storage;return`
  const TILE_SIZE = 12u;
  var<workgroup> tileInput: array<${Me}, 144>;
  var<workgroup> tileWeightQ: array<${Me}, 144>;
  var<workgroup> tileWeightK: array<${Me}, 144>;
  var<workgroup> tileWeightV: array<${Me}, 144>;
  ${te.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}]).declareVariables(de,fe,ke,Q,ie,oe)}
  ${te.mainStart([y,y,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${Me}(0);
    var valueK = ${Me}(0);
    var valueV = ${Me}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`}},{inputs:O,outputs:[-1,-1,-1]})},m0=(n,u)=>{let h=ni(n.inputs,u),[x,v,B]=yn(n,h);return ps(n,x,v,B,n.inputs[4],void 0,void 0,void 0,n.inputs[5],h)}}),bc=Pe(()=>{dA(),Dt(),Ft(),Jr(),Rt(),C0=(n,u)=>{if(!n||n.length!==5)throw new Error("BatchNormalization requires 5 inputs");let h=(x,v,B)=>{let y=v.length;if(y!==x.length)throw new Error(`${B}: num dimensions != ${y}`);v.forEach((S,O)=>{if(S!==x[O])throw new Error(`${B}: dim[${O}] do not match`)})};if(n[0].dims.length>1){let x=u.format==="NHWC"?u.spatial?n[0].dims.slice(-1):n[0].dims.slice(-1).concat(n[0].dims.slice(1,n[0].dims.length-1)):n[0].dims.slice(1,u.spatial?2:void 0);h(n[1].dims,x,"Invalid input scale"),h(n[2].dims,x,"Invalid input B"),h(n[3].dims,x,"Invalid input mean"),h(n[4].dims,x,"Invalid input var")}else h(n[1].dims,[1],"Invalid input scale"),h(n[2].dims,[1],"Invalid input B"),h(n[3].dims,[1],"Invalid input mean"),h(n[4].dims,[1],"Invalid input var")},Vi=(n,u)=>{let{epsilon:h,spatial:x,format:v}=u,B=n[0].dims,y=x?Jt(B[B.length-1]):1,S=v==="NHWC"&&B.length>1?y:1,O=He.size(B)/y,H=x,te=H?B.length:B,Q=gA("x",n[0].dataType,n[0].dims,y),ie=gA("scale",n[1].dataType,n[1].dims,S),oe=gA("bias",n[2].dataType,n[2].dims,S),de=gA("inputMean",n[3].dataType,n[3].dims,S),fe=gA("inputVar",n[4].dataType,n[4].dims,S),ke=JA("y",n[0].dataType,te,y);return{name:"BatchNormalization",shaderCache:{hint:`${u.epsilon}_${u.format}_${x}_${y}`,inputDependencies:H?["rank","type","type","type","type"]:void 0},getShaderSource:Me=>`
  const epsilon = ${h};
  ${Me.registerUniform("outputSize","u32").declareVariables(Q,ie,oe,de,fe,ke)}
  ${Me.mainStart()}
  ${Me.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${ke.offsetToIndices(`global_idx * ${y}`)};
    ${(()=>{let De="";if(x)De=`let cOffset = ${B.length===1?"0u":v==="NHWC"?`outputIndices[${B.length-1}] / ${y}`:"outputIndices[1]"};`;else if(v==="NCHW")De=`
            ${ke.indicesSet("outputIndices","0","0")}
            let cOffset = ${ke.indicesToOffset("outputIndices")};`;else{De=`var cIndices = ${ie.type.indices}(0);
                       cIndices[0] = outputIndices[${B.length-1}];`;for(let Le=1;Le<ie.rank;Le++)De+=`cIndices[${Le}] = outputIndices[${Le}];`;De+=`let cOffset = ${ie.indicesToOffset("cIndices")};`}return De})()}
    let scale = ${ie.getByOffset("cOffset")};
    let bias = ${oe.getByOffset("cOffset")};
    let inputMean = ${de.getByOffset("cOffset")};
    let inputVar = ${fe.getByOffset("cOffset")};
    let x = ${Q.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${ke.setByOffset("global_idx","value")}
  }`,getRunData:()=>({outputs:[{dims:n[0].dims,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(O/64)},programUniforms:H?[{type:12,data:O},...KA(B)]:[{type:12,data:O}]})}},b0=n=>$e(n),I0=(n,u)=>{let{inputs:h,outputCount:x}=n,v=b0({...u,outputCount:x});if(X.webgpu.validateInputContent&&C0(h,v),u.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");n.compute(Vi(h,v))}}),Ic=Pe(()=>{Ft(),Rt(),Or=n=>{if(n[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(n[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(n[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(n[0].dims[2]!==n[1].dims[0])throw new Error("last dimension of input and bias are not the same")},w0=n=>{let u=n[0].dims,h=n[0].dims[2],x=He.size(u)/4,v=n[0].dataType,B=gA("input",v,u,4),y=gA("bias",v,[h],4),S=gA("residual",v,u,4),O=JA("output",v,u,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:u,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(x/64)}}),getShaderSource:H=>`
  const channels = ${h}u / 4;
  ${H.declareVariables(B,y,S,O)}

  ${H.mainStart()}
    ${H.guardAgainstOutOfBoundsWorkgroupSizes(x)}
    let value = ${B.getByOffset("global_idx")}
      + ${y.getByOffset("global_idx % channels")} + ${S.getByOffset("global_idx")};
    ${O.setByOffset("global_idx","value")}
  }`}},k0=n=>{Or(n.inputs),n.compute(w0(n.inputs))}}),u1=Pe(()=>{Dt(),Ft(),Jr(),Rt(),It=(n,u,h,x,v,B,y)=>{let S=Math.ceil(u/4),O="";O=typeof v=="string"?`${v}(a)`:v("a");let H=gA("inputData",h,[S],4),te=JA("outputData",x,[S],4),Q=[{name:"vec_size",type:"u32"}];return y&&Q.push(...y),`
      ${n.registerUniforms(Q).declareVariables(H,te)}

  ${B??""}

  ${n.mainStart()}
    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${H.getByOffset("global_idx")};
    ${te.setByOffset("global_idx",O)}
  }`},Ht=(n,u,h,x,v,B=n.dataType,y,S)=>{let O=[{type:12,data:Math.ceil(He.size(n.dims)/4)}];return y&&O.push(...y),{name:u,shaderCache:{hint:v,inputDependencies:["type"]},getShaderSource:H=>It(H,He.size(n.dims),n.dataType,B,h,x,S),getRunData:H=>({outputs:[{dims:n.dims,dataType:B}],dispatchGroup:{x:Math.ceil(He.size(H[0].dims)/64/4)},programUniforms:O})}},En=n=>{n.compute(Ht(n.inputs[0],"Abs","abs"))},is=n=>{n.compute(Ht(n.inputs[0],"Acos","acos"))},x0=n=>{n.compute(Ht(n.inputs[0],"Acosh","acosh"))},ta=n=>{n.compute(Ht(n.inputs[0],"Asin","asin"))},hs=n=>{n.compute(Ht(n.inputs[0],"Asinh","asinh"))},ra=n=>{n.compute(Ht(n.inputs[0],"Atan","atan"))},ms=n=>{n.compute(Ht(n.inputs[0],"Atanh","atanh"))},Wi=n=>$e(n),Mn=(n,u)=>{let h;switch(u.to){case 10:h="vec4<f16>";break;case 1:h="vec4<f32>";break;case 12:h="vec4<u32>";break;case 6:h="vec4<i32>";break;case 9:h="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${u.to}`)}n.compute(Ht(n.inputs[0],"Cast",h,void 0,u.cacheKey,u.to))},v0=n=>{let u,h,x=n.length>=2&&n[1].data!==0,v=n.length>=3&&n[2].data!==0;switch(n[0].dataType){case 1:u=x?n[1].getFloat32Array()[0]:-34028234663852886e22,h=v?n[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:u=x?n[1].getUint16Array()[0]:64511,h=v?n[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return $e({min:u,max:h})},ji=(n,u)=>{let h=u||v0(n.inputs),x=jA(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"Clip",v=>`clamp(${v}, vec4<${x}>(uniforms.min), vec4<${x}>(uniforms.max))`,void 0,h.cacheKey,void 0,[{type:n.inputs[0].dataType,data:h.min},{type:n.inputs[0].dataType,data:h.max}],[{name:"min",type:x},{name:"max",type:x}]),{inputs:[0]})},Br=n=>{n.compute(Ht(n.inputs[0],"Ceil","ceil"))},Bi=n=>{n.compute(Ht(n.inputs[0],"Cos","cos"))},Gn=n=>{n.compute(Ht(n.inputs[0],"Cosh","cosh"))},aa=n=>$e(n),oi=(n,u)=>{let h=jA(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"Elu",x=>`elu_vf32(${x})`,`
  const elu_alpha_ = ${h}(${u.alpha});

  fn elu_f32(a: ${h}) -> ${h} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${h}>) -> vec4<${h}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,u.cacheKey))},Cs=(n="f32")=>`
const r0: ${n} = 0.3275911;
const r1: ${n} = 0.254829592;
const r2: ${n} = -0.284496736;
const r3: ${n} = 1.421413741;
const r4: ${n} = -1.453152027;
const r5: ${n} = 1.061405429;

fn erf_vf32(v: vec4<${n}>) -> vec4<${n}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Dn=n=>{let u=jA(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"Erf",h=>`erf_vf32(${h})`,Cs(u)))},Qn=n=>{n.compute(Ht(n.inputs[0],"Exp","exp"))},Tn=n=>{n.compute(Ht(n.inputs[0],"Floor","floor"))},Ui=n=>{let u=jA(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"Gelu",h=>`0.5 * ${h} * (1.0 + erf_vf32(${h} * 0.7071067811865475))`,Cs(u)))},ns=(n,u)=>{let h=jA(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"LeakyRelu",x=>`select(leaky_relu_alpha_ * ${x}, ${x}, ${x} >= vec4<${h}>(0.0))`,`const leaky_relu_alpha_ = ${h}(${u.alpha});`,u.cacheKey))},Ki=n=>{n.compute(Ht(n.inputs[0],"Not",u=>`!${u}`))},B0=n=>{n.compute(Ht(n.inputs[0],"Neg",u=>`-${u}`))},Pn=n=>{n.compute(Ht(n.inputs[0],"Reciprocal",u=>`1.0/${u}`))},zn=n=>{let u=jA(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"Relu",h=>`select(vec4<${u}>(0.0), ${h}, ${h} > vec4<${u}>(0.0))`))},bs=n=>{n.compute(Ht(n.inputs[0],"Sigmoid",u=>`(1.0 / (1.0 + exp(-${u})))`))},Zi=n=>$e(n),Lr=(n,u)=>{let h=jA(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"HardSigmoid",x=>`max(vec4<${h}>(0.0), min(vec4<${h}>(1.0), ${u.alpha} * ${x} + vec4<${h}>(${u.beta})))`,void 0,u.cacheKey))},Sn=n=>{n.compute(Ht(n.inputs[0],"Sin","sin"))},Xi=n=>{n.compute(Ht(n.inputs[0],"Sinh","sinh"))},yi=n=>{n.compute(Ht(n.inputs[0],"Sqrt","sqrt"))},Sa=n=>{n.compute(Ht(n.inputs[0],"Tan","tan"))},Ei=n=>`sign(${n}) * (1 - exp(-2 * abs(${n}))) / (1 + exp(-2 * abs(${n})))`,Fn=n=>{n.compute(Ht(n.inputs[0],"Tanh",Ei))},$a=(n="f32")=>`
const fast_gelu_a: ${n} = 0.5;
const fast_gelu_b: ${n} = 0.7978845608028654;
const fast_gelu_c: ${n} = 0.035677408136300125;

fn tanh_v(v: vec4<${n}>) -> vec4<${n}> {
  return ${Ei("v")};
}
`,Nn=n=>`(fast_gelu_a + fast_gelu_a * tanh_v(${n} * (fast_gelu_c * ${n} * ${n} + fast_gelu_b))) * ${n}`,qi=n=>{let u=jA(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"FastGelu",Nn,$a(u),void 0,n.inputs[0].dataType))},On=(n,u)=>{let h=jA(n.inputs[0].dataType);return n.compute(Ht(n.inputs[0],"ThresholdedRelu",x=>`select(vec4<${h}>(0.0), ${x}, ${x} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${h}>(${u.alpha});`,u.cacheKey)),0},li=n=>{n.compute(Ht(n.inputs[0],"Log","log"))},Ln=(n,u)=>`
const alpha = vec4<${n}>(${u});
const one = ${n}(1.0);
const zero = ${n}(0.0);

fn quick_gelu_impl(x: vec4<${n}>) -> vec4<${n}> {
  let v = x *alpha;
  var x1 : vec4<${n}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,y0=n=>`quick_gelu_impl(${n})`,E0=(n,u)=>{let h=jA(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"QuickGelu",y0,Ln(h,u.alpha),u.cacheKey,n.inputs[0].dataType))}}),wc=Pe(()=>{Ft(),Rt(),u1(),sa=n=>{if(n[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(n[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(n[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(n[0].dims[2]!==n[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Mi=n=>{let u=n[0].dims.slice();u[2]=u[2]/2;let h=gA("input",n[0].dataType,n[0].dims,4),x=gA("bias",n[0].dataType,[n[0].dims[2]],4),v=JA("output",n[0].dataType,u,4),B=He.size(u)/4,y=jt(n[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:u,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(B/64)}}),getShaderSource:S=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${n[0].dims[2]/4/2}u;

  ${S.declareVariables(h,x,v)}

  ${Cs(y)}

  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes(B)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${v.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},ma=n=>{sa(n.inputs),n.compute(Mi(n.inputs))}}),kc=Pe(()=>{Dt(),Ft(),Rt(),Yn=(n,u,h,x,v,B,y,S,O,H,te,Q)=>{let ie,oe;typeof S=="string"?ie=oe=(De,Le)=>`${S}((${De}),(${Le}))`:typeof S=="function"?ie=oe=S:(ie=S.scalar,oe=S.vector);let de,fe=JA("outputData",te,x.length,4),ke=gA("aData",O,u.length,4),Me=gA("bData",H,h.length,4);if(v)if(B){let De=He.size(u)===1,Le=He.size(h)===1,Xe=u.length>0&&u[u.length-1]%4==0,_e=h.length>0&&h[h.length-1]%4==0;de=De||Le?fe.setByOffset("global_idx",oe(De?`${ke.type.value}(${ke.getByOffset("0")}.x)`:ke.getByOffset("global_idx"),Le?`${Me.type.value}(${Me.getByOffset("0")}.x)`:Me.getByOffset("global_idx"))):`
            let outputIndices = ${fe.offsetToIndices("global_idx * 4u")};
            let offsetA = ${ke.broadcastedIndicesToOffset("outputIndices",fe)};
            let offsetB = ${Me.broadcastedIndicesToOffset("outputIndices",fe)};
            ${fe.setByOffset("global_idx",oe(y||Xe?ke.getByOffset("offsetA / 4u"):`${ke.type.value}(${ke.getByOffset("offsetA / 4u")}[offsetA % 4u])`,y||_e?Me.getByOffset("offsetB / 4u"):`${Me.type.value}(${Me.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else de=fe.setByOffset("global_idx",oe(ke.getByOffset("global_idx"),Me.getByOffset("global_idx")));else{if(!B)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let De=(Le,Xe,_e="")=>{let lA=`aData[indexA${Xe}][componentA${Xe}]`,LA=`bData[indexB${Xe}][componentB${Xe}]`;return`
            let outputIndices${Xe} = ${fe.offsetToIndices(`global_idx * 4u + ${Xe}u`)};
            let offsetA${Xe} = ${ke.broadcastedIndicesToOffset(`outputIndices${Xe}`,fe)};
            let offsetB${Xe} = ${Me.broadcastedIndicesToOffset(`outputIndices${Xe}`,fe)};
            let indexA${Xe} = offsetA${Xe} / 4u;
            let indexB${Xe} = offsetB${Xe} / 4u;
            let componentA${Xe} = offsetA${Xe} % 4u;
            let componentB${Xe} = offsetB${Xe} % 4u;
            ${Le}[${Xe}] = ${_e}(${ie(lA,LA)});
          `};de=te===9?`
            var data = vec4<u32>(0);
            ${De("data",0,"u32")}
            ${De("data",1,"u32")}
            ${De("data",2,"u32")}
            ${De("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`
            ${De("outputData[global_idx]",0)}
            ${De("outputData[global_idx]",1)}
            ${De("outputData[global_idx]",2)}
            ${De("outputData[global_idx]",3)}
          `}return`
        ${n.registerUniform("vec_size","u32").declareVariables(ke,Me,fe)}

        ${Q??""}

        ${n.mainStart()}
        ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${de}
      }`},Ji=(n,u,h,x,v,B,y=h.dataType)=>{let S=h.dims.map(fe=>Number(fe)??1),O=x.dims.map(fe=>Number(fe)??1),H=!He.areEqual(S,O),te=S,Q=He.size(S),ie=!1,oe=!1,de=[H];if(H){let fe=NA.calcShape(S,O,!1);if(!fe)throw new Error("Can't perform binary op on the given tensors");te=fe.slice(),Q=He.size(te);let ke=He.size(S)===1,Me=He.size(O)===1,De=S.length>0&&S[S.length-1]%4==0,Le=O.length>0&&O[O.length-1]%4==0;de.push(ke),de.push(Me),de.push(De),de.push(Le);let Xe=1;for(let _e=1;_e<te.length;_e++){let lA=S[S.length-_e];if(lA!==O[O.length-_e])break;Xe*=lA}Xe%4==0?(oe=!0,ie=!0):(ke||Me||De||Le)&&(ie=!0)}else ie=!0;return de.push(ie),{name:n,shaderCache:{hint:u+de.map(fe=>fe.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:fe=>Yn(fe,S,O,te,ie,H,oe,v,h.dataType,x.dataType,y,B),getRunData:()=>({outputs:[{dims:te,dataType:y}],dispatchGroup:{x:Math.ceil(Q/64/4)},programUniforms:[{type:12,data:Math.ceil(He.size(te)/4)},...KA(S,O,te)]})}},ja=(n,u,h,x,v,B)=>{n.compute(Ji(u,v??"",n.inputs[0],n.inputs[1],h,x,B))},fr=n=>{ja(n,"Add",(u,h)=>`${u}+${h}`)},Hn=n=>{ja(n,"Div",(u,h)=>`${u}/${h}`)},Gs=n=>{ja(n,"Equal",{scalar:(u,h)=>`u32(${u}==${h})`,vector:(u,h)=>`vec4<u32>(${u}==${h})`},void 0,void 0,9)},ci=n=>{ja(n,"Mul",(u,h)=>`${u}*${h}`)},M0=n=>{let u=gA("input",n.inputs[0].dataType,n.inputs[0].dims).type.value;ja(n,"Pow",{scalar:(h,x)=>`pow_custom(${h},${x})`,vector:(h,x)=>`pow_vector_custom(${h},${x})`},`
    fn pow_custom(a : ${u}, b : ${u}) -> ${u} {
      if (b == ${u}(0.0)) {
        return ${u}(1.0);
      } else if (a < ${u}(0.0) && f32(b) != floor(f32(b))) {
        return ${u}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${u}(1.0), round(f32(abs(b) % ${u}(2.0))) != 1.0) * ${u}(${u==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${u}>, b : vec4<${u}>) -> vec4<${u}> {
      // TODO: implement vectorized pow
      return vec4<${u}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Rn=n=>{ja(n,"Sub",(u,h)=>`${u}-${h}`)},Vn=n=>{ja(n,"Greater",{scalar:(u,h)=>`u32(${u}>${h})`,vector:(u,h)=>`vec4<u32>(${u}>${h})`},void 0,void 0,9)},G0=n=>{ja(n,"Less",{scalar:(u,h)=>`u32(${u}<${h})`,vector:(u,h)=>`vec4<u32>(${u}<${h})`},void 0,void 0,9)},Ds=n=>{ja(n,"GreaterOrEqual",{scalar:(u,h)=>`u32(${u}>=${h})`,vector:(u,h)=>`vec4<u32>(${u}>=${h})`},void 0,void 0,9)},es=n=>{ja(n,"LessOrEqual",{scalar:(u,h)=>`u32(${u}<=${h})`,vector:(u,h)=>`vec4<u32>(${u}<=${h})`},void 0,void 0,9)}}),xc=Pe(()=>{Dt(),Ft(),Jr(),Rt(),Wn=(n,u)=>{if(!n||n.length<1)throw new Error("too few inputs");let h=n[0],x=h.dataType,v=h.dims.length;n.forEach((B,y)=>{if(y!==0){if(B.dataType!==x)throw new Error("input tensors should be one type");if(B.dims.length!==v)throw new Error("input tensors should have the same shape");B.dims.forEach((S,O)=>{if(O!==u&&S!==h.dims[O])throw new Error("non concat dimensions must match")})}})},Gi=(n,u)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${n}u>(${u});
    for (var i: u32 = 0u; i < ${n}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${n}u;
  }`,Xr=(n,u)=>{let h=n.length,x=[];for(let v=0;v<h;++v){let B=u.setByOffset("global_idx",n[v].getByIndices("indices"));h===1?x.push(B):v===0?x.push(`if (inputIndex == ${v}u) { ${B} }`):v===h-1?x.push(`else { ${B} }`):x.push(`else if (inputIndex == ${v}) { ${B} }`)}return x.join(`
`)},ar=(n,u,h,x)=>{let v=He.size(h),B=new Array(n.length),y=new Array(n.length),S=0,O=[],H=[],te=[{type:12,data:v}];for(let de=0;de<n.length;++de)S+=n[de].dims[u],B[de]=S,H.push(n[de].dims.length),y[de]=gA(`input${de}`,x,H[de]),O.push("rank"),te.push({type:12,data:B[de]});for(let de=0;de<n.length;++de)te.push(...KA(n[de].dims));te.push(...KA(h));let Q=JA("output",x,h.length),ie=Q.indicesGet("indices",u),oe=Array.from(Array(B.length).keys()).map(de=>`uniforms.sizeInConcatAxis${de}`).join(",");return{name:"Concat",shaderCache:{hint:`${u}`,inputDependencies:O},getRunData:()=>({outputs:[{dims:h,dataType:x}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:te}),getShaderSource:de=>`

  ${(()=>{de.registerUniform("outputSize","u32");for(let fe=0;fe<n.length;fe++)de.registerUniform(`sizeInConcatAxis${fe}`,"u32");return de.declareVariables(...y,Q)})()}

  ${Gi(B.length,oe)}

  ${de.mainStart()}
    ${de.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${Q.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${ie});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${B.length}u>(${oe});
      ${ie} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Xr(y,Q)}
  }`}},gi=(n,u)=>{let h=n.inputs,x=h[0].dims,v=He.normalizeAxis(u.axis,x.length);Wn(h,v);let B=x.slice();B[v]=h.reduce((S,O)=>S+(O.dims.length>v?O.dims[v]:0),0);let y=h.filter(S=>He.size(S.dims)>0);n.compute(ar(y,v,B,h[0].dataType),{inputs:y})},D0=n=>$e({axis:n.axis})}),qn=Pe(()=>{Dt(),Ft(),Qs=(n,u,h="f32")=>{switch(n.activation){case"Relu":return`value = max(value, ${u}(0.0));`;case"Sigmoid":return`value = (${u}(1.0) / (${u}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${u}(${h}(uniforms.clip_min)), ${u}(${h}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${u}(0.0), min(${u}(1.0), ${h}(uniforms.alpha) * value + ${h}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${h}(uniforms.alpha) * value, value, value >= ${u}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${n.activation}`)}},Ts=(n,u)=>{n.activation==="Clip"?u.push({type:1,data:n.clipMax},{type:1,data:n.clipMin}):n.activation==="HardSigmoid"?u.push({type:1,data:n.alpha},{type:1,data:n.beta}):n.activation==="LeakyRelu"&&u.push({type:1,data:n.alpha})},Ks=(n,u)=>{n.activation==="Clip"?u.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):n.activation==="HardSigmoid"?u.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):n.activation==="LeakyRelu"&&u.push({name:"alpha",type:"f32"})},jn=n=>{let u=n?.activation||"";if(u==="HardSigmoid"){let[h,x]=n?.activation_params||[.2,.5];return{activation:u,alpha:h,beta:x}}if(u==="Clip"){let[h,x]=n?.activation_params||[Yt,Wt];return{activation:u,clipMax:x,clipMin:h}}if(u==="LeakyRelu"){let[h]=n?.activation_params||[.01];return{activation:u,alpha:h}}return{activation:u}}}),d1=Pe(()=>{Ca=(n,u)=>{switch(n){case 1:return u;case 2:return`vec2<${u}>`;case 3:return`vec3<${u}>`;case 4:return`vec4<${u}>`;default:throw new Error(`${n}-component is not supported.`)}},Q0=n=>`
      ${n?"value = value + getBiasByOutputCoords(coords);":""}
      `}),vc=Pe(()=>{Un=n=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${n}.x), i32(${n}.y), i32(${n}.z), 1));
}
`}),f1=Pe(()=>{Dt(),Ft(),Rt(),qn(),ui=(n,u,h,x,v)=>{let B=x-h;return`
      ${Array.from({length:h}).map((y,S)=>`
      if (${rt(u.shape,S,u.rank)} != 1) {
        ${u.indicesSet(n,S,rt(v,S+B,x))}
      } else {
        ${u.indicesSet(n,S,0)}
      }`).join("")}
`},Di=(n,u,h,x,v=!1,B)=>{let y=n[0].dims,S=n[1].dims,O=y[y.length-2],H=S[S.length-1],te=y[y.length-1],Q=Jt(H),ie=Jt(te),oe=Jt(O),de=He.size(h)/Q/oe,fe=n.length>2,ke=x?x.slice(0,-2):h.slice(0,-2),Me=[He.size(ke),O,H],De=[{type:12,data:de},{type:12,data:O},{type:12,data:H},{type:12,data:te}];return Ts(u,De),De.push(...KA(ke,y,S)),fe&&De.push(...KA(n[2].dims)),De.push(...KA(Me)),{name:"MatMulNaive",shaderCache:{hint:`${u.activation};${Q};${ie};${oe};${v}`,inputDependencies:fe?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:B?B(h):h,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(de/64)},programUniforms:De}),getShaderSource:Le=>{let Xe=Nr("batch_dims",n[0].dataType,ke.length),_e=gA("a",n[0].dataType,y.length,ie),lA=gA("b",n[1].dataType,S.length,Q),LA=JA("output",n[0].dataType,Me.length,Q),st=jt(LA.type.tensor),ht=Qs(u,LA.type.value,st),pt=[_e,lA],mt="";if(fe){let tt=v?Q:1;pt.push(gA("bias",n[2].dataType,n[2].dims.length,tt)),mt=v?`value += bias[col / ${tt}];`:`value += ${LA.type.value}(bias[row + i]);`}let Bt=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];return Ks(u,Bt),`
  ${Le.registerUniforms(Bt).registerInternalVariables(Xe).declareVariables(...pt,LA)}
  ${Le.mainStart()}
    ${Le.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${Q})) * ${Q};
    var index1 = global_idx / (uniforms.N / ${Q});
    let stride1 = uniforms.M / ${oe};
    let row = (index1 % stride1) * ${oe};
    let batch = index1 / stride1;

    ${h.length===2?"":`let batch_indices = ${Xe.offsetToIndices("batch")};`}

    var a_indices: ${_e.type.indices};
    ${ui("a_indices",_e,_e.rank-2,Xe.rank,"batch_indices")}
    ${_e.indicesSet("a_indices",_e.rank-2,0)}
    ${_e.indicesSet("a_indices",_e.rank-1,0)}
    let a_offset = ${_e.indicesToOffset("a_indices")};

    var b_indices: ${lA.type.indices};
    ${ui("b_indices",lA,lA.rank-2,Xe.rank,"batch_indices")}
    ${lA.indicesSet("b_indices",lA.rank-2,0)}
    ${lA.indicesSet("b_indices",lA.rank-1,0)}
    let b_offset = ${lA.indicesToOffset("b_indices")};
    var values: array<${LA.type.value}, ${oe}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${ie}) {
      ${(()=>{let tt=`var a_data: ${_e.type.value};`;for(let lt=0;lt<ie;lt++)tt+=`
              let b_data${lt} = b[(b_offset + (k + ${lt}) * uniforms.N + col) / ${Q}];`;for(let lt=0;lt<oe;lt++){tt+=`a_data = a[(a_offset + (row + ${lt}) * uniforms.K + k) / ${ie}];`;for(let wA=0;wA<ie;wA++)tt+=`
            values[${lt}] = fma(${lA.type.value}(a_data${ie===1?"":`[${wA}]`}), b_data${wA}, values[${lt}]);
`}return tt})()}
    }
    for (var i = 0u; i < ${oe}u; i++) {
      var value = values[i];
      ${mt}
      ${ht}
      let cur_indices = ${LA.type.indices}(batch, row + i, col);
      let offset = ${LA.indicesToOffset("cur_indices")};
      ${LA.setByOffset(`offset / ${Q}`,"value")};
    }
  }
  `}}}}),p1=Pe(()=>{Dt(),Ft(),Rt(),qn(),f1(),d1(),ia=(n,u)=>n?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${u?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${u?", batchIndices":""});
        `,Kn=(n,u)=>n?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${u===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${u===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${u===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,_i=(n,u,h="f32",x,v=!1,B=32,y=!1,S=32)=>{let O=u[1]*n[1],H=u[0]*n[0],te=v?O:B,Q=v?B:O,ie=te/u[0],oe=B/u[1];if((!v||ie!==4||n[1]!==4)&&(v||ie!==3&&ie!==4)||te%u[0]!=0||B%u[1]!=0||n[0]!==4)throw new Error(`If transposeA ${v} is true, innerElementSize ${ie} and workPerThread[1] ${n[1]} must be 4.
      Otherwise, innerElementSize ${ie} must be 3 or 4.
  tileAWidth ${te} must be divisible by workgroupSize[0]${u[0]}. tileInner ${B} must be divisible by workgroupSize[1] ${u[1]}. colPerThread ${n[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${ie}<${h}>, ${te/ie}>, ${Q}>;
var<workgroup> mm_Bsub: array<array<vec4<${h}>, ${H/n[0]}>, ${B}>;

const rowPerThread = ${n[1]};
const colPerThread = ${n[0]};
const innerElementSize = ${ie};
const tileInner = ${B};

@compute @workgroup_size(${u[0]}, ${u[1]}, ${u[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${y?"0":"i32(globalId.z)"};
  ${x?`let batchIndices = ${x.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${O};

  let num_tiles = ${y?`${Math.ceil(S/B)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${y?`i32(globalId.z) * ${S}`:"0"};

  var acc: array<vec4<${h}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${oe};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${ia(v,x)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${oe}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${x?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${ie===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${Kn(v,ie)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Zs=(n,u)=>n?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${u?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${u?", batchIndices":""});
            `,T0=n=>n?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",di=(n,u,h="f32",x,v=!1,B=32,y=!1,S=32,O=!1)=>{let H=n[1]*u[1],te=n[0]*u[0],Q=v?H:B,ie=v?B:H;if(ie%u[1]!=0||Q%u[0]!=0||B%u[1]!=0)throw new Error(`tileAHight ${ie} must be divisible by workgroupSize[1]${u[1]}, tileAWidth ${Q} must be divisible by workgroupSize[0]${u[0]}, tileInner ${B} must be divisible by workgroupSize[1]${u[1]}`);let oe=ie/u[1],de=Q/u[0],fe=B/u[1],ke=O?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${H};
    let globalColStart = i32(workgroupId.x) * ${te};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${ie}; inputRow = inputRow + ${u[1]}) {
        for (var inputCol = localCol; inputCol < ${Q}; inputCol = inputCol + ${u[0]}) {
          ${Zs(v,x)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${B}; inputRow = inputRow + ${u[1]}) {
            for (var inputCol = localCol; inputCol < ${te}; inputCol = inputCol + ${u[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${x?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${h}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${u[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${v?`mm_Asub[k][localRow + innerRow * ${u[1]}];`:`mm_Asub[localRow + innerRow * ${u[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${u[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${u[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${H};

let tileRowA = i32(localId.y) * ${oe};
let tileColA = i32(localId.x) * ${de};
let tileRowB = i32(localId.y) * ${fe};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${oe}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${de}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Zs(v,x)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${fe}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${x?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${h}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${T0(v)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${h}, ${Q}>, ${ie}>;
  var<workgroup> mm_Bsub : array<array<${h}, ${te}>, ${B}>;
  const rowPerThread = ${n[1]};
  const colPerThread = ${n[0]};
  const tileInner = ${B};

@compute @workgroup_size(${u[0]}, ${u[1]}, ${u[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${y?"0":"i32(globalId.z)"};
    ${x?`let batchIndices = ${x.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${y?`${Math.ceil(S/B)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${y?`i32(globalId.z) * ${S}`:"0"};

    var acc : array<array<${h}, colPerThread>, rowPerThread>;
    ${ke}
  }
`},ct=(n,u,h,x,v=!1)=>{let[B,y,S,O]=x,H=jt(x[0].type.tensor);return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${B.type.indices}) -> ${Ca(n,H)} {
      var value = ${Ca(n,H)}(0.0);
      let col = colIn * ${n};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${y.type.indices};
        ${ui("aIndices",y,y.rank-2,B.rank,"batchIndices")}
        ${y.indicesSet("aIndices",y.rank-2,"u32(row)")}
        ${y.indicesSet("aIndices",y.rank-1,"u32(colIn)")}
        value = ${y.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${B.type.indices}) -> ${Ca(n,H)} {
      var value = ${Ca(n,H)}(0.0);
      let col = colIn * ${n};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${S.type.indices};
        ${ui("bIndices",S,S.rank-2,B.rank,"batchIndices")}
        ${S.indicesSet("bIndices",S.rank-2,"u32(row)")}
        ${S.indicesSet("bIndices",S.rank-1,"u32(colIn)")}
        value = ${S.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ca(n,H)}) {
      let col = colIn * ${n};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${u?`value = value + ${v?"bias[colIn]":`${Ca(n,H)}(bias[row])`};`:""}
        ${h}
        ${O.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},A=(n,u,h,x,v=!1,B)=>{let y=n[0].dims,S=n[1].dims,O=y.slice(0,-2),H=S.slice(0,-2),te=x?x.slice(0,-2):h.slice(0,-2),Q=He.size(te),ie=y[y.length-2],oe=y[y.length-1],de=S[S.length-1],fe=oe%4==0&&de%4==0,ke=ie<=8?[4,1,1]:[4,4,1],Me=[8,8,1],De=[Math.ceil(de/Me[0]/ke[0]),Math.ceil(ie/Me[1]/ke[1]),Math.ceil(Q/Me[2]/ke[2])],Le=fe?4:1,Xe=[...O,ie,oe/Le],_e=Xe.length,lA=[...H,oe,de/Le],LA=lA.length,st=[Q,ie,de/Le],ht=[{type:6,data:ie},{type:6,data:de},{type:6,data:oe}];Ts(u,ht),ht.push(...KA(te,Xe,lA));let pt=["rank","rank"],mt=n.length>2;return mt&&(ht.push(...KA(n[2].dims)),pt.push("rank")),ht.push(...KA(st)),{name:"MatMul",shaderCache:{hint:`${ke};${u.activation};${fe};${v}`,inputDependencies:pt},getRunData:()=>({outputs:[{dims:B?B(h):h,dataType:n[0].dataType}],dispatchGroup:{x:De[0],y:De[1],z:De[2]},programUniforms:ht}),getShaderSource:Bt=>{let tt=te.length,lt=Nr("batchDims",n[0].dataType,tt,1),wA=jt(n[0].dataType),UA=gA("a",n[0].dataType,_e,Le),At=gA("b",n[1].dataType,LA,Le),yt=JA("result",n[0].dataType,st.length,Le),gr=[UA,At];if(mt){let Oa=v?Le:1;gr.push(gA("bias",n[2].dataType,n[2].dims.length,Oa))}let ca=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Ks(u,ca);let Fi=jt(yt.type.tensor),A0=Qs(u,yt.type.value,Fi),e2=ct(Le,mt,A0,[lt,UA,At,yt],v);return`
  ${Bt.registerUniforms(ca).registerInternalVariables(lt).declareVariables(...gr,yt)}
  ${e2}
  ${fe?_i(ke,Me,wA,lt):di(ke,Me,wA,lt)}
                   `}}}}),Bc=Pe(()=>{Dt(),zi(),Rt(),qn(),d1(),vc(),p1(),t=(n,u,h,x,v=!1,B,y=4,S=4,O=4,H="f32")=>{let te=st=>{switch(st){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${st} is not supported.`)}},Q=n?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,ie=n?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,oe=n?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",de=n?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",fe=n?"row":"col",ke=n?"col":"row",Me=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${n?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${fe} / outWidth;
    let outCol = ${fe} % outWidth;

    let WRow = ${ke} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${ke} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${ke} % inChannels;
    var resData = ${Ca(y,H)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${oe} && xCol >= 0 && xCol < ${de}) {
      ${Q}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${(st=>{switch(st){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${H}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${st} is not supported.`)}})(y)}
    }
    return resData;`,De=n?u&&x?`
    let col = colIn * ${y};
    ${Me}`:`
    let col = colIn * ${y};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${Me}
    }
    return ${Ca(y,H)}(0.0);`:x&&h?`
    let col = colIn * ${y};
    ${Me}`:`
    let col = colIn * ${y};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${Me}
    }
    return ${Ca(y,H)}(0.0);`,Le=n?x&&h?te(S):`
    let col = colIn * ${S};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${te(S)}
    }
    return ${Ca(S,H)}(0.0);`:`
    let col = colIn * ${S};
    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {
      ${te(S)}
    }
    return ${Ca(S,H)}(0.0);`,Xe=Ca(O,H),_e=Ca(n?y:S,H),lA=Ca(n?S:y,H),LA=Qs(B,Xe,H);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${_e} {
      ${n?De:Le}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${lA} {
      ${n?Le:De}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${Xe}) {
      let col = colIn * ${O};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${n?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${ie}
      ${Q0(v)}
      ${LA}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},r=(n,u,h,x,v,B,y,S,O)=>{let H=u.format==="NHWC",te=H?n[0].dims[3]:n[0].dims[1],Q=h[0],ie=H?h[2]:h[3],oe=H?h[1]:h[2],de=H?h[3]:h[1],fe=H&&(te%4==0||te%3==0)&&de%4==0,ke=H?de:ie*oe,Me=H?ie*oe:de,De=[8,8,1],Le=x<=8?[4,1,1]:[4,4,1],Xe=[Math.ceil(ke/De[0]/Le[0]),Math.ceil(Me/De[1]/Le[1]),Math.ceil(Q/De[2]/Le[2])];Pt("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${Xe}`);let _e=fe?H&&te%4!=0?3:4:1,lA=De[1]*Le[1],LA=De[0]*Le[0],st=Math.max(De[0]*_e,De[1]),ht=x%lA==0,pt=v%LA==0,mt=B%st==0,Bt=fe?[_e,4,4]:[1,1,1],tt=[{type:6,data:x},{type:6,data:v},{type:6,data:B},{type:6,data:[u.pads[0],u.pads[1]]},{type:6,data:u.strides},{type:6,data:u.dilations}];Ts(u,tt),tt.push(...KA(n[0].dims,n[1].dims));let lt=["rank","rank"];return y&&(tt.push(...KA(n[2].dims)),lt.push("rank")),tt.push(...KA(h)),{name:"Conv2DMatMul",shaderCache:{hint:`${u.cacheKey};${_e};${fe};${ht};${pt};${mt};${lA};${LA};${st}`,inputDependencies:lt},getRunData:()=>({outputs:[{dims:O?O(h):h,dataType:n[0].dataType}],dispatchGroup:{x:Xe[0],y:Xe[1],z:Xe[2]},programUniforms:tt}),getShaderSource:wA=>{let UA=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Ks(u,UA);let At=fe?4:1,yt=jt(n[0].dataType),gr=`
      fn setOutputAtIndex(flatIndex : i32, value : ${fe?`vec4<${yt}>`:yt}) {
        result[flatIndex] = ${fe?`vec4<${yt}>`:yt}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${fe?`vec4<${yt}>`:yt}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${fe?"/ 4":""}, value);
      }`,ca=[gA("x",n[0].dataType,n[0].dims.length,_e===3?1:_e),gA("w",n[1].dataType,n[1].dims.length,At)],Fi=JA("result",n[0].dataType,h.length,At);if(y){let A0=gA("bias",n[2].dataType,n[2].dims.length,At);ca.push(A0),gr+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${fe?`vec4<${yt}>`:yt} {
          return bias[coords.${H?"w":"y"}${fe?"/ 4":""}];
        }`}return`
        ${Un("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${wA.registerUniforms(UA).declareVariables(...ca,Fi)}
        ${gr}
        ${t(H,ht,pt,mt,y,u,Bt[0],Bt[1],Bt[2],yt)}
        ${fe?_i(Le,De,yt,void 0,!H,st):di(Le,De,yt,void 0,!H,st,!1,void 0,S)}`}}}}),yc=Pe(()=>{Dt(),zi(),Ft(),Rt(),qn(),d1(),a=n=>{let u=1;for(let h=0;h<n.length;h++)u*=n[h];return u},s=n=>typeof n=="number"?[n,n,n]:n,i=(n,u)=>u<=1?n:n+(n-1)*(u-1),o=(n,u,h,x=1)=>{let v=i(u,x);return Math.floor((n[0]*(h-1)-h+v)/2)},c=(n,u,h,x,v)=>{v==null&&(v=o(n,u[0],x[0]));let B=[0,0,0,h];for(let y=0;y<3;y++)n[y]+2*v>=u[y]&&(B[y]=Math.trunc((n[y]-u[y]+2*v)/x[y]+1));return B},f=(n,u,h,x,v,B,y,S,O,H)=>{let te,Q,ie,oe;if(n==="VALID"&&(n=0),typeof n=="number"){te={top:n,bottom:n,left:n,right:n,front:n,back:n};let de=c([u,h,x,1],[S,O,H],1,[v,B,y],n);Q=de[0],ie=de[1],oe=de[2]}else if(Array.isArray(n)){if(!n.every((fe,ke,Me)=>fe===Me[0]))throw Error(`Unsupported padding parameter: ${n}`);te={top:n[0],bottom:n[1],left:n[2],right:n[3],front:n[4],back:n[5]};let de=c([u,h,x,1],[S,O,H],1,[v,B,y],n[0]);Q=de[0],ie=de[1],oe=de[2]}else{if(n!=="SAME_UPPER")throw Error(`Unknown padding parameter: ${n}`);{Q=Math.ceil(u/v),ie=Math.ceil(h/B),oe=Math.ceil(x/y);let de=(Q-1)*v+S-u,fe=(ie-1)*B+O-h,ke=(oe-1)*y+H-x,Me=Math.floor(de/2),De=de-Me,Le=Math.floor(fe/2),Xe=fe-Le,_e=Math.floor(ke/2);te={top:Le,bottom:Xe,left:_e,right:ke-_e,front:Me,back:De}}}return{padInfo:te,outDepth:Q,outHeight:ie,outWidth:oe}},m=(n,u,h,x,v,B=!1,y="channelsLast")=>{let S,O,H,te,Q;if(y==="channelsLast")[S,O,H,te,Q]=n;else{if(y!=="channelsFirst")throw new Error(`Unknown dataFormat ${y}`);[S,Q,O,H,te]=n}let[ie,,oe,de,fe]=u,[ke,Me,De]=s(h),[Le,Xe,_e]=s(x),lA=i(oe,Le),LA=i(de,Xe),st=i(fe,_e),{padInfo:ht,outDepth:pt,outHeight:mt,outWidth:Bt}=f(v,O,H,te,ke,Me,De,lA,LA,st),tt=B?ie*Q:ie,lt=[0,0,0,0,0];return y==="channelsFirst"?lt=[S,tt,pt,mt,Bt]:y==="channelsLast"&&(lt=[S,pt,mt,Bt,tt]),{batchSize:S,dataFormat:y,inDepth:O,inHeight:H,inWidth:te,inChannels:Q,outDepth:pt,outHeight:mt,outWidth:Bt,outChannels:tt,padInfo:ht,strideDepth:ke,strideHeight:Me,strideWidth:De,filterDepth:oe,filterHeight:de,filterWidth:fe,effectiveFilterDepth:lA,effectiveFilterHeight:LA,effectiveFilterWidth:st,dilationDepth:Le,dilationHeight:Xe,dilationWidth:_e,inShape:n,outShape:lt,filterShape:u}},p=(n,u,h,x,v,B)=>{let y=B==="channelsLast";y?n[0].dims[3]:n[0].dims[1];let S={x:h.map((ie,oe)=>oe)},O=[Math.ceil(a(S.x.map(ie=>h[ie]))/64),1,1];Pt("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${O}`);let H=[{type:12,data:He.size(h)},{type:12,data:x},{type:12,data:v},{type:12,data:u.strides},{type:12,data:u.dilations}];Ts(u,H),H.push(...KA(n[0].dims,n[1].dims));let te=["rank","rank"],Q=n.length===3;return Q&&(H.push(...KA(n[2].dims)),te.push("rank")),H.push(...KA(h)),{name:"Conv3DNaive",shaderCache:{hint:`${u.cacheKey};${y};1;${Q}`,inputDependencies:te},getRunData:()=>({outputs:[{dims:h,dataType:n[0].dataType}],dispatchGroup:{x:O[0],y:O[1],z:O[2]},programUniforms:H}),getShaderSource:ie=>{let oe=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:x.length},{name:"pads",type:"u32",length:v.length},{name:"strides",type:"u32",length:u.strides.length},{name:"dilations",type:"u32",length:u.dilations.length}];Ks(u,oe);let de=jt(n[0].dataType),fe=gA("x",n[0].dataType,n[0].dims.length,1),ke=gA("W",n[1].dataType,n[1].dims.length,1),Me=[fe,ke],De=JA("result",n[0].dataType,h.length,1),Le="";if(Q){let lA=gA("bias",n[2].dataType,n[2].dims.length,1);Me.push(lA),Le+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${de} {
          return bias[${rt("coords",y?4:1,5)}];
        }`}let Xe=Ca(1,de),_e=Qs(u,Xe,de);return`
            ${Le}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${fe.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${ke.getByIndices("aIndices")};
            }
          ${ie.registerUniforms(oe).declareVariables(...Me,De)}
          ${ie.mainStart()}
          ${ie.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${De.offsetToIndices("global_idx")};
              let batch = ${rt("coords",0,fe.rank)};
              let d2 = ${rt("coords",y?fe.rank-1:1,fe.rank)};
              let xFRCCorner = vec3<u32>(${rt("coords",y?1:2,fe.rank)},
              ${rt("coords",y?2:3,fe.rank)},
              ${rt("coords",y?3:4,fe.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${rt("uniforms.x_shape",y?1:2,fe.rank)};
              let xShapeZ = ${rt("uniforms.x_shape",y?2:3,fe.rank)};
              let xShapeW = ${rt("uniforms.x_shape",y?3:4,fe.rank)};
              let xShapeU = ${rt("uniforms.x_shape",y?4:1,fe.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${y?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${y?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${y?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${y?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${Q?"value = value + getBiasByOutputCoords(coords)":""};
              ${_e}
              result[global_idx] = f32(value);
          }`}}}}),Ec=Pe(()=>{Dt(),Ft(),Rt(),qn(),w=(n,u,h,x)=>{let v=n.length>2,B=v?"value += b[output_channel];":"",y=n[0].dims,S=n[1].dims,O=u.format==="NHWC",H=O?h[3]:h[1],te=H/u.group,Q=O&&te>=4?Jt(H):1,ie=He.size(h)/Q,oe=[{type:12,data:ie},{type:12,data:u.dilations},{type:12,data:[u.strides[0],u.strides[1]]},{type:12,data:[u.pads[0],u.pads[1]]},{type:12,data:te}];Ts(u,oe),oe.push(...KA(y,[S[0],S[1],S[2],S[3]/Q]));let de=v?["rank","rank","rank"]:["rank","rank"];return oe.push(...KA([h[0],h[1],h[2],h[3]/Q])),{name:"GroupedConv",shaderCache:{hint:`${u.cacheKey}_${Q}`,inputDependencies:de},getRunData:()=>({outputs:[{dims:x?x(h):h,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(ie/64)},programUniforms:oe}),getShaderSource:fe=>{let ke=JA("output",n[0].dataType,h.length,Q),Me=jt(ke.type.tensor),De=Qs(u,ke.type.value,Me),Le=gA("x",n[0].dataType,y.length),Xe=gA("w",n[1].dataType,S.length,Q),_e=[Le,Xe];v&&_e.push(gA("b",n[2].dataType,n[2].dims,Q));let lA=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:u.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];Ks(u,lA);let LA=O?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${Le.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${Xe.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${Le.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${Xe.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${fe.registerUniforms(lA).declareVariables(..._e,ke)}

  ${fe.mainStart()}
    ${fe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${ke.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${O?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${O?1:2}], outputIndices[${O?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${Q} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${O?2:1}];

    var value: ${ke.type.value} = ${ke.type.value}(0);
    ${LA}
    ${B}
    ${De}
    ${ke.setByOffset("global_idx","value")}
  }`}}},E=(n,u,h,x)=>{let v=n.length>2,B=Jt(h[3]),y=Jt(h[2]),S=He.size(h)/B/y,O=[n[0].dims[0],n[0].dims[1],n[0].dims[2],n[0].dims[3]/B],H=[n[1].dims[0],n[1].dims[1],n[1].dims[2],n[1].dims[3]/B],te=[h[0],h[1],h[2],h[3]/B],Q=[{type:12,data:S},{type:6,data:[u.strides[0],u.strides[1]]},{type:6,data:[u.pads[0],u.pads[1]]}];Ts(u,Q),Q.push(...KA(O,H,te));let ie=(y-1)*u.strides[1]+H[1];return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${u.cacheKey};${B};${y};${ie};${H[0]};${H[1]}`,inputDependencies:v?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:x?x(h):h,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:Q}),getShaderSource:oe=>{let de=JA("output",n[0].dataType,te.length,B),fe=jt(de.type.tensor),ke=Qs(u,de.type.value,fe),Me=gA("x",n[0].dataType,O.length,B),De=gA("w",n[1].dataType,H.length,B),Le=[Me,De];v&&Le.push(gA("b",n[2].dataType,n[2].dims,B));let Xe=v?"value += b[output_channel];":"",_e=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return Ks(u,_e),`
  ${oe.registerUniforms(_e).declareVariables(...Le,de)}
  ${oe.mainStart()}
    ${oe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${y}u;
    let col = (index1 % width1) * ${y}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${Me.type.value}, ${ie}>;
    var values: array<${de.type.value}, ${y}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${H[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${ie}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${Me.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${Me.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${H[1]}; w_width++) {
          let w_val = ${De.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${y}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${y}u; i++) {
      var value = values[i];
      ${Xe}
      ${ke}
      ${de.set("batch","row","col + i","output_channel","value")};
    }
  }`}}}}),Nt=Pe(()=>{Ft(),Bc(),yc(),p1(),Ec(),qn(),f1(),an(),P=(n,u,h,x,v,B)=>{let y=n[0],S=n.slice(B?1:2,B?3:4),O=S.length,H=u[0],te=u.slice(2).map((ie,oe)=>ie+(ie-1)*(h[oe]-1)),Q=S.map((ie,oe)=>ie+x[oe]+x[oe+O]).map((ie,oe)=>Math.floor((ie-te[oe]+v[oe])/v[oe]));return Q.splice(0,0,y),Q.splice(B?3:1,0,H),Q},Y=[2,3,1,0],Z=(n,u)=>{if(!n||n.length!==2&&n.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(n[0].dims.length>5)throw new Error("greater than 5D is not supported");if(n[0].dims.length!==n[1].dims.length)throw new Error("filter does not have same dimension as input");if(n[0].dims[u.format==="NHWC"?n[0].dims.length-1:1]!==n[1].dims[1]*u.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(n.length===3&&(n[2].dims.length!==1||n[1].dims[0]!==n[2].dims[0]))throw new Error("invalid bias");let h=n[0].dims.length-2;if(u.dilations.length!==h)throw new Error(`dilations should be ${h}D`);if(u.strides.length!==h)throw new Error(`strides should be ${h}D`);if(u.pads.length!==2*h)throw new Error(`pads should be ${2*h}D`);if(u.kernelShape.length!==0&&u.kernelShape.length!==n[1].dims.length-2)throw new Error("invalid kernel shape")},ee=(n,u)=>{let h=n.kernelShape.slice();h.length<u[1].dims.length-2&&h.push(...Array(u[1].dims.length-2-h.length).fill(0));for(let B=2;B<u[1].dims.length;++B)h[B-2]===0&&(h[B-2]=u[1].dims[B]);let x=n.pads.slice();WA.adjustPadsBasedOnAutoPad(u[0].dims,n.strides,n.dilations,h,x,n.format==="NHWC",n.autoPad);let v=Object.assign({},n);return Object.assign(v,{kernelShape:h,pads:x}),v},ce=n=>{let u=jn(n),h=n.format;return{autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][n.auto_pad],format:h,dilations:n.dilations,group:n.group,kernelShape:n.kernel_shape,pads:n.pads,strides:n.strides,wIsConst:n.w_is_const(),...u,cacheKey:`${n.format};${u.activation};`}},he=(n,u,h,x)=>{let v=h.format==="NHWC",B=P(u[0].dims,u[1].dims,h.dilations,h.pads,h.strides,v);if(h.group!==1){let _e=[u[0]];if(v){let lA=n.kernelCustomData.wT??n.compute(Ga(u[1],Y),{inputs:[1],outputs:[h.wIsConst?-2:-1]})[0];h.wIsConst&&!n.kernelCustomData.wT&&(n.kernelCustomData.wT=lA),_e.push(lA)}else _e.push(u[1]);return u.length===3&&_e.push(u[2]),void(!n.adapterInfo.isArchitecture("ampere")&&v&&u[1].dims[0]===h.group&&u[1].dims[1]===1&&h.dilations[0]===1&&h.dilations[1]===1?n.compute(E(_e,h,B,x),{inputs:_e}):n.compute(w(_e,h,B,x),{inputs:_e}))}let y=u.length===3,S=u[0].dims[v?1:2],O=u[0].dims[v?2:3],H=u[0].dims[v?3:1],te=u[1].dims[2],Q=u[1].dims[3],ie=B[v?1:2],oe=B[v?2:3],de=B[v?3:1],fe=v&&te===S&&Q===O&&h.pads[0]===0&&h.pads[1]===0;if(fe||te===1&&Q===1&&h.dilations[0]===1&&h.dilations[1]===1&&h.strides[0]===1&&h.strides[1]===1&&h.pads[0]===0&&h.pads[1]===0){let _e,lA,LA,st=B[0],ht=[];if(v){let Bt=n.kernelCustomData.wT??n.compute(Ga(u[1],Y),{inputs:[1],outputs:[h.wIsConst?-2:-1]})[0];if(h.wIsConst&&!n.kernelCustomData.wT&&(n.kernelCustomData.wT=Bt),fe){let tt=S*O*H;_e=u[0].reshape([1,st,tt]),lA=Bt.reshape([1,tt,de]),LA=[1,st,de]}else _e=u[0].reshape([st,S*O,H]),lA=Bt.reshape([1,H,de]),LA=[st,ie*oe,de];ht.push(_e),ht.push(lA)}else _e=u[0].reshape([st,H,S*O]),lA=u[1].reshape([1,de,H]),LA=[st,de,ie*oe],ht.push(lA),ht.push(_e);y&&ht.push(u[2]);let pt=LA[2],mt=ht[0].dims[ht[0].dims.length-1];return void(pt<8&&mt<8?n.compute(Di(ht,h,B,LA,v,x),{inputs:ht}):n.compute(A(ht,h,B,LA,v,x),{inputs:ht}))}let ke=n.kernelCustomData.wT??n.compute(Ga(u[1],Y),{inputs:[1],outputs:[h.wIsConst?-2:-1]})[0];h.wIsConst&&!n.kernelCustomData.wT&&(n.kernelCustomData.wT=ke);let Me=[u[0],ke];y&&Me.push(u[2]);let De=v?ie*oe:de,Le=v?de:ie*oe,Xe=te*Q*H;n.compute(r(Me,h,B,De,Le,Xe,y,!0,x),{inputs:Me})},Be=(n,u)=>{let h=u.format==="NHWC",x=[n.inputs[0].reshape(h?[n.inputs[0].dims[0],1,n.inputs[0].dims[1],n.inputs[0].dims[2]]:[n.inputs[0].dims[0],n.inputs[0].dims[1],1,n.inputs[0].dims[2]]),n.inputs[1].reshape([n.inputs[1].dims[0],n.inputs[1].dims[1],1,n.inputs[1].dims[2]])];n.inputs.length===3&&x.push(n.inputs[2]);let v=[0,u.pads[0],0,u.pads[1]],B=[1].concat(u.strides),y=[1].concat(u.dilations),S=[1].concat(u.kernelShape),O=ee({...u,pads:v,strides:B,dilations:y,kernelShape:S},x);he(n,x,O,H=>h?[H[0],H[2],H[3]]:[H[0],H[1],H[3]])},Qe=(n,u,h)=>{let x=h.format==="NHWC"?"channelsLast":"channelsFirst",v=ee(h,u),B=h.autoPad==="NOTSET"?h.pads:h.autoPad,y=m(u[0].dims,u[1].dims,h.strides,h.dilations,B,!1,x);n.compute(p(u,v,y.outShape,[y.filterDepth,y.filterHeight,y.filterWidth],[y.padInfo.front,y.padInfo.top,y.padInfo.left],x))},Ve=(n,u)=>{if(Z(n.inputs,u),n.inputs[0].dims.length===3)Be(n,u);else if(n.inputs[0].dims.length===5)Qe(n,n.inputs,u);else{let h=ee(u,n.inputs);he(n,n.inputs,h)}}}),V1=Pe(()=>{Dt(),zi(),Ft(),Rt(),Ke=(n,u,h)=>{let x=n.length>2,v=u.outputShape,B=u.format==="NHWC",y=u.group,S=n[1].dims,O=S[2]/y,H=S[3],te=B?Jt(O):1,Q=B?Jt(H):1,ie=B?H===1?te:Q:1,oe=He.size(v)/Q,de=[Math.ceil(oe/64),1,1];Pt("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${de}`);let fe=["rank","rank"],ke=[u.strides[0],u.strides[1]],Me=[u.kernelShape[B?1:2],u.kernelShape[B?2:3]],De=[u.dilations[0],u.dilations[1]],Le=[Me[0]+(u.dilations[0]<=1?0:(u.kernelShape[B?1:2]-1)*(u.dilations[0]-1)),Me[1]+(u.dilations[1]<=1?0:(u.kernelShape[B?2:3]-1)*(u.dilations[1]-1))],Xe=[Le[0]-1-Math.floor((u.pads[0]+u.pads[2])/2),Le[1]-1-Math.floor((u.pads[1]+u.pads[3])/2)],_e=[{type:12,data:oe},{type:12,data:ke},{type:12,data:Me},{type:12,data:De},{type:12,data:Le},{type:6,data:Xe},{type:12,data:O},{type:12,data:H},...KA(n[0].dims,n[1].dims)];return x&&(_e.push(...KA(n[2].dims)),fe.push("rank")),_e.push(...KA(v)),{name:"ConvTranspose2D",shaderCache:{hint:`${u.cacheKey};${te}${ie}${Q}${H===1}`,inputDependencies:fe},getRunData:()=>({dispatchGroup:{x:de[0],y:de[1],z:de[2]},outputs:[{dims:h?h(v):v,dataType:n[0].dataType}],programUniforms:_e}),getShaderSource:lA=>{let LA=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:ke.length},{name:"filter_dims",type:"u32",length:Me.length},{name:"dilations",type:"u32",length:Me.length},{name:"effective_filter_dims",type:"u32",length:Le.length},{name:"pads",type:"i32",length:Xe.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],st=jt(n[0].dataType),ht=B?1:2,pt=B?2:3,mt=B?3:1,Bt=gA("W",n[1].dataType,n[1].dims.length,ie),tt=gA("Dy",n[0].dataType,n[0].dims.length,te),lt=[tt,Bt];x&&lt.push(gA("bias",n[2].dataType,[v[mt]].length,Q));let wA=JA("result",n[0].dataType,v.length,Q),UA=`
            let outputIndices = ${wA.offsetToIndices(`global_idx * ${Q}`)};
            let batch = ${wA.indicesGet("outputIndices",0)};
            let d1 = ${wA.indicesGet("outputIndices",mt)};
            let r = ${wA.indicesGet("outputIndices",ht)};
            let c = ${wA.indicesGet("outputIndices",pt)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${wA.type.value}(0.0);
            var wR: u32 = 0;
            if (uniforms.dilations.x == 1) {
              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0
              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);
            }
            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${st}(dyRCorner) + ${st}(wR)) / ${st}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${st}(uniforms.Dy_shape[${ht}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              let idyR: u32 = u32(dyR);
              var wC: u32 = 0;
              if (uniforms.dilations.y == 1) {
                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0
                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);
              }

              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${st}(dyCCorner) + ${st}(wC)) / ${st}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${st}(uniforms.Dy_shape[${pt}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + ${te}) {
                  let xValue = ${B?tt.getByOffset(`${tt.indicesToOffset(`${tt.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${te}`):tt.get("batch","inputChannel","idyR","idyC")};
                  ${(()=>{let At="";if(te===1)At+=`
        let w_offset = ${Bt.indicesToOffset(`${Bt.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
        let wValue = ${Bt.getByOffset(`w_offset / ${ie}`)};
        dotProd = dotProd + xValue * wValue;`;else if(H===1)At+=`
          let wValue = ${Bt.getByOffset(`${Bt.indicesToOffset(`${Bt.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)} / ${ie}`)};
          dotProd = dotProd + dot(xValue, wValue);`;else for(let yt=0;yt<te;yt++)At+=`
            let wValue${yt} = ${Bt.getByOffset(`${Bt.indicesToOffset(`${Bt.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${yt}, wOutChannel)`)} / ${ie}`)};
            dotProd = dotProd + xValue[${yt}] * wValue${yt};`;return At})()}
                  inputChannel = inputChannel + ${te};
                }
                wC = wC + uniforms.strides.y - 1;
              }
              wR = wR + uniforms.strides[0] - 1;
            }
            let value = dotProd${x?` + bias[d1 / ${Q}]`:""};
            ${wA.setByOffset("global_idx","value")};
          `;return`
    ${lA.registerUniforms(LA).declareVariables(...lt,wA)}
      ${lA.mainStart()}
      ${lA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${UA}}`}}}}),Qa=Pe(()=>{V1(),qn(),an(),rA=(n,u,h,x,v,B)=>(n-1)*u+h+(x-1)*v+1-B,cA=(n,u,h,x,v)=>{let B=Math.floor(n/2);u==="SAME_UPPER"?(h[x]=B,h[v]=n-B):u==="SAME_LOWER"&&(h[x]=n-B,h[v]=B)},MA=(n,u,h,x,v,B,y,S,O,H)=>{let te=n.length-2,Q=H.length===0;O.length<te&&O.push(...Array(te-O.length).fill(0));let ie=n[0],oe=u[S?3:1]*v;for(let de=0,fe=n.length-te-(S?1:0);de<te;++de,++fe){let ke=n[fe],Me=Q?ke*y[de]:H[de],De=rA(ke,y[de],B[de],u[fe],h[de],Me);cA(De,x,B,de,de+te),Q&&H.push(y[de]*(ke-1)+O[de]+(u[fe]-1)*h[de]+1-B[de]-B[de+te])}H.splice(0,0,ie),H.splice(S?3:1,0,oe)},zA=(n,u)=>{let h=n.kernelShape.slice();if(n.kernelShape.length===0||n.kernelShape.reduce((Q,ie)=>Q*ie,1)===0){h.length=0;for(let Q=2;Q<u[1].dims.length;++Q)h.push(u[1].dims[Q])}let x=n.format==="NHWC";h.splice(0,0,u[1].dims[0]),h.splice(x?3:1,0,u[1].dims[1]);let v=n.pads.slice(),B=n.outputShape.slice(),y=n.outputPadding.slice(),S=u[0].dims,O=n.dilations.slice();if(O.reduce((Q,ie)=>Q+ie,0)===0){let Q=u[0].dims.length-2;O=new Array(Q).fill(1)}let H=n.strides.slice();if(H.reduce((Q,ie)=>Q+ie,0)===0){let Q=u[0].dims.length-2;H=new Array(Q).fill(1)}MA(S,h,O,n.autoPad,n.group,v,H,x,y,B);let te=Object.assign({},n);return Object.assign(te,{kernelShape:h,pads:v,outputPadding:y,outputShape:B,dilations:O,strides:H}),te},et=n=>{let u=jn(n),h=n.format,x=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof n.autoPad>"u"?0:n.autoPad],v=n.dilations,B=n.group,y=n.kernelShape,S=n.pads,O=n.strides,H=n.wIsConst();return{autoPad:x,format:h,dilations:v,group:B,kernelShape:y,outputPadding:n.outputPadding,outputShape:n.outputShape,pads:S,strides:O,wIsConst:H,...u,cacheKey:`${n.format};${u.activation};`}},at=(n,u)=>{if(!n||n.length!==2&&n.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(n[0].dims.length!==4&&n[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(n[0].dims.length!==n[1].dims.length)throw new Error("filter does not have same dimension as input");if(n[0].dims[u.format==="NHWC"?n[0].dims.length-1:1]!==n[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let h=n[1].dims[1]*u.group;if(n.length===3&&(n[2].dims.length!==1||n[2].dims[0]!==h))throw new Error("invalid bias");let x=n[0].dims.length-2;if(u.dilations.reduce((v,B)=>v+B,0)>0&&u.dilations.length!==x)throw new Error(`dilations should be ${x}D`);if(u.strides.reduce((v,B)=>v+B,0)>0&&u.strides.length!==x)throw new Error(`strides should be ${x}D`);if(u.pads.reduce((v,B)=>v+B,0)>0&&u.pads.length!==2*x)throw new Error(`pads should be ${2*x}D`);if(u.outputPadding.length!==x&&u.outputPadding.length!==0)throw new Error(`output_padding should be ${x}D`);if(u.kernelShape.reduce((v,B)=>v+B,0)>0&&u.kernelShape.length!==0&&u.kernelShape.length!==n[1].dims.length-2)throw new Error("invalid kernel shape");if(u.outputShape.length!==0&&u.outputShape.length!==n[0].dims.length-2)throw new Error("invalid output shape")},dt=(n,u,h,x)=>{let v=n.kernelCustomData.wT??n.compute(Ga(u[1],[2,3,0,1]),{inputs:[1],outputs:[h.wIsConst?-2:-1]})[0];h.wIsConst&&!n.kernelCustomData.wT&&(n.kernelCustomData.wT=v);let B=[u[0],v];u.length===3&&B.push(u[2]),n.compute(Ke(B,h,x),{inputs:B})},St=(n,u)=>{let h=u.format==="NHWC",x=[n.inputs[0].reshape(h?[n.inputs[0].dims[0],1,n.inputs[0].dims[1],n.inputs[0].dims[2]]:[n.inputs[0].dims[0],n.inputs[0].dims[1],1,n.inputs[0].dims[2]]),n.inputs[1].reshape([n.inputs[1].dims[0],n.inputs[1].dims[1],1,n.inputs[1].dims[2]])];n.inputs.length===3&&x.push(n.inputs[2]);let v=u.kernelShape;(v.length===0||v[0]===0)&&(v=[n.inputs[1].dims[2]]);let B=u.dilations;(B.length===0||B[0]===0)&&(B=[1]);let y=u.strides;(y.length===0||y[0]===0)&&(y=[1]);let S=u.pads;S.length===0&&(S=[0,0]),S=[0,S[0],0,S[1]],y=[1].concat(y),B=[1].concat(B),v=[1].concat(v);let O=u.outputPadding;O=[0].concat(O);let H=zA({...u,pads:S,strides:y,dilations:B,kernelShape:v,outputPadding:O},x);dt(n,x,H,te=>h?[te[0],te[2],te[3]]:[te[0],te[1],te[3]])},Zt=(n,u)=>{if(at(n.inputs,u),n.inputs[0].dims.length===3)St(n,u);else{let h=zA(u,n.inputs);dt(n,n.inputs,h)}}}),Fa=Pe(()=>{Dt(),Ft(),Jr(),Rt(),er=(n,u,h,x)=>{let v=He.size(u),B=u.length,y=gA("input",n,B),S=JA("output",n,B),O=h.dataType===6?h.getInt32Array()[0]:Number(h.getBigInt64Array()[0]),H=He.normalizeAxis(O,B);return{name:"CumSum",shaderCache:{hint:x.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:[{type:12,data:v},{type:12,data:H},...KA(u,u)]}),getShaderSource:te=>{let Q=` i32(${y.indicesGet("inputIndices","uniforms.axis")}) `,ie=rt("uniforms.input_shape","uniforms.axis",B),oe=x.reverse?Q+(x.exclusive?" + 1":""):"0",de=x.reverse?ie:Q+(x.exclusive?"":" + 1");return`
                ${te.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(y,S)}
                ${te.mainStart()}
                  ${te.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${S.offsetToIndices("global_idx")};
                  var sum = ${S.type.value}(0);
                  let first : i32 = ${oe};
                  let last : i32 = ${de};
                  for (var i : i32 = first; i < last; i++) {
                    ${y.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${y.getByIndices("inputIndices")};
                  }
                  ${S.setByOffset("global_idx","sum")};
                }`}}},pr=(n,u)=>{let h=n.inputs[0].dims,x=n.inputs[0].dataType,v=n.inputs[1];n.compute(er(x,h,v,u),{inputs:[0]})},hr=n=>{let u=n.exclusive===1,h=n.reverse===1;return $e({exclusive:u,reverse:h})}}),Ua=Pe(()=>{Dt(),Ft(),Jr(),Rt(),yr=n=>{if(!n||n.length!==1)throw new Error("DepthToSpace requires 1 input.");if(n[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},Er=(n,u,h,x)=>{let v=[];v.push(`fn perm(i: ${x.type.indices}) -> ${h.type.indices} {
    var a: ${h.type.indices};`);for(let B=0;B<u;++B)v.push(h.indicesSet("a",n[B],`i[${B}]`));return v.push("return a;}"),v.join(`
`)},Sr=(n,u)=>{let h,x,v,B,y,S,O=u.format==="NHWC",H=u.blocksize,te=u.mode==="DCR";O?([h,x,v,B]=n.dims,y=te?[h,x,v,H,H,B/H**2]:[h,x,v,B/H**2,H,H],S=te?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([h,x,v,B]=[n.dims[0],n.dims[2],n.dims[3],n.dims[1]],y=te?[h,H,H,B/H**2,x,v]:[h,B/H**2,H,H,x,v],S=te?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let Q=n.reshape(y),ie=Q.dims.length,oe=n.dataType,de=gA("a",oe,ie),fe=JA("output",oe,ie);return{name:"DepthToSpace",shaderCache:{hint:`${n.dims};${u.blocksize};${u.mode}`,inputDependencies:["rank"]},getRunData:ke=>{let Me=O?[h,x*H,v*H,B/H**2]:[h,B/H**2,x*H,v*H],De=He.size(Me),Le=Q.dims,Xe=He.sortBasedOnPerm(Le,S);return{outputs:[{dims:Me,dataType:ke[0].dataType}],dispatchGroup:{x:Math.ceil(De/64)},programUniforms:[{type:12,data:De},...KA(Le,Xe)]}},getShaderSource:ke=>`
  ${ke.registerUniform("output_size","u32").declareVariables(de,fe)}

  ${Er(S,ie,de,fe)}

  ${ke.mainStart()}
    ${ke.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${fe.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${fe.setByOffset("global_idx",de.getByIndices("aIndices"))}
  }`}},Wr=(n,u)=>{yr(n.inputs),n.compute(Sr(n.inputs[0],u))},na=n=>$e({blocksize:n.blocksize,mode:n.mode,format:n.format})}),Jn=Pe(()=>{Dt(),Ft(),Jr(),Rt(),Ba="^"+(oa="("+(qr="[a-zA-Z]|\\.\\.\\.")+")+")+"$",As="^"+("("+oa+",)*"+oa)+"$",os=class{constructor(n=-1){this.symbolToIndices=new Map,this.inputIndex=n}addSymbol(n,u){let h=this.symbolToIndices.get(n);h===void 0?h=[u]:h.push(u),this.symbolToIndices.set(n,h)}},ls=class{constructor(n,u){this.equation=u,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[h,x]=u.includes("->")?u.split("->",2):[u,""];if(!h.match(RegExp(As)))throw new Error("Invalid LHS term");if(h.split(",").forEach((v,B)=>{let y=n[B].dims.slice();if(!v.match(RegExp(Ba)))throw new Error("Invalid LHS term");let S=this.processTerm(v,!0,y,B);this.lhs.push(S)}),x==="")x+=[...this.symbolToInfo.entries()].filter(([v,B])=>B.count===1||v==="...").map(([v])=>v).join("");else if(!x.match(RegExp(oa)))throw new Error("Invalid RHS");x.match(RegExp(qr,"g"))?.forEach(v=>{if(v==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let B=this.symbolToInfo.get(v);if(B===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(B.dimValue)}}),this.rhs=this.processTerm(x,!1,this.outputDims)}addSymbol(n,u,h){let x=this.symbolToInfo.get(n);if(x!==void 0){if(x.dimValue!==u&&x.count!==1)throw new Error("Dimension mismatch");x.count++,x.inputIndices.push(h)}else x={count:1,dimValue:u,inputIndices:[h]};this.symbolToInfo.set(n,x)}processTerm(n,u,h,x=-1){let v=h.length,B=!1,y=[],S=0;if(!n.match(RegExp(Ba))&&!u&&n!=="")throw new Error("Invalid LHS term");let O=n.match(RegExp(qr,"g")),H=new os(x);return O?.forEach((te,Q)=>{if(te==="..."){if(B)throw new Error("Only one ellipsis is allowed per input term");B=!0;let ie=v-O.length+1;if(ie<0)throw new Error("Ellipsis out of bounds");if(y=h.slice(S,S+ie),this.hasEllipsis){if(this.ellipsisDims.length!==y.length||this.ellipsisDims.toString()!==y.toString())throw new Error("Ellipsis dimensions mismatch")}else{if(!u)throw new Error("Ellipsis must be specified in the LHS");this.hasEllipsis=!0,this.ellipsisDims=y}for(let oe=0;oe<y.length;oe++){let de=String.fromCharCode(48+oe);H.addSymbol(de,Q+oe),this.addSymbol(de,h[S++],x)}}else H.addSymbol(te,Q+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(te,h[S++],x)}),H}},Ps=n=>n+"_max",Qi=(n,u,h,x)=>{let v=n.map(O=>O.length).map((O,H)=>gA(`input${H}`,u,O)),B=He.size(x),y=JA("output",u,x.length),S=[...h.symbolToInfo.keys()].filter(O=>!h.rhs.symbolToIndices.has(O));return{name:"Einsum",shaderCache:{hint:h.equation,inputDependencies:n.map(()=>"rank")},getRunData:()=>{let O=S.filter(te=>h.symbolToInfo.has(te)).map(te=>({type:12,data:h.symbolToInfo.get(te)?.dimValue||0}));O.push({type:12,data:B});let H=n.map((te,Q)=>[...KA(te)]).reduce((te,Q)=>te.concat(Q),O);return H.push(...KA(x)),{outputs:[{dims:x,dataType:u}],dispatchGroup:{x:Math.ceil(B/64)},programUniforms:H}},getShaderSource:O=>{let H=[],te=[],Q=[],ie=[],oe=[],de=h.symbolToInfo.size===h.rhs.symbolToIndices.size;h.symbolToInfo.forEach((ke,Me)=>{if(h.rhs.symbolToIndices.has(Me)){let De=h.rhs.symbolToIndices.get(Me)?.[0];De!==void 0&&h.lhs.forEach((Le,Xe)=>{if(ke.inputIndices.includes(Xe)){let _e=Le.symbolToIndices.get(Me);if(_e===void 0)throw new Error("Invalid symbol error");_e.forEach(lA=>{H.push(`${v[Xe].indicesSet(`input${Xe}Indices`,lA,y.indicesGet("outputIndices",De))}`)})}})}else h.lhs.forEach((De,Le)=>{if(ke.inputIndices.includes(Le)){let Xe=De.symbolToIndices.get(Me);if(Xe===void 0)throw new Error("Invalid symbol error");Xe.forEach(_e=>{te.push(`${v[Le].indicesSet(`input${Le}Indices`,_e,`${Me}`)}`)}),oe.push(`prod *= ${v[Le].getByIndices(`input${Le}Indices`)};`)}}),Q.push(`for(var ${Me}: u32 = 0; ${Me} < uniforms.${Ps(Me)}; ${Me}++) {`),ie.push("}")});let fe=de?[...H,`let sum = ${v.map((ke,Me)=>ke.getByIndices(`input${Me}Indices`)).join(" * ")};`]:[...H,"var sum = 0.0;",...Q,...te,"var prod = 1.0;",...oe,"sum += prod;",...ie];return`
            ${O.registerUniforms(S.map(ke=>({name:`${Ps(ke)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...v,y)}

            ${O.mainStart()}
            ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${y.offsetToIndices("global_idx")};
            ${v.map((ke,Me)=>`var input${Me}Indices: ${v[Me].type.indices};`).join(`
`)}
            ${fe.join(`
`)};
            ${y.setByOffset("global_idx","sum")};
          }`}}},fi=(n,u)=>{let h=new ls(n.inputs,u.equation),x=h.outputDims,v=n.inputs.map((B,y)=>B.dims);n.compute(Qi(v,n.inputs[0].dataType,h,x))},pi=n=>{let u=n.equation.replace(/\s+/g,"");return $e({equation:u})}}),Mc=Pe(()=>{Dt(),Ft(),Rt(),Ti=n=>{if(!n||n.length!==2)throw new Error("Expand requires 2 input.");let u=n[0].dims,h=Array.from(n[1].getBigInt64Array(),Number),x=h.length<u.length?0:h.length-u.length,v=u.length<h.length?0:u.length-h.length;for(;x<h.length&&v<u.length;++x,++v)if(h[x]!==u[v]&&h[x]!==1&&u[v]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Zn=(n,u)=>{let h=n.length-u.length,x=[];for(let v=0;v<h;++v)x.push(n[v]);for(let v=0;v<u.length;++v)x.push(u[v]===1?n[v+h]:u[v]);return x},P0=(n,u)=>n.length>u.length?Zn(n,u):Zn(u,n),z0=n=>{let u=n[0].dims,h=Array.from(n[1].getBigInt64Array(),Number),x=P0(u,h),v=n[0].dataType,B=v===9||He.size(u)===1,y=v===9||u.length>0&&u[u.length-1]%4==0?4:1,S=B||x.length>0&&x[x.length-1]%4==0?4:1,O=Math.ceil(He.size(x)/S),H=[{type:12,data:O},...KA(u,x)];return{name:"Expand",shaderCache:{hint:`${x.length};${y}${S}`,inputDependencies:["rank"]},getShaderSource:te=>{let Q,ie=gA("input",v,u.length,y),oe=JA("output",v,x.length,S);if(v===9){let de=(fe,ke,Me="")=>`
          let outputIndices${ke} = ${oe.offsetToIndices(`outputOffset + ${ke}u`)};
          let offset${ke} = ${ie.broadcastedIndicesToOffset(`outputIndices${ke}`,oe)};
          let index${ke} = offset${ke} / 4u;
          let component${ke} = offset${ke} % 4u;
          ${fe}[${ke}] = ${Me}(${ie.getByOffset(`index${ke}`)}[component${ke}]);
        `;Q=`
        let outputOffset = global_idx * ${S};
        var data = vec4<u32>(0);
        ${de("data",0,"u32")}
        ${de("data",1,"u32")}
        ${de("data",2,"u32")}
        ${de("data",3,"u32")}
        ${oe.setByOffset("global_idx","data")}
      }`}else Q=`
        let outputIndices = ${oe.offsetToIndices(`global_idx * ${S}`)};
        let inputOffset = ${ie.broadcastedIndicesToOffset("outputIndices",oe)};
        let data = ${oe.type.value}(${ie.getByOffset(`inputOffset / ${y}`)});
        ${oe.setByOffset("global_idx","data")}
      }`;return`
    ${te.registerUniform("vec_size","u32").declareVariables(ie,oe)}
    ${te.mainStart()}
    ${te.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${Q}`},getRunData:()=>({outputs:[{dims:x,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(O/64)},programUniforms:H})}},$i=n=>{Ti(n.inputs),n.compute(z0(n.inputs),{inputs:[0]})}}),W1=Pe(()=>{Dt(),Ft(),Rt(),u1(),d2=n=>{let u=n[0].dataType,h=He.size(n[0].dims),x=He.size(n[1].dims),v=x%4==0;return{name:"FastGeluWithBias",shaderCache:{hint:`${v}`,inputDependencies:["type","type"]},getShaderSource:B=>{let y=gA("x",u,[1],4),S=gA("bias",u,[1],4),O=JA("y",u,[1],4),H=Q=>`
      let bias${Q}_offset: u32 = (global_idx * 4 + ${Q}) % uniforms.bias_size;
      let bias${Q} = ${S.getByOffset(`bias${Q}_offset / 4`)}[bias${Q}_offset % 4];`,te=v?`
      let bias = ${S.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${H(0)}${H(1)}${H(2)}${H(3)}
      let bias = ${y.type.value}(bias0, bias1, bias2, bias3);`;return`${B.registerUniforms([{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}]).declareVariables(y,S,O)}

    ${$a(jA(u))}

    ${B.mainStart(cr)}
      ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${y.getByOffset("global_idx")};
      ${te}
      let x_in = x + bias;
      ${O.setByOffset("global_idx",Nn("x_in"))}
    }`},getRunData:B=>({outputs:[{dims:B[0].dims,dataType:B[0].dataType}],programUniforms:[{type:12,data:Math.ceil(h/4)},{type:12,data:x}],dispatchGroup:{x:Math.ceil(h/cr/4)}})}},f2=n=>{n.inputs.length<2||He.size(n.inputs[1].dims)===0?qi(n):n.compute(d2(n.inputs))}}),j1=Pe(()=>{Dt(),Ft(),Jr(),Rt(),p2=n=>{if(!n||n.length!==2)throw new Error("Gather requires 2 inputs.")},h2=(n,u)=>{let h=n[0].dims,x=n[1].dims,v=h.length,B=He.normalizeAxis(u.axis,v),y=h.slice(0);y.splice(B,1,...x);let S=h[B],O=n[0].dataType===9?4:1,H=Math.ceil(He.size(y)/O),te=[{type:12,data:H},{type:6,data:S},{type:12,data:B},...KA(n[0].dims,n[1].dims,y)];return{name:"Gather",shaderCache:{hint:u.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:y,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(H/64)},programUniforms:te}),getShaderSource:Q=>{let ie,oe=gA("data",n[0].dataType,n[0].dims.length,O),de=gA("inputIndices",n[1].dataType,n[1].dims.length),fe=JA("output",n[0].dataType,y.length,O),ke=Me=>{let De=x.length,Le=`var indicesIndices${Me}  = ${de.type.indices}(0);`;for(let Xe=0;Xe<De;Xe++)Le+=`${De>1?`indicesIndices${Me}[${Xe}]`:`indicesIndices${Me}`} = ${y.length>1?`outputIndices${Me}[uniforms.axis + ${Xe}]`:`outputIndices${Me}`};`;Le+=`
          var idx${Me} = ${de.getByIndices(`indicesIndices${Me}`)};
          if (idx${Me} < 0) {
            idx${Me} = idx${Me} + uniforms.axisDimLimit;
          }
          var dataIndices${Me} : ${oe.type.indices};
        `;for(let Xe=0,_e=0;Xe<v;Xe++)Xe===B?(Le+=`${v>1?`dataIndices${Me}[${Xe}]`:`dataIndices${Me}`} = u32(idx${Me});`,_e+=De):(Le+=`${v>1?`dataIndices${Me}[${Xe}]`:`dataIndices${Me}`} = ${y.length>1?`outputIndices${Me}[${_e}]`:`outputIndices${Me}`};`,_e++);return Le};if(n[0].dataType===9){let Me=(De,Le,Xe="")=>`
          let outputIndices${Le} = ${fe.offsetToIndices(`outputOffset + ${Le}u`)};
          ${ke(Le)};
          let offset${Le} = ${oe.indicesToOffset(`dataIndices${Le}`)};
          let index${Le} = offset${Le} / 4u;
          let component${Le} = offset${Le} % 4u;
          ${De}[${Le}] = ${Xe}(${oe.getByOffset(`index${Le}`)}[component${Le}]);
        `;ie=`
        let outputOffset = global_idx * ${O};
        var value = vec4<u32>(0);
        ${Me("value",0,"u32")}
        ${Me("value",1,"u32")}
        ${Me("value",2,"u32")}
        ${Me("value",3,"u32")}
        ${fe.setByOffset("global_idx","value")}
      `}else ie=`
      let outputIndices = ${fe.offsetToIndices("global_idx")};
      ${ke("")};
      let value = ${oe.getByIndices("dataIndices")};
      ${fe.setByOffset("global_idx","value")};
      `;return`
      ${Q.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(oe,de,fe)}
      ${Q.mainStart()}
        ${Q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${ie}
      }`}}},m2=n=>$e({axis:n.axis}),po=(n,u)=>{let h=n.inputs;p2(h),n.compute(h2(n.inputs,u))}}),K=Pe(()=>{Dt(),Ft(),Rt(),C2=(n,u,h,x,v,B,y,S,O)=>{let H=[{type:12,data:B},{type:12,data:x},{type:12,data:v},{type:12,data:h},{type:12,data:y},{type:12,data:S},{type:12,data:O}],te=[B];return H.push(...KA(u.dims,te)),n.compute({name:"computeSliceOffsets",shaderCache:{hint:`${v.length}_${h.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:te,dataType:n.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(B/64)},programUniforms:H}),getShaderSource:Q=>{let ie=[gA("indices_data",u.dataType,u.dims.length),JA("input_slice_offsets_data",12,1,1)],oe=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:v.length},{name:"sizes_from_slice_dims_data",type:"u32",length:h.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`
  ${Q.registerUniforms(oe).declareVariables(...ie)}
  ${Q.mainStart()}
    ${Q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${v.length===1?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${h.length===1?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`}},{inputs:[u],outputs:[-1]})[0]},b2=(n,u)=>{let h=n.inputs,x=h[0].dims,v=h[0].dataType,B=h[1].dims,y=B[B.length-1],S=He.sizeToDimension(B,B.length-1),O=He.sizeFromDimension(x,u.batchDims+y),H=He.sizeToDimension(x,u.batchDims),te=He.sizeFromDimension(x,u.batchDims),Q=S/H,ie=new Array(y),oe=O;for(let Le=0;Le<y;++Le)ie[y-1-Le]=oe,oe*=x[u.batchDims+y-1-Le];let de=C2(n,h[1],ie,u.batchDims,x,S,Q,te,y),fe=u.batchDims+y;if(fe>x.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let ke=B.slice(0,-1).concat(x.slice(fe)),Me=He.size(ke),De=[{type:12,data:Me},{type:12,data:O},...KA(h[0].dims,de.dims,ke)];n.compute({name:"GatherND",shaderCache:{hint:u.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:ke,dataType:v}],dispatchGroup:{x:Math.ceil(Me/64)},programUniforms:De}),getShaderSource:Le=>{let Xe=gA("data",h[0].dataType,h[0].dims.length),_e=gA("slice_offsets",12,de.dims.length),lA=JA("output",h[0].dataType,ke.length);return`
          ${Le.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(Xe,_e,lA)}
            ${Le.mainStart()}
            ${Le.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`}},{inputs:[h[0],de]})},ho=n=>({batchDims:n.batch_dims,cacheKey:""})}),U=Pe(()=>{Dt(),Ft(),Jr(),Rt(),I2=(n,u)=>{if(n.length<3||n.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let h=He.normalizeAxis(u.quantizeAxis,n[0].dims.length),x=u.blockSize,v=n[0],B=n[2],y=n.length===4?n[3]:void 0;if(B.dims.length!==v.dims.length||!v.dims.map((S,O)=>O===h?Math.ceil(S/x)===B.dims[O]:S===B.dims[O]).reduce((S,O)=>S&&O,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(y){if(y.dataType!==v.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(y.dims.length!==B.dims.length||!y.dims.map((S,O)=>S===B.dims[O]).reduce((S,O)=>S&&O,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},w2=(n,u)=>{let h=n[0].dims,x=n[1].dims,v=h.length,B=He.normalizeAxis(u.gatherAxis,v),y=He.normalizeAxis(u.quantizeAxis,v),S=h.slice(0);S.splice(B,1,...x);let O=He.size(S),H=n[2].dataType,te=n[0].dataType===22,Q=[{type:12,data:O},{type:12,data:y},{type:12,data:B},{type:12,data:u.blockSize},...KA(...n.map((ie,oe)=>ie.dims),S)];return{name:"GatherBlockQuantized",shaderCache:{hint:`${u.cacheKey};${n.filter((ie,oe)=>oe!==1).map(ie=>ie.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:n.length},(ie,oe)=>"rank")},getRunData:()=>({outputs:[{dims:S,dataType:H}],dispatchGroup:{x:Math.ceil(O/64)},programUniforms:Q}),getShaderSource:ie=>{let oe=gA("data",n[0].dataType,n[0].dims.length),de=gA("inputIndices",n[1].dataType,n[1].dims.length),fe=gA("scales",n[2].dataType,n[2].dims.length),ke=n.length>3?gA("zeroPoint",n[3].dataType,n[3].dims.length):void 0,Me=JA("output",H,S.length),De=[oe,de,fe];return ke&&De.push(ke),`
        ${ie.registerUniforms([{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}]).declareVariables(...De,Me)}
        ${ie.mainStart()}
        let output_indices = ${Me.offsetToIndices("global_idx")};
        var indices_indices = ${de.type.indices}(0);
        ${x.length>1?`
          for (var i: u32 = 0; i < ${x.length}; i++) {
            let index = ${Me.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${de.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${Me.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${oe.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${Me.indicesGet("output_indices","i")};
          ${oe.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${de.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${h[B]};
        }
        ${oe.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${S.length}; i++) {
          let index = ${Me.indicesGet("output_indices",`i + ${x.length} - 1`)};
          ${oe.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${oe.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${oe.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${te?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${fe.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${fe.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${fe.getByIndices("scale_indices")};
        ${ke?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${ke.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${ke.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${te?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${jA(H)}(quantized_data - zero_point) * scale;
        ${Me.setByOffset("global_idx","dequantized_data")};
    }`}}},k2=(n,u)=>{let h=n.inputs;I2(h,u),n.compute(w2(n.inputs,u))},x2=n=>$e({blockSize:n.blockSize,gatherAxis:n.gatherAxis,quantizeAxis:n.quantizeAxis})}),Ee=Pe(()=>{Dt(),Ft(),Jr(),Rt(),mo=n=>{if(!n||n.length!==2)throw new Error("GatherElements requires 2 inputs.");if(n[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(n[0].dims.length!==n[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},v2=(n,u)=>{let h=n[0].dims,x=n[0].dataType,v=h.length,B=n[1].dims,y=n[1].dataType,S=He.normalizeAxis(u.axis,v),O=h[S],H=B.slice(0),te=He.size(H),Q=gA("input",x,v),ie=gA("indicesInput",y,B.length),oe=JA("output",x,H.length),de=[{type:12,data:te},{type:6,data:O},{type:12,data:S}];return de.push(...KA(h,B,H)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:H,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(te/64)},programUniforms:de}),getShaderSource:fe=>`
      ${fe.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(Q,ie,oe)}
      ${fe.mainStart()}
      ${fe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${oe.offsetToIndices("global_idx")};

      var idx = ${ie.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${Q.type.indices}(outputIndices);
      ${Q.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${Q.getByIndices("inputIndices")};

      ${oe.setByOffset("global_idx","value")};
  }`}},B2=n=>$e({axis:n.axis}),Co=(n,u)=>{let h=n.inputs;mo(h),n.compute(v2(n.inputs,u))}}),eA=Pe(()=>{Dt(),Ft(),Rt(),y2=n=>{if(!n)throw new Error("Input is missing");if(n.length<2||n.length>3)throw new Error("Invaid input number.");if(n.length===3&&n[2].dims.length>2)throw new Error("Invalid input shape of C");if(n[0].dataType!==n[1].dataType||n.length===3&&n[0].dataType!==n[2].dataType)throw new Error("Input types are mismatched")},E2=(n,u)=>{let h=n[0].dims.slice(),x=n[1].dims.slice(),[v,B,y]=bA.getShapeOfGemmResult(h,u.transA,x,u.transB,n.length===3?n[2].dims:void 0),S=[v,B];if(!S)throw new Error("Can't use gemm on the given tensors");let O=16,H=Math.ceil(B/O),te=Math.ceil(v/O),Q=(He.size(S),[{type:12,data:H},{type:12,data:v},{type:12,data:B},{type:12,data:y},{type:1,data:u.alpha},{type:1,data:u.beta}]),ie=["type","type"];return n.length===3&&(Q.push(...KA(n[2].dims)),ie.push("rank")),Q.push(...KA(S)),{name:"GemmShared",shaderCache:{hint:`${u.cacheKey}`,inputDependencies:ie},getRunData:()=>({outputs:[{dims:S,dataType:n[0].dataType}],dispatchGroup:{x:H*te},programUniforms:Q}),getShaderSource:oe=>{let de=gA("a",n[0].dataType,n[0].dims),fe=gA("b",n[1].dataType,n[1].dims),ke=null,Me=[de,fe];n.length===3&&(ke=gA("c",n[2].dataType,n[2].dims.length),Me.push(ke));let De=JA("output",n[0].dataType,S.length);Me.push(De);let Le="",Xe="";u.transA&&u.transB?(Xe=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${de.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${fe.type.value}(0);
      }
      `,Le="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):u.transA&&!u.transB?(Xe=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${de.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${fe.type.value}(0);
      }
      `,Le="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!u.transA&&u.transB?(Xe=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${de.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${fe.type.value}(0);
      }
      `,Le="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!u.transA&&!u.transB&&(Xe=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${de.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${fe.type.value}(0);
      }
      `,Le="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let _e=u.alpha===1?"":"value *= uniforms.alpha;";return`
  ${oe.registerUniforms([{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}]).declareVariables(...Me)}
  var<workgroup> tile_a: array<array<${de.type.storage}, 16>, 16>;
  var<workgroup> tile_b: array<array<${fe.type.storage}, 16>, 16>;
  ${oe.mainStart([O,O,1])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * 16;
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * 16;
    let num_tiles = (uniforms.K - 1) / 16 + 1;
    var k_start = 0u;
    var value = ${De.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${Xe}
      k_start = k_start + 16;
      workgroupBarrier();

      for (var k: u32 = 0u; k < 16; k++) {
        ${Le}
      }
      workgroupBarrier();
    }

    ${_e}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${ke!=null?`let cOffset = ${ke.broadcastedIndicesToOffset("vec2(m, n)",De)}; value += ${De.type.value}(uniforms.beta) * ${ke.getByOffset("cOffset")};`:""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`}}},bo=n=>({transA:n.transA,transB:n.transB,alpha:n.alpha,beta:n.beta,cacheKey:`${n.transA};${n.transB};${n.alpha===1}`}),M2=(n,u)=>{y2(n.inputs),n.compute(E2(n.inputs,u))}}),sA=Pe(()=>{Dt(),Ft(),Jr(),Rt(),[Xs,qs,en,An]=[0,1,2,3],G2=n=>{if(n[0].dims.length!==4)throw new Error("only 4-D tensor is supported.");if(n[0].dims.length!==n[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(n[0].dims.length-2!==n[1].dims[n[1].dims.length-1])throw new Error("last dimension of grid must be equal to "+(n[0].dims.length-2));if(n[0].dims[0]!==n[1].dims[0])throw new Error("grid batch size must match input batch size")},D2=n=>`
  fn gs_bicubic_interpolate(p: mat4x4<${n}>, x: f32, y: f32) -> ${n} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${n}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`,Io=n=>`
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${n.alignCorners===0?`
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    `:`
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`,Q2=n=>`
  ${n.paddingMode==="reflection"?`
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }`:""}
`,T2=(n,u,h)=>`
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${u} {
     var pixel = ${u}(0);
     var indices = vec4<u32>(0);
     indices[${Xs}] = batch;
     indices[${qs}] = channel;`+(()=>{switch(h.paddingMode){case"zeros":return`
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${en}] = u32(r);
            indices[${An}] = u32(c);
          }
        `;case"border":return`
          indices[${en}] = u32(clamp(r, 0, H - 1));
          indices[${An}] = u32(clamp(c, 0, W - 1));
        `;case"reflection":return`
          indices[${en}] = gs_reflect(r, border[1], border[3]);
          indices[${An}] = gs_reflect(c, border[0], border[2]);
        `;default:throw new Error(`padding mode ${h.paddingMode} is not supported`)}})()+`
    return ${n.getByIndices("indices")};
  }
`,P2=(n,u,h)=>(()=>{switch(h.mode){case"nearest":return`
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${Xs}], indices[${qs}], border);
        `;case"bilinear":return`
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${Xs}], indices[${qs}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${Xs}], indices[${qs}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${Xs}], indices[${qs}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${Xs}], indices[${qs}], border);

          let dx2 = ${u}(f32(x2) - x);
          let dx1 = ${u}(x - f32(x1));
          let dy2 = ${u}(f32(y2) - y);
          let dy1 = ${u}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;case"bicubic":return`
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${u}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${Xs}], indices[${qs}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;default:throw new Error(`mode ${h.mode} is not supported`)}})()+`${n.setByOffset("global_idx","result")}`,z2=(n,u)=>{let h=gA("x",n[0].dataType,n[0].dims.length),x=[n[1].dims[0],n[1].dims[1],n[1].dims[2]],v=gA("grid",n[1].dataType,x.length,2),B=[n[0].dims[0],n[0].dims[1],n[1].dims[1],n[1].dims[2]];u.format==="NHWC"&&(B=[n[0].dims[0],n[1].dims[1],n[1].dims[2],n[0].dims[3]],[Xs,qs,en,An]=[0,3,1,2]);let y=JA("output",n[0].dataType,B.length),S=h.type.value,O=[{type:12,data:He.size(B)},...KA(n[0].dims,x,B)];return{name:"GridSample",shaderCache:{hint:`${u.cacheKey}`,inputDependencies:["type","type"]},getRunData:H=>{let te=He.size(B);return{outputs:[{dims:B,dataType:H[0].dataType}],dispatchGroup:{x:Math.ceil(te/64)},programUniforms:O}},getShaderSource:H=>`
  ${H.registerUniform("output_size","u32").declareVariables(h,v,y)}
  
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }

  ${D2(S)}
  ${Io(u)}
  ${Q2(u)}
  ${T2(h,S,u)}

  ${H.mainStart()}
    ${H.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${en}]);
      let W_in = i32(uniforms.x_shape[${An}]);

      ${u.alignCorners===0?`
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      `:`
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${y.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${Xs}], indices[${en}], indices[${An}]);
      let nxy = ${v.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${P2(y,S,u)}
  }`}},S2=(n,u)=>{G2(n.inputs),n.compute(z2(n.inputs,u))},F2=n=>$e({alignCorners:n.align_corners,mode:n.mode,paddingMode:n.padding_mode,format:n.format})}),uA=Pe(()=>{Dt(),Ft(),Jr(),l1(),g1(),Rt(),an(),Ra=(n,u)=>n.length>u&&n[u].dims.length>0?n[u]:void 0,N2=(n,u)=>{let h=n[0],x=Ra(n,1),v=Ra(n,2),B=Ra(n,3),y=Ra(n,4),S=Ra(n,5),O=Ra(n,6),H=Ra(n,7);if(h.dims.length!==3&&h.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let te,Q=h.dims[0],ie=h.dims[1],oe=h.dims.length===3?h.dims[2]:u.numHeads*h.dims[4],de=ie,fe=0,ke=0,Me=Math.floor(oe/u.numHeads);if(O&&H&&He.size(O.dims)&&He.size(H.dims)){if(O.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(O.dims[0]!==Q||O.dims[1]!==u.numHeads||O.dims[3]!==Me)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(H.dims[0]!==Q||H.dims[1]!==u.numHeads||H.dims[3]!==Me)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(O.dims[2]!==H.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(H.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');fe=O.dims[2],ke=O.dims[2]}else if(O&&He.size(O.dims)||H&&He.size(H.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');if(x&&He.size(x.dims)>0){if(h.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(x.dims.length<3||x.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(h.dims[0]!==x.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(x.dims.length===3){if(x.dims[2]!==h.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');te=2,de=x.dims[1]}else if(x.dims.length===5){if(x.dims[2]!==u.numHeads||x.dims[3]!==2||x.dims[4]!==Me)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(v)throw new Error('Expect "value" be none when "key" has packed kv format.');te=5,de=x.dims[1]}else{if(x.dims[1]!==u.numHeads||x.dims[3]!==Me)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');te=0,de=x.dims[2]}}else{if(h.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(h.dims[2]!==u.numHeads||h.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');te=3}if(B&&He.size(B.dims)>0){if(B.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(x&&x.dims.length===5&&x.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let De=fe+de,Le=0;if(y&&He.size(y.dims)>0){Le=8;let lA=y.dims;throw lA.length===1?lA[0]===Q?Le=1:lA[0]===3*Q+2&&(Le=3):lA.length===2&&lA[0]===Q&&lA[1]===De&&(Le=5),Le===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let Xe=!1,_e=oe;if(v&&He.size(v.dims)>0){if(v.dims.length!==3&&v.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(h.dims[0]!==v.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(v.dims.length===3){if(de!==v.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');_e=v.dims[2]}else{if(de!==v.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');_e=v.dims[1]*v.dims[3],Xe=!0}}if(y&&He.size(y.dims)>0)throw new Error("Key padding mask is not supported");if(S&&He.size(S.dims)>0){if(S.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(S.dims[0]!==Q||S.dims[1]!==u.numHeads||S.dims[2]!==ie||S.dims[3]!==De)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:Q,sequenceLength:ie,pastSequenceLength:fe,kvSequenceLength:de,totalSequenceLength:De,maxSequenceLength:ke,inputHiddenSize:0,hiddenSize:oe,vHiddenSize:_e,headSize:Me,vHeadSize:Math.floor(_e/u.numHeads),numHeads:u.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:u.maskFilterValue,maskType:Le,scale:u.scale,broadcastResPosBias:!1,passPastInKv:Xe,qkvFormat:te}},O2=n=>$e({...n}),Z0=$e({perm:[0,2,1,3]}),L2=(n,u,h,x,v,B,y)=>{let S=[x,v,B],O=He.size(S),H=[{type:12,data:O},{type:12,data:y},{type:12,data:B}];return n.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:S,dataType:u.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(O/64)},programUniforms:H}),getShaderSource:te=>{let Q=JA("qkv_with_bias",u.dataType,S),ie=gA("qkv",u.dataType,S),oe=gA("bias",h.dataType,S);return`
  ${te.registerUniforms([{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}]).declareVariables(ie,oe,Q)}
  ${te.mainStart()}
    ${te.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`}},{inputs:[u,h],outputs:[-1]})[0]},S0=(n,u,h,x,v,B,y,S)=>{let O=B;if(y&&He.size(y.dims)>0){if(x===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return O=L2(n,B,y,u,x,h*v,S),O=O.reshape([u,x,h,v]),h===1||x===1?O:n.compute(Ga(O,Z0.perm),{inputs:[O],outputs:[-1]})[0]}return B.dims.length===3&&(O=B.reshape([u,x,h,v])),h===1||x===1?O:n.compute(Ga(O,Z0.perm),{inputs:[O],outputs:[-1]})[0]},Pi=(n,u)=>{let h=N2(n.inputs,u),x=n.inputs[0],v=Ra(n.inputs,1),B=Ra(n.inputs,2),y=Ra(n.inputs,3),S=Ra(n.inputs,4),O=Ra(n.inputs,5),H=Ra(n.inputs,6),te=Ra(n.inputs,7);if(x.dims.length===5)throw new Error("Packed QKV is not implemented");if(v?.dims.length===5)throw new Error("Packed KV is not implemented");let Q=v&&B&&v.dims.length===4&&B.dims.length===4,ie=S0(n,h.batchSize,h.numHeads,h.sequenceLength,h.headSize,x,y,0);if(Q)return ps(n,ie,v,B,S,void 0,H,te,O,h);if(!v||!B)throw new Error("key and value must be provided");let oe=S0(n,h.batchSize,h.numHeads,h.kvSequenceLength,h.headSize,v,y,h.hiddenSize),de=S0(n,h.batchSize,h.numHeads,h.kvSequenceLength,h.vHeadSize,B,y,2*h.hiddenSize);ps(n,ie,oe,de,S,void 0,H,te,O,h)}}),SA=Pe(()=>{Dt(),Ft(),Jr(),Rt(),Y2=n=>{if(!n||n.length<1)throw new Error("too few inputs")},H2=(n,u)=>{let h=[],x=u.numOutputs;return n[1].dims[0]>0&&(n[1].getBigInt64Array().forEach(v=>h.push(Number(v))),x=h.length),$e({numOutputs:x,axis:u.axis,splitSizes:h})},R2=n=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${n}u; i += 1u ) {
    if (index < ${rt("uniforms.size_in_split_axis","i",n)}) {
        return i;
    }
    }
    return ${n}u;
}`,V2=n=>{let u=n.length,h=[];for(let x=0;x<u;++x){let v=n[x].setByIndices("indices","input[global_idx]");u===1?h.push(v):x===0?h.push(`if (output_number == ${x}u) { ${v} }`):x===u-1?h.push(`else { ${v} }`):h.push(`else if (output_number == ${x}) { ${v} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${n[0].type.indices}, global_idx: u32) {
        ${h.join(`
`)}
      }`},X0=(n,u)=>{let h=n[0].dims,x=He.size(h),v=n[0].dataType,B=He.normalizeAxis(u.axis,h.length),y=new Array(u.numOutputs),S=gA("input",v,h.length),O=new Array(u.numOutputs),H=[],te=[],Q=0,ie=[{type:12,data:x}];for(let oe=0;oe<u.numOutputs;oe++){Q+=u.splitSizes[oe],O[oe]=Q;let de=h.slice();de[B]=u.splitSizes[oe],te.push(de),y[oe]=JA(`output${oe}`,v,de.length),H.push({dims:te[oe],dataType:n[0].dataType})}return ie.push({type:12,data:O},...KA(h,...te)),{name:"Split",shaderCache:{hint:u.cacheKey,inputDependencies:["rank"]},getShaderSource:oe=>`
  ${oe.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",O.length).declareVariables(S,...y)}
  ${R2(O.length)}
  ${V2(y)}

  ${oe.mainStart()}
    ${oe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${S.offsetToIndices("global_idx")};
    var index = ${S.indicesGet("indices",B)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${rt("uniforms.size_in_split_axis","output_number - 1u",O.length)};
      ${S.indicesSet("indices",B,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`,getRunData:()=>({outputs:H,dispatchGroup:{x:Math.ceil(x/64)},programUniforms:ie})}},W2=(n,u)=>{Y2(n.inputs);let h=n.inputs.length===1?u:H2(n.inputs,u);n.compute(X0(n.inputs,h),{inputs:[0]})},j2=n=>{let u=n.axis,h=n.splitSizes,x=n.numOutputs<0?h.length:n.numOutputs;if(x!==h.length)throw new Error("numOutputs and splitSizes lengh must be equal");return $e({axis:u,numOutputs:x,splitSizes:h})}}),XA=Pe(()=>{Jr(),g1(),uA(),SA(),an(),U2=(n,u)=>{if(u.doRotary)throw new Error("GroupQuerryAttention do_rotary attribute is not supported");if(u.doRotary&&n.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let h=n[0],x=n[1],v=n[2],B=n[3],y=n[4];if(u.localWindowSize!==-1)throw new Error("Local attention is not supported");if(u.softcap!==0)throw new Error("Softcap is not supported");if(u.rotaryInterleaved!==0)throw new Error("Rotary interleaved is not supported");if(u.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(h.dims.length!==3&&h.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let S=h.dims[0],O=h.dims[1],H=h.dims.length===3?h.dims[2]:u.numHeads*h.dims[4],te=O,Q=0,ie=!x||x.dims.length===0,oe=Math.floor(ie?H/(u.numHeads+2*u.kvNumHeads):H/u.numHeads);ie&&(H=oe*u.numHeads);let de=B&&B.dims.length!==0,fe=y&&y.dims.length!==0;if(de&&B.dims.length===4&&B.dims[0]===S&&B.dims[1]!==u.kvNumHeads&&B.dims[2]===u.kvNumHeads&&B.dims[3]===oe)throw new Error("BSNH pastKey/pastValue is not supported");if(de&&fe){if(B.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(y.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');Q=B.dims[2]}else if(de||fe)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let ke=1;if(x&&x.dims.length>0){if(h.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(x.dims.length<3||x.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(h.dims[0]!==x.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(x.dims.length===3){if(h.dims[2]%x.dims[2]!=0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');te=x.dims[1]}else if(x.dims.length===5){if(x.dims[2]!==u.numHeads||x.dims[3]!==2||x.dims[4]!==oe)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(v)throw new Error('Expect "value" be none when "key" has packed kv format.');te=x.dims[1]}else{if(x.dims[1]!==u.numHeads||x.dims[3]!==oe)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');te=x.dims[2]}}else{if(h.dims.length!==3&&h.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(h.dims.length===5&&(h.dims[2]!==u.numHeads||h.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');ke=3}let Me=!1,De=u.kvNumHeads?oe*u.kvNumHeads:H;if(v&&v.dims.length>0){if(v.dims.length!==3&&v.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(h.dims[0]!==v.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(v.dims.length===3){if(te!==v.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');De=v.dims[2]}else{if(te!==v.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');De=v.dims[1]*v.dims[3],Me=!0}}let Le=n.length>4?n[5]:void 0;if(Le&&Le.dims.length!==1&&Le.dims[0]!==S)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:S,sequenceLength:O,pastSequenceLength:Q,kvSequenceLength:te,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:H,vHiddenSize:De,headSize:oe,vHeadSize:Math.floor(De/u.kvNumHeads),numHeads:u.numHeads,kvNumHeads:u.kvNumHeads,nReps:u.numHeads/u.kvNumHeads,pastPresentShareBuffer:!1,maskType:0,scale:u.scale,broadcastResPosBias:!1,passPastInKv:Me,qkvFormat:ke}},K2=$e({perm:[0,2,1,3]}),F0=(n,u,h)=>{let x=u,v=h.kvNumHeads;return u.dims.length===3&&h.kvSequenceLength!==0&&(x=u.reshape([h.batchSize,h.kvSequenceLength,v,h.headSize]),x=n.compute(Ga(x,K2.perm),{inputs:[x],outputs:[-1]})[0]),x},Z2=(n,u)=>{let h=U2(n.inputs,u);if(n.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(n.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let x=n.inputs[0],v=n.inputs[1]&&n.inputs[1].dims.length>0?n.inputs[1]:void 0,B=n.inputs[2]&&n.inputs[2].dims.length>0?n.inputs[2]:void 0,y=n.inputs[3]&&n.inputs[3].dims.length!==0?n.inputs[3]:void 0,S=n.inputs[4]&&n.inputs[4].dims.length!==0?n.inputs[4]:void 0,O=n.inputs.length>4?n.inputs[5]:void 0,H=n.inputs.length>5?n.inputs[6]:void 0,te=h.kvNumHeads?h.kvNumHeads:h.numHeads,Q=$e({axis:2,numOutputs:3,splitSizes:[h.numHeads*h.headSize,te*h.headSize,te*h.headSize]}),[ie,oe,de]=v||B?[x,v,B]:n.compute(X0([x],Q),{inputs:[x],outputs:[-1,-1,-1]}),fe=S0(n,h.batchSize,h.numHeads,h.sequenceLength,h.headSize,ie,void 0,0);ps(n,fe,F0(n,oe,h),F0(n,de,h),void 0,void 0,y,S,void 0,h,O,H)}}),VA=Pe(()=>{Dt(),Ft(),an(),Rt(),wo=(n,u,h,x,v,B,y,S)=>{let O=Jt(B),H=O===1?"f32":`vec${O}f`,te=O===1?"vec2f":`mat2x${O}f`,Q=v*y,ie=64;Q===1&&(ie=256);let oe=[v,y,B/O],de=[v,y,2],fe=[];return fe.push(...KA(oe,de)),n.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${O};${S};${ie}`,inputDependencies:["rank","type","type"]},getRunData:()=>({outputs:[{dims:de,dataType:1}],dispatchGroup:{x:Q},programUniforms:fe}),getShaderSource:ke=>{let Me=gA("x",u.dataType,3,O),De=[Me,gA("scale",h.dataType,h.dims),gA("bias",x.dataType,x.dims),JA("output",1,3,2)];return`
  var<workgroup> workgroup_shared : array<${te}, ${ie}>;
  const workgroup_size = ${ie}u;
  ${ke.declareVariables(...De)}
  ${ke.mainStart(ie)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${H}(0);
    var squared_sum = ${H}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${H}(${Me.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${te}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${ir("workgroup_shared[0][0]",O)} / f32(hight * ${O});
      let squared_sum_final = ${ir("workgroup_shared[0][1]",O)} / f32(hight * ${O});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${S}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`}},{inputs:[u,h,x],outputs:[-1]})[0]},X2=(n,u,h)=>{let x=u[0].dims,v=x,B=x[0],y=x[1],S=He.sizeFromDimension(x,2),O=Jt(S),H=He.size(v)/O,te=wo(n,u[0],u[1],u[2],B,S,y,h.epsilon),Q=[B,y,S/O],ie=[B,y];n.compute({name:"InstanceNormalization",shaderCache:{hint:`${O}`,inputDependencies:["type","none"]},getRunData:()=>({outputs:[{dims:v,dataType:u[0].dataType}],dispatchGroup:{x:Math.ceil(H/64)},programUniforms:[{type:12,data:H},...KA(Q,ie,Q)]}),getShaderSource:oe=>{let de=gA("x",u[0].dataType,Q.length,O),fe=gA("scale_shift",1,ie.length,2),ke=JA("output",u[0].dataType,Q.length,O),Me=[de,fe,ke];return`
  ${oe.registerUniform("output_size","u32").declareVariables(...Me)}
  ${oe.mainStart()}
  ${oe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${ke.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${fe.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${de.getByOffset("global_idx")} * ${ke.type.value}(scale_shift.x) + ${ke.type.value}(scale_shift.y);
      ${ke.setByOffset("global_idx","value")};
  }`}},{inputs:[u[0],te]})},N0=(n,u,h)=>{let x=u[0].dims,v=x,B=x[0],y=x[x.length-1],S=He.sizeFromDimension(x,1)/y,O=Jt(y),H=He.size(v)/O,te=[{type:12,data:S},{type:12,data:Math.floor(y/O)}],Q=!1,ie=[0,x.length-1];for(let fe=0;fe<x.length-2;fe++)Q=Q||x[fe+1]!==1,ie.push(fe+1);Q=Q&&x[x.length-1]!==1;let oe=Q?n.compute(Ga(n.inputs[0],ie),{inputs:[n.inputs[0]],outputs:[-1]})[0]:n.inputs[0].reshape(Array.from({length:x.length},(fe,ke)=>x[ie[ke]])),de=wo(n,oe,u[1],u[2],B,S,y,h.epsilon);n.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${O}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:v,dataType:u[0].dataType}],dispatchGroup:{x:Math.ceil(H/64)},programUniforms:te}),getShaderSource:fe=>{let ke=jt(u[0].dataType),Me=O===1?"vec2f":`mat${O}x2f`,De=_e=>{let lA=_e===0?"x":"y",LA=O===1?"f32":`vec${O}f`;switch(O){case 1:return`${ke}(${LA}(scale.${lA}))`;case 2:return`vec2<${ke}>(${LA}(scale[0].${lA}, scale[1].${lA}))`;case 4:return`vec4<${ke}>(${LA}(scale[0].${lA}, scale[1].${lA}, scale[2].${lA}, scale[3].${lA}))`;default:throw new Error(`Not supported compoents ${O}`)}},Le=gA("input",u[0].dataType,u[0].dims,O),Xe=JA("output",u[0].dataType,v,O);return`
  @group(0) @binding(0) var<storage, read> input : array<${Le.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${Me}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${Xe.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${fe.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${De(0)}, ${De(1)});
  }`}},{inputs:[u[0],de]})},q2=(n,u)=>{u.format==="NHWC"?N0(n,n.inputs,u):X2(n,n.inputs,u)}}),_A=Pe(()=>{Dt(),Ft(),Rt(),J2=n=>{if(!n||n.length<2)throw new Error("layerNorm requires at least 2 inputs.")},_2=(n,u,h)=>{let x=u.simplified,v=n[0].dims,B=n[1],y=!x&&n[2],S=v,O=He.normalizeAxis(u.axis,v.length),H=He.sizeToDimension(v,O),te=He.sizeFromDimension(v,O),Q=He.size(B.dims),ie=y?He.size(y.dims):0;if(Q!==te||y&&ie!==te)throw new Error(`Size of X.shape()[axis:] == ${te}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${Q} and bias size of ${ie}`);let oe=[];for(let Xe=0;Xe<v.length;++Xe)Xe<O?oe.push(v[Xe]):oe.push(1);let de=Jt(te),fe=["type","type"],ke=[{type:12,data:H},{type:1,data:te},{type:12,data:Math.floor(te/de)},{type:1,data:u.epsilon}];y&&fe.push("type");let Me=h>1,De=h>2,Le=[{dims:S,dataType:n[0].dataType}];return Me&&Le.push({dims:oe,dataType:1}),De&&Le.push({dims:oe,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${de};${h};${x}`,inputDependencies:fe},getRunData:()=>({outputs:Le,dispatchGroup:{x:Math.ceil(H/64)},programUniforms:ke}),getShaderSource:Xe=>{let _e=jt(n[0].dataType),lA=[gA("x",n[0].dataType,n[0].dims,de),gA("scale",B.dataType,B.dims,de)];return y&&lA.push(gA("bias",y.dataType,y.dims,de)),lA.push(JA("output",n[0].dataType,S,de)),Me&&lA.push(JA("mean_data_output",1,oe)),De&&lA.push(JA("inv_std_output",1,oe)),`
  ${Xe.registerUniforms([{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...lA)}
  ${Xe.mainStart()}
    ${Xe.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${Ya("f32",de)};
    var mean_square_vector = ${Ya("f32",de)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${pa(_e,de,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${ir("mean_vector",de)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${ir("mean_square_vector",de)} / uniforms.norm_size ${x?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${pa(_e,de,"x[j + offset]")};
      let f32scale = ${pa(_e,de,"scale[j]")};
      output[j + offset] = ${lA[0].type.value}((f32input ${x?"":"- mean"}) * inv_std_dev * f32scale
        ${y?`+ ${pa(_e,de,"bias[j]")}`:""}
      );
    }

    ${Me?"mean_data_output[global_idx] = mean":""};
    ${De?"inv_std_output[global_idx] = inv_std_dev":""};
  }`}}},$2=(n,u)=>{J2(n.inputs),n.compute(_2(n.inputs,u,n.outputCount))}}),ft=Pe(()=>{Ft(),f1(),p1(),q0=n=>{if(!n||n.length!==2)throw new Error("MatMul requires 2 inputs.");if(n[0].dims[n[0].dims.length-1]!==n[1].dims[n[1].dims.length-2])throw new Error("shared dimension does not match.")},el=n=>{q0(n.inputs);let u=NA.calcShape(n.inputs[0].dims,n.inputs[1].dims,!0);if(!u)throw new Error("Can't use matmul on the given tensors");let h=u[u.length-1],x=n.inputs[0].dims[n.inputs[0].dims.length-1];if(h<8&&x<8)n.compute(Di(n.inputs,{activation:""},u));else{let v=u[u.length-2],B=He.size(n.inputs[0].dims.slice(0,-2)),y=He.size(n.inputs[1].dims.slice(0,-2));if(B!==1&&v===1&&y===1){let S=[1,B,h],O=[n.inputs[0].reshape([1,B,x]),n.inputs[1].reshape([1,x,h])];n.compute(A(O,{activation:""},u,S),{inputs:O})}else n.compute(A(n.inputs,{activation:""},u))}}}),gt=Pe(()=>{Dt(),Ft(),Jr(),Rt(),Al=(n,u)=>{if(n.length<3||n.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let h=n[0],x=h.dims.length;if(h.dims[x-1]!==u.k)throw new Error("The last dim of input shape does not match the k value");let v=Math.floor((u.k+u.blockSize-1)/u.blockSize),B=u.blockSize/8*u.bits,y=n[1];if(!He.areEqual(y.dims,[u.n,v,B]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let S=n[2].dims;if(He.size(S)!==u.n*v)throw new Error("scales input size error.");if(n.length===4){let O=n[3].dims,H=u.bits>4?u.n*v:u.n*Math.floor((v+1)/2);if(He.size(O)!==H)throw new Error("zeroPoints input size error.")}},tl=(n,u)=>{let h=n[0].dims,x=h.length,v=h[x-2],B=u.k,y=u.n,S=h.slice(0,x-2),O=He.size(S),H=n[1].dims[2]/4,te=n[0].dataType,Q=Jt(u.k),ie=Jt(H),oe=Jt(y),de=S.concat([v,y]),fe=v>1&&y/oe%2==0?2:1,ke=He.size(de)/oe/fe,Me=64,De=[],Le=[O,v,B/Q],Xe=He.convertShape(n[1].dims).slice();Xe.splice(-1,1,H/ie),De.push(...KA(Le)),De.push(...KA(Xe)),De.push(...KA(n[2].dims)),n.length===4&&De.push(...KA(He.convertShape(n[3].dims)));let _e=[O,v,y/oe];return De.push(...KA(_e)),{name:"MatMulNBits",shaderCache:{hint:`${u.blockSize};${u.bits};${Q};${ie};${oe};${fe};64`,inputDependencies:Array(n.length).fill("rank")},getRunData:()=>({outputs:[{dims:de,dataType:te}],dispatchGroup:{x:ke},programUniforms:De}),getShaderSource:lA=>{let LA=Le.length,st=gA("a",n[0].dataType,LA,Q),ht=gA("b",12,Xe.length,ie),pt=gA("scales",n[2].dataType,n[2].dims.length),mt=[st,ht,pt],Bt=n.length===4?gA("zero_points",12,n[3].dims.length):void 0;Bt&&mt.push(Bt);let tt=_e.length,lt=JA("output",n[0].dataType,tt,oe),wA=jt(n[0].dataType),UA=(()=>{switch(Q){case 1:return`array<${wA}, 8>`;case 2:return`mat4x2<${wA}>`;case 4:return`mat2x4<${wA}>`;default:throw new Error(`${Q}-component is not supported.`)}})();return`
        var<workgroup> workgroup_shared: array<${lt.type.value}, ${fe*Me}>;
        ${lA.declareVariables(...mt,lt)}
        ${lA.mainStart([Me,1,1])}
          let output_indices = ${lt.offsetToIndices(`(global_idx / 64) * ${fe}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += 64) {
            //process one block
            var word_offset: u32 = block * ${u.blockSize/Q};
            ${(()=>{let At=`
            var col_index = col * ${oe};
            ${Bt?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${wA}(8);`}
            `;for(let yt=0;yt<oe*fe;yt++)At+=`
            let scale${yt} = ${pt.getByOffset("col_index * nBlocksPerCol + block")};
            ${Bt?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${Bt.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${yt} = ${wA}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return At})()}
            for (var word: u32 = 0; word < ${H}; word += ${ie}) {
              ${(()=>{let At=`col_index = col * ${oe};`;for(let yt=0;yt<oe*fe;yt++)At+=`
            let b${yt}_data = ${ht.getByIndices(`${ht.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return At+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${UA};
            var b_dequantized_values: ${UA};`,At})()}
              for (var i: u32 = 0; i < ${ie}; i++) {
                ${(()=>{let At=`
          // reuse a data
            var input_offset = ${st.indicesToOffset(`${st.type.indices}(batch, row, word_offset)`)};
            var a_data: ${UA};
            for (var j: u32 = 0; j < ${8/Q}; j++) {
              a_data[j] = ${st.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let yt=0;yt<oe*fe;yt++)At+=`
            b_value = ${ie===1?`b${yt}_data`:`b${yt}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${UA}(${Array.from({length:4},(gr,ca)=>`${wA}(b_value_lower[${ca}]), ${wA}(b_value_upper[${ca}])`).join(", ")});
            b_dequantized_values = ${Q===1?`${UA}(${Array.from({length:8},(gr,ca)=>`(b_quantized_values[${ca}] - ${Bt?`zero_point${yt}`:"zero_point"}) * scale${yt}`).join(", ")});`:`(b_quantized_values - ${UA}(${Array(8).fill(Bt?`zero_point${yt}`:"zero_point").join(",")})) * scale${yt};`};
            workgroup_shared[local_id.x * ${fe} + ${Math.floor(yt/oe)}]${oe>1?`[${yt%oe}]`:""} += ${Array.from({length:8/Q},(gr,ca)=>Q===1?`a_data[${ca}] * b_dequantized_values[${ca}]`:`dot(a_data[${ca}], b_dequantized_values[${ca}])`).join(" + ")};
          `;return At})()}
                word_offset += ${8/Q};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${fe}) {
            var output_value: ${lt.type.value} = ${lt.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < 64u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${fe};
            }
            ${lt.setByIndices(`${lt.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`}}},D1=(n,u)=>{let h=n[0].dims,x=h.length,v=h[x-2],B=u.k,y=u.n,S=h.slice(0,x-2),O=He.size(S),H=n[1].dims[2]/4,te=n[0].dataType,Q=Jt(u.k),ie=Jt(H),oe=S.concat([v,y]),de=y%8==0?8:y%4==0?4:1,fe=128/de,ke=fe*ie*8,Me=ke/Q,De=ke/u.blockSize,Le=He.size(oe)/de,Xe=[],_e=[O,v,B/Q],lA=He.convertShape(n[1].dims).slice();lA.splice(-1,1,H/ie),Xe.push(...KA(_e)),Xe.push(...KA(lA)),Xe.push(...KA(n[2].dims)),n.length===4&&Xe.push(...KA(He.convertShape(n[3].dims)));let LA=[O,v,y];return Xe.push(...KA(LA)),{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${u.blockSize};${Q};${ie};${fe};${de}`,inputDependencies:Array(n.length).fill("rank")},getRunData:()=>({outputs:[{dims:oe,dataType:te}],dispatchGroup:{x:Le},programUniforms:Xe}),getShaderSource:st=>{let ht=_e.length,pt=gA("a",n[0].dataType,ht,Q),mt=gA("b",12,lA.length,ie),Bt=gA("scales",n[2].dataType,n[2].dims.length),tt=[pt,mt,Bt],lt=n.length===4?gA("zero_points",12,n[3].dims.length):void 0;lt&&tt.push(lt);let wA=LA.length,UA=JA("output",n[0].dataType,wA),At=jt(n[0].dataType);return`
        var<workgroup> sub_a: array<${pt.type.value}, ${Me}>;
        var<workgroup> inter_results: array<array<${UA.type.value}, ${fe}>, ${de}>;
        ${st.declareVariables(...tt,UA)}
        ${st.mainStart([fe,de,1])}
          let output_indices = ${UA.offsetToIndices(`workgroup_index * ${de}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${De} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${Me};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${Me}; a_offset += 128)
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${pt.getByIndices(`${pt.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${pt.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${De} + local_id.x;
            ${lt?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${lt.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${At}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${At}(8);`}
            let scale = ${Bt.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${mt.getByIndices(`${mt.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${u.blockSize/Q};
            for (var i: u32 = 0; i < ${ie}; i++) {
              ${(()=>{switch(Q){case 1:return`
          let a_data0 = vec4<${At}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${At}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${At}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${At}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${Q}-component is not supported.`)}})()}
              let b_value = ${ie===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${At}>(${Array.from({length:4},(yt,gr)=>`${At}(b_value_lower[${gr}]), ${At}(b_value_upper[${gr}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${At}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(yt,gr)=>`dot(a_data${gr}, b_dequantized_values[${gr}])`).join(" + ")};
              word_offset += ${8/Q};
            }
            workgroupBarrier();
          }

          if (local_idx < ${de}) {
            var output_value: ${UA.type.value} = ${UA.type.value}(0);
            for (var b = 0u; b < ${fe}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${UA.setByIndices(`${UA.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`}}},rl=(n,u)=>{Al(n.inputs,u),u.blockSize===32&&n.adapterInfo.isVendor("intel")&&n.adapterInfo.isArchitecture("gen-12lp")?n.compute(D1(n.inputs,u)):n.compute(tl(n.inputs,u))},al=n=>$e(n)}),zt=Pe(()=>{Dt(),Ft(),Rt(),sl=n=>{if(!n||n.length<1)throw new Error("Too few inputs");if(n[0].dataType!==1&&n[0].dataType!==10)throw new Error("Input type must be float or float16.");if(n.length>=2){let u=2*n[0].dims.length===n[1].dims[0];if(n.length===4&&(u=2*n[3].dims[0]===n[1].dims[0]),!u)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Xn=(n,u,h)=>{let x="";for(let v=u-1;v>=0;--v)x+=`
            k = i32(${n.indicesGet("indices",v)}) - ${rt("uniforms.pads",v,h)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${rt("uniforms.x_shape",v,u)})) {
              break;
            }
            offset += k * i32(${rt("uniforms.x_strides",v,u)});
        `;return`
          value = ${n.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${x}
            value = x[offset];
          }
      `},il=(n,u,h)=>{let x="";for(let v=u-1;v>=0;--v)x+=`
                k = i32(${n.indicesGet("indices",v)}) - ${rt("uniforms.pads",v,h)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${rt("uniforms.x_shape",v,u)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${rt("uniforms.x_shape",v,u)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${rt("uniforms.x_strides",v,u)});
            `;return`
              var offset = 0;
              var k = 0;
              ${x}
              value = x[offset];
          `},nl=(n,u,h)=>{let x="";for(let v=u-1;v>=0;--v)x+=`
                k = i32(${n.indicesGet("indices",v)}) - ${rt("uniforms.pads",v,h)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${rt("uniforms.x_shape",v,u)})) {
                  k = i32(${rt("uniforms.x_shape",v,u)}) - 1;
                }
                offset += k * i32(${rt("uniforms.x_strides",v,u)});
            `;return`
              var offset = 0;
              var k = 0;
              ${x}
              value = x[offset];
          `},ol=(n,u,h)=>{let x="";for(let v=u-1;v>=0;--v)x+=`
                k = i32(${n.indicesGet("indices",v)}) - ${rt("uniforms.pads",v,h)};
                if (k < 0)  {
                  k += i32(${rt("uniforms.x_shape",v,u)}]);
                }
                if (k >= i32(${rt("uniforms.x_shape",v,u)})) {
                  k -= i32(${rt("uniforms.x_shape",v,u)});
                }
                offset += k * i32(${rt("uniforms.x_strides",v,u)});
            `;return`
              var offset = 0;
              var k = 0;
              ${x}
              value = x[offset];
          `},ll=(n,u,h)=>{switch(h.mode){case 0:return Xn(n,u,h.pads.length);case 1:return il(n,u,h.pads.length);case 2:return nl(n,u,h.pads.length);case 3:return ol(n,u,h.pads.length);default:throw new Error("Invalid mode")}},cl=(n,u)=>{let h=He.padShape(n[0].dims.slice(),u.pads),x=n[0].dims,v=[{type:12,data:He.size(h)},{type:6,data:u.pads}],B=n.length>=3&&n[2].data;return u.mode===0&&v.push({type:B?n[2].dataType:1,data:u.value}),v.push(...KA(n[0].dims,h)),{name:"Pad",shaderCache:{hint:`${u.mode}${B}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:h,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(He.size(h)/64)},programUniforms:v}),getShaderSource:y=>{let S=JA("output",n[0].dataType,h.length),O=gA("x",n[0].dataType,x.length),H=O.type.value,te=ll(S,x.length,u),Q=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:u.pads.length}];return u.mode===0&&Q.push({name:"constant_value",type:B?H:"f32"}),`
            ${y.registerUniforms(Q).declareVariables(O,S)}
            ${y.mainStart()}
            ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${S.offsetToIndices("global_idx")};

            var value = ${H}(0);
            ${te}
            output[global_idx] = value;
        }`}}},gl=(n,u)=>{if(n.length>1){let h=n[1].getBigInt64Array(),x=n.length>=3&&n[2].data?n[2].dataType===10?n[2].getUint16Array()[0]:n[2].getFloat32Array()[0]:0,v=n[0].dims.length,B=new Int32Array(2*v).fill(0);if(n.length>=4){let S=n[3].getBigInt64Array();for(let O=0;O<S.length;O++)B[Number(S[O])]=Number(h[O]),B[Number(S[O])+v]=Number(h[O+S.length])}else h.forEach((S,O)=>B[Number(O)]=Number(S));let y=[];return B.forEach(S=>y.push(S)),{mode:u.mode,value:x,pads:y}}return u},ul=(n,u)=>{sl(n.inputs);let h=gl(n.inputs,u);n.compute(cl(n.inputs,h),{inputs:[0]})}}),Qt=Pe(()=>{dA(),Dt(),Ft(),Rt(),tn=n=>{if(X.webgpu.validateInputContent&&(!n||n.length!==1))throw new Error("Pool ops requires 1 input.")},dl=(n,u,h)=>{let x=u.format==="NHWC",v=n.dims.slice();x&&v.splice(1,0,v.pop());let B=Object.hasOwnProperty.call(u,"dilations"),y=u.kernelShape.slice(),S=u.strides.slice(),O=B?u.dilations.slice():[],H=u.pads.slice();WA.adjustPoolAttributes(h,v,y,S,O,H);let te=WA.computePoolOutputShape(h,v,S,O,y,H,u.autoPad),Q=Object.assign({},u);B?Object.assign(Q,{kernelShape:y,strides:S,pads:H,dilations:O,cacheKey:u.cacheKey}):Object.assign(Q,{kernelShape:y,strides:S,pads:H,cacheKey:u.cacheKey});let ie=te.slice();return ie.push(ie.splice(1,1)[0]),[Q,x?ie:te]},ko=(n,u)=>{let h=u.format==="NHWC",x=[{type:12,data:He.size(n)},{type:12,data:He.size(u.kernelShape)}],v=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(u.kernelShape.length<=2){let B=u.kernelShape[u.kernelShape.length-1],y=u.strides[u.strides.length-1],S=u.pads[u.pads.length/2-1],O=u.pads[u.pads.length-1],H=!!(S+O);x.push({type:12,data:B},{type:12,data:y},{type:12,data:S},{type:12,data:O}),v.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let te=!1;if(u.kernelShape.length===2){let Q=u.kernelShape[u.kernelShape.length-2],ie=u.strides[u.strides.length-2],oe=u.pads[u.pads.length/2-2],de=u.pads[u.pads.length-2];te=!!(oe+de),x.push({type:12,data:Q},{type:12,data:ie},{type:12,data:oe},{type:12,data:de}),v.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[x,v,!0,H,te]}{if(h)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let B=He.computeStrides(u.kernelShape);x.push({type:12,data:B},{type:12,data:u.pads},{type:12,data:u.strides}),v.push({name:"kernelStrides",type:"u32",length:B.length},{name:"pads",type:"u32",length:u.pads.length},{name:"strides",type:"u32",length:u.strides.length});let y=u.pads.reduce((S,O)=>S+O);return[x,v,!!y,!1,!1]}},xo=(n,u,h,x,v,B,y,S,O,H,te,Q)=>{let ie=v.format==="NHWC",oe=u.type.value,de=JA("output",u.type.tensor,x);if(v.kernelShape.length<=2){let fe="",ke="",Me="",De=h-(ie?2:1);if(fe=te?`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${De}] = indices[${De}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${De}] < 0 || xIndices[${De}]
                      >= uniforms.x_shape[${De}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${u.indicesToOffset("xIndices")}];
                  ${B}
                }`:`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${De}] = indices[${De}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${u.indicesToOffset("xIndices")}];
                  ${B}
                }`,v.kernelShape.length===2){let Le=h-(ie?3:2);ke=Q?`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${Le}] = indices[${Le}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${Le}] < 0 || xIndices[${Le}] >= uniforms.x_shape[${Le}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${Le}] = indices[${Le}] * uniforms.sh - uniforms.phStart + j;
                `,Me=`
              }
            `}return`
            ${n.registerUniforms(O).declareVariables(u,de)}

            ${n.mainStart()}
              ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${de.offsetToIndices("global_idx")};
              var xIndices = ${de.offsetToIndices("global_idx")};

              var value = ${oe}(${S});
              var pad = 0;
              ${ke}
              ${fe}
              ${Me}
              ${y}

              output[global_idx] = value;
            }`}{if(ie)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let fe=v.kernelShape.length,ke=v.pads.length,Me="";return Me=H?`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${u.indicesToOffset("xIndices")}];
                ${B}
              }`:`
              }
              let x_val = x[${u.indicesToOffset("xIndices")}];
              ${B}
            `,`
            ${n.registerUniforms(O).declareVariables(u,de)}

            ${n.mainStart()}
              ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${de.offsetToIndices("global_idx")};
              var xIndices = ${de.offsetToIndices("global_idx")};

              var offsets: array<u32, ${fe}>;

              var value = ${oe}(${S});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${fe-1}u; j++) {
                  offsets[j] = offset / ${rt("uniforms.kernelStrides","j",fe)};
                  offset -= offsets[j] * ${rt("uniforms.kernelStrides","j",fe)};
                }
                offsets[${fe-1}] = offset;

                isPad = false;
                for (var j = ${h-fe}u; j < ${h}u; j++) {
                  xIndices[j] = indices[j] * ${rt("uniforms.strides",`j - ${h-fe}u`,fe)}
                    + offsets[j - ${h-fe}u] - ${rt("uniforms.pads","j - 2u",ke)};
                  ${Me}
              }
              ${y}

              output[global_idx] = value;
            }`}},vo=n=>`${n.format};${n.ceilMode};${n.autoPad};${n.kernelShape.length}`,fl=n=>`${vo(n)};${n.countIncludePad}`,pl=n=>`${vo(n)};${n.storageOrder};${n.dilations}`,J0=n=>({format:n.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][n.auto_pad],ceilMode:n.ceil_mode,kernelShape:n.kernel_shape,strides:n.strides,pads:n.pads}),Bo=(n,u,h,x)=>{let[v,B]=dl(u,x,h),y=gA("x",u.dataType,u.dims.length),S=y.type.value,O="";v.countIncludePad?O+=`value /= ${S}(uniforms.kernelSize);`:O+=`value /= ${S}(i32(uniforms.kernelSize) - pad);`;let[H,te,Q,ie,oe]=ko(B,v);return H.push(...KA(u.dims,B)),{name:n,shaderCache:{hint:`${x.cacheKey};${Q};${ie};${oe}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:B,dataType:u.dataType}],dispatchGroup:{x:Math.ceil(He.size(B)/64)},programUniforms:H}),getShaderSource:de=>xo(de,y,u.dims.length,B.length,v,"value += x_val;",O,0,te,Q,ie,oe)}},hl=n=>{let u=n.count_include_pad!==0,h=J0(n);if(h.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let x={countIncludePad:u,...h,cacheKey:""};return{...x,cacheKey:fl(x)}},yo=(n,u)=>{tn(n.inputs),n.compute(Bo("AveragePool",n.inputs[0],!1,u))},Eo={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},ml=n=>{let u=n.format;return{format:u,...Eo,cacheKey:u}},Mo=(n,u)=>{tn(n.inputs),n.compute(Bo("GlobalAveragePool",n.inputs[0],!0,u))},Go=(n,u,h,x)=>{let[v,B]=dl(u,x,h),y=gA("x",u.dataType,u.dims.length),[S,O,H,te,Q]=ko(B,v);return S.push(...KA(u.dims,B)),{name:n,shaderCache:{hint:`${x.cacheKey};${H};${te};${Q}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:B,dataType:u.dataType}],dispatchGroup:{x:Math.ceil(He.size(B)/64)},programUniforms:S}),getShaderSource:ie=>xo(ie,y,u.dims.length,B.length,v,`
      value = max(x_val, value);
    `,"",u.dataType===10?-65504:-1e5,O,H,te,Q)}},Cl=(n,u)=>{tn(n.inputs),n.compute(Go("MaxPool",n.inputs[0],!1,u))},_0=n=>{let u=n.storage_order,h=n.dilations,x=J0(n);if(u!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(x.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let v={storageOrder:u,dilations:h,...x,cacheKey:""};return{...v,cacheKey:pl(v)}},bl=n=>{let u=n.format;return{format:u,...Eo,cacheKey:u}},Il=(n,u)=>{tn(n.inputs),n.compute(Go("GlobalMaxPool",n.inputs[0],!0,u))}}),or=Pe(()=>{Dt(),Ft(),Jr(),Rt(),wl=(n,u)=>{if(n.length<2||n.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(n.length===3&&n[1].dims===n[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(n.length===3&&n[0].dataType!==n[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(n[0].dataType===6&&n.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(n[1].dims.length!==0&&n[1].dims.length!==1&&n[1].dims.length!==n[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(n.length>2){if(n[0].dataType!==n[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(n[1].dims.length!==n[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!n[1].dims.map((h,x)=>h===n[2].dims[x]).reduce((h,x)=>h&&x,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(u.blockSize>0){if(n[1].dims.length===0||n[1].dims.length===1&&n[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!n[1].dims.map((v,B)=>B===u.axis||v===n[0].dims[B]).reduce((v,B)=>v&&B,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(n[1].dims.length!==n[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let h=n[0].dims[u.axis],x=n[1].dims[u.axis];if(u.blockSize<Math.ceil(h/x)||u.blockSize>Math.ceil(h/(x-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},kl=(n,u)=>{let h=He.normalizeAxis(u.axis,n[0].dims.length),x=n[0].dataType,v=x===3,B=n[0].dims,y=n[1].dataType,S=He.size(B),O=x===3||x===2,H=O?[Math.ceil(He.size(n[0].dims)/4)]:n[0].dims,te=n[1].dims,Q=n.length>2?n[2]:void 0,ie=Q?O?[Math.ceil(He.size(Q.dims)/4)]:Q.dims:void 0,oe=te.length===0||te.length===1&&te[0]===1,de=oe===!1&&te.length===1,fe=Jt(S),ke=oe&&(!O||fe===4),Me=ke?fe:1,De=ke&&!O?fe:1,Le=gA("input",O?12:x,H.length,De),Xe=gA("scale",y,te.length),_e=Q?gA("zero_point",O?12:x,ie.length):void 0,lA=JA("output",y,B.length,Me),LA=[Le,Xe];_e&&LA.push(_e);let st=[H,te];Q&&st.push(ie);let ht=[{type:12,data:S/Me},{type:12,data:h},{type:12,data:u.blockSize},...KA(...st,B)];return{name:"DequantizeLinear",shaderCache:{hint:u.cacheKey,inputDependencies:_e?["rank","rank","rank"]:["rank","rank"]},getShaderSource:pt=>`
      ${pt.registerUniforms([{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}]).declareVariables(...LA,lA)}
      ${pt.mainStart()}
          ${pt.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${lA.offsetToIndices("global_idx")};

          // Set input x
          ${O?`
            let input = ${Le.getByOffset("global_idx / 4")};
            let x_vec = ${v?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${Me===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${Le.getByOffset("global_idx")};`};

          // Set scale input
          ${oe?`let scale_value= ${Xe.getByOffset("0")}`:de?`
            let scale_index = ${lA.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${Xe.getByOffset("scale_index")};`:`
            var scale_indices: ${Xe.type.indices} = output_indices;
            let index = ${Xe.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${Xe.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${Xe.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${_e?oe?O?`
                let zero_point_input = ${_e.getByOffset("0")};
                let zero_point_vec =  ${v?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${_e.getByOffset("0")}`:de?O?`
                let zero_point_index = ${lA.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${_e.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${v?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${lA.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${_e.getByOffset("zero_point_index")};`:O?`
                let zero_point_offset = ${Xe.indicesToOffset("scale_indices")};
                let zero_point_input = ${_e.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${v?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${_e.getByIndices("scale_indices")};`:`let zero_point_value = ${O?v?"i32":"u32":Le.type.value}(0);`};
      // Compute and write output
      ${lA.setByOffset("global_idx",`${lA.type.value}(x_value - zero_point_value) * scale_value`)};
      }`,getRunData:()=>({outputs:[{dims:B,dataType:y}],dispatchGroup:{x:Math.ceil(S/Me/64),y:1,z:1},programUniforms:ht})}},Do=(n,u)=>{wl(n.inputs,u),n.compute(kl(n.inputs,u))},$0=n=>$e({axis:n.axis,blockSize:n.blockSize})}),vt=Pe(()=>{dA(),Dt(),Rt(),Q1=(n,u,h)=>{if(n===u||n<u&&h<0||n>u&&h>0)throw new Error("Range these inputs' contents are invalid.")},xl=(n,u,h,x)=>{let v=Math.abs(Math.ceil((u-n)/h)),B=[v],y=v,S=[{type:12,data:y},{type:x,data:n},{type:x,data:h},...KA(B)];return{name:"Range",shaderCache:{hint:`${x}`},getShaderSource:O=>{let H=JA("output",x,B.length),te=H.type.value,Q=[{name:"outputSize",type:"u32"},{name:"start",type:te},{name:"delta",type:te}];return`
        ${O.registerUniforms(Q).declareVariables(H)}
        ${O.mainStart()}
        ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${te}(global_idx) * uniforms.delta;
      }`},getRunData:()=>({outputs:[{dims:B,dataType:x}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:S})}},vl=n=>{let u=0,h=0,x=0;n.inputs[0].dataType===6?(u=n.inputs[0].getInt32Array()[0],h=n.inputs[1].getInt32Array()[0],x=n.inputs[2].getInt32Array()[0]):n.inputs[0].dataType===1&&(u=n.inputs[0].getFloat32Array()[0],h=n.inputs[1].getFloat32Array()[0],x=n.inputs[2].getFloat32Array()[0]),X.webgpu.validateInputContent&&Q1(u,h,x),n.compute(xl(u,h,x,n.inputs[0].dataType),{inputs:[]})}}),Ot=Pe(()=>{Dt(),Ft(),Jr(),Rt(),Qo=(n,u,h,x)=>{if(n!=="none"&&x!=="i32"&&x!=="u32"&&x!=="f32")throw new Error(`Input ${x} is not supported with reduction ${n}.`);let v=`{
                var oldValue = 0;
                loop {
                  let newValueF32 =`,B=`;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${u}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;switch(n){case"none":return`${u}=${h};`;case"add":return x==="i32"||x==="u32"?`atomicAdd(&${u}, bitcast<${x}>(${h}));`:`
              ${v}bitcast<${x}>(oldValue) + (${h})${B}`;case"max":return x==="i32"||x==="u32"?`atomicMax(&${u}, bitcast<${x}>(${h}));`:`
                ${v}max(bitcast<f32>(oldValue), (${h}))${B}`;case"min":return x==="i32"||x==="u32"?`atomicMin(&${u}, bitcast<${x}>(${h}));`:`${v}min(bitcast<${x}>(oldValue), (${h}))${B}`;case"mul":return`${v}(bitcast<${x}>(oldValue) * (${h}))${B}`;default:throw new Error(`Reduction ${n} is not supported.`)}},Bl=(n,u)=>{let h=n[0].dims,x=n[1].dims,v=h,B=Math.ceil(He.size(x)/1),y=x[x.length-1],S=He.sizeFromDimension(h,y),O=[{type:12,data:B},{type:12,data:y},{type:12,data:S},...KA(n[1].dims,n[2].dims,v)];return{name:"ScatterND",shaderCache:{hint:`${u.cacheKey}_${u.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:v,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(B/64)},programUniforms:O}),getShaderSource:H=>{let te=gA("indices",n[1].dataType,n[1].dims.length),Q=gA("updates",n[2].dataType,n[2].dims.length,1),ie=u.reduction!=="none"&&u.reduction!==""?ha("output",n[0].dataType,v.length):JA("output",n[0].dataType,v.length,1);return`
      ${H.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(te,Q,ie)}
      ${H.mainStart()}
        ${H.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var data_offset = 0u;
  let indices_start = uniforms.last_index_dimension * global_idx;
  let indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${n[0].dims.length===1?`
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;`:`
    let element_count_dim = uniforms.output_strides[i - indices_start];
    let dim_value = uniforms.output_shape[i - indices_start + uniforms.last_index_dimension];`}
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));
  }

  for (var i = 0u; i < uniforms.num_updates_elements; i++) {
    let value = updates[uniforms.num_updates_elements * global_idx + i];
    ${Qo(u.reduction,"output[data_offset + i]","value",ie.type.value)}
  }

      }`}}},yl=n=>$e({reduction:n.reduction}),To=(n,u)=>{n.compute(Bl(n.inputs,u),{inputs:[n.inputs[1],n.inputs[2]],outputs:[]})}}),Ir=Pe(()=>{Dt(),Ft(),Jr(),Rt(),El=(n,u)=>{if(n.every(h=>h>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),n.length>0){if(u.mode==="linear"){if(!(n.length===2||n.length===3||n.length===4&&n[0]===1&&n[1]===1||n.length===4&&n[0]===1&&n[3]===1||n.length===5&&n[0]===1&&n[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(u.mode==="cubic"&&!(n.length===2||n.length===4&&n[0]===1&&n[1]===1||n.length===4&&n[0]===1&&n[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Ml=(n,u,h)=>{u.every(v=>v>=0&&v<h||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let x=new Array(h).fill(1);return u.forEach((v,B)=>x[v]=n[B]),x},Po=(n,u,h,x,v,B)=>{let[y,S,O]=h>10?[1,2,3]:[-1,n.length>1?1:-1,-1],H=n[0].dims.length;if(y>0&&n.length>y&&n[y].dims.length>0)n[y].getFloat32Array().forEach(te=>B.push(te));else if(u.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(S>0&&n.length>S&&n[S].dims.length===1&&n[S].dims[0]>0){if(n[S].getFloat32Array().forEach(te=>x.push(te)),x.length!==0&&x.length!==H&&h>=18&&x.length!==u.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");El(x,u),u.axes.length>0&&Ml(x,u.axes,H).forEach((te,Q)=>x[Q]=te)}if(O>0&&n.length>O&&n[O].dims.length===1&&n[O].dims[0]>0&&(n[O].getBigInt64Array().forEach(te=>v.push(Number(te))),v.length!==0&&v.length!==H&&h>=18&&v.length!==u.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(u.axes.length>0){if(x.length!==0&&x.length!==u.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(v.length!==0&&v.length!==u.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof x<"u"&&typeof v<"u"&&x.length>0&&v.length>H)throw new Error("Resize requires only of scales or sizes to be specified")},Gl=(n,u,h,x)=>`
  // The whole part and the fractional part are calculated separately due to inaccuracy of floating
  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
  // offset-by-one error later in floor().
  let big = (${n}) * (${u});
  let whole = ${x}(big / (${h}));
  let fract = ${x}(big % (${h})) / ${x}(${h});
  return whole + fract;
`,T1=(n,u)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${u} { `+(()=>{switch(n){case"asymmetric":return`
          if (xScale < 1.0 || floor(xScale) != xScale) {
            return ${u}(xResized) / ${u}(xScale);
          } else {
            ${Gl("xResized","lengthOriginal","lengthResized",u)}
          }
        `;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${u}(xResized) + 0.5) / ${u}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${u}(xResized) + 0.5) / ${u}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    ${Gl("xResized","lengthOriginal - 1","lengthResized - 1",u)}
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${u}(roiStart) * ${u}(lengthOriginal - 1) +
                        (${u}(xResized) * ${u}(roiEnd - roiStart) * ${u}(lengthOriginal - 1)) /
                        ${u}(lengthResized - 1);
                  } else {
                    return 0.5 * ${u}(roiStart + roiEnd) * ${u}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${u}xScale * ${u}(lengthResized);
                  const adjustment = ${u}(lengthResized) / outputWidth;
                  const center = ${u}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${u}(xResized) + 0.5) / ${u}(xScale)) - 0.5;`;case"half_pixel":return`return ((${u}(xResized) + 0.5) / ${u}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${n} is not supported`)}})()+"}",zo=(n,u,h)=>`fn getNearestPixelFromOriginal(xOriginal: ${h}, isDownSample: bool) -> ${h} {`+(()=>{switch(n){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";default:if(u<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${n} is not supported`)}})()+"}",So=(n,u,h)=>{let x=new Array(h).fill(0).concat(new Array(h).fill(1)),v=n.length===0?x:n.slice();return u.length>0?(u.forEach((B,y)=>{x[B]=v[y],x[y+h]=v[u.length+y]}),x):v},Dl=(n,u,h,x)=>{let v=[];if(h.length>0)if(x.length>0){if(n.forEach(B=>v.push(B)),Math.max(...x)>n.length)throw new Error("axes is out of bound");x.forEach((B,y)=>v[B]=h[y])}else h.forEach(B=>v.push(B));else{if(u.length===0)throw new Error("Resize requires either scales or sizes.");v=n.map((B,y)=>Math.round(B*u[y]))}return v},Ql=(n,u,h)=>{let x=(()=>{switch(h.keepAspectRatioPolicy){case"not_larger":return h.axes.length>0?Math.min(...h.axes.map(B=>u[B]),Number.MAX_VALUE):Math.min(...u,Number.MAX_VALUE);case"not_smaller":return h.axes.length>0?Math.max(...h.axes.map(B=>u[B]),Number.MIN_VALUE):Math.max(...u,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${h.keepAspectRatioPolicy} is not supported`)}})();u.fill(1,0,u.length);let v=n.slice();return h.axes.length>0?(h.axes.forEach(B=>u[B]=x),h.axes.forEach(B=>v[B]=Math.round(n[B]*u[B]))):(u.fill(x,0,u.length),v.forEach((B,y)=>v[y]=Math.round(B*u[y]))),v},Fo=(n,u,h,x,v)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${n.type.indices}) -> array<${n.type.value}, ${h.length}> {
      var original_indices: array<${n.type.value}, ${h.length}>;
      for (var i:u32 = 0; i < ${h.length}; i++) {
        var output_index = ${n.indicesGet("output_indices","i")};
        var scale = ${rt("uniforms.scales","i",x)};
        var roi_low = ${rt("uniforms.roi","i",v)};
        var roi_hi = ${rt("uniforms.roi",`i + ${u.length}`,v)};
        if (scale == 1.0) {
          original_indices[i] = ${n.type.value}(output_index);
        } else {
          var input_shape_i = ${rt("uniforms.input_shape","i",u.length)};
          var output_shape_i = ${rt("uniforms.output_shape","i",h.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,Tl=(n,u,h,x,v,B,y)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${u.type.indices}) -> ${n.type.indices} {
      var input_indices: ${n.type.indices};
      for (var i:u32 = 0; i < ${x.length}; i++) {
        var output_index = ${u.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${rt("uniforms.scales","i",v)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${rt("uniforms.roi","i",B)};
          var roi_hi = ${rt("uniforms.roi",`i + ${h.length}`,B)};
          var input_shape_i = ${rt("uniforms.input_shape","i",h.length)};
          var output_shape_i = ${rt("uniforms.output_shape","i",x.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${y} || (original_idx >= 0 && original_idx < ${u.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${u.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${n.indicesSet("input_indices","i","input_index")}
      }
      return input_indices;
    }`,Pl=(n,u)=>`
    fn checkInputIndices(input_indices: ${n.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${u.length}; i++) {
        var input_index = ${n.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${rt("uniforms.input_shape","i",u.length)}) {
          return false;
        }
      }
      return true;
    }`,eo=(n,u,h,x)=>n.rank>x?`
    ${n.indicesSet("input_indices",u,"channel")};
    ${n.indicesSet("input_indices",h,"batch")};
`:"",zl=(n,u,h,x,v)=>{let[B,y,S,O]=h.length===2?[-1,0,1,-1]:[0,2,3,1],H=n.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${H} {
      var input_indices: ${n.type.indices};
      ${n.indicesSet("input_indices",y,`max(0, min(row, ${h[y]} - 1))`)};
      ${n.indicesSet("input_indices",S,`max(0, min(col, ${h[S]} - 1))`)};
      ${eo(n,O,B,2)}
      return ${n.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${u.type.indices}) -> ${H} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${H} = originalIndices[${y}];
      var col:${H} = originalIndices[${S}];
      ${x?`if (row < 0 || row > (${h[y]} - 1) || col < 0 || col > (${h[S]} - 1)) {
        return ${v};
      }`:""};
      row = max(0, min(row, ${h[y]} - 1));
      col = max(0, min(col, ${h[S]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${h.length>2?`u32(originalIndices[${O}])`:"0"};
      var batch: u32 =  ${h.length>2?`u32(originalIndices[${B}])`:"0"};
      var x11: ${H} = getInputValue(batch, channel, row1, col1);
      var x12: ${H} = getInputValue(batch, channel, row1, col2);
      var x21: ${H} = getInputValue(batch, channel, row2, col1);
      var x22: ${H} = getInputValue(batch, channel, row2, col2);
      var dx1: ${H} = abs(row - ${H}(row1));
      var dx2: ${H} = abs(${H}(row2) - row);
      var dy1: ${H} = abs(col - ${H}(col1));
      var dy2: ${H} = abs(${H}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},Sl=(n,u,h,x,v,B,y,S,O,H)=>{let te=h.length===2,[Q,ie]=te?[0,1]:[2,3],oe=n.type.value,de=fe=>{let ke=fe===Q?"row":"col";return`
      fn ${ke}CubicInterpolation(input_indices: ${n.type.indices}, output_indices: ${u.type.indices}) -> ${oe} {
        var output_index = ${u.indicesGet("output_indices",fe)};
        var originalIdx: ${oe} = getOriginalCoordinateFromResizedCoordinate(output_index, ${v[fe]},
        ${x[fe]}, ${h[fe]}, ${B[fe]}, ${B[fe]} + ${h.length});
        var fractOriginalIdx: ${oe} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${S} && (originalIdx < 0 || originalIdx > (${h[fe]} - 1))) {
          return ${O};
        }
        var data: array<${oe}, 4> = array<${oe}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${ke}: ${oe} = originalIdx + ${oe}(i);
          if (${ke} < 0 || ${ke} >= ${h[fe]}) {
            ${H?`coefs[i + 1] = 0.0;
                        continue;`:S?`return ${O};`:`${ke} = max(0, min(${ke}, ${h[fe]} - 1));`};
          }
        var input_indices_copy: ${n.type.indices} = input_indices;
          ${n.indicesSet("input_indices_copy",fe,`u32(${ke})`)};
          data[i + 1] = ${fe===Q?n.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${de(Q)};
    ${de(ie)};
  fn getCubicInterpolationCoefs(s: ${oe}) -> array<${oe}, 4> {
    var absS = abs(s);
    var coeffs: array<${oe}, 4> = array<${oe}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${oe} = 1.0 - absS;
    var twoMinusAbsS: ${oe} = 2.0 - absS;
    var onePlusAbsS: ${oe} = 1.0 + absS;
    coeffs[0] = ((${y} * onePlusAbsS - 5 * ${y}) * onePlusAbsS + 8 * ${y}) * onePlusAbsS - 4 * ${y};
    coeffs[1] = ((${y} + 2) * absS - (${y} + 3)) * absS * absS + 1;
    coeffs[2] = ((${y} + 2) * oneMinusAbsS - (${y} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${y} * twoMinusAbsS - 5 * ${y}) * twoMinusAbsS + 8 * ${y}) * twoMinusAbsS - 4 * ${y};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${oe}, 4>, coefs: array<${oe}, 4>) -> ${oe} {
    var coefsSum: ${oe} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${u.type.indices}) -> ${oe} {
    var input_indices: ${n.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},No=(n,u,h,x,v)=>{let[B,y,S,O,H]=h.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],te=n.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${te} {
      var input_indices: ${n.type.indices};
      ${n.indicesSet("input_indices",y,`max(0, min(depth, ${h[y]} - 1))`)};
      ${n.indicesSet("input_indices",S,`max(0, min(height, ${h[S]} - 1))`)};
      ${n.indicesSet("input_indices",O,`max(0, min(width, ${h[O]} - 1))`)};
      ${eo(n,H,B,3)}
      return ${n.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${u.type.indices}) -> ${te} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${te} = originalIndices[${y}];
      var height:${te} = originalIndices[${S}];
      var width:${te} = originalIndices[${O}];
      ${x?`if (depth < 0 || depth > (${h[y]} - 1) || height < 0 || height > (${h[S]} - 1) || width < 0 || (width > ${h[O]} - 1)) {
      return ${v};
        }`:""};

    depth = max(0, min(depth, ${h[y]} - 1));
      height = max(0, min(height, ${h[S]} - 1));
      width = max(0, min(width, ${h[O]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${h.length>3?`u32(originalIndices[${H}])`:"0"};
      var batch: u32 =  ${h.length>3?`u32(originalIndices[${B}])`:"0"};

      var x111: ${te} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${te} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${te} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${te} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${te} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${te} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${te} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${te} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${te} = abs(depth - ${te}(depth1));
      var dx2: ${te} = abs(${te}(depth2) - depth);
      var dy1: ${te} = abs(height - ${te}(height1));
      var dy2: ${te} = abs(${te}(height2) - height);
      var dz1: ${te} = abs(width - ${te}(width1));
      var dz2: ${te} = abs(${te}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},Fl=(n,u,h,x,v,B)=>{let y=n.dims,S=So(B,u.axes,y.length),O=Dl(y,x,v,u.axes),H=x.slice();x.length===0&&(H=y.map((Me,De)=>Me===0?1:O[De]/Me),u.keepAspectRatioPolicy!=="stretch"&&(O=Ql(y,H,u)));let te=JA("output",n.dataType,O.length),Q=gA("input",n.dataType,y.length),ie=He.size(O),oe=y.length===O.length&&y.every((Me,De)=>Me===O[De]),de=u.coordinateTransformMode==="tf_crop_and_resize",fe=u.extrapolationValue,ke=Q.type.value;return{name:"Resize",shaderCache:{hint:`${u.cacheKey}|${h}|${H.length>0?u.mode==="cubic"?H:H.length:""}|${v.length>0?v:""}|${S.length>0?S:""}|${oe}|${u.mode==="nearest"?y.length:y}`,inputDependencies:["rank"]},getShaderSource:Me=>`
      ${oe?"":`
      ${T1(u.coordinateTransformMode,ke)};
      ${(()=>{switch(u.mode){case"nearest":return`
              ${Pl(Q,y)};
              ${zo(u.nearestMode,h,ke)};
              ${Tl(Q,te,y,O,H.length,S.length,de)};
              `;case"linear":return`
              ${Fo(te,y,O,H.length,S.length)};
              ${(()=>{if(y.length===2||y.length===4)return`${zl(Q,te,y,de,fe)}`;if(y.length===3||y.length===5)return`${No(Q,te,y,de,fe)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(y.length===2||y.length===4)return`${Sl(Q,te,y,O,H,S,u.cubicCoeffA,de,u.extrapolationValue,u.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${Me.registerUniform("output_size","u32").registerUniform("scales","f32",H.length).registerUniform("roi","f32",S.length).declareVariables(Q,te)}
      ${Me.mainStart()}
        ${Me.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${oe?"output[global_idx] = input[global_idx];":`
        let output_indices = ${te.offsetToIndices("global_idx")};
        var input_indices: ${Q.type.indices};
        ${(()=>{switch(u.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${Q.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${u.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${y.length===2||y.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${u.mode}`)}})()};
`}
      }`,getRunData:()=>({outputs:[{dims:O,dataType:n.dataType}],dispatchGroup:{x:Math.ceil(ie/64)},programUniforms:[{type:12,data:ie},{type:1,data:H},{type:1,data:S},...KA(y,O)]})}},Nl=n=>{let u=n.customDataBuffer;return new Uint32Array(u,u.byteOffset,1)[0]},Ol=(n,u)=>{let h=[],x=[],v=[],B=Nl(n);if(u.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");Po(n.inputs,u,B,h,x,v),n.compute(Fl(n.inputs[0],u,B,h,x,v),{inputs:[0]})},Ll=n=>{let u=n.antialias,h=n.axes,x=n.coordinateTransformMode,v=n.cubicCoeffA,B=n.excludeOutside!==0,y=n.extrapolationValue,S=n.keepAspectRatioPolicy,O=n.mode,H=n.nearestMode===""?"simple":n.nearestMode;return $e({antialias:u,axes:h,coordinateTransformMode:x,cubicCoeffA:v,excludeOutside:B,extrapolationValue:y,keepAspectRatioPolicy:S,mode:O,nearestMode:H})}}),Mr=Pe(()=>{Dt(),Ft(),Jr(),Rt(),Yl=(n,u)=>{let[h,x,v,B]=n,{numHeads:y,rotaryEmbeddingDim:S}=u;if(h.dims.length!==3&&h.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${h.dims.length}`);if(!He.areEqual(x.dims,[])&&!He.areEqual(x.dims,[1])&&x.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${x.dims.length}`);if(v.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${v.dims.length}`);if(B.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${B.dims.length}`);if(!He.areEqual(v.dims,B.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(S>0&&y===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let O=h.dims[0],H=h.dims[h.dims.length-2],te=v.dims[0],Q=He.sizeFromDimension(h.dims,1)/H,ie=S===0?2*v.dims[1]:Q/y;if(S>ie)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(x.dims.length===2){if(O!==x.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${x.dims[0]}`);if(H!==x.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${x.dims[1]}`)}if(ie/2!==v.dims[1]&&S/2!==v.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${v.dims[1]}`);if(H>te)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Hl=(n,u)=>{let{interleaved:h,numHeads:x,rotaryEmbeddingDim:v,scale:B}=u,y=n[0].dims[0],S=He.sizeFromDimension(n[0].dims,1),O=n[0].dims[n[0].dims.length-2],H=S/O,te=n[2].dims[1],Q=v===0?2*te:H/x,ie=new Array(y,O,H/Q,Q-te),oe=He.computeStrides(ie),de=[{type:1,data:B},{type:12,data:ie},{type:12,data:oe},...n[0].dims.length===3?new Array({type:12,data:[S,H,Q,1]}):[],...n[0].dims.length===4?new Array({type:12,data:[S,Q,O*Q,1]}):[],...KA(n[0].dims,n[1].dims,n[2].dims,n[3].dims,n[0].dims)];return{name:"RotaryEmbedding",shaderCache:{hint:$e({interleaved:h}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:fe=>{let ke=gA("input",n[0].dataType,n[0].dims.length),Me=gA("position_ids",n[1].dataType,n[1].dims.length),De=gA("cos_cache",n[2].dataType,n[2].dims.length),Le=gA("sin_cache",n[3].dataType,n[3].dims.length),Xe=JA("output",n[0].dataType,n[0].dims.length);return fe.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:ie.length},{name:"global_strides",type:"u32",length:oe.length},{name:"input_output_strides",type:"u32",length:oe.length}]),`
        ${fe.declareVariables(ke,Me,De,Le,Xe)}

        ${fe.mainStart(cr)}
          let half_rotary_emb_dim = uniforms.${De.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${fe.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${Me.broadcastedIndicesToOffset("bsnh.xy",JA("",Me.type.tensor,2))};
            let position_id =
                u32(${Me.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${h});
            let j = i + select(half_rotary_emb_dim, 1, ${h});
            let re = ${ke.getByOffset("i")} * ${De.get("position_id","bsnh[3]")} -
                ${ke.getByOffset("j")} * ${Le.get("position_id","bsnh[3]")};
            ${Xe.setByOffset("i","re")}
            let im = ${ke.getByOffset("i")} * ${Le.get("position_id","bsnh[3]")} +
                ${ke.getByOffset("j")} * ${De.get("position_id","bsnh[3]")};
            ${Xe.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${Xe.setByOffset("k",ke.getByOffset("k"))}
          }
        }`},getRunData:()=>({outputs:[{dims:n[0].dims,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(He.size(ie)/cr)},programUniforms:de})}},Rl=(n,u)=>{Yl(n.inputs,u),n.compute(Hl(n.inputs,u))}}),jr=Pe(()=>{Dt(),Ft(),Rt(),Vl=n=>{if(!n||n.length<3)throw new Error("layerNorm requires at least 3 inputs.");let u=n[0],h=n[1],x=n[2];if(u.dataType!==h.dataType||u.dataType!==x.dataType)throw new Error("All inputs must have the same data type");if(u.dims.length!==3&&u.dims.length!==2)throw new Error("Input must be 2D or 3D");if(h.dims.length!==3&&h.dims.length!==2)throw new Error("Skip must be 2D or 3D");let v=u.dims[u.dims.length-1],B=u.dims[u.dims.length-2];if(h.dims[h.dims.length-1]!==v)throw new Error("Skip must have the same hidden size as input");if(h.dims[h.dims.length-2]!==B)throw new Error("Skip must have the same sequence length as input");if(x.dims.length!==1)throw new Error("Gamma must be 1D");if(x.dims[x.dims.length-1]!==v)throw new Error("Gamma must have the same hidden size as input");if(n.length>3){let y=n[3];if(y.dims.length!==1)throw new Error("Beta must be 1D");if(y.dims[y.dims.length-1]!==v)throw new Error("Beta must have the same hidden size as input")}if(n.length>4){let y=n[4];if(y.dims.length!==1)throw new Error("Bias must be 1D");if(y.dims[y.dims.length-1]!==v)throw new Error("Bias must have the same hidden size as input")}},Wl=(n,u,h,x)=>{let v=u.simplified,B=n[0].dims,y=He.size(B),S=B,O=y,H=B.slice(-1)[0],te=x?B.slice(0,-1).concat(1):[],Q=!v&&n.length>3,ie=n.length>4,oe=x&&h>1,de=x&&h>2,fe=h>3,ke=64,Me=Jt(H),De=[{type:12,data:O},{type:12,data:Me},{type:12,data:H},{type:1,data:u.epsilon}],Le=[{dims:S,dataType:n[0].dataType}];return h>1&&Le.push({dims:te,dataType:1}),h>2&&Le.push({dims:te,dataType:1}),h>3&&Le.push({dims:B,dataType:n[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${Me};${oe};${de};${fe}`,inputDependencies:n.map((Xe,_e)=>"type")},getShaderSource:Xe=>{let _e=[gA("x",n[0].dataType,n[0].dims,Me),gA("skip",n[1].dataType,n[1].dims,Me),gA("gamma",n[2].dataType,n[2].dims,Me)];Q&&_e.push(gA("beta",n[3].dataType,n[3].dims,Me)),ie&&_e.push(gA("bias",n[4].dataType,n[4].dims,Me)),_e.push(JA("output",n[0].dataType,S,Me)),oe&&_e.push(JA("mean_output",1,te)),de&&_e.push(JA("inv_std_output",1,te)),fe&&_e.push(JA("input_skip_bias_sum",n[0].dataType,S,Me));let lA=jt(n[0].dataType),LA=jt(1,Me);return`

      ${Xe.registerUniforms([{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(..._e)}
      var<workgroup> sum_shared : array<${LA}, 64>;
      var<workgroup> sum_squared_shared : array<${LA}, 64>;

      ${Xe.mainStart([ke,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / 64;

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / 64;
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == 63) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${ie?"bias[offset1d + i]":lA+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${fe?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${pa(lA,Me,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = 64;
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${ir("sum",Me)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${ir("square_sum",Me)} / f32(uniforms.hidden_size) ${v?"":"- mean * mean"} + uniforms.epsilon);
        ${oe?"mean_output[global_idx] = mean;":""}
        ${de?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${v?"":`- ${lA}(mean)`}) *
            ${lA}(inv_std_dev) * gamma[offset1d + i]
            ${Q?"+ beta[offset1d + i]":""};
        }
      }`},getRunData:()=>({outputs:Le,dispatchGroup:{x:Math.ceil(O/H)},programUniforms:De})}},Oo=(n,u)=>{Vl(n.inputs);let h=[0];n.outputCount>1&&h.push(-3),n.outputCount>2&&h.push(-3),n.outputCount>3&&h.push(3),n.compute(Wl(n.inputs,u,n.outputCount,!1),{outputs:h})}}),_r=Pe(()=>{Dt(),Ft(),Jr(),Rt(),jl=(n,u)=>{if(!n||n.length<1)throw new Error("too few inputs");if(u.axes.length!==0){if(u.axes.length!==u.starts.length||u.axes.length!==u.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(u.starts.length!==u.ends.length)throw new Error("starts and ends must have the same length");n.slice(1).forEach((h,x)=>{if(n[x+1].dataType!==6&&n[x+1].dataType!==7)throw new Error(`Input ${x} must be an array of int32 or int64`)})},O0=(n,u)=>{let h=[];if(n.length>u)if(n[u].dataType===7)n[u].getBigInt64Array().forEach(x=>h.push(Number(x)));else{if(n[u].dataType!==6)throw new Error(`Input ${u} must be an array of int32 or int64`);n[u].getInt32Array().forEach(x=>h.push(Number(x)))}return h},Lo=(n,u)=>{if(n.length>1){let h=O0(n,1),x=O0(n,2),v=O0(n,3);return v.length===0&&(v=[...Array(n[0].dims.length).keys()]),$e({starts:h,ends:x,axes:v})}return u},Yo=(n,u,h,x,v)=>{let B=n;return n<0&&(B+=h[x[u]]),v[u]<0?Math.max(0,Math.min(B,h[x[u]]-1)):Math.max(0,Math.min(B,h[x[u]]))},Ul=(n,u,h)=>`fn calculateInputIndices(output_indices: ${u.type.indices}) -> ${n.type.indices} {
          var input_indices: ${n.type.indices};
          var carry = 0u;
          for (var i = ${h.length}; i >= 0; i--) {
            let input_shape_i = ${rt("uniforms.input_shape","i",h.length)};
            let steps_i = ${rt("uniforms.steps","i",h.length)};
            let signs_i = ${rt("uniforms.signs","i",h.length)};
            let starts_i = ${rt("uniforms.starts","i",h.length)};
            var output_index = ${u.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${n.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,br=(n,u)=>{let h=n[0].dims,x=He.size(h),v=u.axes.length>0?He.normalizeAxes(u.axes,h.length):[...Array(h.length).keys()],B=O0(n,4);B.forEach(ke=>ke!==0||(()=>{throw new Error("step cannot be 0")})),B.length===0&&(B=Array(v.length).fill(1));let y=u.starts.map((ke,Me)=>Yo(ke,Me,h,v,B)),S=u.ends.map((ke,Me)=>Yo(ke,Me,h,v,B));if(v.length!==y.length||v.length!==S.length)throw new Error("start, ends and axes should have the same number of elements");if(v.length!==h.length)for(let ke=0;ke<h.length;++ke)v.includes(ke)||(y.splice(ke,0,0),S.splice(ke,0,h[ke]),B.splice(ke,0,1));let O=B.map(ke=>Math.sign(ke));B.forEach((ke,Me,De)=>{if(ke<0){let Le=(S[Me]-y[Me])/ke,Xe=y[Me],_e=Xe+Le*B[Me];y[Me]=_e,S[Me]=Xe,De[Me]=-ke}});let H=h.slice(0);v.forEach((ke,Me)=>{H[ke]=Math.ceil((S[ke]-y[ke])/B[ke])});let te={dims:H,dataType:n[0].dataType},Q=JA("output",n[0].dataType,H.length),ie=gA("input",n[0].dataType,n[0].dims.length),oe=He.size(H),de=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:y.length},{name:"signs",type:"i32",length:O.length},{name:"steps",type:"u32",length:B.length}],fe=[{type:12,data:oe},{type:12,data:y},{type:6,data:O},{type:12,data:B},...KA(n[0].dims,H)];return{name:"Slice",shaderCache:{hint:`${O.length}_${y.length}_${B.length}`,inputDependencies:["rank"]},getShaderSource:ke=>`
      ${ke.registerUniforms(de).declareVariables(ie,Q)}
        ${Ul(ie,Q,h)}
        ${ke.mainStart()}
          ${ke.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${Q.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${Q.setByOffset("global_idx",ie.getByIndices("input_indices"))}
      }`,getRunData:()=>({outputs:[te],dispatchGroup:{x:Math.ceil(x/64)},programUniforms:fe})}},P1=(n,u)=>{jl(n.inputs,u);let h=Lo(n.inputs,u);n.compute(br(n.inputs,h),{inputs:[0]})},z1=n=>{let u=n.starts,h=n.ends,x=n.axes;return $e({starts:u,ends:h,axes:x})}}),Na=Pe(()=>{Dt(),Ft(),Jr(),an(),Rt(),S1=n=>{if(!n||n.length!==1)throw new Error("Softmax op requires 1 input.")},Ho=(n,u)=>{let h,x=n.inputs[0],v=x.dims,B=He.size(v),y=v.length,S=He.normalizeAxis(u.axis,y),O=S<v.length-1,H=[];O?(H=Array.from({length:y},(_e,lA)=>lA),H[S]=y-1,H[y-1]=S,h=n.compute(Ga(x,H),{inputs:[x],outputs:[-1]})[0]):h=x;let te=h.dims,Q=te[y-1],ie=B/Q,oe=Jt(Q),de=Q/oe,fe=64;ie===1&&(fe=256);let ke=gA("x",h.dataType,h.dims,oe),Me=JA("result",h.dataType,h.dims,oe),De=ke.type.value,Le=jt(h.dataType)==="f32"?`var threadMax = ${De}(-3.402823e+38f);`:`var threadMax = ${De}(-65504.0h);`,Xe=n.compute({name:"Softmax",shaderCache:{hint:`${oe};${fe}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:te,dataType:h.dataType}],dispatchGroup:{x:ie},programUniforms:[{type:6,data:de}]}),getShaderSource:_e=>`
      var<workgroup> rowMaxShared : ${De};
      var<workgroup> rowSumShared : ${De};
      var<workgroup> threadShared : array<${De}, ${fe}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${De} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${De}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${_e.registerUniform("packedCols","i32").declareVariables(ke,Me)}
      ${_e.mainStart(fe)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${fe};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${Le}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${De}(${((lA,LA)=>LA===4?`max(max(${lA}.x, ${lA}.y), max(${lA}.z, ${lA}.w))`:LA===2?`max(${lA}.x, ${lA}.y)`:LA===3?`max(max(${lA}.x, ${lA}.y), ${lA}.z)`:lA)("threadShared[0]",oe)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${De}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${De}(${ir("threadShared[0]",oe)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`},{inputs:[h],outputs:[O?-1:0]})[0];O&&n.compute(Ga(Xe,H),{inputs:[Xe]})},Kl=(n,u)=>{S1(n.inputs),Ho(n,u)},Zl=n=>$e({axis:n.axis})}),$r=Pe(()=>{Dt(),Ft(),Rt(),Ro=n=>Array.from(n.getBigInt64Array(),Number),Xl=n=>{if(!n||n.length!==2)throw new Error("Tile requires 2 inputs.");if(n[0].dataType!==1&&n[0].dataType!==10&&n[0].dataType!==6&&n[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(n[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(n[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Ro(n[1]).length!==n[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Vo=(n,u)=>{let h=[];for(let x=0;x<n.length;++x)h.push(n[x]*u[x]);return h},Wo=(n,u)=>{let h=n[0].dims,x=u??Ro(n[1]),v=Vo(h,x),B=He.size(v),y=n[0].dataType,S=gA("input",y,h.length),O=JA("output",y,v.length);return{name:"Tile",shaderCache:{hint:`${x}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:v,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(B/64)},programUniforms:[{type:12,data:B},...KA(n[0].dims,v)]}),getShaderSource:H=>`
      const inputShape = ${S.indices(...h)};
      ${H.registerUniform("output_size","u32").declareVariables(S,O)}
      ${H.mainStart()}
      ${H.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${O.offsetToIndices("global_idx")};
      var input_indices: ${S.type.indices};
      for (var i = 0; i < ${h.length}; i++) {
        let input_dim_i = ${S.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${O.indicesGet("output_indices","i")}  % input_dim_i;

        ${S.indicesSet("input_indices","i","input_dim_value")}
      }
      ${O.setByOffset("global_idx",S.getByIndices("input_indices"))}
    }`}},F1=n=>{Xl(n.inputs),n.compute(Wo(n.inputs),{inputs:[0]})}}),Yr=Pe(()=>{Dt(),Ft(),Rt(),ql=(n,u,h,x,v)=>{let B,y=JA("output_data",v,h.length,4),S=gA("a_data",u[1].dataType,u[1].dims.length,4),O=gA("b_data",u[2].dataType,u[2].dims.length,4),H=gA("c_data",u[0].dataType,u[0].dims.length,4),te=(Q,ie,oe)=>`select(${ie}, ${Q}, ${oe})`;if(x){let Q=(ie,oe,de="")=>{let fe=`a_data[index_a${oe}][component_a${oe}]`,ke=`b_data[index_b${oe}][component_b${oe}]`,Me=`bool(c_data[index_c${oe}] & (0xffu << (component_c${oe} * 8)))`;return`
            let output_indices${oe} = ${y.offsetToIndices(`global_idx * 4u + ${oe}u`)};
            let offset_a${oe} = ${S.broadcastedIndicesToOffset(`output_indices${oe}`,y)};
            let offset_b${oe} = ${O.broadcastedIndicesToOffset(`output_indices${oe}`,y)};
            let offset_c${oe} = ${H.broadcastedIndicesToOffset(`output_indices${oe}`,y)};
            let index_a${oe} = offset_a${oe} / 4u;
            let index_b${oe} = offset_b${oe} / 4u;
            let index_c${oe} = offset_c${oe} / 4u;
            let component_a${oe} = offset_a${oe} % 4u;
            let component_b${oe} = offset_b${oe} % 4u;
            let component_c${oe} = offset_c${oe} % 4u;
            ${ie}[${oe}] = ${de}(${te(fe,ke,Me)});
          `};B=v===9?`
            var data = vec4<u32>(0);
            ${Q("data",0,"u32")}
            ${Q("data",1,"u32")}
            ${Q("data",2,"u32")}
            ${Q("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`
            ${Q("output_data[global_idx]",0)}
            ${Q("output_data[global_idx]",1)}
            ${Q("output_data[global_idx]",2)}
            ${Q("output_data[global_idx]",3)}
          `}else B=y.setByOffset("global_idx",te(S.getByOffset("global_idx"),O.getByOffset("global_idx"),H.getByOffset("global_idx")));return`
        ${n.registerUniform("vec_size","u32").declareVariables(H,S,O,y)}
        ${n.mainStart()}
        ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${B}
      }`},Jl=n=>{let u=n[1].dims,h=n[2].dims,x=n[0].dims,v=n[1].dataType,B=!(He.areEqual(u,h)&&He.areEqual(h,x)),y=u,S=He.size(u);if(B){let H=NA.calcShape(NA.calcShape(u,h,!1),x,!1);if(!H)throw new Error("Can't perform where op on the given tensors");y=H,S=He.size(y)}let O=Math.ceil(S/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:H=>ql(H,n,y,B,v),getRunData:()=>({outputs:[{dims:y,dataType:v}],dispatchGroup:{x:Math.ceil(S/64/4)},programUniforms:[{type:12,data:O},...KA(x,u,h,y)]})}},jo=n=>{n.compute(Jl(n.inputs))}}),ba=Pe(()=>{Cc(),g1(),bc(),Ic(),wc(),kc(),xc(),Nt(),Qa(),Fa(),Ua(),Jn(),Mc(),W1(),j1(),K(),U(),Ee(),eA(),sA(),XA(),VA(),_A(),ft(),gt(),uA(),zt(),Qt(),or(),vt(),Ot(),c1(),Ir(),Mr(),jr(),_r(),Na(),SA(),$r(),an(),u1(),Yr(),N1=new Map([["Abs",[En]],["Acos",[is]],["Acosh",[x0]],["Add",[fr]],["ArgMax",[h0,Ri]],["ArgMin",[ii,Ri]],["Asin",[ta]],["Asinh",[hs]],["Atan",[ra]],["Atanh",[ms]],["Attention",[m0]],["AveragePool",[yo,hl]],["BatchNormalization",[I0]],["BiasAdd",[k0]],["BiasSplitGelu",[ma]],["Cast",[Mn,Wi]],["Ceil",[Br]],["Clip",[ji]],["Concat",[gi,D0]],["Conv",[Ve,ce]],["ConvTranspose",[Zt,et]],["Cos",[Bi]],["Cosh",[Gn]],["CumSum",[pr,hr]],["DepthToSpace",[Wr,na]],["DequantizeLinear",[Do,$0]],["Div",[Hn]],["Einsum",[fi,pi]],["Elu",[oi,aa]],["Equal",[Gs]],["Erf",[Dn]],["Exp",[Qn]],["Expand",[$i]],["FastGelu",[f2]],["Floor",[Tn]],["FusedConv",[Ve,ce]],["Gather",[po,m2]],["GatherElements",[Co,B2]],["GatherBlockQuantized",[k2,x2]],["GatherND",[b2,ho]],["Gelu",[Ui]],["Gemm",[M2,bo]],["GlobalAveragePool",[Mo,ml]],["GlobalMaxPool",[Il,bl]],["Greater",[Vn]],["GreaterOrEqual",[Ds]],["GridSample",[S2,F2]],["GroupQueryAttention",[Z2]],["HardSigmoid",[Lr,Zi]],["InstanceNormalization",[q2]],["LayerNormalization",[$2]],["LeakyRelu",[ns,aa]],["Less",[G0]],["LessOrEqual",[es]],["Log",[li]],["MatMul",[el]],["MatMulNBits",[rl,al]],["MaxPool",[Cl,_0]],["Mul",[ci]],["MultiHeadAttention",[Pi,O2]],["Neg",[B0]],["Not",[Ki]],["Pad",[ul]],["Pow",[M0]],["QuickGelu",[E0,aa]],["Range",[vl]],["Reciprocal",[Pn]],["ReduceMin",[xi]],["ReduceMean",[xn]],["ReduceMax",[si]],["ReduceSum",[zr]],["ReduceProd",[vn]],["ReduceL1",[Hi]],["ReduceL2",[va]],["ReduceLogSum",[p0]],["ReduceLogSumExp",[za]],["ReduceSumSquare",[f0]],["Relu",[zn]],["Resize",[Ol,Ll]],["RotaryEmbedding",[Rl]],["ScatterND",[To,yl]],["Sigmoid",[bs]],["Sin",[Sn]],["Sinh",[Xi]],["Slice",[P1,z1]],["SkipLayerNormalization",[Oo]],["Split",[W2,j2]],["Sqrt",[yi]],["Softmax",[Kl,Zl]],["Sub",[Rn]],["Tan",[Sa]],["Tanh",[Fn]],["ThresholdedRelu",[On,aa]],["Tile",[F1]],["Transpose",[Oi,Gt]],["Where",[jo]]])}),_t=Pe(()=>{dA(),zi(),Rt(),O1=class{constructor(n){this.backend=n,this.repo=new Map,this.attributesBound=!1}getArtifact(n){return this.repo.get(n)}setArtifact(n,u){this.repo.set(n,u)}run(n,u,h,x,v){Ye(n.programInfo.name);let B=this.backend.device,y=this.backend.getComputePassEncoder();this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber);let S=[];for(let H of u)S.push({binding:S.length,resource:{buffer:H.buffer}});for(let H of h)S.push({binding:S.length,resource:{buffer:H.buffer}});v&&S.push({binding:S.length,resource:v});let O=B.createBindGroup({layout:n.computePipeline.getBindGroupLayout(0),entries:S,label:n.programInfo.name});if(this.backend.sessionStatus==="capturing"){let H={kernelId:this.backend.currentKernelId,computePipeline:n.computePipeline,bindGroup:O,dispatchGroup:x};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(H)}y.setPipeline(n.computePipeline),y.setBindGroup(0,O),y.dispatchWorkgroups(...x),this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Je(n.programInfo.name)}dispose(){}build(n,u){Ye(n.name);let h=this.backend.device,x=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"},{feature:"subgroups-f16",extension:"subgroups_f16"}].forEach(H=>{h.features.has(H.feature)&&x.push(`enable ${H.extension};`)});let v=Pr(u,this.backend.device.limits),B=n.getShaderSource(v),y=`${x.join(`
`)}
${v.additionalImplementations}
${B}`,S=h.createShaderModule({code:y,label:n.name});Pt("verbose",()=>`[WebGPU] ${n.name} shader code: ${y}`);let O=h.createComputePipeline({compute:{module:S,entryPoint:"main"},layout:"auto",label:n.name});return Je(n.name),{programInfo:n,computePipeline:O,uniformVariablesInfo:v.variablesInfo}}normalizeDispatchGroupSize(n){let u=typeof n=="number"?n:n.x,h=typeof n=="number"?1:n.y||1,x=typeof n=="number"?1:n.z||1,v=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(u<=v&&h<=v&&x<=v)return[u,h,x];let B=u*h*x,y=Math.ceil(Math.sqrt(B));if(y>v){if(y=Math.ceil(Math.cbrt(B)),y>v)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[y,y,y]}return[y,y,1]}}}),Ka=Pe(()=>{dA(),Dt(),zi(),R1(),hc(),ba(),_t(),_l=(n,u)=>{if(u.length!==n.length)throw new Error(`inputDependencies length ${u.length} is not equal to inputTensors length ${n.length}.`);let h=[];for(let x=0;x<n.length;++x){let v=n[x].dataType;switch(u[x]){case"none":h.push("");break;case"type":h.push(`${v}`);break;case"rank":{let B=n[x].dims.length;h.push(`${v};${B}`);break}case"dims":{let B=n[x].dims.join(",");h.push(`${v};${B}`);break}default:throw new Error(`unsupported input dependency: ${u[x]}`)}}return h.join("|")},$l=(n,u,h)=>{let x=n.name;return n.shaderCache?.hint&&(x+="["+n.shaderCache.hint+"]"),x+=":"+h+`:${_l(u,n.shaderCache?.inputDependencies??new Array(u.length).fill("dims"))}`,x},e1=class{constructor(n){n&&(this.architecture=n.architecture,this.vendor=n.vendor)}isArchitecture(n){return this.architecture===n}isVendor(n){return this.vendor===n}},A1=class{constructor(n){this.subgroupsSupported=n.features.has("subgroups"),this.subgroupsF16Supported=n.features.has("subgroups");let u=n.limits;this.subgroupsSupported&&u.minSubgroupSize&&u.maxSubgroupSize?this.subgroupSizeRange=[u.minSubgroupSize,u.maxSubgroupSize]:this.subgroupSizeRange=void 0}},t1=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let n=this.kernelCustomData.get(this.currentKernelId);return n||(n={},this.kernelCustomData.set(this.currentKernelId,n)),n}async initialize(n,u){this.env=n;let h=[],x={requiredLimits:{maxComputeWorkgroupStorageSize:u.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:u.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:u.limits.maxStorageBufferBindingSize,maxBufferSize:u.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:u.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:u.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:u.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:u.limits.maxComputeWorkgroupSizeZ},requiredFeatures:h},v=B=>u.features.has(B)&&h.push(B)&&!0;v("chromium-experimental-timestamp-query-inside-passes")||v("timestamp-query"),v("shader-f16"),v("subgroups")&&v("subgroups-f16"),this.device=await u.requestDevice(x),this.deviceInfo=new A1(this.device),this.adapterInfo=new e1(u.info||await u.requestAdapterInfo()),this.gpuDataManager=Oe(this),this.programManager=new O1(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,ys(n.logLevel,!!n.debug),this.device.onuncapturederror=B=>{B.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${B.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:u,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let n=this.getCommandEncoder(),u={};this.queryType==="at-passes"&&(u.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:2*this.pendingDispatchNumber,endOfPassWriteIndex:2*this.pendingDispatchNumber+1}),this.computePassEncoder=n.beginComputePass(u)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;let n;Ye(),this.endComputePass(),this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,2*this.pendingDispatchNumber,this.queryResolveBuffer,0),n=this.device.createBuffer({size:2*this.pendingDispatchNumber*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(n,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,n,0,2*this.pendingDispatchNumber*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&n.mapAsync(GPUMapMode.READ).then(()=>{let u=new BigUint64Array(n.getMappedRange()),h=this.pendingQueries.get(n);for(let x=0;x<u.length/2;x++){let v=h[x],B=v.kernelId,y=this.kernels.get(B),S=y.kernelType,O=y.kernelName,H=v.programName,te=v.inputTensorViews,Q=v.outputTensorViews,ie=u[2*x],oe=u[2*x+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=ie);let de=Number(ie-this.queryTimeBase),fe=Number(oe-this.queryTimeBase);if(!Number.isSafeInteger(de)||!Number.isSafeInteger(fe))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:te.map(ke=>({dims:ke.dims,dataType:rs(ke.dataType)})),outputsMetadata:Q.map(ke=>({dims:ke.dims,dataType:rs(ke.dataType)})),kernelId:B,kernelType:S,kernelName:O,programName:H,startTime:de,endTime:fe});else{let ke="";te.forEach((De,Le)=>{ke+=`input[${Le}]: [${De.dims}] | ${rs(De.dataType)}, `});let Me="";Q.forEach((De,Le)=>{Me+=`output[${Le}]: [${De.dims}] | ${rs(De.dataType)}, `}),console.log(`[profiling] kernel "${B}|${S}|${O}|${H}" ${ke}${Me}execution time: ${fe-de} ns`)}Re("GPU",`${H}::${ie}::${oe}`)}n.unmap(),this.pendingQueries.delete(n)}),Je()}run(n,u,h,x,v,B){Ye(n.name);let y=[];for(let De=0;De<u.length;++De){let Le=u[De].data;if(Le===0)continue;let Xe=this.gpuDataManager.get(Le);if(!Xe)throw new Error(`no GPU data for input: ${Le}`);y.push(Xe)}let{outputs:S,dispatchGroup:O,programUniforms:H}=n.getRunData(u),te=h.length===0?S.map((De,Le)=>Le):h;if(te.length!==S.length)throw new Error(`Output size ${te.length} must be equal to ${S.length}.`);let Q,ie=[],oe=[];for(let De=0;De<S.length;++De){if(!Number.isInteger(te[De])||te[De]<-3||te[De]>=B)throw new Error(`Invalid output index: ${te[De]}`);if(te[De]===-3)continue;let Le=te[De]===-1,Xe=te[De]===-2,_e=Le||Xe?v(S[De].dataType,S[De].dims):x(te[De],S[De].dataType,S[De].dims);if(ie.push(_e),_e.data===0)continue;let lA=this.gpuDataManager.get(_e.data);if(!lA)throw new Error(`no GPU data for output: ${_e.data}`);if(Le&&this.temporaryData.push(lA),Xe){let LA=this.kernelPersistentData.get(this.currentKernelId);LA||(LA=[],this.kernelPersistentData.set(this.currentKernelId,LA)),LA.push(lA)}oe.push(lA)}if(y.length!==u.length||oe.length!==ie.length){if(oe.length===0)return Je(n.name),ie;throw new Error(`Program ${n.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}if(H){let De=0,Le=[];H.forEach(LA=>{let st=typeof LA.data=="number"?[LA.data]:LA.data;if(st.length===0)return;let ht,pt,mt=LA.type===10?2:4;LA.type===10?(pt=st.length>4?16:st.length>2?8:st.length*mt,ht=st.length>4?16:mt*st.length):(pt=st.length<=2?st.length*mt:16,ht=16),De=Math.ceil(De/pt)*pt,Le.push(De);let Bt=LA.type===10?8:4;De+=st.length>4?Math.ceil(st.length/Bt)*ht:st.length*mt});let Xe=16;De=Math.ceil(De/Xe)*Xe;let _e=new ArrayBuffer(De);H.forEach((LA,st)=>{let ht=Le[st],pt=typeof LA.data=="number"?[LA.data]:LA.data;if(LA.type===6)new Int32Array(_e,ht,pt.length).set(pt);else if(LA.type===12)new Uint32Array(_e,ht,pt.length).set(pt);else if(LA.type===10)new Uint16Array(_e,ht,pt.length).set(pt);else{if(LA.type!==1)throw new Error(`Unsupported uniform type: ${rs(LA.type)}`);new Float32Array(_e,ht,pt.length).set(pt)}});let lA=this.gpuDataManager.create(De,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(lA.buffer,0,_e,0,De),this.gpuDataManager.release(lA.id),Q={offset:0,size:De,buffer:lA.buffer}}let de=this.programManager.normalizeDispatchGroupSize(O),fe=de[1]===1&&de[2]===1,ke=$l(n,u,fe),Me=this.programManager.getArtifact(ke);if(Me||(Me=this.programManager.build(n,de),this.programManager.setArtifact(ke,Me),Pt("info",()=>`[artifact] key: ${ke}, programName: ${n.name}`)),H&&Me.uniformVariablesInfo){if(H.length!==Me.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${Me.uniformVariablesInfo.length}, got ${H.length} in program "${Me.programInfo.name}".`);for(let De=0;De<H.length;De++){let Le=H[De],Xe=Le.type,_e=typeof Le.data=="number"?1:Le.data.length,[lA,LA]=Me.uniformVariablesInfo[De];if(Xe!==lA||_e!==LA)throw new Error(`Uniform variable ${De} mismatch: expect type ${lA} with size ${LA}, got type ${Xe} with size ${_e} in program "${Me.programInfo.name}".`)}}if(Pt("info",()=>`[ProgramManager] run "${n.name}" (key=${ke}) with ${de[0]}x${de[1]}x${de[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let De={kernelId:this.currentKernelId,programName:Me.programInfo.name,inputTensorViews:u,outputTensorViews:ie};this.pendingKernels.push(De),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(De)}return this.programManager.run(Me,y,oe,de,Q),Je(n.name),ie}upload(n,u){this.gpuDataManager.upload(n,u)}memcpy(n,u){this.gpuDataManager.memcpy(n,u)}async download(n,u){await this.gpuDataManager.download(n,u)}alloc(n){return this.gpuDataManager.create(n).id}free(n){return this.gpuDataManager.release(n)}createKernel(n,u,h,x){let v=N1.get(n);if(!v)throw new Error(`kernel not implemented: ${n}`);let B={kernelType:n,kernelName:x,kernelEntry:v[0],attributes:[v[1],h]};this.kernels.set(u,B)}releaseKernel(n){let u=this.kernelPersistentData.get(n);if(u){for(let h of u)this.gpuDataManager.release(h.id);this.kernelPersistentData.delete(n)}this.kernelCustomData.delete(n),this.kernels.delete(n)}computeKernel(n,u,h){let x=this.kernels.get(n);if(!x)throw new Error(`kernel not created: ${n}`);let v=x.kernelType,B=x.kernelName,y=x.kernelEntry,S=x.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${v}] ${B}" is not allowed to be called recursively`);this.currentKernelId=n,S[0]&&(S[1]=S[0](S[1]),S[0]=void 0),Pt("info",()=>`[WebGPU] Start to run kernel "[${v}] ${B}"...`);let O=this.env.debug;this.temporaryData=[];try{return O&&this.device.pushErrorScope("validation"),y(u,S[1]),0}catch(H){return h.push(Promise.resolve(`[WebGPU] Kernel "[${v}] ${B}" failed. ${H}`)),1}finally{O&&h.push(this.device.popErrorScope().then(H=>H?`GPU validation error for kernel "[${v}] ${B}": ${H.message}`:null));for(let H of this.temporaryData)this.gpuDataManager.release(H.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(n,u,h,x){let v=this.sessionExternalDataMapping.get(n);v||(v=new Map,this.sessionExternalDataMapping.set(n,v));let B=v.get(u),y=this.gpuDataManager.registerExternalBuffer(h,x,B);return v.set(u,[y,h]),y}unregisterBuffers(n){let u=this.sessionExternalDataMapping.get(n);u&&(u.forEach(h=>this.gpuDataManager.unregisterExternalBuffer(h[0])),this.sessionExternalDataMapping.delete(n))}getBuffer(n){let u=this.gpuDataManager.get(n);if(!u)throw new Error(`no GPU data for buffer: ${n}`);return u.buffer}createDownloader(n,u,h){return async()=>{let x=await _(this,n,u);return ka(x.buffer,h)}}writeTimestamp(n){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,n)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2*this.maxDispatchNumber}),this.queryResolveBuffer=this.device.createBuffer({size:2*this.maxDispatchNumber*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Pt("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Pt("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Pt("info","replay"),this.sessionStatus="replaying";let n=this.capturedCommandList.get(this.currentSessionId),u=this.capturedPendingKernels.get(this.currentSessionId),h=n.length;this.pendingKernels=[];for(let x=0;x<h;x++){let v=this.getComputePassEncoder(),B=n[x];this.writeTimestamp(2*this.pendingDispatchNumber),v.setPipeline(B.computePipeline),v.setBindGroup(0,B.bindGroup),v.dispatchWorkgroups(...B.dispatchGroup),this.writeTimestamp(2*this.pendingDispatchNumber+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(u[x]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(n){this.unregisterBuffers(n),this.capturedCommandList.has(n)&&this.capturedCommandList.delete(n),this.capturedPendingKernels.has(n)&&this.capturedPendingKernels.delete(n),this.gpuDataManager.onReleaseSession(n)}onRunStart(n){this.currentSessionId=n,this.setQueryType()}}}),sn=Pe(()=>{zi(),r1=1,Uo=()=>r1++,a1=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),Ko=(n,u)=>{let h=a1.get(n);if(!h)throw new Error("Unsupported data type.");return u.length>0?Math.ceil(u.reduce((x,v)=>x*v)*h/8):0},Zo=class{constructor(n){this.sessionId=n.sessionId,this.mlContext=n.context,this.mlTensor=n.tensor,this.dataType=n.dataType,this.tensorShape=n.shape}get tensor(){return this.mlTensor}get type(){return this.dataType}get shape(){return this.tensorShape}get byteLength(){return Ko(this.dataType,this.tensorShape)}destroy(){Pt("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(n){this.mlContext.writeTensor(this.mlTensor,n)}async read(n){return n?this.mlContext.readTensor(this.mlTensor,n):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(n,u,h){return this.mlContext===n&&this.dataType===u&&this.tensorShape.length===h.length&&this.tensorShape.every((x,v)=>x===h[v])}},Xo=class{constructor(n,u){this.tensorManager=n,this.wrapper=u}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(n,u,h,x){if(this.wrapper){if(this.wrapper.canReuseTensor(n,u,h))return this.wrapper.tensor;if(x){if(this.wrapper.byteLength!==Ko(u,h))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let v=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(u,h,v,!0,!0),x&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(n){if(this.wrapper){if(n.byteLength===this.wrapper.byteLength)return void this.wrapper.write(n);Pt("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor()}this.activeUpload?this.activeUpload.set(n):this.activeUpload=new Uint8Array(n)}async download(n){if(this.activeUpload)return n?void(n instanceof ArrayBuffer?new Uint8Array(n).set(this.activeUpload):new Uint8Array(n.buffer,n.byteOffset,n.byteLength).set(this.activeUpload)):this.activeUpload.buffer;if(!this.wrapper)throw new Error("Tensor has not been created.");return n?this.wrapper.read(n):this.wrapper.read()}},s1=class{constructor(n){this.backend=n,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}reserveTensorId(){let n=Uo();return this.tensorTrackersById.set(n,new Xo(this)),n}releaseTensorId(n){let u=this.tensorTrackersById.get(n);u&&(this.tensorTrackersById.delete(n),u.tensorWrapper&&this.releaseTensor(u.tensorWrapper))}async ensureTensor(n,u,h,x){Pt("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${n}, dataType: ${u}, shape: ${h}, copyOld: ${x}}`);let v=this.tensorTrackersById.get(n);if(!v)throw new Error("Tensor not found.");return v.ensureTensor(this.backend.currentContext,u,h,x)}upload(n,u){let h=this.tensorTrackersById.get(n);if(!h)throw new Error("Tensor not found.");h.upload(u)}async download(n,u){Pt("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${n}, dstBuffer: ${u?.byteLength}}`);let h=this.tensorTrackersById.get(n);if(!h)throw new Error("Tensor not found.");return h.download(u)}releaseTensorsForSession(n){for(let u of this.freeTensors)u.sessionId===n&&u.destroy();this.freeTensors=this.freeTensors.filter(u=>u.sessionId!==n)}registerTensor(n,u,h,x){let v=Uo(),B=new Zo({sessionId:this.backend.currentSessionId,context:n,tensor:u,dataType:h,shape:x});return this.tensorTrackersById.set(v,new Xo(this,B)),this.externalTensors.add(B),v}async getCachedTensor(n,u,h,x,v){let B=this.backend.currentSessionId,y=this.backend.currentContext;for(let[O,H]of this.freeTensors.entries())if(H.canReuseTensor(y,n,u)){Pt("verbose",()=>`[WebNN] Reusing tensor {dataType: ${n}, shape: ${u}}`);let te=this.freeTensors.splice(O,1)[0];return te.sessionId=B,te}Pt("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${n}, shape: ${u}}`);let S=await y.createTensor({dataType:n,shape:u,dimensions:u,usage:h,writable:x,readable:v});return new Zo({sessionId:B,context:y,tensor:S,dataType:n,shape:u})}releaseTensor(n){this.externalTensors.has(n)&&this.externalTensors.delete(n),this.freeTensors.push(n)}},L1=(...n)=>new s1(...n)}),Ao=Pe(()=>{Dt(),rn(),R1(),sn(),zi(),qo=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),i1=(n,u)=>{if(n===u)return!0;if(n===void 0||u===void 0)return!1;let h=Object.keys(n).sort(),x=Object.keys(u).sort();return h.length===x.length&&h.every((v,B)=>v===x[B]&&n[v]===u[v])},n1=class{constructor(n){this.tensorManager=L1(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],ys(n.logLevel,!!n.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(n){this.activeSessionId=n}async createMLContext(n){if(n instanceof GPUDevice){let h=this.mlContextCache.findIndex(x=>x.gpuDevice===n);if(h!==-1)return this.mlContextCache[h].mlContext;{let x=await navigator.ml.createContext(n);return this.mlContextCache.push({gpuDevice:n,mlContext:x}),x}}if(n===void 0){let h=this.mlContextCache.findIndex(x=>x.options===void 0&&x.gpuDevice===void 0);if(h!==-1)return this.mlContextCache[h].mlContext;{let x=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:x}),x}}let u=this.mlContextCache.findIndex(h=>i1(h.options,n));if(u!==-1)return this.mlContextCache[u].mlContext;{let h=await navigator.ml.createContext(n);return this.mlContextCache.push({options:n,mlContext:h}),h}}get currentContext(){let n=this.getMLContext(this.currentSessionId);if(!n)throw new Error(`No MLContext found for session ${this.currentSessionId}`);return n}registerMLContext(n,u){this.mlContextBySessionId.set(n,u);let h=this.sessionIdsByMLContext.get(u);h||(h=new Set,this.sessionIdsByMLContext.set(u,h)),h.add(n)}onReleaseSession(n){let u=this.mlContextBySessionId.get(n);if(!u)return;this.tensorManager.releaseTensorsForSession(n),this.mlContextBySessionId.delete(n);let h=this.sessionIdsByMLContext.get(u);if(h.delete(n),h.size===0){this.sessionIdsByMLContext.delete(u);let x=this.mlContextCache.findIndex(v=>v.mlContext===u);x!==-1&&this.mlContextCache.splice(x,1)}}getMLContext(n){return this.mlContextBySessionId.get(n)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(n){Pt("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${n}}`),this.tensorManager.releaseTensorId(n)}async ensureTensor(n,u,h,x){let v=qo.get(u);if(!v)throw new Error(`Unsupported ONNX data type: ${u}`);return this.tensorManager.ensureTensor(n,v,h,x)}uploadTensor(n,u){if(!Tr().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");Pt("verbose",()=>`[WebNN] uploadTensor {tensorId: ${n}, data: ${u.byteLength}}`),this.tensorManager.upload(n,u)}async downloadTensor(n,u){return this.tensorManager.download(n,u)}createMLTensorDownloader(n,u){return async()=>{let h=await this.tensorManager.download(n);return ka(h,u)}}registerMLTensor(n,u,h){let x=qo.get(u);if(!x)throw new Error(`Unsupported ONNX data type: ${u}`);let v=this.tensorManager.registerTensor(this.currentContext,n,x,h);return Pt("verbose",()=>`[WebNN] registerMLTensor {tensor: ${n}, dataType: ${x}, dimensions: ${h}} -> {tensorId: ${v}}`),v}registerMLConstant(n,u,h,x,v,B){if(!B)throw new Error("External mounted files are not available.");let y=n;n.startsWith("./")&&(y=n.substring(2));let S=B.get(y);if(!S)throw new Error(`File with name ${y} not found in preloaded files.`);if(u+h>S.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let O,H=S.slice(u,u+h).buffer;switch(v.dataType){case"float32":O=new Float32Array(H);break;case"float16":O=new Uint16Array(H);break;case"int32":O=new Int32Array(H);break;case"uint32":O=new Uint32Array(H);break;case"int64":O=new BigInt64Array(H);break;case"uint64":O=new BigUint64Array(H);break;case"int8":O=new Int8Array(H);break;case"int4":case"uint4":case"uint8":O=new Uint8Array(H);break;default:throw new Error(`Unsupported data type: ${v.dataType} in creating WebNN Constant from external data.`)}return Pt("verbose",()=>`[WebNN] registerMLConstant {dataType: ${v.dataType}, shape: ${v.shape}}}`),x.constant(v,O)}flush(){}}}),nn={};kA(nn,{init:()=>m1});var _n,h1,m1,U1,Gr,la,ts,on,Si,L0,to,ro,ao,C1,so,Js,Is,$n,e0,ln,_o,b1,$o,ws,Va,mg,Cg,bg,Ig,wg,kg,xg,vg,Gc,Bg,yg,Sf=Pe(()=>{Dt(),Ka(),zi(),Ft(),Ao(),_n=class md{constructor(u,h,x,v){this.module=u,this.dataType=h,this.data=x,this.dims=v}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let u=He.size(this.dims);return u===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,u)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let u=He.size(this.dims);return u===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,u)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let u=He.size(this.dims);return u===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,u)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let u=He.size(this.dims);return u===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,u)}reshape(u){if(He.size(u)!==He.size(this.dims))throw new Error("Invalid new shape");return new md(this.module,this.dataType,this.data,u)}},h1=class{constructor(n,u,h){this.module=n,this.backend=u,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=u.adapterInfo,this.deviceInfo=u.deviceInfo;let x=n.PTR_SIZE,v=h/n.PTR_SIZE,B=x===4?"i32":"i64";this.opKernelContext=Number(n.getValue(x*v++,B));let y=Number(n.getValue(x*v++,B));this.outputCount=Number(n.getValue(x*v++,B)),this.customDataOffset=Number(n.getValue(x*v++,"*")),this.customDataSize=Number(n.getValue(x*v++,B));let S=[];for(let O=0;O<y;O++){let H=Number(n.getValue(x*v++,B)),te=Number(n.getValue(x*v++,"*")),Q=Number(n.getValue(x*v++,B)),ie=[];for(let oe=0;oe<Q;oe++)ie.push(Number(n.getValue(x*v++,B)));S.push(new _n(n,H,te,ie))}this.inputs=S}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(n,u){let h=u?.inputs?.map(v=>typeof v=="number"?this.inputs[v]:v)??this.inputs,x=u?.outputs??[];return this.backend.run(n,h,x,(v,B,y)=>new _n(this.module,B,this.output(v,y),y),(v,B)=>{let y=fs(v,B);if(!y)throw new Error(`Unsupported data type: ${v}`);let S=y>0?this.backend.gpuDataManager.create(y).id:0;return new _n(this.module,v,S,B)},this.outputCount)}output(n,u){let h=this.module.stackSave();try{let x=this.module.PTR_SIZE,v=x===4?"i32":"i64",B=this.module.stackAlloc((1+u.length)*x);this.module.setValue(B,u.length,v);for(let y=0;y<u.length;y++)this.module.setValue(B+x*(y+1),u[y],v);return this.module._JsepOutput(this.opKernelContext,n,B)}catch(x){throw new Error(`Failed to generate kernel's output[${n}] with dims [${u}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${x}`)}finally{this.module.stackRestore(h)}}},m1=async(n,u,h,x)=>{let v=u.jsepInit;if(!v)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(n==="webgpu"){let B=new t1;await B.initialize(h,x),v("webgpu",[B,y=>B.alloc(Number(y)),y=>B.free(y),(y,S,O,H=!1)=>{if(H)Pt("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(y)}, dst=${Number(S)}, size=${Number(O)}`),B.memcpy(Number(y),Number(S));else{Pt("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(y)}, gpuDataId=${Number(S)}, size=${Number(O)}`);let te=u.HEAPU8.subarray(Number(y>>>0),Number(y>>>0)+Number(O));B.upload(Number(S),te)}},async(y,S,O)=>{Pt("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${y}, dataOffset=${S}, size=${O}`),await B.download(Number(y),()=>u.HEAPU8.subarray(Number(S)>>>0,Number(S+O)>>>0))},(y,S,O)=>B.createKernel(y,Number(S),O,u.UTF8ToString(u._JsepGetNodeName(Number(S)))),y=>B.releaseKernel(y),(y,S,O,H)=>{Pt("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${O}, kernel=${y}, contextDataOffset=${S}`);let te=new h1(u,B,Number(S));return B.computeKernel(Number(y),te,H)},()=>B.captureBegin(),()=>B.captureEnd(),()=>B.replay()])}else{let B=new n1(h);v("webnn",[B,()=>B.reserveTensorId(),y=>B.releaseTensorId(y),async(y,S,O,H)=>B.ensureTensor(y,S,O,H),(y,S)=>{B.uploadTensor(y,S)},async(y,S)=>B.downloadTensor(y,S)])}}}),Eg=Pe(()=>{fc(),pc(),Dt(),rn(),o1(),H1(),U1=(n,u)=>{Tr()._OrtInit(n,u)!==0&&Kt("Can't initialize onnxruntime.")},Gr=async n=>{U1(n.wasm.numThreads,Ja(n.logLevel))},la=async(n,u)=>{{let h=(Sf(),aA(nn)).init;if(u==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let x=n.webgpu.adapter;if(x){if(typeof x.limits!="object"||typeof x.features!="object"||typeof x.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let v=n.webgpu.powerPreference;if(v!==void 0&&v!=="low-power"&&v!=="high-performance")throw new Error(`Invalid powerPreference setting: "${v}"`);let B=n.webgpu.forceFallbackAdapter;if(B!==void 0&&typeof B!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${B}"`);if(x=await navigator.gpu.requestAdapter({powerPreference:v,forceFallbackAdapter:B}),!x)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await h("webgpu",Tr(),n,x)}if(u==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await h("webnn",Tr(),n)}}},ts=new Map,on=n=>{let u=Tr(),h=u.stackSave();try{let x=u.PTR_SIZE,v=u.stackAlloc(2*x);u._OrtGetInputOutputCount(n,v,v+x)!==0&&Kt("Can't get session input/output count.");let B=x===4?"i32":"i64";return[Number(u.getValue(v,B)),Number(u.getValue(v+x,B))]}finally{u.stackRestore(h)}},Si=n=>{let u=Tr(),h=u._malloc(n.byteLength);if(h===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${n.byteLength}.`);return u.HEAPU8.set(n,h),[h,n.byteLength]},L0=async(n,u)=>{let h,x,v=Tr();Array.isArray(n)?[h,x]=n:n.buffer===v.HEAPU8.buffer?[h,x]=[n.byteOffset,n.byteLength]:[h,x]=Si(n);let B=0,y=0,S=0,O=[],H=[],te=[];try{if([y,O]=bi(u),u?.externalData&&v.mountExternalData){let De=[];for(let Le of u.externalData){let Xe=typeof Le=="string"?Le:Le.path;De.push(Os(typeof Le=="string"?Le:Le.data).then(_e=>{v.mountExternalData(Xe,_e)}))}await Promise.all(De)}for(let De of u?.executionProviders??[])if((typeof De=="string"?De:De.name)==="webnn"){if(v.shouldTransferToMLTensor=!1,typeof De!="string"){let Le=De,Xe=Le?.context,_e=Le?.gpuDevice,lA=Le?.deviceType,LA=Le?.powerPreference;v.currentContext=Xe||(_e?await v.jsepCreateMLContext(_e):await v.jsepCreateMLContext({deviceType:lA,powerPreference:LA}))}else v.currentContext=await v.jsepCreateMLContext();break}B=await v._OrtCreateSession(h,x,y),B===0&&Kt("Can't create a session."),v.jsepOnCreateSession?.(),v.currentContext&&(v.jsepRegisterMLContext(B,v.currentContext),v.currentContext=void 0,v.shouldTransferToMLTensor=!0);let[Q,ie]=on(B),oe=!!u?.enableGraphCapture,de=[],fe=[],ke=[];for(let De=0;De<Q;De++){let Le=v._OrtGetInputName(B,De);Le===0&&Kt("Can't get an input name."),H.push(Le),de.push(v.UTF8ToString(Le))}for(let De=0;De<ie;De++){let Le=v._OrtGetOutputName(B,De);Le===0&&Kt("Can't get an output name."),te.push(Le);let Xe=v.UTF8ToString(Le);fe.push(Xe);{if(oe&&u?.preferredOutputLocation===void 0){ke.push("gpu-buffer");continue}let _e=typeof u?.preferredOutputLocation=="string"?u.preferredOutputLocation:u?.preferredOutputLocation?.[Xe]??"cpu";if(_e!=="cpu"&&_e!=="cpu-pinned"&&_e!=="gpu-buffer"&&_e!=="ml-tensor")throw new Error(`Not supported preferred output location: ${_e}.`);if(oe&&_e!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${_e}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);ke.push(_e)}}let Me=null;return ke.some(De=>De==="gpu-buffer"||De==="ml-tensor")&&(S=v._OrtCreateBinding(B),S===0&&Kt("Can't create IO binding."),Me={handle:S,outputPreferredLocations:ke,outputPreferredLocationsEncoded:ke.map(De=>Ns(De))}),ts.set(B,[B,H,te,Me,oe,!1]),[B,de,fe]}catch(Q){throw H.forEach(ie=>v._OrtFree(ie)),te.forEach(ie=>v._OrtFree(ie)),S!==0&&v._OrtReleaseBinding(S)!==0&&Kt("Can't release IO binding."),B!==0&&v._OrtReleaseSession(B)!==0&&Kt("Can't release session."),Q}finally{v._free(h),y!==0&&v._OrtReleaseSessionOptions(y)!==0&&Kt("Can't release session options."),O.forEach(Q=>v._free(Q)),v.unmountExternalData?.()}},to=n=>{let u=Tr(),h=ts.get(n);if(!h)throw new Error(`cannot release session. invalid session id: ${n}`);let[x,v,B,y,S]=h;y&&(S&&u._OrtClearBoundOutputs(y.handle)!==0&&Kt("Can't clear bound outputs."),u._OrtReleaseBinding(y.handle)!==0&&Kt("Can't release IO binding.")),u.jsepOnReleaseSession?.(n),v.forEach(O=>u._OrtFree(O)),B.forEach(O=>u._OrtFree(O)),u._OrtReleaseSession(x)!==0&&Kt("Can't release session."),ts.delete(n)},ro=(n,u,h,x,v,B=!1)=>{if(!n)return void u.push(0);let y,S,O=Tr(),H=O.PTR_SIZE,te=n[0],Q=n[1],ie=n[3];if(te==="string"&&(ie==="gpu-buffer"||ie==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(B&&ie!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${v} when enableGraphCapture is true.`);if(ie==="gpu-buffer"){let fe=n[2].gpuBuffer;S=fs(Kr(te),Q);let ke=O.jsepRegisterBuffer;if(!ke)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');y=ke(x,v,fe,S)}else if(ie==="ml-tensor"){let fe=n[2].mlTensor;S=fs(Kr(te),Q);let ke=O.jsepRegisterMLTensor;if(!ke)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');y=ke(fe,Kr(te),Q)}else{let fe=n[2];if(Array.isArray(fe)){S=H*fe.length,y=O._malloc(S),h.push(y);for(let ke=0;ke<fe.length;ke++){if(typeof fe[ke]!="string")throw new TypeError(`tensor data at index ${ke} is not a string`);O.setValue(y+ke*H,Rr(fe[ke],h),"*")}}else S=fe.byteLength,y=O._malloc(S),h.push(y),O.HEAPU8.set(new Uint8Array(fe.buffer,fe.byteOffset,S),y)}let oe=O.stackSave(),de=O.stackAlloc(4*Q.length);try{Q.forEach((ke,Me)=>O.setValue(de+Me*H,ke,H===4?"i32":"i64"));let fe=O._OrtCreateTensor(Kr(te),y,S,de,Q.length,Ns(ie));fe===0&&Kt(`Can't create tensor for input/output. session=${x}, index=${v}.`),u.push(fe)}finally{O.stackRestore(oe)}},ao=async(n,u,h,x,v,B)=>{let y=Tr(),S=y.PTR_SIZE,O=ts.get(n);if(!O)throw new Error(`cannot run inference. invalid session id: ${n}`);let H=O[0],te=O[1],Q=O[2],ie=O[3],oe=O[4],de=O[5],fe=u.length,ke=x.length,Me=0,De=[],Le=[],Xe=[],_e=[],lA=y.stackSave(),LA=y.stackAlloc(fe*S),st=y.stackAlloc(fe*S),ht=y.stackAlloc(ke*S),pt=y.stackAlloc(ke*S);try{y.jsepOnRunStart?.(H),[Me,De]=qa(B);for(let tt=0;tt<fe;tt++)ro(h[tt],Le,_e,n,u[tt],oe);for(let tt=0;tt<ke;tt++)ro(v[tt],Xe,_e,n,fe+x[tt],oe);for(let tt=0;tt<fe;tt++)y.setValue(LA+tt*S,Le[tt],"*"),y.setValue(st+tt*S,te[u[tt]],"*");for(let tt=0;tt<ke;tt++)y.setValue(ht+tt*S,Xe[tt],"*"),y.setValue(pt+tt*S,Q[x[tt]],"*");if(ie&&!de){let{handle:tt,outputPreferredLocations:lt,outputPreferredLocationsEncoded:wA}=ie;if(te.length!==fe)throw new Error(`input count from feeds (${fe}) is expected to be always equal to model's input count (${te.length}).`);for(let UA=0;UA<fe;UA++){let At=u[UA];await y._OrtBindInput(tt,te[At],Le[UA])!==0&&Kt(`Can't bind input[${UA}] for session=${n}.`)}for(let UA=0;UA<ke;UA++){let At=x[UA];v[UA]?.[3]?y._OrtBindOutput(tt,Q[At],Xe[UA],0)!==0&&Kt(`Can't bind pre-allocated output[${UA}] for session=${n}.`):y._OrtBindOutput(tt,Q[At],0,wA[At])!==0&&Kt(`Can't bind output[${UA}] to ${lt[UA]} for session=${n}.`)}ts.set(n,[H,te,Q,ie,oe,!0])}let mt;mt=ie?await y._OrtRunWithBinding(H,ie.handle,ke,ht,Me):await y._OrtRun(H,st,LA,fe,pt,ke,ht,Me),mt!==0&&Kt("failed to call OrtRun().");let Bt=[];for(let tt=0;tt<ke;tt++){let lt=Number(y.getValue(ht+tt*S,"*"));if(lt===Xe[tt]){Bt.push(v[tt]);continue}let wA,UA=y.stackSave(),At=y.stackAlloc(4*S),yt=!1,gr=0;try{y._OrtGetTensorData(lt,At,At+S,At+2*S,At+3*S)!==0&&Kt(`Can't access output tensor data on index ${tt}.`);let ca=S===4?"i32":"i64",Fi=Number(y.getValue(At,ca));gr=y.getValue(At+S,"*");let A0=y.getValue(At+2*S,"*"),e2=Number(y.getValue(At+3*S,ca)),Oa=[];for(let Fr=0;Fr<e2;Fr++)Oa.push(Number(y.getValue(A0+Fr*S,ca)));y._OrtFree(A0)!==0&&Kt("Can't free memory for tensor dims.");let cn=Oa.reduce((Fr,ga)=>Fr*ga,1);wA=rs(Fi);let io=ie?.outputPreferredLocations[x[tt]];if(wA==="string"){if(io==="gpu-buffer"||io==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let Fr=[];for(let ga=0;ga<cn;ga++){let Y0=y.getValue(gr+ga*S,"*"),I1=y.getValue(gr+(ga+1)*S,"*"),Tc=ga===cn-1?void 0:I1-Y0;Fr.push(y.UTF8ToString(Y0,Tc))}Bt.push([wA,Oa,Fr,"cpu"])}else if(io==="gpu-buffer"&&cn>0){let Fr=y.jsepGetBuffer;if(!Fr)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let ga=Fr(gr),Y0=fs(Fi,cn);if(Y0===void 0||!vs(wA))throw new Error(`Unsupported data type: ${wA}`);yt=!0,Bt.push([wA,Oa,{gpuBuffer:ga,download:y.jsepCreateDownloader(ga,Y0,wA),dispose:()=>{y._OrtReleaseTensor(lt)!==0&&Kt("Can't release tensor.")}},"gpu-buffer"])}else if(io==="ml-tensor"&&cn>0){let Fr=y.jsepEnsureTensor;if(!Fr)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(fs(Fi,cn)===void 0||!kr(wA))throw new Error(`Unsupported data type: ${wA}`);let ga=await Fr(gr,Fi,Oa,!1);yt=!0,Bt.push([wA,Oa,{mlTensor:ga,download:y.jsepCreateMLTensorDownloader(gr,wA),dispose:()=>{y.jsepReleaseTensorId(gr),y._OrtReleaseTensor(lt)}},"ml-tensor"])}else{let Fr=new(Ai(wA))(cn);new Uint8Array(Fr.buffer,Fr.byteOffset,Fr.byteLength).set(y.HEAPU8.subarray(gr,gr+Fr.byteLength)),Bt.push([wA,Oa,Fr,"cpu"])}}finally{y.stackRestore(UA),wA==="string"&&gr&&y._free(gr),yt||y._OrtReleaseTensor(lt)}}return ie&&!oe&&(y._OrtClearBoundOutputs(ie.handle)!==0&&Kt("Can't clear bound outputs."),ts.set(n,[H,te,Q,ie,oe,!1])),Bt}finally{y.stackRestore(lA),Le.forEach(mt=>y._OrtReleaseTensor(mt)),Xe.forEach(mt=>y._OrtReleaseTensor(mt)),_e.forEach(mt=>y._free(mt)),Me!==0&&y._OrtReleaseRunOptions(Me),De.forEach(mt=>y._free(mt))}},C1=n=>{let u=Tr(),h=ts.get(n);if(!h)throw new Error("invalid session id");let x=h[0],v=u._OrtEndProfiling(x);v===0&&Kt("Can't get an profile file name."),u._OrtFree(v)},so=n=>{let u=[];for(let h of n){let x=h[2];!Array.isArray(x)&&"buffer"in x&&u.push(x.buffer)}return u}}),Mg=Pe(()=>{dA(),Eg(),rn(),Jo(),Js=()=>!!X.wasm.proxy&&typeof document<"u",$n=!1,e0=!1,ln=!1,$o=new Map,ws=(n,u)=>{let h=$o.get(n);h?h.push(u):$o.set(n,[u])},Va=()=>{if($n||!e0||ln||!Is)throw new Error("worker not ready")},mg=n=>{switch(n.data.type){case"init-wasm":$n=!1,n.data.err?(ln=!0,b1[1](n.data.err)):(e0=!0,b1[0]()),_o&&(URL.revokeObjectURL(_o),_o=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let u=$o.get(n.data.type);n.data.err?u.shift()[1](n.data.err):u.shift()[0](n.data.out);break}}},Cg=async()=>{if(!e0){if($n)throw new Error("multiple calls to 'initWasm()' detected.");if(ln)throw new Error("previous call to 'initWasm()' failed.");if($n=!0,Js())return new Promise((n,u)=>{Is?.terminate(),qt().then(([h,x])=>{try{(Is=x).onerror=B=>u(B),Is.onmessage=mg,b1=[n,u];let v={type:"init-wasm",in:X};!v.in.wasm.wasmPaths&&(h||import.meta.url?.startsWith("file:"))&&(v.in.wasm.wasmPaths={wasm:new URL(d("./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm"),d.b).href}),Is.postMessage(v),_o=h}catch(v){u(v)}},u)});try{await Ma(X.wasm),await Gr(X),e0=!0}catch(n){throw ln=!0,n}finally{$n=!1}}},bg=async n=>{if(Js())return Va(),new Promise((u,h)=>{ws("init-ep",[u,h]);let x={type:"init-ep",in:{epName:n,env:X}};Is.postMessage(x)});await la(X,n)},Ig=async n=>Js()?(Va(),new Promise((u,h)=>{ws("copy-from",[u,h]);let x={type:"copy-from",in:{buffer:n}};Is.postMessage(x,[n.buffer])})):Si(n),wg=async(n,u)=>{if(Js()){if(u?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Va(),new Promise((h,x)=>{ws("create",[h,x]);let v={type:"create",in:{model:n,options:{...u}}},B=[];n instanceof Uint8Array&&B.push(n.buffer),Is.postMessage(v,B)})}return L0(n,u)},kg=async n=>{if(Js())return Va(),new Promise((u,h)=>{ws("release",[u,h]);let x={type:"release",in:n};Is.postMessage(x)});to(n)},xg=async(n,u,h,x,v,B)=>{if(Js()){if(h.some(y=>y[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(v.some(y=>y))throw new Error("pre-allocated output tensor is not supported for proxy.");return Va(),new Promise((y,S)=>{ws("run",[y,S]);let O=h,H={type:"run",in:{sessionId:n,inputIndices:u,inputs:O,outputIndices:x,options:B}};Is.postMessage(H,so(O))})}return ao(n,u,h,x,v,B)},vg=async n=>{if(Js())return Va(),new Promise((u,h)=>{ws("end-profiling",[u,h]);let x={type:"end-profiling",in:n};Is.postMessage(x)});C1(n)}}),Ff=Pe(()=>{dA(),Mg(),Dt(),oA(),H1(),Gc=(n,u)=>{switch(n.location){case"cpu":return[n.type,n.dims,n.data,"cpu"];case"gpu-buffer":return[n.type,n.dims,{gpuBuffer:n.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[n.type,n.dims,{mlTensor:n.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${n.location} for ${u()}`)}},Bg=n=>{switch(n[3]){case"cpu":return new z(n[0],n[2],n[1]);case"gpu-buffer":{let u=n[0];if(!vs(u))throw new Error(`not supported data type: ${u} for deserializing GPU tensor`);let{gpuBuffer:h,download:x,dispose:v}=n[2];return z.fromGpuBuffer(h,{dataType:u,dims:n[1],download:x,dispose:v})}case"ml-tensor":{let u=n[0];if(!kr(u))throw new Error(`not supported data type: ${u} for deserializing MLTensor tensor`);let{mlTensor:h,download:x,dispose:v}=n[2];return z.fromMLTensor(h,{dataType:u,dims:n[1],download:x,dispose:v})}default:throw new Error(`invalid data location: ${n[3]}`)}},yg=class{async fetchModelAndCopyToWasmMemory(n){return Ig(await Os(n))}async loadModel(n,u){let h;Ye(),h=typeof n=="string"?await this.fetchModelAndCopyToWasmMemory(n):n,[this.sessionId,this.inputNames,this.outputNames]=await wg(h,u),Je()}async dispose(){return kg(this.sessionId)}async run(n,u,h){Ye();let x=[],v=[];Object.entries(n).forEach(Q=>{let ie=Q[0],oe=Q[1],de=this.inputNames.indexOf(ie);if(de===-1)throw new Error(`invalid input '${ie}'`);x.push(oe),v.push(de)});let B=[],y=[];Object.entries(u).forEach(Q=>{let ie=Q[0],oe=Q[1],de=this.outputNames.indexOf(ie);if(de===-1)throw new Error(`invalid output '${ie}'`);B.push(oe),y.push(de)});let S=x.map((Q,ie)=>Gc(Q,()=>`input "${this.inputNames[v[ie]]}"`)),O=B.map((Q,ie)=>Q?Gc(Q,()=>`output "${this.outputNames[y[ie]]}"`):null),H=await xg(this.sessionId,v,S,y,O,h),te={};for(let Q=0;Q<H.length;Q++)te[this.outputNames[y[Q]]]=B[Q]??Bg(H[Q]);return Je(),te}startProfiling(){}endProfiling(){vg(this.sessionId)}}}),Gg={};kA(Gg,{OnnxruntimeWebAssemblyBackend:()=>Qc,initializeFlags:()=>Dc,wasmBackend:()=>Dg});var Dc,Qc,Dg,Nf=Pe(()=>{dA(),Mg(),Ff(),Dc=()=>{if((typeof X.wasm.initTimeout!="number"||X.wasm.initTimeout<0)&&(X.wasm.initTimeout=0),X.wasm.simd===!1&&console.warn('Deprecated property "env.wasm.simd" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'),typeof X.wasm.proxy!="boolean"&&(X.wasm.proxy=!1),typeof X.wasm.trace!="boolean"&&(X.wasm.trace=!1),typeof X.wasm.numThreads!="number"||!Number.isInteger(X.wasm.numThreads)||X.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)X.wasm.numThreads=1;else{let n=typeof navigator>"u"?Ue("node:os").cpus().length:navigator.hardwareConcurrency;X.wasm.numThreads=Math.min(4,Math.ceil((n||1)/2))}},Qc=class{async init(n){Dc(),await Cg(),await bg(n)}async createInferenceSessionHandler(n,u){let h=new yg;return await h.loadModel(n,u),Promise.resolve(h)}},Dg=new Qc});dA(),dA(),dA();var Of=qe;{let n=(Nf(),aA(Gg)).wasmBackend;L("webgpu",n,5),L("webnn",n,5),L("cpu",n,10),L("wasm",n,10)}Object.defineProperty(X.versions,"web",{value:"1.21.0-dev.20250206-d981b153d3",enumerable:!0})},"./src/backends/onnx.js":(I,C,d)=>{var k;d.r(C),d.d(C,{Tensor:()=>j.Tensor,createInferenceSession:()=>ye,deviceToExecutionProviders:()=>be,isONNXProxy:()=>we,isONNXTensor:()=>se});var T=d("./src/env.js"),L=d("?2ce3"),N=d("./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs?3a96"),j=d("./node_modules/onnxruntime-common/dist/esm/index.js");const q=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),W=[];let F,X;const R=Symbol.for("onnxruntime");if(R in globalThis)X=globalThis[R];else if(T.apis.IS_NODE_ENV){switch(X=L??(k||(k=d.t(L,2))),process.platform){case"win32":W.push("dml");break;case"linux":process.arch==="x64"&&W.push("cuda")}W.push("cpu"),F=["cpu"]}else X=N,T.apis.IS_WEBNN_AVAILABLE&&W.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),T.apis.IS_WEBGPU_AVAILABLE&&W.push("webgpu"),W.push("wasm"),F=["wasm"];const re=X.InferenceSession;function be(g=null){if(!g)return F;switch(g){case"auto":return W;case"gpu":return W.filter(b=>["webgpu","cuda","dml","webnn-gpu"].includes(b))}if(W.includes(g))return[q[g]??g];throw new Error(`Unsupported device: "${g}". Should be one of: ${W.join(", ")}.`)}let xe=null;async function ye(g,b,e){xe&&await xe;const l=re.create(g,b);xe??=l;const M=await l;return M.config=e,M}function se(g){return g instanceof X.Tensor}const ne=X?.env;function we(){return ne?.wasm?.proxy}ne?.wasm&&(ne.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${T.env.version}/dist/`,ne.wasm.proxy=!1,typeof crossOriginIsolated<"u"&&crossOriginIsolated||(ne.wasm.numThreads=1)),ne?.webgpu&&(ne.webgpu.powerPreference="high-performance"),T.env.backends.onnx=ne},"./src/base/feature_extraction_utils.js":(I,C,d)=>{d.r(C),d.d(C,{FeatureExtractor:()=>N,validate_audio_inputs:()=>j});var k=d("./src/utils/constants.js"),T=d("./src/utils/generic.js"),L=d("./src/utils/hub.js");class N extends T.Callable{constructor(W){super(),this.config=W}static async from_pretrained(W,F){return new this(await(0,L.getModelJSON)(W,k.FEATURE_EXTRACTOR_NAME,!0,F))}}function j(q,W){if(!(q instanceof Float32Array||q instanceof Float64Array))throw new Error(`${W} expects input to be a Float32Array or a Float64Array, but got ${q?.constructor?.name??typeof q} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}},"./src/base/image_processors_utils.js":(I,C,d)=>{d.r(C),d.d(C,{ImageProcessor:()=>we,center_to_corners_format:()=>X,post_process_instance_segmentation:()=>ne,post_process_object_detection:()=>R,post_process_panoptic_segmentation:()=>se,post_process_semantic_segmentation:()=>re});var k=d("./src/utils/generic.js"),T=d("./src/utils/tensor.js"),L=d("./src/utils/maths.js");d("./src/utils/image.js");var N=d("./src/utils/core.js"),j=d("./src/utils/hub.js"),q=d("./src/utils/constants.js");function W(g,b,e=0,l=null){const M=g/b;let ue=(0,L.bankers_round)(M)*b;return l!==null&&ue>l&&(ue=Math.floor(M)*b),ue<e&&(ue=Math.ceil(M)*b),ue}function F([g,b],e){return[Math.max(Math.floor(g/e),1)*e,Math.max(Math.floor(b/e),1)*e]}function X([g,b,e,l]){return[g-e/2,b-l/2,g+e/2,b+l/2]}function R(g,b=.5,e=null,l=!1){const M=g.logits,ue=g.pred_boxes,[D,z,Re]=M.dims;if(e!==null&&e.length!==D)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Ne=[];for(let Ye=0;Ye<D;++Ye){let Je=e!==null?e[Ye]:null,AA={boxes:[],classes:[],scores:[]},xA=M[Ye],GA=ue[Ye];for(let Ge=0;Ge<z;++Ge){let Ie,ze=xA[Ge],Ue=[];if(l){Ie=ze.sigmoid().data;for(let Pe=0;Pe<Ie.length;++Pe)Ie[Pe]>b&&Ue.push(Pe)}else{let Pe=(0,L.max)(ze.data)[1];if(Pe===Re-1||(Ie=(0,L.softmax)(ze.data),Ie[Pe]<b))continue;Ue.push(Pe)}for(const Pe of Ue){let kA=GA[Ge].data;kA=X(kA),Je!==null&&(kA=kA.map((aA,iA)=>aA*Je[(iA+1)%2])),AA.boxes.push(kA),AA.classes.push(Pe),AA.scores.push(Ie[Pe])}}Ne.push(AA)}return Ne}function re(g,b=null){const e=g.logits,l=e.dims[0];if(b!==null&&b.length!==l)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const M=[];for(let ue=0;ue<l;++ue){const D=b!==null?b[ue]:null;let z=e[ue];D!==null&&(z=(0,T.interpolate)(z,D,"bilinear",!1));const[Re,Ne]=D??z.dims.slice(-2),Ye=new T.Tensor("int32",new Int32Array(Re*Ne),[Re,Ne]),Je=z[0].data,AA=Ye.data;for(let Ge=1;Ge<z.dims[0];++Ge){const Ie=z[Ge].data;for(let ze=0;ze<Ie.length;++ze)Ie[ze]>Je[ze]&&(Je[ze]=Ie[ze],AA[ze]=Ge)}const xA=new Array(z.dims[0]);for(let Ge=0;Ge<AA.length;++Ge){const Ie=AA[Ge];xA[Ie]=Ie}const GA=xA.filter(Ge=>Ge!==void 0);M.push({segmentation:Ye,labels:GA})}return M}function be(g,b,e,l){const M=[],ue=[],D=[];for(let z=0;z<g.dims[0];++z){const Re=g[z],Ne=b[z],Ye=(0,L.max)(Re.data)[1];if(Ye===l)continue;const Je=(0,L.softmax)(Re.data)[Ye];Je>e&&(M.push(Ne),ue.push(Je),D.push(Ye))}return[M,ue,D]}function xe(g,b,e,l=.5,M=.8){const ue=[];let D=0,z=0;const Re=b[e].data;for(let Ye=0;Ye<g.length;++Ye)g[Ye]===e&&(ue.push(Ye),++D),Re[Ye]>=l&&++z;let Ne=D>0&&z>0;return Ne&&(Ne=D/z>M),[Ne,ue]}function ye(g,b,e,l,M,ue=null,D=null){const[z,Re]=D??g[0].dims,Ne=new T.Tensor("int32",new Int32Array(z*Re),[z,Re]),Ye=[];if(D!==null)for(let Ge=0;Ge<g.length;++Ge)g[Ge]=(0,T.interpolate)(g[Ge],D,"bilinear",!1);const Je=new Int32Array(g[0].data.length),AA=new Float32Array(g[0].data.length);for(let Ge=0;Ge<g.length;++Ge){let Ie=b[Ge];const ze=g[Ge].data;for(let Ue=0;Ue<ze.length;++Ue)ze[Ue]*=Ie,ze[Ue]>AA[Ue]&&(Je[Ue]=Ge,AA[Ue]=ze[Ue])}let xA=0;const GA=Ne.data;for(let Ge=0;Ge<e.length;++Ge){const Ie=e[Ge],[ze,Ue]=xe(Je,g,Ge,l,M);if(ze){++xA;for(const Pe of Ue)GA[Pe]=xA;Ye.push({id:xA,label_id:Ie,score:b[Ge]})}}return[Ne,Ye]}function se(g,b=.5,e=.5,l=.8,M=null,ue=null){M===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),M=new Set);const D=g.class_queries_logits??g.logits,z=(g.masks_queries_logits??g.pred_masks).sigmoid();let[Re,Ne,Ye]=D.dims;if(Ye-=1,ue!==null&&ue.length!==Re)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Je=[];for(let AA=0;AA<Re;++AA){let xA=ue!==null?ue[AA]:null,GA=D[AA],Ge=z[AA],[Ie,ze,Ue]=be(GA,Ge,b,Ye);if(Ue.length===0){let[aA,iA]=xA??Ge.dims.slice(-2),yA=new T.Tensor("int32",new Int32Array(aA*iA).fill(-1),[aA,iA]);Je.push({segmentation:yA,segments_info:[]});continue}let[Pe,kA]=ye(Ie,ze,Ue,e,l,M,xA);Je.push({segmentation:Pe,segments_info:kA})}return Je}function ne(g,b=.5,e=null){throw new Error("`post_process_instance_segmentation` is not yet implemented.")}class we extends k.Callable{constructor(b){super(),this.image_mean=b.image_mean??b.mean,this.image_std=b.image_std??b.std,this.resample=b.resample??2,this.do_rescale=b.do_rescale??!0,this.rescale_factor=b.rescale_factor??1/255,this.do_normalize=b.do_normalize,this.do_thumbnail=b.do_thumbnail,this.size=b.size??b.image_size,this.do_resize=b.do_resize??this.size!==void 0,this.size_divisibility=b.size_divisibility??b.size_divisor,this.do_center_crop=b.do_center_crop,this.crop_size=b.crop_size,this.do_convert_rgb=b.do_convert_rgb??!0,this.do_crop_margin=b.do_crop_margin,this.pad_size=b.pad_size,this.do_pad=b.do_pad,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=b.do_flip_channel_order??!1,this.config=b}async thumbnail(b,e,l=2){const M=b.height,ue=b.width,D=e.height,z=e.width;let Re=Math.min(M,D),Ne=Math.min(ue,z);return Re===M&&Ne===ue?b:(M>ue?Ne=Math.floor(ue*Re/M):ue>M&&(Re=Math.floor(M*Ne/ue)),await b.resize(Ne,Re,{resample:l}))}async crop_margin(b,e=200){const l=b.clone().grayscale(),M=(0,L.min)(l.data)[0],ue=(0,L.max)(l.data)[0]-M;if(ue===0)return b;const D=e/255;let z=l.width,Re=l.height,Ne=0,Ye=0;const Je=l.data;for(let AA=0;AA<l.height;++AA){const xA=AA*l.width;for(let GA=0;GA<l.width;++GA)(Je[xA+GA]-M)/ue<D&&(z=Math.min(z,GA),Re=Math.min(Re,AA),Ne=Math.max(Ne,GA),Ye=Math.max(Ye,AA))}return b=await b.crop([z,Re,Ne,Ye])}pad_image(b,e,l,{mode:M="constant",center:ue=!1,constant_values:D=0}={}){const[z,Re,Ne]=e;let Ye,Je;if(typeof l=="number"?(Ye=l,Je=l):l==="square"?Ye=Je=Math.max(z,Re):(Ye=l.width,Je=l.height),Ye!==Re||Je!==z){const AA=new Float32Array(Ye*Je*Ne);if(Array.isArray(D))for(let Ge=0;Ge<AA.length;++Ge)AA[Ge]=D[Ge%Ne];else D!==0&&AA.fill(D);const[xA,GA]=ue?[Math.floor((Ye-Re)/2),Math.floor((Je-z)/2)]:[0,0];for(let Ge=0;Ge<z;++Ge){const Ie=(Ge+GA)*Ye,ze=Ge*Re;for(let Ue=0;Ue<Re;++Ue){const Pe=(Ie+Ue+xA)*Ne,kA=(ze+Ue)*Ne;for(let aA=0;aA<Ne;++aA)AA[Pe+aA]=b[kA+aA]}}if(M==="symmetric"){if(ue)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const Ge=z-1,Ie=Re-1;for(let ze=0;ze<Je;++ze){const Ue=ze*Ye,Pe=(0,N.calculateReflectOffset)(ze,Ge)*Re;for(let kA=0;kA<Ye;++kA){if(ze<z&&kA<Re)continue;const aA=(Ue+kA)*Ne,iA=(Pe+(0,N.calculateReflectOffset)(kA,Ie))*Ne;for(let yA=0;yA<Ne;++yA)AA[aA+yA]=b[iA+yA]}}}b=AA,e=[Je,Ye,Ne]}return[b,e]}rescale(b){for(let e=0;e<b.length;++e)b[e]=this.rescale_factor*b[e]}get_resize_output_image_size(b,e){const[l,M]=b.size;let ue,D;if(this.do_thumbnail){const{height:z,width:Re}=e;ue=Math.min(z,Re)}else Number.isInteger(e)?(ue=e,D=this.config.max_size??ue):e!==void 0&&(ue=e.shortest_edge,D=e.longest_edge);if(ue!==void 0||D!==void 0){const z=ue===void 0?1:Math.max(ue/l,ue/M),Re=l*z,Ne=M*z,Ye=D===void 0?1:Math.min(D/Re,D/Ne);let Je=Math.floor(Number((Re*Ye).toFixed(2))),AA=Math.floor(Number((Ne*Ye).toFixed(2)));return this.size_divisibility!==void 0&&([Je,AA]=F([Je,AA],this.size_divisibility)),[Je,AA]}if(e!==void 0&&e.width!==void 0&&e.height!==void 0){let z=e.width,Re=e.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let Ne=Re/M,Ye=z/l;Math.abs(1-Ye)<Math.abs(1-Ne)?Ne=Ye:Ye=Ne,Re=W(Ne*M,this.config.ensure_multiple_of),z=W(Ye*l,this.config.ensure_multiple_of)}return[z,Re]}if(this.size_divisibility!==void 0)return F([l,M],this.size_divisibility);if(e.min_pixels!==void 0&&e.max_pixels!==void 0){const{min_pixels:z,max_pixels:Re}=e;return function(Ne,Ye,Je=28,AA=3136,xA=1003520){if(Ne<Je||Ye<Je)throw new Error(`height:${Ne} or width:${Ye} must be larger than factor:${Je}`);if(Math.max(Ne,Ye)/Math.min(Ne,Ye)>200)throw new Error("absolute aspect ratio must be smaller than 200, got "+Math.max(Ne,Ye)/Math.min(Ne,Ye));let GA=Math.round(Ne/Je)*Je,Ge=Math.round(Ye/Je)*Je;if(GA*Ge>xA){const Ie=Math.sqrt(Ne*Ye/xA);GA=Math.floor(Ne/Ie/Je)*Je,Ge=Math.floor(Ye/Ie/Je)*Je}else if(GA*Ge<AA){const Ie=Math.sqrt(AA/(Ne*Ye));GA=Math.ceil(Ne*Ie/Je)*Je,Ge=Math.ceil(Ye*Ie/Je)*Je}return[GA,Ge]}(M,l,this.config.patch_size*this.config.merge_size,z,Re)}throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(e)}`)}async resize(b){const[e,l]=this.get_resize_output_image_size(b,this.size);return await b.resize(e,l,{resample:this.resample})}async preprocess(b,{do_normalize:e=null,do_pad:l=null,do_convert_rgb:M=null,do_convert_grayscale:ue=null,do_flip_channel_order:D=null}={}){this.do_crop_margin&&(b=await this.crop_margin(b));const[z,Re]=b.size;if(M??this.do_convert_rgb?b=b.rgb():ue&&(b=b.grayscale()),this.do_resize&&(b=await this.resize(b)),this.do_thumbnail&&(b=await this.thumbnail(b,this.size,this.resample)),this.do_center_crop){let AA,xA;Number.isInteger(this.crop_size)?(AA=this.crop_size,xA=this.crop_size):(AA=this.crop_size.width,xA=this.crop_size.height),b=await b.center_crop(AA,xA)}const Ne=[b.height,b.width];let Ye=Float32Array.from(b.data),Je=[b.height,b.width,b.channels];if(this.do_rescale&&this.rescale(Ye),e??this.do_normalize){let AA=this.image_mean;Array.isArray(this.image_mean)||(AA=new Array(b.channels).fill(AA));let xA=this.image_std;if(Array.isArray(this.image_std)||(xA=new Array(b.channels).fill(AA)),AA.length!==b.channels||xA.length!==b.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${AA.length}) and \`image_std\` (${xA.length}) must match the number of channels in the image (${b.channels}).`);for(let GA=0;GA<Ye.length;GA+=b.channels)for(let Ge=0;Ge<b.channels;++Ge)Ye[GA+Ge]=(Ye[GA+Ge]-AA[Ge])/xA[Ge]}if(l??this.do_pad){if(this.pad_size)[Ye,Je]=this.pad_image(Ye,[b.height,b.width,b.channels],this.pad_size);else if(this.size_divisibility){const[AA,xA]=F([Je[1],Je[0]],this.size_divisibility);[Ye,Je]=this.pad_image(Ye,Je,{width:AA,height:xA})}}if(D??this.do_flip_channel_order){if(Je[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let AA=0;AA<Ye.length;AA+=3){const xA=Ye[AA];Ye[AA]=Ye[AA+2],Ye[AA+2]=xA}}return{original_size:[Re,z],reshaped_input_size:Ne,pixel_values:new T.Tensor("float32",Ye,Je).permute(2,0,1)}}async _call(b,...e){Array.isArray(b)||(b=[b]);const l=await Promise.all(b.map(ue=>this.preprocess(ue)));return{pixel_values:(0,T.stack)(l.map(ue=>ue.pixel_values),0),original_sizes:l.map(ue=>ue.original_size),reshaped_input_sizes:l.map(ue=>ue.reshaped_input_size)}}static async from_pretrained(b,e){return new this(await(0,j.getModelJSON)(b,q.IMAGE_PROCESSOR_NAME,!0,e))}}},"./src/base/processing_utils.js":(I,C,d)=>{d.r(C),d.d(C,{Processor:()=>N});var k=d("./src/utils/constants.js"),T=d("./src/utils/generic.js"),L=d("./src/utils/hub.js");class N extends T.Callable{static classes=["image_processor_class","tokenizer_class","feature_extractor_class"];static uses_processor_config=!1;constructor(q,W){super(),this.config=q,this.components=W}get image_processor(){return this.components.image_processor}get tokenizer(){return this.components.tokenizer}get feature_extractor(){return this.components.feature_extractor}apply_chat_template(q,W={}){if(!this.tokenizer)throw new Error("Unable to apply chat template without a tokenizer.");return this.tokenizer.apply_chat_template(q,{tokenize:!1,...W})}batch_decode(...q){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.batch_decode(...q)}decode(...q){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.decode(...q)}async _call(q,...W){for(const F of[this.image_processor,this.feature_extractor,this.tokenizer])if(F)return F(q,...W);throw new Error("No image processor, feature extractor, or tokenizer found.")}static async from_pretrained(q,W){const[F,X]=await Promise.all([this.uses_processor_config?(0,L.getModelJSON)(q,k.PROCESSOR_NAME,!0,W):{},Promise.all(this.classes.filter(R=>R in this).map(async R=>{const re=await this[R].from_pretrained(q,W);return[R.replace(/_class$/,""),re]})).then(Object.fromEntries)]);return new this(F,X)}}},"./src/configs.js":(I,C,d)=>{d.r(C),d.d(C,{AutoConfig:()=>q,PretrainedConfig:()=>j,getKeyValueShapes:()=>N});var k=d("./src/utils/core.js"),T=d("./src/utils/hub.js");function L(W){const F={};let X={};switch(W.model_type){case"llava":case"paligemma":case"florence2":case"llava_onevision":case"idefics3":X=L(W.text_config);break;case"moondream1":X=L(W.phi_config);break;case"musicgen":X=L(W.decoder);break;case"multi_modality":X=L(W.language_config);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":F.num_heads="n_head",F.num_layers="n_layer",F.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"falcon":F.num_heads="num_attention_heads",F.num_layers="num_hidden_layers",F.hidden_size="hidden_size";break;case"llama":case"olmo":case"olmo2":case"mobilellm":case"granite":case"cohere":case"mistral":case"starcoder2":case"qwen2":case"qwen2_vl":case"phi":case"phi3":case"phi3_v":F.num_heads="num_key_value_heads",F.num_layers="num_hidden_layers",F.hidden_size="hidden_size",F.num_attention_heads="num_attention_heads";break;case"gemma":case"gemma2":case"glm":case"helium":F.num_heads="num_key_value_heads",F.num_layers="num_hidden_layers",F.dim_kv="head_dim";break;case"openelm":F.num_heads="num_kv_heads",F.num_layers="num_transformer_layers",F.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":F.num_heads="num_heads",F.num_layers="num_layers",F.hidden_size="hidden_size";break;case"bloom":F.num_heads="n_head",F.num_layers="n_layer",F.hidden_size="hidden_size";break;case"mpt":F.num_heads="n_heads",F.num_layers="n_layers",F.hidden_size="d_model";break;case"exaone":F.num_heads="num_key_value_heads",F.num_layers="num_layers",F.dim_kv="head_dim",F.num_attention_heads="num_attention_heads";break;case"t5":case"mt5":case"longt5":F.num_decoder_layers="num_decoder_layers",F.num_decoder_heads="num_heads",F.decoder_dim_kv="d_kv",F.num_encoder_layers="num_layers",F.num_encoder_heads="num_heads",F.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":F.num_decoder_layers="decoder_layers",F.num_decoder_heads="decoder_attention_heads",F.decoder_hidden_size="d_model",F.num_encoder_layers="encoder_layers",F.num_encoder_heads="encoder_attention_heads",F.encoder_hidden_size="d_model";break;case"speecht5":F.num_decoder_layers="decoder_layers",F.num_decoder_heads="decoder_attention_heads",F.decoder_hidden_size="hidden_size",F.num_encoder_layers="encoder_layers",F.num_encoder_heads="encoder_attention_heads",F.encoder_hidden_size="hidden_size";break;case"trocr":F.num_encoder_layers=F.num_decoder_layers="decoder_layers",F.num_encoder_heads=F.num_decoder_heads="decoder_attention_heads",F.encoder_hidden_size=F.decoder_hidden_size="d_model";break;case"musicgen_decoder":F.num_encoder_layers=F.num_decoder_layers="num_hidden_layers",F.num_encoder_heads=F.num_decoder_heads="num_attention_heads",F.encoder_hidden_size=F.decoder_hidden_size="hidden_size";break;case"moonshine":F.num_decoder_layers="decoder_num_hidden_layers",F.num_decoder_heads="decoder_num_key_value_heads",F.num_encoder_layers="encoder_num_hidden_layers",F.num_encoder_heads="encoder_num_key_value_heads",F.encoder_hidden_size=F.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const re=L(W.decoder),be="num_decoder_layers"in re,xe=(0,k.pick)(W,["model_type","is_encoder_decoder"]);return be?(xe.num_decoder_layers=re.num_decoder_layers,xe.num_decoder_heads=re.num_decoder_heads,xe.decoder_hidden_size=re.decoder_hidden_size,xe.num_encoder_layers=re.num_encoder_layers,xe.num_encoder_heads=re.num_encoder_heads,xe.encoder_hidden_size=re.encoder_hidden_size):(xe.num_layers=re.num_layers,xe.num_heads=re.num_heads,xe.hidden_size=re.hidden_size),xe}const R={...X,...(0,k.pick)(W,["model_type","multi_query","is_encoder_decoder"])};for(const re in F)R[re]=W[F[re]];return R}function N(W,{prefix:F="past_key_values",batch_size:X=1}={}){const R={},re=W.normalized_config;if(re.is_encoder_decoder&&"num_encoder_heads"in re&&"num_decoder_heads"in re){const be=re.encoder_dim_kv??re.encoder_hidden_size/re.num_encoder_heads,xe=re.decoder_dim_kv??re.decoder_hidden_size/re.num_decoder_heads,ye=[X,re.num_encoder_heads,0,be],se=[X,re.num_decoder_heads,0,xe];for(let ne=0;ne<re.num_decoder_layers;++ne)R[`${F}.${ne}.encoder.key`]=ye,R[`${F}.${ne}.encoder.value`]=ye,R[`${F}.${ne}.decoder.key`]=se,R[`${F}.${ne}.decoder.value`]=se}else{const be=re.num_heads,xe=re.num_layers,ye=re.dim_kv??re.hidden_size/(re.num_attention_heads??be);if(re.model_type==="falcon"){const se=[X*be,0,ye];for(let ne=0;ne<xe;++ne)R[`${F}.${ne}.key`]=se,R[`${F}.${ne}.value`]=se}else if(re.multi_query){const se=[X*be,0,2*ye];for(let ne=0;ne<xe;++ne)R[`${F}.${ne}.key_value`]=se}else if(re.model_type==="bloom"){const se=[X*be,ye,0],ne=[X*be,0,ye];for(let we=0;we<xe;++we)R[`${F}.${we}.key`]=se,R[`${F}.${we}.value`]=ne}else if(re.model_type==="openelm")for(let se=0;se<xe;++se){const ne=[X,be[se],0,ye];R[`${F}.${se}.key`]=ne,R[`${F}.${se}.value`]=ne}else{const se=[X,be,0,ye];for(let ne=0;ne<xe;++ne)R[`${F}.${ne}.key`]=se,R[`${F}.${ne}.value`]=se}}return R}class j{model_type=null;is_encoder_decoder=!1;max_position_embeddings;"transformers.js_config";constructor(F){Object.assign(this,F),this.normalized_config=L(this)}static async from_pretrained(F,{progress_callback:X=null,config:R=null,cache_dir:re=null,local_files_only:be=!1,revision:xe="main"}={}){!R||R instanceof j||(R=new j(R));const ye=R??await async function(se,ne){return await(0,T.getModelJSON)(se,"config.json",!0,ne)}(F,{progress_callback:X,config:R,cache_dir:re,local_files_only:be,revision:xe});return new this(ye)}}class q{static async from_pretrained(...F){return j.from_pretrained(...F)}}},"./src/env.js":(I,C,d)=>{d.r(C),d.d(C,{apis:()=>xe,env:()=>g});var k=d("?569f"),T=d("?3f59"),L=d("?154a");const N=typeof window<"u"&&window.document!==void 0,j=typeof self<"u"&&self.constructor?.name==="DedicatedWorkerGlobalScope",q=typeof self<"u"&&"caches"in self,W=typeof navigator<"u"&&"gpu"in navigator,F=typeof navigator<"u"&&"ml"in navigator,X=typeof process<"u",R=X&&process?.release?.name==="node",re=!b(k),be=!b(T),xe=Object.freeze({IS_BROWSER_ENV:N,IS_WEBWORKER_ENV:j,IS_WEB_CACHE_AVAILABLE:q,IS_WEBGPU_AVAILABLE:W,IS_WEBNN_AVAILABLE:F,IS_PROCESS_AVAILABLE:X,IS_NODE_ENV:R,IS_FS_AVAILABLE:re,IS_PATH_AVAILABLE:be}),ye=re&&be;let se="./";if(ye){const e=Object(import.meta).url;e?se=T.dirname(T.dirname(L.fileURLToPath(e))):typeof __dirname<"u"&&(se=T.dirname(__dirname))}const ne=ye?T.join(se,"/.cache/"):null,we="/models/",g={version:"3.3.3",backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!(N||j),localModelPath:ye?T.join(se,we):we,useFS:re,useBrowserCache:q,useFSCache:re,cacheDir:ne,useCustomCache:!1,customCache:null};function b(e){return Object.keys(e).length===0}},"./src/generation/configuration_utils.js":(I,C,d)=>{d.r(C),d.d(C,{GenerationConfig:()=>T});var k=d("./src/utils/core.js");class T{max_length=20;max_new_tokens=null;min_length=0;min_new_tokens=null;early_stopping=!1;max_time=null;do_sample=!1;num_beams=1;num_beam_groups=1;penalty_alpha=null;use_cache=!0;temperature=1;top_k=50;top_p=1;typical_p=1;epsilon_cutoff=0;eta_cutoff=0;diversity_penalty=0;repetition_penalty=1;encoder_repetition_penalty=1;length_penalty=1;no_repeat_ngram_size=0;bad_words_ids=null;force_words_ids=null;renormalize_logits=!1;constraints=null;forced_bos_token_id=null;forced_eos_token_id=null;remove_invalid_values=!1;exponential_decay_length_penalty=null;suppress_tokens=null;streamer=null;begin_suppress_tokens=null;forced_decoder_ids=null;guidance_scale=null;num_return_sequences=1;output_attentions=!1;output_hidden_states=!1;output_scores=!1;return_dict_in_generate=!1;pad_token_id=null;bos_token_id=null;eos_token_id=null;encoder_no_repeat_ngram_size=0;decoder_start_token_id=null;generation_kwargs={};constructor(N){Object.assign(this,(0,k.pick)(N,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(I,C,d)=>{d.r(C),d.d(C,{ClassifierFreeGuidanceLogitsProcessor:()=>se,ForcedBOSTokenLogitsProcessor:()=>q,ForcedEOSTokenLogitsProcessor:()=>W,LogitsProcessor:()=>L,LogitsProcessorList:()=>j,LogitsWarper:()=>N,MinLengthLogitsProcessor:()=>be,MinNewTokensLengthLogitsProcessor:()=>xe,NoBadWordsLogitsProcessor:()=>ye,NoRepeatNGramLogitsProcessor:()=>R,RepetitionPenaltyLogitsProcessor:()=>re,SuppressTokensAtBeginLogitsProcessor:()=>F,TemperatureLogitsWarper:()=>ne,TopKLogitsWarper:()=>g,TopPLogitsWarper:()=>we,WhisperTimeStampLogitsProcessor:()=>X});var k=d("./src/utils/generic.js");d("./src/utils/tensor.js");var T=d("./src/utils/maths.js");class L extends k.Callable{_call(e,l){throw Error("`_call` should be implemented in a subclass")}}class N extends k.Callable{_call(e,l){throw Error("`_call` should be implemented in a subclass")}}class j extends k.Callable{constructor(){super(),this.processors=[]}push(e){this.processors.push(e)}extend(e){this.processors.push(...e)}_call(e,l){let M=l;for(const ue of this.processors)M=ue(e,M);return M}[Symbol.iterator](){return this.processors.values()}}class q extends L{constructor(e){super(),this.bos_token_id=e}_call(e,l){for(let M=0;M<e.length;++M)if(e[M].length===1){const ue=l[M].data;ue.fill(-1/0),ue[this.bos_token_id]=0}return l}}class W extends L{constructor(e,l){super(),this.max_length=e,this.eos_token_id=Array.isArray(l)?l:[l]}_call(e,l){for(let M=0;M<e.length;++M)if(e[M].length===this.max_length-1){const ue=l[M].data;ue.fill(-1/0);for(const D of this.eos_token_id)ue[D]=0}return l}}class F extends L{constructor(e,l){super(),this.begin_suppress_tokens=e,this.begin_index=l}_call(e,l){for(let M=0;M<e.length;++M)if(e[M].length===this.begin_index){const ue=l[M].data;for(const D of this.begin_suppress_tokens)ue[D]=-1/0}return l}}class X extends L{constructor(e,l){super(),this.eos_token_id=Array.isArray(e.eos_token_id)?e.eos_token_id[0]:e.eos_token_id,this.no_timestamps_token_id=e.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=l.length,l.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=e.max_initial_timestamp_index}_call(e,l){for(let M=0;M<e.length;++M){const ue=l[M].data;if(ue[this.no_timestamps_token_id]=-1/0,e[M].length===this.begin_index-1){ue.fill(-1/0),ue[this.timestamp_begin]=0;continue}const D=e[M].slice(this.begin_index),z=D.length>=1&&D[D.length-1]>=this.timestamp_begin,Re=D.length<2||D[D.length-2]>=this.timestamp_begin;if(z&&(Re?ue.subarray(this.timestamp_begin).fill(-1/0):ue.subarray(0,this.eos_token_id).fill(-1/0)),e[M].length===this.begin_index&&this.max_initial_timestamp_index!==null){const Je=this.timestamp_begin+this.max_initial_timestamp_index;ue.subarray(Je+1).fill(-1/0)}const Ne=(0,T.log_softmax)(ue);Math.log(Ne.subarray(this.timestamp_begin).map(Math.exp).reduce((Je,AA)=>Je+AA))>(0,T.max)(Ne.subarray(0,this.timestamp_begin))[0]&&ue.subarray(0,this.timestamp_begin).fill(-1/0)}return l}}class R extends L{constructor(e){super(),this.no_repeat_ngram_size=e}getNgrams(e){const l=e.length,M=[];for(let D=0;D<l+1-this.no_repeat_ngram_size;++D){const z=[];for(let Re=0;Re<this.no_repeat_ngram_size;++Re)z.push(e[D+Re]);M.push(z.map(Number))}const ue=new Map;for(const D of M){const z=D.slice(0,D.length-1),Re=JSON.stringify(z),Ne=ue.get(Re)??[];Ne.push(D[D.length-1]),ue.set(Re,Ne)}return ue}getGeneratedNgrams(e,l){const M=l.slice(l.length+1-this.no_repeat_ngram_size,l.length);return e.get(JSON.stringify(M.map(Number)))??[]}calcBannedNgramTokens(e){const l=[];if(e.length+1<this.no_repeat_ngram_size)return l;{const M=this.getNgrams(e);return this.getGeneratedNgrams(M,e)}}_call(e,l){for(let M=0;M<e.length;++M){const ue=l[M].data,D=this.calcBannedNgramTokens(e[M]);for(const z of D)ue[z]=-1/0}return l}}class re extends L{constructor(e){super(),this.penalty=e}_call(e,l){for(let M=0;M<e.length;++M){const ue=l[M].data;for(const D of new Set(e[M])){const z=Number(D);ue[z]<0?ue[z]*=this.penalty:ue[z]/=this.penalty}}return l}}class be extends L{constructor(e,l){super(),this.min_length=e,this.eos_token_id=Array.isArray(l)?l:[l]}_call(e,l){for(let M=0;M<e.length;++M)if(e[M].length<this.min_length){const ue=l[M].data;for(const D of this.eos_token_id)ue[D]=-1/0}return l}}class xe extends L{constructor(e,l,M){super(),this.prompt_length_to_skip=e,this.min_new_tokens=l,this.eos_token_id=Array.isArray(M)?M:[M]}_call(e,l){for(let M=0;M<e.length;++M)if(e[M].length-this.prompt_length_to_skip<this.min_new_tokens){const ue=l[M].data;for(const D of this.eos_token_id)ue[D]=-1/0}return l}}class ye extends L{constructor(e,l){super(),this.bad_words_ids=e,this.eos_token_id=Array.isArray(l)?l:[l]}_call(e,l){for(let M=0;M<e.length;++M){const ue=l[M].data,D=e[M];for(const z of this.bad_words_ids){let Re=!0;for(let Ne=1;Ne<=z.length-1&&z.length<D.length;++Ne)if(z.at(-Ne-1)!=D.at(-Ne)){Re=!1;break}Re&&(ue[z.at(-1)]=-1/0)}}return l}}class se extends L{constructor(e){if(super(),e<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${e}.`);this.guidance_scale=e}_call(e,l){if(l.dims[0]!==2*e.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${l.dims[0]} for the logits and ${e.length} for the input ids.`);const M=e.length,ue=l.slice([0,M],null),D=l.slice([M,l.dims[0]],null);for(let z=0;z<D.data.length;++z)D.data[z]+=(ue.data[z]-D.data[z])*this.guidance_scale;return D}}class ne extends N{constructor(e){super(),this.temperature=e}_call(e,l){const M=l.data;for(let ue=0;ue<M.length;++ue)M[ue]/=this.temperature;return l}}class we extends N{constructor(e,{filter_value:l=-1/0,min_tokens_to_keep:M=1}={}){if(super(),e<0||e>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${e}`);if(!Number.isInteger(M)||M<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${M}`);this.top_p=e,this.filter_value=l,this.min_tokens_to_keep=M}}class g extends N{constructor(e,{filter_value:l=-1/0,min_tokens_to_keep:M=1}={}){if(super(),!Number.isInteger(e)||e<0)throw new Error(`\`top_k\` must be a positive integer, but is ${e}`);this.top_k=Math.max(e,M),this.filter_value=l}}},"./src/generation/logits_sampler.js":(I,C,d)=>{d.r(C),d.d(C,{LogitsSampler:()=>N});var k=d("./src/utils/generic.js"),T=d("./src/utils/tensor.js"),L=d("./src/utils/maths.js");d("./src/generation/configuration_utils.js");class N extends k.Callable{constructor(X){super(),this.generation_config=X}async _call(X){return this.sample(X)}async sample(X){throw Error("sample should be implemented in subclasses.")}getLogits(X,R){let re=X.dims.at(-1),be=X.data;if(R===-1)be=be.slice(-re);else{let xe=R*re;be=be.slice(xe,xe+re)}return be}randomSelect(X){let R=0;for(let be=0;be<X.length;++be)R+=X[be];let re=Math.random()*R;for(let be=0;be<X.length;++be)if(re-=X[be],re<=0)return be;return 0}static getSampler(X){if(X.do_sample)return new q(X);if(X.num_beams>1)return new W(X);if(X.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${X.num_return_sequences}.`);return new j(X)}}class j extends N{async sample(X){const R=(0,L.max)(X.data)[1];return[[BigInt(R),0]]}}class q extends N{async sample(X){let R=X.dims.at(-1);this.generation_config.top_k>0&&(R=Math.min(this.generation_config.top_k,R));const[re,be]=await(0,T.topk)(X,R),xe=(0,L.softmax)(re.data);return Array.from({length:this.generation_config.num_beams},()=>{const ye=this.randomSelect(xe);return[be.data[ye],Math.log(xe[ye])]})}}class W extends N{async sample(X){let R=X.dims.at(-1);this.generation_config.top_k>0&&(R=Math.min(this.generation_config.top_k,R));const[re,be]=await(0,T.topk)(X,R),xe=(0,L.softmax)(re.data);return Array.from({length:this.generation_config.num_beams},(ye,se)=>[be.data[se],Math.log(xe[se])])}}},"./src/generation/stopping_criteria.js":(I,C,d)=>{d.r(C),d.d(C,{EosTokenCriteria:()=>j,InterruptableStoppingCriteria:()=>q,MaxLengthCriteria:()=>N,StoppingCriteria:()=>T,StoppingCriteriaList:()=>L});var k=d("./src/utils/generic.js");class T extends k.Callable{_call(F,X){throw Error("StoppingCriteria needs to be subclassed")}}class L extends k.Callable{constructor(){super(),this.criteria=[]}push(F){this.criteria.push(F)}extend(F){F instanceof L?F=F.criteria:F instanceof T&&(F=[F]),this.criteria.push(...F)}_call(F,X){const R=new Array(F.length).fill(!1);for(const re of this.criteria){const be=re(F,X);for(let xe=0;xe<R.length;++xe)R[xe]||=be[xe]}return R}[Symbol.iterator](){return this.criteria.values()}}class N extends T{constructor(F,X=null){super(),this.max_length=F,this.max_position_embeddings=X}_call(F){return F.map(X=>X.length>=this.max_length)}}class j extends T{constructor(F){super(),Array.isArray(F)||(F=[F]),this.eos_token_id=F}_call(F,X){return F.map(R=>{const re=R.at(-1);return this.eos_token_id.some(be=>re==be)})}}class q extends T{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(F,X){return new Array(F.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(I,C,d)=>{d.r(C),d.d(C,{BaseStreamer:()=>N,TextStreamer:()=>q,WhisperTextStreamer:()=>W});var k=d("./src/utils/core.js"),T=d("./src/tokenizers.js"),L=d("./src/env.js");class N{put(X){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const j=L.apis.IS_PROCESS_AVAILABLE?F=>process.stdout.write(F):F=>console.log(F);class q extends N{constructor(X,{skip_prompt:R=!1,callback_function:re=null,token_callback_function:be=null,skip_special_tokens:xe=!0,decode_kwargs:ye={},...se}={}){super(),this.tokenizer=X,this.skip_prompt=R,this.callback_function=re??j,this.token_callback_function=be,this.decode_kwargs={skip_special_tokens:xe,...ye,...se},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(X){if(X.length>1)throw Error("TextStreamer only supports batch size of 1");if(this.skip_prompt&&this.next_tokens_are_prompt)return void(this.next_tokens_are_prompt=!1);const R=X[0];this.token_callback_function?.(R),this.token_cache=(0,k.mergeArrays)(this.token_cache,R);const re=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let be;re.endsWith(`
`)?(be=re.slice(this.print_len),this.token_cache=[],this.print_len=0):re.length>0&&(0,T.is_chinese_char)(re.charCodeAt(re.length-1))?(be=re.slice(this.print_len),this.print_len+=be.length):(be=re.slice(this.print_len,re.lastIndexOf(" ")+1),this.print_len+=be.length),this.on_finalized_text(be,!1)}end(){let X;this.token_cache.length>0?(X=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):X="",this.next_tokens_are_prompt=!0,this.on_finalized_text(X,!0)}on_finalized_text(X,R){X.length>0&&this.callback_function?.(X),R&&this.callback_function===j&&L.apis.IS_PROCESS_AVAILABLE&&this.callback_function?.(`
`)}}class W extends q{constructor(X,{skip_prompt:R=!1,callback_function:re=null,token_callback_function:be=null,on_chunk_start:xe=null,on_chunk_end:ye=null,on_finalize:se=null,time_precision:ne=.02,skip_special_tokens:we=!0,decode_kwargs:g={}}={}){super(X,{skip_prompt:R,skip_special_tokens:we,callback_function:re,token_callback_function:be,decode_kwargs:g}),this.timestamp_begin=X.timestamp_begin,this.on_chunk_start=xe,this.on_chunk_end=ye,this.on_finalize=se,this.time_precision=ne,this.waiting_for_timestamp=!1}put(X){if(X.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const R=X[0];if(R.length===1){const re=Number(R[0])-this.timestamp_begin;if(re>=0){const be=re*this.time_precision;this.waiting_for_timestamp?this.on_chunk_end?.(be):this.on_chunk_start?.(be),this.waiting_for_timestamp=!this.waiting_for_timestamp,X=[[]]}}return super.put(X)}end(){super.end(),this.on_finalize?.()}}},"./src/models.js":(I,C,d)=>{d.r(C),d.d(C,{ASTForAudioClassification:()=>Yi,ASTModel:()=>pn,ASTPreTrainedModel:()=>Da,AlbertForMaskedLM:()=>WA,AlbertForQuestionAnswering:()=>He,AlbertForSequenceClassification:()=>NA,AlbertModel:()=>fA,AlbertPreTrainedModel:()=>$e,AutoModel:()=>fc,AutoModelForAudioClassification:()=>wc,AutoModelForAudioFrameClassification:()=>xc,AutoModelForCTC:()=>u1,AutoModelForCausalLM:()=>hc,AutoModelForDepthEstimation:()=>f1,AutoModelForDocumentQuestionAnswering:()=>qn,AutoModelForImageClassification:()=>an,AutoModelForImageFeatureExtraction:()=>yc,AutoModelForImageMatting:()=>d1,AutoModelForImageSegmentation:()=>mc,AutoModelForImageToImage:()=>vc,AutoModelForMaskGeneration:()=>Ic,AutoModelForMaskedLM:()=>Jr,AutoModelForNormalEstimation:()=>p1,AutoModelForObjectDetection:()=>g1,AutoModelForPoseEstimation:()=>Bc,AutoModelForQuestionAnswering:()=>Ft,AutoModelForSemanticSegmentation:()=>c1,AutoModelForSeq2SeqLM:()=>H1,AutoModelForSequenceClassification:()=>pc,AutoModelForSpeechSeq2Seq:()=>zi,AutoModelForTextToSpectrogram:()=>R1,AutoModelForTextToWaveform:()=>l1,AutoModelForTokenClassification:()=>Dt,AutoModelForUniversalSegmentation:()=>Cc,AutoModelForVision2Seq:()=>Rt,AutoModelForXVector:()=>kc,AutoModelForZeroShotObjectDetection:()=>bc,BartForConditionalGeneration:()=>ir,BartForSequenceClassification:()=>rt,BartModel:()=>pa,BartPretrainedModel:()=>Ya,BaseModelOutput:()=>EA,BeitForImageClassification:()=>Be,BeitModel:()=>he,BeitPreTrainedModel:()=>ce,BertForMaskedLM:()=>J,BertForQuestionAnswering:()=>$,BertForSequenceClassification:()=>OA,BertForTokenClassification:()=>ge,BertModel:()=>YA,BertPreTrainedModel:()=>FA,BlenderbotForConditionalGeneration:()=>Cr,BlenderbotModel:()=>Pr,BlenderbotPreTrainedModel:()=>Vr,BlenderbotSmallForConditionalGeneration:()=>ri,BlenderbotSmallModel:()=>xr,BlenderbotSmallPreTrainedModel:()=>Ut,BloomForCausalLM:()=>G0,BloomModel:()=>Vn,BloomPreTrainedModel:()=>Rn,CLIPModel:()=>RA,CLIPPreTrainedModel:()=>Us,CLIPSegForImageSegmentation:()=>_a,CLIPSegModel:()=>HA,CLIPSegPreTrainedModel:()=>ni,CLIPTextModel:()=>xn,CLIPTextModelWithProjection:()=>Hi,CLIPVisionModel:()=>va,CLIPVisionModelWithProjection:()=>za,CamembertForMaskedLM:()=>ks,CamembertForQuestionAnswering:()=>ea,CamembertForSequenceClassification:()=>xs,CamembertForTokenClassification:()=>Fs,CamembertModel:()=>Ss,CamembertPreTrainedModel:()=>Xa,CausalLMOutput:()=>Jn,CausalLMOutputWithPast:()=>Mc,ChineseCLIPModel:()=>p0,ChineseCLIPPreTrainedModel:()=>f0,ClapAudioModelWithProjection:()=>wl,ClapModel:()=>bl,ClapPreTrainedModel:()=>_0,ClapTextModelWithProjection:()=>Il,CodeGenForCausalLM:()=>ms,CodeGenModel:()=>ra,CodeGenPreTrainedModel:()=>hs,CohereForCausalLM:()=>Ei,CohereModel:()=>Sa,CoherePreTrainedModel:()=>yi,ConvBertForMaskedLM:()=>fa,ConvBertForQuestionAnswering:()=>La,ConvBertForSequenceClassification:()=>bt,ConvBertForTokenClassification:()=>Za,ConvBertModel:()=>tr,ConvBertPreTrainedModel:()=>Qr,ConvNextForImageClassification:()=>B2,ConvNextModel:()=>v2,ConvNextPreTrainedModel:()=>mo,ConvNextV2ForImageClassification:()=>E2,ConvNextV2Model:()=>y2,ConvNextV2PreTrainedModel:()=>Co,DPTForDepthEstimation:()=>Zn,DPTModel:()=>Ti,DPTPreTrainedModel:()=>pi,DebertaForMaskedLM:()=>Tr,DebertaForQuestionAnswering:()=>Kt,DebertaForSequenceClassification:()=>Rr,DebertaForTokenClassification:()=>us,DebertaModel:()=>Ma,DebertaPreTrainedModel:()=>xt,DebertaV2ForMaskedLM:()=>Ci,DebertaV2ForQuestionAnswering:()=>bi,DebertaV2ForSequenceClassification:()=>$s,DebertaV2ForTokenClassification:()=>ei,DebertaV2Model:()=>ds,DebertaV2PreTrainedModel:()=>qa,DecisionTransformerModel:()=>Ll,DecisionTransformerPreTrainedModel:()=>Ol,DeiTForImageClassification:()=>Er,DeiTModel:()=>yr,DeiTPreTrainedModel:()=>hr,DepthAnythingForDepthEstimation:()=>z0,DepthAnythingPreTrainedModel:()=>P0,DepthProForDepthEstimation:()=>m2,DepthProPreTrainedModel:()=>h2,DetrForObjectDetection:()=>Ke,DetrForSegmentation:()=>rA,DetrModel:()=>Ve,DetrObjectDetectionOutput:()=>cA,DetrPreTrainedModel:()=>Qe,DetrSegmentationOutput:()=>MA,Dinov2ForImageClassification:()=>Xs,Dinov2Model:()=>M2,Dinov2PreTrainedModel:()=>bo,Dinov2WithRegistersForImageClassification:()=>An,Dinov2WithRegistersModel:()=>en,Dinov2WithRegistersPreTrainedModel:()=>qs,DistilBertForMaskedLM:()=>vs,DistilBertForQuestionAnswering:()=>Ja,DistilBertForSequenceClassification:()=>fs,DistilBertForTokenClassification:()=>Ai,DistilBertModel:()=>rs,DistilBertPreTrainedModel:()=>Kr,DonutSwinModel:()=>x2,DonutSwinPreTrainedModel:()=>k2,EfficientNetForImageClassification:()=>Ml,EfficientNetModel:()=>El,EfficientNetPreTrainedModel:()=>To,ElectraForMaskedLM:()=>$A,ElectraForQuestionAnswering:()=>gs,ElectraForSequenceClassification:()=>PA,ElectraForTokenClassification:()=>qt,ElectraModel:()=>ZA,ElectraPreTrainedModel:()=>wa,EsmForMaskedLM:()=>Os,EsmForSequenceClassification:()=>Ii,EsmForTokenClassification:()=>Ls,EsmModel:()=>Ns,EsmPreTrainedModel:()=>kr,ExaoneForCausalLM:()=>Qn,ExaoneModel:()=>Dn,ExaonePreTrainedModel:()=>Cs,FalconForCausalLM:()=>Cl,FalconModel:()=>Go,FalconPreTrainedModel:()=>Mo,FastViTForImageClassification:()=>r,FastViTModel:()=>t,FastViTPreTrainedModel:()=>A,Florence2ForConditionalGeneration:()=>Cn,Florence2PreTrainedModel:()=>ss,GLPNForDepthEstimation:()=>w2,GLPNModel:()=>I2,GLPNPreTrainedModel:()=>ho,GPT2LMHeadModel:()=>ps,GPT2Model:()=>vi,GPT2PreTrainedModel:()=>Bn,GPTBigCodeForCausalLM:()=>ta,GPTBigCodeModel:()=>x0,GPTBigCodePreTrainedModel:()=>is,GPTJForCausalLM:()=>En,GPTJModel:()=>Ht,GPTJPreTrainedModel:()=>It,GPTNeoForCausalLM:()=>I0,GPTNeoModel:()=>b0,GPTNeoPreTrainedModel:()=>Vi,GPTNeoXForCausalLM:()=>k0,GPTNeoXModel:()=>w0,GPTNeoXPreTrainedModel:()=>Or,Gemma2ForCausalLM:()=>li,Gemma2Model:()=>On,Gemma2PreTrainedModel:()=>qi,GemmaForCausalLM:()=>Nn,GemmaModel:()=>$a,GemmaPreTrainedModel:()=>Fn,GlmForCausalLM:()=>oi,GlmModel:()=>aa,GlmPreTrainedModel:()=>Gn,GraniteForCausalLM:()=>Xi,GraniteModel:()=>Sn,GranitePreTrainedModel:()=>Lr,GroundingDinoForObjectDetection:()=>D2,GroundingDinoPreTrainedModel:()=>G2,GroupViTModel:()=>ct,GroupViTPreTrainedModel:()=>di,HeliumForCausalLM:()=>Bi,HeliumModel:()=>Br,HeliumPreTrainedModel:()=>ji,HieraForImageClassification:()=>na,HieraModel:()=>Wr,HieraPreTrainedModel:()=>Sr,HubertForCTC:()=>al,HubertForSequenceClassification:()=>sl,HubertModel:()=>rl,HubertPreTrainedModel:()=>D1,IJepaForImageClassification:()=>jn,IJepaModel:()=>Ks,IJepaPreTrainedModel:()=>Ts,Idefics3ForConditionalGeneration:()=>wn,Idefics3PreTrainedModel:()=>In,ImageMattingOutput:()=>W1,JAISLMHeadModel:()=>C0,JAISModel:()=>m0,JAISPreTrainedModel:()=>yn,JinaCLIPModel:()=>ii,JinaCLIPPreTrainedModel:()=>Ms,JinaCLIPTextModel:()=>h0,JinaCLIPVisionModel:()=>Ri,LlamaForCausalLM:()=>v0,LlamaModel:()=>Mn,LlamaPreTrainedModel:()=>Wi,LlavaForConditionalGeneration:()=>ki,LlavaOnevisionForConditionalGeneration:()=>xa,LlavaPreTrainedModel:()=>wi,LongT5ForConditionalGeneration:()=>jt,LongT5Model:()=>sr,LongT5PreTrainedModel:()=>cr,M2M100ForConditionalGeneration:()=>S0,M2M100Model:()=>L2,M2M100PreTrainedModel:()=>Z0,MBartForCausalLM:()=>Nr,MBartForConditionalGeneration:()=>JA,MBartForSequenceClassification:()=>ha,MBartModel:()=>gA,MBartPreTrainedModel:()=>dr,MPNetForMaskedLM:()=>Es,MPNetForQuestionAnswering:()=>Rs,MPNetForSequenceClassification:()=>Hs,MPNetForTokenClassification:()=>as,MPNetModel:()=>ti,MPNetPreTrainedModel:()=>ka,MT5ForConditionalGeneration:()=>Jt,MT5Model:()=>KA,MT5PreTrainedModel:()=>jA,MarianMTModel:()=>O2,MarianModel:()=>N2,MarianPreTrainedModel:()=>Ra,MaskFormerForInstanceSegmentation:()=>b2,MaskFormerModel:()=>C2,MaskFormerPreTrainedModel:()=>po,MaskedLMOutput:()=>Fa,MgpstrForSceneTextRecognition:()=>Wl,MgpstrModelOutput:()=>Rl,MgpstrPreTrainedModel:()=>Vl,MistralForCausalLM:()=>hl,MistralModel:()=>Bo,MistralPreTrainedModel:()=>J0,MobileBertForMaskedLM:()=>ys,MobileBertForQuestionAnswering:()=>Pt,MobileBertForSequenceClassification:()=>wt,MobileBertModel:()=>Ys,MobileBertPreTrainedModel:()=>Bs,MobileLLMForCausalLM:()=>ns,MobileLLMModel:()=>Ui,MobileLLMPreTrainedModel:()=>Tn,MobileNetV1ForImageClassification:()=>Ql,MobileNetV1Model:()=>Dl,MobileNetV1PreTrainedModel:()=>So,MobileNetV2ForImageClassification:()=>Pl,MobileNetV2Model:()=>Tl,MobileNetV2PreTrainedModel:()=>Fo,MobileNetV3ForImageClassification:()=>Sl,MobileNetV3Model:()=>zl,MobileNetV3PreTrainedModel:()=>eo,MobileNetV4ForImageClassification:()=>Nl,MobileNetV4Model:()=>Fl,MobileNetV4PreTrainedModel:()=>No,MobileViTForImageClassification:()=>c,MobileViTModel:()=>o,MobileViTPreTrainedModel:()=>i,MobileViTV2ForImageClassification:()=>p,MobileViTV2Model:()=>m,MobileViTV2PreTrainedModel:()=>f,ModelOutput:()=>pA,ModernBertForMaskedLM:()=>qe,ModernBertForSequenceClassification:()=>dA,ModernBertForTokenClassification:()=>oA,ModernBertModel:()=>Fe,ModernBertPreTrainedModel:()=>me,Moondream1ForConditionalGeneration:()=>Ws,MoonshineForConditionalGeneration:()=>Pa,MoonshineModel:()=>K0,MoonshinePreTrainedModel:()=>mn,MptForCausalLM:()=>Wn,MptModel:()=>es,MptPreTrainedModel:()=>Ds,MultiModalityCausalLM:()=>Hl,MultiModalityPreTrainedModel:()=>Yl,MusicgenForCausalLM:()=>T1,MusicgenForConditionalGeneration:()=>zo,MusicgenModel:()=>Gl,MusicgenPreTrainedModel:()=>Po,NomicBertModel:()=>QA,NomicBertPreTrainedModel:()=>vA,OPTForCausalLM:()=>ar,OPTModel:()=>Xr,OPTPreTrainedModel:()=>Gi,Olmo2ForCausalLM:()=>Zi,Olmo2Model:()=>bs,Olmo2PreTrainedModel:()=>zn,OlmoForCausalLM:()=>Pn,OlmoModel:()=>B0,OlmoPreTrainedModel:()=>Ki,OpenELMForCausalLM:()=>E0,OpenELMModel:()=>y0,OpenELMPreTrainedModel:()=>Ln,OwlViTForObjectDetection:()=>P,OwlViTModel:()=>E,OwlViTPreTrainedModel:()=>w,Owlv2ForObjectDetection:()=>ee,Owlv2Model:()=>Z,Owlv2PreTrainedModel:()=>Y,PaliGemmaForConditionalGeneration:()=>js,PaliGemmaPreTrainedModel:()=>bn,PatchTSMixerForPrediction:()=>Ul,PatchTSMixerModel:()=>Yo,PatchTSMixerPreTrainedModel:()=>Lo,PatchTSTForPrediction:()=>O0,PatchTSTModel:()=>jl,PatchTSTPreTrainedModel:()=>Oo,Phi3ForCausalLM:()=>M0,Phi3Model:()=>ci,Phi3PreTrainedModel:()=>Gs,Phi3VForCausalLM:()=>DA,Phi3VPreTrainedModel:()=>kn,PhiForCausalLM:()=>Hn,PhiModel:()=>fr,PhiPreTrainedModel:()=>ja,PreTrainedModel:()=>Te,PretrainedMixin:()=>br,PvtForImageClassification:()=>Di,PvtModel:()=>ui,PvtPreTrainedModel:()=>Un,PyAnnoteForAudioFrameClassification:()=>j2,PyAnnoteModel:()=>W2,PyAnnotePreTrainedModel:()=>X0,QuestionAnsweringModelOutput:()=>Ua,Qwen2ForCausalLM:()=>ma,Qwen2Model:()=>Mi,Qwen2PreTrainedModel:()=>sa,Qwen2VLForConditionalGeneration:()=>Ji,Qwen2VLPreTrainedModel:()=>Yn,RTDetrForObjectDetection:()=>at,RTDetrModel:()=>et,RTDetrObjectDetectionOutput:()=>dt,RTDetrPreTrainedModel:()=>zA,ResNetForImageClassification:()=>Ba,ResNetModel:()=>oa,ResNetPreTrainedModel:()=>qr,RoFormerForMaskedLM:()=>Tt,RoFormerForQuestionAnswering:()=>$t,RoFormerForSequenceClassification:()=>ut,RoFormerForTokenClassification:()=>Ct,RoFormerModel:()=>Mt,RoFormerPreTrainedModel:()=>TA,RobertaForMaskedLM:()=>Ga,RobertaForQuestionAnswering:()=>Aa,RobertaForSequenceClassification:()=>Oi,RobertaForTokenClassification:()=>Gt,RobertaModel:()=>Ni,RobertaPreTrainedModel:()=>Ha,SamImageSegmentationOutput:()=>F2,SamModel:()=>S2,SamPreTrainedModel:()=>z2,SapiensForDepthEstimation:()=>f2,SapiensForNormalEstimation:()=>p2,SapiensForSemanticSegmentation:()=>d2,SapiensPreTrainedModel:()=>$i,SegformerForImageClassification:()=>xl,SegformerForSemanticSegmentation:()=>vl,SegformerModel:()=>Q1,SegformerPreTrainedModel:()=>$0,Seq2SeqLMOutput:()=>Ec,SequenceClassifierOutput:()=>Nt,SiglipModel:()=>xi,SiglipPreTrainedModel:()=>si,SiglipTextModel:()=>vn,SiglipVisionModel:()=>zr,SpeechT5ForSpeechToText:()=>ko,SpeechT5ForTextToSpeech:()=>xo,SpeechT5HifiGan:()=>vo,SpeechT5Model:()=>dl,SpeechT5PreTrainedModel:()=>tn,SqueezeBertForMaskedLM:()=>ve,SqueezeBertForQuestionAnswering:()=>We,SqueezeBertForSequenceClassification:()=>Oe,SqueezeBertModel:()=>_,SqueezeBertPreTrainedModel:()=>tA,StableLmForCausalLM:()=>yl,StableLmModel:()=>Bl,StableLmPreTrainedModel:()=>Qo,Starcoder2ForCausalLM:()=>ml,Starcoder2Model:()=>Eo,Starcoder2PreTrainedModel:()=>yo,StyleTextToSpeech2Model:()=>ul,StyleTextToSpeech2PreTrainedModel:()=>gl,Swin2SRForImageSuperResolution:()=>fi,Swin2SRModel:()=>Qi,Swin2SRPreTrainedModel:()=>Ps,SwinForImageClassification:()=>ls,SwinModel:()=>os,SwinPreTrainedModel:()=>As,T5ForConditionalGeneration:()=>Wt,T5Model:()=>Yt,T5PreTrainedModel:()=>bA,TableTransformerForObjectDetection:()=>er,TableTransformerModel:()=>Zt,TableTransformerObjectDetectionOutput:()=>pr,TableTransformerPreTrainedModel:()=>St,TokenClassifierOutput:()=>Qa,TrOCRForCausalLM:()=>pl,TrOCRPreTrainedModel:()=>fl,UniSpeechForCTC:()=>wo,UniSpeechForSequenceClassification:()=>X2,UniSpeechModel:()=>Z2,UniSpeechPreTrainedModel:()=>F0,UniSpeechSatForAudioFrameClassification:()=>$2,UniSpeechSatForCTC:()=>J2,UniSpeechSatForSequenceClassification:()=>_2,UniSpeechSatModel:()=>q2,UniSpeechSatPreTrainedModel:()=>N0,ViTForImageClassification:()=>Qs,ViTMAEModel:()=>Kn,ViTMAEPreTrainedModel:()=>ia,ViTMSNForImageClassification:()=>T0,ViTMSNModel:()=>Zs,ViTMSNPreTrainedModel:()=>_i,ViTModel:()=>D0,ViTPreTrainedModel:()=>gi,VisionEncoderDecoderModel:()=>rr,VitMatteForImageMatting:()=>s,VitMattePreTrainedModel:()=>a,VitPoseForPoseEstimation:()=>Q0,VitPosePreTrainedModel:()=>Ca,VitsModel:()=>Do,VitsModelOutput:()=>j1,VitsPreTrainedModel:()=>kl,Wav2Vec2BertForCTC:()=>Al,Wav2Vec2BertForSequenceClassification:()=>tl,Wav2Vec2BertModel:()=>el,Wav2Vec2BertPreTrainedModel:()=>q0,Wav2Vec2ForAudioFrameClassification:()=>V2,Wav2Vec2ForCTC:()=>H2,Wav2Vec2ForSequenceClassification:()=>R2,Wav2Vec2Model:()=>Y2,Wav2Vec2PreTrainedModel:()=>Pi,WavLMForAudioFrameClassification:()=>cl,WavLMForCTC:()=>nl,WavLMForSequenceClassification:()=>ol,WavLMForXVector:()=>ll,WavLMModel:()=>il,WavLMPreTrainedModel:()=>Xn,WeSpeakerResNetModel:()=>K2,WeSpeakerResNetPreTrainedModel:()=>U2,WhisperForConditionalGeneration:()=>d0,WhisperModel:()=>u0,WhisperPreTrainedModel:()=>hn,XLMForQuestionAnswering:()=>ai,XLMForSequenceClassification:()=>l0,XLMForTokenClassification:()=>c0,XLMModel:()=>n0,XLMPreTrainedModel:()=>Wa,XLMRobertaForMaskedLM:()=>Li,XLMRobertaForQuestionAnswering:()=>qA,XLMRobertaForSequenceClassification:()=>Ta,XLMRobertaForTokenClassification:()=>Zr,XLMRobertaModel:()=>g0,XLMRobertaPreTrainedModel:()=>Vs,XLMWithLMHeadModel:()=>o0,XVectorOutput:()=>V1,YolosForObjectDetection:()=>T2,YolosModel:()=>Q2,YolosObjectDetectionOutput:()=>P2,YolosPreTrainedModel:()=>Io});var k=d("./src/configs.js"),T=d("./src/backends/onnx.js"),L=d("./src/utils/dtypes.js"),N=d("./src/utils/generic.js"),j=d("./src/utils/core.js"),q=d("./src/utils/hub.js"),W=d("./src/utils/constants.js"),F=d("./src/generation/logits_process.js"),X=d("./src/generation/configuration_utils.js"),R=d("./src/utils/tensor.js"),re=d("./src/utils/image.js"),be=d("./src/utils/maths.js"),xe=d("./src/generation/stopping_criteria.js"),ye=d("./src/generation/logits_sampler.js"),se=d("./src/env.js"),ne=d("./src/models/whisper/generation_whisper.js"),we=d("./src/models/whisper/common_whisper.js");const g=0,b=1,e=2,l=3,M=4,ue=5,D=6,z=7,Re=8,Ne=9,Ye=new Map,Je=new Map,AA=new Map;async function xA(K,U,Ee){return Object.fromEntries(await Promise.all(Object.keys(U).map(async eA=>{const{buffer:sA,session_options:uA,session_config:SA}=await async function(XA,VA,_A){const ft=_A.config?.["transformers.js_config"]??{};let gt=_A.device??ft.device;gt&&typeof gt!="string"&&(gt.hasOwnProperty(VA)?gt=gt[VA]:(console.warn(`device not specified for "${VA}". Using the default device.`),gt=null));const zt=gt??(se.apis.IS_NODE_ENV?"cpu":"wasm"),Qt=(0,T.deviceToExecutionProviders)(zt);let or=_A.dtype??ft.dtype;if(typeof or!="string"&&(or&&or.hasOwnProperty(VA)?or=or[VA]:(or=L.DEFAULT_DEVICE_DTYPE_MAPPING[zt]??L.DATA_TYPES.fp32,console.warn(`dtype not specified for "${VA}". Using the default dtype (${or}) for this device (${zt}).`))),or===L.DATA_TYPES.auto){let _t=ft.dtype;typeof _t!="string"&&(_t=_t[VA]),or=_t&&_t!==L.DATA_TYPES.auto&&L.DATA_TYPES.hasOwnProperty(_t)?_t:L.DEFAULT_DEVICE_DTYPE_MAPPING[zt]??L.DATA_TYPES.fp32}const vt=or;if(!L.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(vt))throw new Error(`Invalid dtype: ${vt}. Should be one of: ${Object.keys(L.DATA_TYPES).join(", ")}`);if(vt===L.DATA_TYPES.fp16&&zt==="webgpu"&&!await(0,L.isWebGpuFp16Supported)())throw new Error(`The device (${zt}) does not support fp16.`);const Ot=ft.kv_cache_dtype?typeof ft.kv_cache_dtype=="string"?ft.kv_cache_dtype:ft.kv_cache_dtype[vt]??"float32":void 0;if(Ot&&!["float32","float16"].includes(Ot))throw new Error(`Invalid kv_cache_dtype: ${Ot}. Should be one of: float32, float16`);const Ir={dtype:vt,kv_cache_dtype:Ot},Mr=L.DEFAULT_DTYPE_SUFFIX_MAPPING[vt],jr=`${_A.subfolder??""}/${VA}${Mr}.onnx`,_r={..._A.session_options};_r.executionProviders??=Qt;const Na=ft.free_dimension_overrides;Na?_r.freeDimensionOverrides??=Na:zt.startsWith("webnn")&&!_r.freeDimensionOverrides&&console.warn('WebNN does not currently support dynamic shapes and requires `free_dimension_overrides` to be set in config.json as a field within "transformers.js_config". When `free_dimension_overrides` is not set, you may experience significant performance degradation.');const $r=(0,q.getModelFile)(XA,jr,!0,_A),Yr=_A.use_external_data_format??ft.use_external_data_format;let ba=[];if(Yr&&(Yr===!0||typeof Yr=="object"&&Yr.hasOwnProperty(VA)&&Yr[VA]===!0)){if(se.apis.IS_NODE_ENV)throw new Error("External data format is not yet supported in Node.js");const _t=`${VA}${Mr}.onnx_data`,Ka=`${_A.subfolder??""}/${_t}`;ba.push(new Promise(async(sn,Ao)=>{const nn=await(0,q.getModelFile)(XA,Ka,!0,_A);sn({path:_t,data:nn})}))}else _r.externalData!==void 0&&(ba=_r.externalData.map(async _t=>{if(typeof _t.data=="string"){const Ka=await(0,q.getModelFile)(XA,_t.data,!0,_A);return{..._t,data:Ka}}return _t}));if(ba.length>0&&(_r.externalData=await Promise.all(ba)),zt==="webgpu"){const _t=(0,k.getKeyValueShapes)(_A.config,{prefix:"present"});if(Object.keys(_t).length>0&&!(0,T.isONNXProxy)()){const Ka={};for(const sn in _t)Ka[sn]="gpu-buffer";_r.preferredOutputLocation=Ka}}return{buffer:await $r,session_options:_r,session_config:Ir}}(K,U[eA],Ee);return[eA,await(0,T.createInferenceSession)(sA,uA,SA)]})))}async function GA(K,U,Ee){return Object.fromEntries(await Promise.all(Object.keys(U).map(async eA=>[eA,await(0,q.getModelJSON)(K,U[eA],!1,Ee)])))}async function Ge(K,U){const Ee=function(eA,sA){const uA=Object.create(null),SA=[];for(const _A of eA.inputNames){const ft=sA[_A];ft instanceof R.Tensor?uA[_A]=(0,T.isONNXProxy)()?ft.clone():ft:SA.push(_A)}if(SA.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${SA.join(", ")}.`);const XA=Object.keys(sA).length,VA=eA.inputNames.length;if(XA>VA){let _A=Object.keys(sA).filter(ft=>!eA.inputNames.includes(ft));console.warn(`WARNING: Too many inputs were provided (${XA} > ${VA}). The following inputs will be ignored: "${_A.join(", ")}".`)}return uA}(K,U);try{const eA=Object.fromEntries(Object.entries(Ee).map(([uA,SA])=>[uA,SA.ort_tensor]));let sA=await K.run(eA);return sA=Ie(sA),sA}catch(eA){const sA=Object.fromEntries(Object.entries(Ee).map(([uA,{type:SA,dims:XA,data:VA}])=>[uA,{type:SA,dims:XA,data:VA}]));throw console.error(`An error occurred during model execution: "${eA}".`),console.error("Inputs given to model:",sA),eA}}function Ie(K){for(let U in K)(0,T.isONNXTensor)(K[U])?K[U]=new R.Tensor(K[U]):typeof K[U]=="object"&&Ie(K[U]);return K}function ze(K){if(K instanceof R.Tensor)return K;if(K.length===0)throw Error("items must be non-empty");if(Array.isArray(K[0])){if(K.some(U=>U.length!==K[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new R.Tensor("int64",BigInt64Array.from(K.flat().map(U=>BigInt(U))),[K.length,K[0].length])}return new R.Tensor("int64",BigInt64Array.from(K.map(U=>BigInt(U))),[1,K.length])}function Ue(K){return new R.Tensor("bool",[K],[1])}async function Pe(K,U){let{encoder_outputs:Ee,input_ids:eA,decoder_input_ids:sA,...uA}=U;if(!Ee){const SA=(0,j.pick)(U,K.sessions.model.inputNames);Ee=(await kA(K,SA)).last_hidden_state}return uA.input_ids=sA,uA.encoder_hidden_states=Ee,K.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(uA.encoder_attention_mask=U.attention_mask),await aA(K,uA,!0)}async function kA(K,U){const Ee=K.sessions.model,eA=(0,j.pick)(U,Ee.inputNames);if(Ee.inputNames.includes("inputs_embeds")&&!eA.inputs_embeds){if(!U.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");eA.inputs_embeds=await K.encode_text({input_ids:U.input_ids})}if(Ee.inputNames.includes("token_type_ids")&&!eA.token_type_ids){if(!eA.input_ids)throw new Error("Both `input_ids` and `token_type_ids` are missing in the model inputs.");eA.token_type_ids=(0,R.zeros_like)(eA.input_ids)}if(Ee.inputNames.includes("pixel_mask")&&!eA.pixel_mask){if(!eA.pixel_values)throw new Error("Both `pixel_values` and `pixel_mask` are missing in the model inputs.");const sA=eA.pixel_values.dims;eA.pixel_mask=(0,R.ones)([sA[0],sA[2],sA[3]])}return await Ge(Ee,eA)}async function aA(K,U,Ee=!1){const eA=K.sessions[Ee?"decoder_model_merged":"model"],{past_key_values:sA,...uA}=U;if(eA.inputNames.includes("use_cache_branch")&&(uA.use_cache_branch=Ue(!!sA)),eA.inputNames.includes("position_ids")&&uA.attention_mask&&!uA.position_ids){const XA=K.config.model_type==="paligemma"?1:0;uA.position_ids=function(VA,_A=null,ft=0){const{input_ids:gt,inputs_embeds:zt,attention_mask:Qt}=VA,{data:or,dims:vt}=nA(Qt,ft);let Ot=new R.Tensor("int64",or,vt);if(_A){const Ir=-(gt??zt).dims.at(1);Ot=Ot.slice(null,[Ir,null])}return Ot}(uA,sA,XA)}K.addPastKeyValues(uA,sA);const SA=(0,j.pick)(uA,eA.inputNames);return await Ge(eA,SA)}function iA({image_token_id:K,inputs_embeds:U,image_features:Ee,input_ids:eA,attention_mask:sA}){const uA=eA.tolist().map(_A=>_A.reduce((ft,gt,zt)=>(gt==K&&ft.push(zt),ft),[])),SA=uA.reduce((_A,ft)=>_A+ft.length,0),XA=Ee.dims[0];if(SA!==XA)throw new Error(`Image features and image tokens do not match: tokens: ${SA}, features ${XA}`);let VA=0;for(let _A=0;_A<uA.length;++_A){const ft=uA[_A],gt=U[_A];for(let zt=0;zt<ft.length;++zt)gt[ft[zt]].data.set(Ee[VA++].data)}return{inputs_embeds:U,attention_mask:sA}}async function yA(K,{input_ids:U=null,attention_mask:Ee=null,pixel_values:eA=null,position_ids:sA=null,inputs_embeds:uA=null,past_key_values:SA=null,generation_config:XA=null,logits_processor:VA=null,..._A}){if(!uA){if(uA=await K.encode_text({input_ids:U,..._A}),eA&&U.dims[1]!==1){const ft=await K.encode_image({pixel_values:eA,..._A});({inputs_embeds:uA,attention_mask:Ee}=K._merge_input_ids_with_image_features({image_features:ft,inputs_embeds:uA,input_ids:U,attention_mask:Ee}))}else if(SA&&eA&&U.dims[1]===1){const ft=U.dims[1],gt=Object.values(SA)[0].dims.at(-2);Ee=(0,R.cat)([(0,R.ones)([U.dims[0],gt]),Ee.slice(null,[Ee.dims[1]-ft,Ee.dims[1]])],1)}}if(!sA&&K.config.model_type==="qwen2_vl"){const{image_grid_thw:ft,video_grid_thw:gt}=_A;[sA]=K.get_rope_index(U,ft,gt,Ee)}return await aA(K,{inputs_embeds:uA,past_key_values:SA,attention_mask:Ee,position_ids:sA,generation_config:XA,logits_processor:VA},!0)}function nA(K,U=0){const[Ee,eA]=K.dims,sA=K.data,uA=new BigInt64Array(sA.length);for(let SA=0;SA<Ee;++SA){const XA=SA*eA;let VA=BigInt(U);for(let _A=0;_A<eA;++_A){const ft=XA+_A;sA[ft]===0n?uA[ft]=BigInt(1):(uA[ft]=VA,VA+=sA[ft])}}return{data:uA,dims:K.dims}}function Se(K,U,Ee,eA){if(Ee.past_key_values){const sA=Object.values(Ee.past_key_values)[0].dims.at(-2),{input_ids:uA,attention_mask:SA}=Ee;if(!(SA&&SA.dims[1]>uA.dims[1])){if(sA<uA.dims[1])Ee.input_ids=uA.slice(null,[sA,null]);else if(K.config.image_token_index!=null&&uA.data.some(XA=>XA==K.config.image_token_index)){const XA=K.config.num_image_tokens;if(!XA)throw new Error("`num_image_tokens` is missing in the model configuration.");const VA=uA.dims[1]-(sA-XA);Ee.input_ids=uA.slice(null,[-VA,null]),Ee.attention_mask=(0,R.ones)([1,sA+VA])}}}return Ee}function Ze(K,U,Ee,eA){return Ee.past_key_values&&(U=U.map(sA=>[sA.at(-1)])),{...Ee,decoder_input_ids:ze(U)}}function mA(K,...U){return K.config.is_encoder_decoder?Ze(K,...U):Se(K,...U)}function CA(K,U,Ee,eA){const sA=!!Ee.past_key_values;return eA.guidance_scale!==null&&eA.guidance_scale>1&&(sA?Ee.input_ids=(0,R.cat)([Ee.input_ids,Ee.input_ids],0):(Ee.input_ids=(0,R.cat)([Ee.input_ids,(0,R.full_like)(Ee.input_ids,BigInt(eA.pad_token_id))],0),Ee.attention_mask=(0,R.cat)([Ee.attention_mask,(0,R.full_like)(Ee.attention_mask,0n)],0))),!sA&&Ee.pixel_values||(Ee.pixel_values=(0,R.full)([0,0,3,384,384],1)),sA&&(Ee.images_seq_mask=new R.Tensor("bool",new Array(1).fill(!0).fill(!1,0,1),[1,1]),Ee.images_emb_mask=new R.Tensor("bool",new Array(0).fill(!1),[1,1,0])),Ee}class Te extends N.Callable{main_input_name="input_ids";forward_params=["input_ids","attention_mask"];constructor(U,Ee,eA){super(),this.config=U,this.sessions=Ee,this.configs=eA;const sA=AA.get(this.constructor),uA=Ye.get(sA);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,uA){case M:this.can_generate=!0,this._forward=aA,this._prepare_inputs_for_generation=Se;break;case e:case l:case z:this.can_generate=!0,this._forward=Pe,this._prepare_inputs_for_generation=Ze;break;case b:this._forward=Pe;break;case D:this.can_generate=!0,this._forward=yA,this._prepare_inputs_for_generation=mA;break;case Ne:this.can_generate=!0,this._prepare_inputs_for_generation=mA;break;case Re:this.can_generate=!0,this._prepare_inputs_for_generation=CA;break;default:this._forward=kA}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){const U=[];for(const Ee of Object.values(this.sessions))Ee?.handler?.dispose&&U.push(Ee.handler.dispose());return await Promise.all(U)}static async from_pretrained(U,{progress_callback:Ee=null,config:eA=null,cache_dir:sA=null,local_files_only:uA=!1,revision:SA="main",model_file_name:XA=null,subfolder:VA="onnx",device:_A=null,dtype:ft=null,use_external_data_format:gt=null,session_options:zt={}}={}){let Qt={progress_callback:Ee,config:eA,cache_dir:sA,local_files_only:uA,revision:SA,model_file_name:XA,subfolder:VA,device:_A,dtype:ft,use_external_data_format:gt,session_options:zt};const or=AA.get(this),vt=Ye.get(or);let Ot;if(eA=Qt.config=await k.AutoConfig.from_pretrained(U,Qt),vt===M)Ot=await Promise.all([xA(U,{model:Qt.model_file_name??"model"},Qt),GA(U,{generation_config:"generation_config.json"},Qt)]);else if(vt===e||vt===l)Ot=await Promise.all([xA(U,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},Qt),GA(U,{generation_config:"generation_config.json"},Qt)]);else if(vt===ue)Ot=await Promise.all([xA(U,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},Qt)]);else if(vt===b)Ot=await Promise.all([xA(U,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},Qt)]);else if(vt===D){const Ir={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};eA.is_encoder_decoder&&(Ir.model="encoder_model"),Ot=await Promise.all([xA(U,Ir,Qt),GA(U,{generation_config:"generation_config.json"},Qt)])}else if(vt===z)Ot=await Promise.all([xA(U,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},Qt),GA(U,{generation_config:"generation_config.json"},Qt)]);else if(vt===Re)Ot=await Promise.all([xA(U,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"language_model",lm_head:"lm_head",gen_head:"gen_head",gen_img_embeds:"gen_img_embeds",image_decode:"image_decode"},Qt),GA(U,{generation_config:"generation_config.json"},Qt)]);else if(vt===Ne)Ot=await Promise.all([xA(U,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"model",vision_encoder:"vision_encoder"},Qt),GA(U,{generation_config:"generation_config.json"},Qt)]);else{if(vt!==g){const Ir=or??eA?.model_type;Ir!=="custom"&&console.warn(`Model type for '${Ir}' not found, assuming encoder-only architecture. Please report this at ${W.GITHUB_ISSUE_URL}.`)}Ot=await Promise.all([xA(U,{model:Qt.model_file_name??"model"},Qt)])}return new this(eA,...Ot)}async _call(U){return await this.forward(U)}async forward(U){return await this._forward(this,U)}get generation_config(){return this.configs?.generation_config??null}_get_logits_warper(U){const Ee=new F.LogitsProcessorList;return U.temperature!==null&&U.temperature!==1&&Ee.push(new F.TemperatureLogitsWarper(U.temperature)),U.top_k!==null&&U.top_k!==0&&Ee.push(new F.TopKLogitsWarper(U.top_k)),U.top_p!==null&&U.top_p<1&&Ee.push(new F.TopPLogitsWarper(U.top_p)),Ee}_get_logits_processor(U,Ee,eA=null){const sA=new F.LogitsProcessorList;if(U.repetition_penalty!==null&&U.repetition_penalty!==1&&sA.push(new F.RepetitionPenaltyLogitsProcessor(U.repetition_penalty)),U.no_repeat_ngram_size!==null&&U.no_repeat_ngram_size>0&&sA.push(new F.NoRepeatNGramLogitsProcessor(U.no_repeat_ngram_size)),U.bad_words_ids!==null&&sA.push(new F.NoBadWordsLogitsProcessor(U.bad_words_ids,U.eos_token_id)),U.min_length!==null&&U.eos_token_id!==null&&U.min_length>0&&sA.push(new F.MinLengthLogitsProcessor(U.min_length,U.eos_token_id)),U.min_new_tokens!==null&&U.eos_token_id!==null&&U.min_new_tokens>0&&sA.push(new F.MinNewTokensLengthLogitsProcessor(Ee,U.min_new_tokens,U.eos_token_id)),U.forced_bos_token_id!==null&&sA.push(new F.ForcedBOSTokenLogitsProcessor(U.forced_bos_token_id)),U.forced_eos_token_id!==null&&sA.push(new F.ForcedEOSTokenLogitsProcessor(U.max_length,U.forced_eos_token_id)),U.begin_suppress_tokens!==null){const uA=Ee>1||U.forced_bos_token_id===null?Ee:Ee+1;sA.push(new F.SuppressTokensAtBeginLogitsProcessor(U.begin_suppress_tokens,uA))}return U.guidance_scale!==null&&U.guidance_scale>1&&sA.push(new F.ClassifierFreeGuidanceLogitsProcessor(U.guidance_scale)),eA!==null&&sA.extend(eA),sA}_prepare_generation_config(U,Ee,eA=X.GenerationConfig){const sA={...this.config};for(const SA of["decoder","generator","text_config"])SA in sA&&Object.assign(sA,sA[SA]);const uA=new eA(sA);return Object.assign(uA,this.generation_config??{}),U&&Object.assign(uA,U),Ee&&Object.assign(uA,(0,j.pick)(Ee,Object.getOwnPropertyNames(uA))),uA}_get_stopping_criteria(U,Ee=null){const eA=new xe.StoppingCriteriaList;return U.max_length!==null&&eA.push(new xe.MaxLengthCriteria(U.max_length,this.config.max_position_embeddings??null)),U.eos_token_id!==null&&eA.push(new xe.EosTokenCriteria(U.eos_token_id)),Ee&&eA.extend(Ee),eA}_validate_model_class(){if(!this.can_generate){const U=[Wo,jo,Vo,Ho],Ee=AA.get(this.constructor),eA=new Set,sA=this.config.model_type;for(const SA of U){const XA=SA.get(sA);XA&&eA.add(XA[0])}let uA=`The current model class (${Ee}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw eA.size>0&&(uA+=` Please use the following class instead: ${[...eA].join(", ")}`),Error(uA)}}prepare_inputs_for_generation(...U){return this._prepare_inputs_for_generation(this,...U)}_update_model_kwargs_for_generation({generated_input_ids:U,outputs:Ee,model_inputs:eA,is_encoder_decoder:sA}){return eA.past_key_values=this.getPastKeyValues(Ee,eA.past_key_values),eA.input_ids=new R.Tensor("int64",U.flat(),[U.length,1]),sA||(eA.attention_mask=(0,R.cat)([eA.attention_mask,(0,R.ones)([eA.attention_mask.dims[0],1])],1)),eA.position_ids=null,eA}_prepare_model_inputs({inputs:U,bos_token_id:Ee,model_kwargs:eA}){const sA=(0,j.pick)(eA,this.forward_params),uA=this.main_input_name;if(uA in sA){if(U)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else sA[uA]=U;return{inputs_tensor:sA[uA],model_inputs:sA,model_input_name:uA}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:U,model_inputs:Ee,model_input_name:eA,generation_config:sA}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!Ee.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:SA,pixel_values:XA,attention_mask:VA,..._A}=Ee,ft=await this._prepare_inputs_embeds(Ee);Ee={..._A,...(0,j.pick)(ft,["inputs_embeds","attention_mask"])}}let{last_hidden_state:uA}=await kA(this,Ee);if(sA.guidance_scale!==null&&sA.guidance_scale>1)uA=(0,R.cat)([uA,(0,R.full_like)(uA,0)],0),"attention_mask"in Ee&&(Ee.attention_mask=(0,R.cat)([Ee.attention_mask,(0,R.zeros_like)(Ee.attention_mask)],0));else if(Ee.decoder_input_ids){const SA=ze(Ee.decoder_input_ids).dims[0];if(SA!==uA.dims[0]){if(uA.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${uA.dims[0]}) than the decoder inputs (${SA}).`);uA=(0,R.cat)(Array.from({length:SA},()=>uA),0)}}return Ee.encoder_outputs=uA,Ee}_prepare_decoder_input_ids_for_generation({batch_size:U,model_input_name:Ee,model_kwargs:eA,decoder_start_token_id:sA,bos_token_id:uA,generation_config:SA}){let{decoder_input_ids:XA,...VA}=eA;if(!(XA instanceof R.Tensor)){if(XA)Array.isArray(XA[0])||(XA=Array.from({length:U},()=>XA));else if(sA??=uA,this.config.model_type==="musicgen")XA=Array.from({length:U*this.config.decoder.num_codebooks},()=>[sA]);else if(Array.isArray(sA)){if(sA.length!==U)throw new Error(`\`decoder_start_token_id\` expcted to have length ${U} but got ${sA.length}`);XA=sA}else XA=Array.from({length:U},()=>[sA]);XA=ze(XA)}return eA.decoder_attention_mask=(0,R.ones_like)(XA),{input_ids:XA,model_inputs:VA}}async generate({inputs:U=null,generation_config:Ee=null,logits_processor:eA=null,stopping_criteria:sA=null,streamer:uA=null,...SA}){this._validate_model_class(),Ee=this._prepare_generation_config(Ee,SA);let{inputs_tensor:XA,model_inputs:VA,model_input_name:_A}=this._prepare_model_inputs({inputs:U,model_kwargs:SA});const ft=this.config.is_encoder_decoder;let gt;ft&&("encoder_outputs"in VA||(VA=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:XA,model_inputs:VA,model_input_name:_A,generation_config:Ee}))),ft?{input_ids:gt,model_inputs:VA}=this._prepare_decoder_input_ids_for_generation({batch_size:VA[_A].dims.at(0),model_input_name:_A,model_kwargs:VA,decoder_start_token_id:Ee.decoder_start_token_id,bos_token_id:Ee.bos_token_id,generation_config:Ee}):gt=VA[_A];let zt=gt.dims.at(-1);Ee.max_new_tokens!==null&&(Ee.max_length=zt+Ee.max_new_tokens);const Qt=this._get_logits_processor(Ee,zt,eA),or=this._get_stopping_criteria(Ee,sA),vt=VA[_A].dims.at(0),Ot=ye.LogitsSampler.getSampler(Ee),Ir=new Array(vt).fill(0),Mr=gt.tolist();let jr;uA&&uA.put(Mr);let _r={};for(;;){if(VA=this.prepare_inputs_for_generation(Mr,VA,Ee),jr=await this.forward(VA),Ee.output_attentions&&Ee.return_dict_in_generate){const _t=this.getAttentions(jr);for(const Ka in _t)Ka in _r||(_r[Ka]=[]),_r[Ka].push(_t[Ka])}const Yr=Qt(Mr,jr.logits.slice(null,-1,null)),ba=[];for(let _t=0;_t<Yr.dims.at(0);++_t){const Ka=Yr[_t],sn=await Ot(Ka);for(const[Ao,nn]of sn){const _n=BigInt(Ao);Ir[_t]+=nn,Mr[_t].push(_n),ba.push([_n]);break}}if(uA&&uA.put(ba),or(Mr).every(_t=>_t))break;VA=this._update_model_kwargs_for_generation({generated_input_ids:ba,outputs:jr,model_inputs:VA,is_encoder_decoder:ft})}uA&&uA.end();const Na=this.getPastKeyValues(jr,VA.past_key_values,!0),$r=new R.Tensor("int64",Mr.flat(),[Mr.length,Mr[0].length]);if(Ee.return_dict_in_generate)return{sequences:$r,past_key_values:Na,..._r};for(const Yr of Object.values(jr))Yr.location==="gpu-buffer"&&Yr.dispose();return $r}getPastKeyValues(U,Ee,eA=!1){const sA=Object.create(null);for(const uA in U)if(uA.startsWith("present")){const SA=uA.replace("present","past_key_values"),XA=uA.includes("encoder");if(sA[SA]=XA&&Ee?Ee[SA]:U[uA],Ee&&(!XA||eA)){const VA=Ee[SA];VA.location==="gpu-buffer"&&VA.dispose()}}return sA}getAttentions(U){const Ee={};for(const eA of["cross_attentions","encoder_attentions","decoder_attentions"])for(const sA in U)sA.startsWith(eA)&&(eA in Ee||(Ee[eA]=[]),Ee[eA].push(U[sA]));return Ee}addPastKeyValues(U,Ee){if(Ee)Object.assign(U,Ee);else{const eA=this.sessions.decoder_model_merged??this.sessions.model,sA=eA?.config?.kv_cache_dtype??"float32",uA=sA==="float16"?new Uint16Array:[],SA=(U[this.main_input_name]??U.attention_mask)?.dims?.[0]??1,XA=(0,k.getKeyValueShapes)(this.config,{batch_size:SA});for(const VA in XA)U[VA]=new R.Tensor(sA,uA,XA[VA])}}async encode_image({pixel_values:U}){const Ee=(await Ge(this.sessions.vision_encoder,{pixel_values:U})).image_features;return this.config.num_image_tokens||(console.warn(`The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${Ee.dims[1]}).`),this.config.num_image_tokens=Ee.dims[1]),Ee}async encode_text({input_ids:U}){return(await Ge(this.sessions.embed_tokens,{input_ids:U})).inputs_embeds}}class pA{}class EA extends pA{constructor({last_hidden_state:U,hidden_states:Ee=null,attentions:eA=null}){super(),this.last_hidden_state=U,this.hidden_states=Ee,this.attentions=eA}}class FA extends Te{}class YA extends FA{}class J extends FA{async _call(U){return new Fa(await super._call(U))}}class OA extends FA{async _call(U){return new Nt(await super._call(U))}}class ge extends FA{async _call(U){return new Qa(await super._call(U))}}class $ extends FA{async _call(U){return new Ua(await super._call(U))}}class me extends Te{}class Fe extends me{}class qe extends me{async _call(U){return new Fa(await super._call(U))}}class dA extends me{async _call(U){return new Nt(await super._call(U))}}class oA extends me{async _call(U){return new Qa(await super._call(U))}}class vA extends Te{}class QA extends vA{}class TA extends Te{}class Mt extends TA{}class Tt extends TA{async _call(U){return new Fa(await super._call(U))}}class ut extends TA{async _call(U){return new Nt(await super._call(U))}}class Ct extends TA{async _call(U){return new Qa(await super._call(U))}}class $t extends TA{async _call(U){return new Ua(await super._call(U))}}class Qr extends Te{}class tr extends Qr{}class fa extends Qr{async _call(U){return new Fa(await super._call(U))}}class bt extends Qr{async _call(U){return new Nt(await super._call(U))}}class Za extends Qr{async _call(U){return new Qa(await super._call(U))}}class La extends Qr{async _call(U){return new Ua(await super._call(U))}}class wa extends Te{}class ZA extends wa{}class $A extends wa{async _call(U){return new Fa(await super._call(U))}}class PA extends wa{async _call(U){return new Nt(await super._call(U))}}class qt extends wa{async _call(U){return new Qa(await super._call(U))}}class gs extends wa{async _call(U){return new Ua(await super._call(U))}}class Xa extends Te{}class Ss extends Xa{}class ks extends Xa{async _call(U){return new Fa(await super._call(U))}}class xs extends Xa{async _call(U){return new Nt(await super._call(U))}}class Fs extends Xa{async _call(U){return new Qa(await super._call(U))}}class ea extends Xa{async _call(U){return new Ua(await super._call(U))}}class xt extends Te{}class Ma extends xt{}class Tr extends xt{async _call(U){return new Fa(await super._call(U))}}class Rr extends xt{async _call(U){return new Nt(await super._call(U))}}class us extends xt{async _call(U){return new Qa(await super._call(U))}}class Kt extends xt{async _call(U){return new Ua(await super._call(U))}}class qa extends Te{}class ds extends qa{}class Ci extends qa{async _call(U){return new Fa(await super._call(U))}}class $s extends qa{async _call(U){return new Nt(await super._call(U))}}class ei extends qa{async _call(U){return new Qa(await super._call(U))}}class bi extends qa{async _call(U){return new Ua(await super._call(U))}}class Kr extends Te{}class rs extends Kr{}class fs extends Kr{async _call(U){return new Nt(await super._call(U))}}class Ai extends Kr{async _call(U){return new Qa(await super._call(U))}}class Ja extends Kr{async _call(U){return new Ua(await super._call(U))}}class vs extends Kr{async _call(U){return new Fa(await super._call(U))}}class kr extends Te{}class Ns extends kr{}class Os extends kr{async _call(U){return new Fa(await super._call(U))}}class Ii extends kr{async _call(U){return new Nt(await super._call(U))}}class Ls extends kr{async _call(U){return new Qa(await super._call(U))}}class Bs extends Te{}class Ys extends Bs{}class ys extends Bs{async _call(U){return new Fa(await super._call(U))}}class wt extends Bs{async _call(U){return new Nt(await super._call(U))}}class Pt extends Bs{async _call(U){return new Ua(await super._call(U))}}class ka extends Te{}class ti extends ka{}class Es extends ka{async _call(U){return new Fa(await super._call(U))}}class Hs extends ka{async _call(U){return new Nt(await super._call(U))}}class as extends ka{async _call(U){return new Qa(await super._call(U))}}class Rs extends ka{async _call(U){return new Ua(await super._call(U))}}class tA extends Te{}class _ extends tA{}class ve extends tA{async _call(U){return new Fa(await super._call(U))}}class Oe extends tA{async _call(U){return new Nt(await super._call(U))}}class We extends tA{async _call(U){return new Ua(await super._call(U))}}class $e extends Te{}class fA extends $e{}class NA extends $e{async _call(U){return new Nt(await super._call(U))}}class He extends $e{async _call(U){return new Ua(await super._call(U))}}class WA extends $e{async _call(U){return new Fa(await super._call(U))}}class bA extends Te{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]}class Yt extends bA{}class Wt extends bA{}class cr extends Te{}class sr extends cr{}class jt extends cr{}class jA extends Te{}class KA extends jA{}class Jt extends jA{}class Ya extends Te{}class pa extends Ya{}class ir extends Ya{}class rt extends Ya{async _call(U){return new Nt(await super._call(U))}}class dr extends Te{}class gA extends dr{}class JA extends dr{}class ha extends dr{async _call(U){return new Nt(await super._call(U))}}class Nr extends dr{}class Vr extends Te{}class Pr extends Vr{}class Cr extends Vr{}class Ut extends Te{}class xr extends Ut{}class ri extends Ut{}class Ha extends Te{}class Ni extends Ha{}class Ga extends Ha{async _call(U){return new Fa(await super._call(U))}}class Oi extends Ha{async _call(U){return new Nt(await super._call(U))}}class Gt extends Ha{async _call(U){return new Qa(await super._call(U))}}class Aa extends Ha{async _call(U){return new Ua(await super._call(U))}}class Wa extends Te{}class n0 extends Wa{}class o0 extends Wa{async _call(U){return new Fa(await super._call(U))}}class l0 extends Wa{async _call(U){return new Nt(await super._call(U))}}class c0 extends Wa{async _call(U){return new Qa(await super._call(U))}}class ai extends Wa{async _call(U){return new Ua(await super._call(U))}}class Vs extends Te{}class g0 extends Vs{}class Li extends Vs{async _call(U){return new Fa(await super._call(U))}}class Ta extends Vs{async _call(U){return new Nt(await super._call(U))}}class Zr extends Vs{async _call(U){return new Qa(await super._call(U))}}class qA extends Vs{async _call(U){return new Ua(await super._call(U))}}class Da extends Te{}class pn extends Da{}class Yi extends Da{}class hn extends Te{requires_attention_mask=!1;main_input_name="input_features";forward_params=["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"]}class u0 extends hn{}class d0 extends hn{_prepare_generation_config(U,Ee){return super._prepare_generation_config(U,Ee,ne.WhisperGenerationConfig)}_retrieve_init_tokens(U){const Ee=[U.decoder_start_token_id];let eA=U.language;const sA=U.task;if(U.is_multilingual){eA||(console.warn("No language specified - defaulting to English (en)."),eA="en");const uA=`<|${(0,we.whisper_language_to_code)(eA)}|>`;Ee.push(U.lang_to_id[uA]),Ee.push(U.task_to_id[sA??"transcribe"])}else if(eA||sA)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!U.return_timestamps&&U.no_timestamps_token_id&&Ee.at(-1)!==U.no_timestamps_token_id?Ee.push(U.no_timestamps_token_id):U.return_timestamps&&Ee.at(-1)===U.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),Ee.pop()),Ee.filter(uA=>uA!=null)}async generate({inputs:U=null,generation_config:Ee=null,logits_processor:eA=null,stopping_criteria:sA=null,...uA}){Ee=this._prepare_generation_config(Ee,uA);const SA=uA.decoder_input_ids??this._retrieve_init_tokens(Ee);if(Ee.return_timestamps&&(eA??=new F.LogitsProcessorList,eA.push(new F.WhisperTimeStampLogitsProcessor(Ee,SA))),Ee.begin_suppress_tokens&&(eA??=new F.LogitsProcessorList,eA.push(new F.SuppressTokensAtBeginLogitsProcessor(Ee.begin_suppress_tokens,SA.length))),Ee.return_token_timestamps){if(!Ee.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");Ee.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),Ee.output_attentions=!0,Ee.return_dict_in_generate=!0}const XA=await super.generate({inputs:U,generation_config:Ee,logits_processor:eA,decoder_input_ids:SA,...uA});return Ee.return_token_timestamps&&(XA.token_timestamps=this._extract_token_timestamps(XA,Ee.alignment_heads,Ee.num_frames)),XA}_extract_token_timestamps(U,Ee,eA=null,sA=.02){if(!U.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");eA==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let uA=this.config.median_filter_width;uA===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),uA=7);const SA=U.cross_attentions,XA=Array.from({length:this.config.decoder_layers},(vt,Ot)=>(0,R.cat)(SA.map(Ir=>Ir[Ot]),2)),VA=(0,R.stack)(Ee.map(([vt,Ot])=>{if(vt>=XA.length)throw new Error(`Layer index ${vt} is out of bounds for cross attentions (length ${XA.length}).`);return eA?XA[vt].slice(null,Ot,null,[0,eA]):XA[vt].slice(null,Ot)})).transpose(1,0,2,3),[_A,ft]=(0,R.std_mean)(VA,-2,0,!0),gt=VA.clone();for(let vt=0;vt<gt.dims[0];++vt){const Ot=gt[vt];for(let Ir=0;Ir<Ot.dims[0];++Ir){const Mr=Ot[Ir],jr=_A[vt][Ir][0].data,_r=ft[vt][Ir][0].data;for(let Na=0;Na<Mr.dims[0];++Na){let $r=Mr[Na].data;for(let Yr=0;Yr<$r.length;++Yr)$r[Yr]=($r[Yr]-_r[Yr])/jr[Yr];$r.set((0,be.medianFilter)($r,uA))}}}const zt=[(0,R.mean)(gt,1)],Qt=U.sequences.dims,or=new R.Tensor("float32",new Float32Array(Qt[0]*Qt[1]),Qt);for(let vt=0;vt<Qt[0];++vt){const Ot=zt[vt].neg().squeeze_(0),[Ir,Mr]=(0,be.dynamic_time_warping)(Ot.tolist()),jr=Array.from({length:Ir.length-1},($r,Yr)=>Ir[Yr+1]-Ir[Yr]),_r=(0,j.mergeArrays)([1],jr).map($r=>!!$r),Na=[];for(let $r=0;$r<_r.length;++$r)_r[$r]&&Na.push(Mr[$r]*sA);or[vt].data.set(Na,1)}return or}}class mn extends Te{requires_attention_mask=!1;main_input_name="input_values";forward_params=["input_values","decoder_input_ids","past_key_values"]}class K0 extends mn{}class Pa extends mn{}class rr extends Te{main_input_name="pixel_values";forward_params=["pixel_values","decoder_input_ids","encoder_hidden_states","past_key_values"]}class wi extends Te{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class ki extends wi{_merge_input_ids_with_image_features({inputs_embeds:U,image_features:Ee,input_ids:eA,attention_mask:sA}){const uA=this.config.image_token_index,SA=eA.tolist().map(gt=>gt.findIndex(zt=>zt==uA)),XA=SA.every(gt=>gt===-1),VA=SA.every(gt=>gt!==-1);if(!XA&&!VA)throw new Error("Every input should contain either 0 or 1 image token.");if(XA)return{inputs_embeds:U,attention_mask:sA};const _A=[],ft=[];for(let gt=0;gt<SA.length;++gt){const zt=SA[gt],Qt=U[gt],or=Ee[gt],vt=sA[gt];_A.push((0,R.cat)([Qt.slice([0,zt]),or,Qt.slice([zt+1,Qt.dims[0]])],0)),ft.push((0,R.cat)([vt.slice([0,zt]),(0,R.ones)([or.dims[0]]),vt.slice([zt+1,vt.dims[0]])],0))}return{inputs_embeds:(0,R.stack)(_A,0),attention_mask:(0,R.stack)(ft,0)}}}class xa extends ki{}class Ws extends ki{}class ss extends Te{forward_params=["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"];main_input_name="inputs_embeds"}class Cn extends ss{_merge_input_ids_with_image_features({inputs_embeds:U,image_features:Ee,input_ids:eA,attention_mask:sA}){return{inputs_embeds:(0,R.cat)([Ee,U],1),attention_mask:(0,R.cat)([(0,R.ones)(Ee.dims.slice(0,2)),sA],1)}}async _prepare_inputs_embeds({input_ids:U,pixel_values:Ee,inputs_embeds:eA,attention_mask:sA}){if(!U&&!Ee)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let uA,SA;return U&&(uA=await this.encode_text({input_ids:U})),Ee&&(SA=await this.encode_image({pixel_values:Ee})),uA&&SA?{inputs_embeds:eA,attention_mask:sA}=this._merge_input_ids_with_image_features({inputs_embeds:uA,image_features:SA,input_ids:U,attention_mask:sA}):eA=uA||SA,{inputs_embeds:eA,attention_mask:sA}}async forward({input_ids:U,pixel_values:Ee,attention_mask:eA,decoder_input_ids:sA,decoder_attention_mask:uA,encoder_outputs:SA,past_key_values:XA,inputs_embeds:VA,decoder_inputs_embeds:_A}){if(VA||({inputs_embeds:VA,attention_mask:eA}=await this._prepare_inputs_embeds({input_ids:U,pixel_values:Ee,inputs_embeds:VA,attention_mask:eA})),!SA){let{last_hidden_state:gt}=await kA(this,{inputs_embeds:VA,attention_mask:eA});SA=gt}if(!_A){if(!sA)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");_A=await this.encode_text({input_ids:sA})}return await aA(this,{inputs_embeds:_A,attention_mask:uA,encoder_attention_mask:eA,encoder_hidden_states:SA,past_key_values:XA},!0)}}class bn extends Te{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class js extends bn{_merge_input_ids_with_image_features(U){const Ee=U.image_features.dims.at(-1),eA=U.image_features.view(-1,Ee);return iA({image_token_id:this.config.image_token_index,...U,image_features:eA})}}class In extends Te{forward_params=["input_ids","attention_mask","pixel_values","pixel_attention_mask","position_ids","past_key_values"]}class wn extends In{async encode_image({pixel_values:U,pixel_attention_mask:Ee}){return(await Ge(this.sessions.vision_encoder,{pixel_values:U,pixel_attention_mask:Ee})).image_features}_merge_input_ids_with_image_features(U){const Ee=U.image_features.dims.at(-1),eA=U.image_features.view(-1,Ee);return iA({image_token_id:this.config.image_token_id,...U,image_features:eA})}}class kn extends Te{forward_params=["input_ids","inputs_embeds","attention_mask","position_ids","pixel_values","image_sizes","past_key_values"]}class DA extends kn{async forward({input_ids:U=null,attention_mask:Ee=null,pixel_values:eA=null,image_sizes:sA=null,position_ids:uA=null,inputs_embeds:SA=null,past_key_values:XA=null,generation_config:VA=null,logits_processor:_A=null,...ft}){if(!SA){let gt;if(eA&&U.dims[1]!==1){if(!sA)throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");({image_features:gt}=await Ge(this.sessions.vision_encoder,{pixel_values:eA,image_sizes:sA}))}else{const zt=this.config.normalized_config.hidden_size;gt=new R.Tensor("float32",[],[0,zt])}({inputs_embeds:SA}=await Ge(this.sessions.prepare_inputs_embeds,{input_ids:U,image_features:gt}))}return await aA(this,{inputs_embeds:SA,past_key_values:XA,attention_mask:Ee,position_ids:uA,generation_config:VA,logits_processor:_A},!1)}}class Us extends Te{}class RA extends Us{}class xn extends Us{static async from_pretrained(U,Ee={}){return super.from_pretrained(U,{...Ee,model_file_name:Ee.model_file_name??"text_model"})}}class Hi extends Us{static async from_pretrained(U,Ee={}){return super.from_pretrained(U,{...Ee,model_file_name:Ee.model_file_name??"text_model"})}}class va extends Us{static async from_pretrained(U,Ee={}){return super.from_pretrained(U,{...Ee,model_file_name:Ee.model_file_name??"vision_model"})}}class za extends Us{static async from_pretrained(U,Ee={}){return super.from_pretrained(U,{...Ee,model_file_name:Ee.model_file_name??"vision_model"})}}class si extends Te{}class xi extends si{}class vn extends si{static async from_pretrained(U,Ee={}){return super.from_pretrained(U,{...Ee,model_file_name:Ee.model_file_name??"text_model"})}}class zr extends Us{static async from_pretrained(U,Ee={}){return super.from_pretrained(U,{...Ee,model_file_name:Ee.model_file_name??"vision_model"})}}class f0 extends Te{}class p0 extends f0{}class Ms extends Te{}class ii extends Ms{async forward(U){const Ee=!U.input_ids,eA=!U.pixel_values;if(Ee&&eA)throw new Error("Either `input_ids` or `pixel_values` should be provided.");if(Ee&&(U.input_ids=(0,R.ones)([U.pixel_values.dims[0],1])),eA){const{image_size:_A}=this.config.vision_config;U.pixel_values=(0,R.full)([0,3,_A,_A],0)}const{text_embeddings:sA,image_embeddings:uA,l2norm_text_embeddings:SA,l2norm_image_embeddings:XA}=await super.forward(U),VA={};return Ee||(VA.text_embeddings=sA,VA.l2norm_text_embeddings=SA),eA||(VA.image_embeddings=uA,VA.l2norm_image_embeddings=XA),VA}}class h0 extends Ms{static async from_pretrained(U,Ee={}){return super.from_pretrained(U,{...Ee,model_file_name:Ee.model_file_name??"text_model"})}}class Ri extends Ms{static async from_pretrained(U,Ee={}){return super.from_pretrained(U,{...Ee,model_file_name:Ee.model_file_name??"vision_model"})}}class ni extends Te{}class HA extends ni{}class _a extends ni{}class Bn extends Te{}class vi extends Bn{}class ps extends Bn{}class yn extends Te{}class m0 extends yn{}class C0 extends yn{}class Vi extends Te{}class b0 extends Vi{}class I0 extends Vi{}class Or extends Te{}class w0 extends Or{}class k0 extends Or{}class It extends Te{}class Ht extends It{}class En extends It{}class is extends Te{}class x0 extends is{}class ta extends is{}class hs extends Te{}class ra extends hs{}class ms extends hs{}class Wi extends Te{}class Mn extends Wi{}class v0 extends Wi{}class ji extends Te{}class Br extends ji{}class Bi extends ji{}class Gn extends Te{}class aa extends Gn{}class oi extends Gn{}class Cs extends Te{}class Dn extends Cs{}class Qn extends Cs{}class Tn extends Te{}class Ui extends Tn{}class ns extends Tn{}class Ki extends Te{}class B0 extends Ki{}class Pn extends Ki{}class zn extends Te{}class bs extends zn{}class Zi extends zn{}class Lr extends Te{}class Sn extends Lr{}class Xi extends Lr{}class yi extends Te{}class Sa extends yi{}class Ei extends yi{}class Fn extends Te{}class $a extends Fn{}class Nn extends Fn{}class qi extends Te{}class On extends qi{}class li extends qi{}class Ln extends Te{}class y0 extends Ln{}class E0 extends Ln{}class sa extends Te{}class Mi extends sa{}class ma extends sa{}class Yn extends Te{forward_params=["input_ids","attention_mask","position_ids","past_key_values","pixel_values","image_grid_thw"]}class Ji extends Yn{get_rope_index(U,Ee,eA,sA){const{vision_config:uA,image_token_id:SA,video_token_id:XA,vision_start_token_id:VA}=this.config,_A=uA.spatial_merge_size??2,ft=[];if(Ee||eA){let gt=U.tolist();sA||(sA=(0,R.ones_like)(U));const zt=sA.tolist(),Qt=Array.from({length:3},Mr=>Array.from({length:U.dims[0]},jr=>Array.from({length:U.dims[1]},_r=>1))),or=Ee?Ee.tolist():[],vt=eA?eA.tolist():[];let Ot=0,Ir=0;for(let Mr=0;Mr<gt.length;++Mr){const jr=gt[Mr].filter((Gr,la)=>zt[Mr][la]==1),_r=jr.reduce((Gr,la,ts)=>(la==VA&&Gr.push(ts),Gr),[]),Na=_r.map(Gr=>jr[Gr+1]),$r=Na.filter(Gr=>Gr==SA).length,Yr=Na.filter(Gr=>Gr==XA).length;let ba=[],_t=0,Ka=$r,sn=Yr;for(let Gr=0;Gr<Na.length;++Gr){const la=jr.findIndex((ws,Va)=>Va>_t&&ws==SA),ts=jr.findIndex((ws,Va)=>Va>_t&&ws==XA),on=Ka>0&&la!==-1?la:jr.length+1,Si=sn>0&&ts!==-1?ts:jr.length+1;let L0,to,ro,ao;on<Si?([to,ro,ao]=or[Ot],++Ot,--Ka,L0=on):([to,ro,ao]=vt[Ir],++Ir,--sn,L0=Si);const[C1,so,Js]=[Number(to),Math.floor(Number(ro)/_A),Math.floor(Number(ao)/_A)],Is=L0-_t,$n=ba.length>0?(0,be.max)(ba.at(-1))[0]+1:0;ba.push(Array.from({length:3*Is},(ws,Va)=>$n+Va%Is));const e0=Is+$n,ln=C1*so*Js,_o=Array.from({length:ln},(ws,Va)=>e0+Math.floor(Va/(so*Js))),b1=Array.from({length:ln},(ws,Va)=>e0+Math.floor(Va/Js)%so),$o=Array.from({length:ln},(ws,Va)=>e0+Va%Js);ba.push([_o,b1,$o].flat()),_t=L0+ln}if(_t<jr.length){const Gr=ba.length>0?(0,be.max)(ba.at(-1))[0]+1:0,la=jr.length-_t;ba.push(Array.from({length:3*la},(ts,on)=>Gr+on%la))}const Ao=ba.reduce((Gr,la)=>Gr+la.length,0),nn=new Array(Ao);let _n=0;for(let Gr=0;Gr<3;++Gr)for(let la=0;la<ba.length;++la){const ts=ba[la],on=ts.length/3;for(let Si=Gr*on;Si<(Gr+1)*on;++Si)nn[_n++]=ts[Si]}let h1=0;const m1=zt[Mr];for(let Gr=0;Gr<m1.length;++Gr)if(m1[Gr]==1){for(let la=0;la<3;++la)Qt[la][Mr][Gr]=nn[la*Ao/3+h1];++h1}const U1=(0,be.max)(nn)[0];ft.push(U1+1-gt[Mr].length)}return[new R.Tensor("int64",Qt.flat(1/0),[3,U.dims[0],U.dims[1]]),new R.Tensor("int64",ft,[ft.length,1])]}if(sA){const{data:gt,dims:zt}=nA(sA),Qt=BigInt64Array.from({length:3*gt.length},(vt,Ot)=>gt[Ot%gt.length]),or=Array.from({length:zt[0]},(vt,Ot)=>(0,be.max)(gt.subarray(zt[1]*Ot,zt[1]*(Ot+1)))[0]+1n+BigInt(zt[1]));return[new R.Tensor("int64",Qt,[3,...zt]),new R.Tensor("int64",or,[or.length,1])]}{const[gt,zt]=U.dims,Qt=BigInt64Array.from({length:3*gt*zt},(or,vt)=>BigInt(Math.floor(vt%zt/gt)));return[new R.Tensor("int64",Qt,[3,...U.dims]),(0,R.zeros)([gt,1])]}}async encode_image({pixel_values:U,image_grid_thw:Ee}){return(await Ge(this.sessions.vision_encoder,{pixel_values:U,grid_thw:Ee})).image_features}_merge_input_ids_with_image_features(U){return iA({image_token_id:this.config.image_token_id,...U})}prepare_inputs_for_generation(U,Ee,eA){if(Ee.attention_mask&&!Ee.position_ids)if(Ee.past_key_values){Ee.pixel_values=null;const sA=BigInt(Object.values(Ee.past_key_values)[0].dims.at(-2)),uA=Ee.rope_deltas.map(SA=>sA+SA);Ee.position_ids=(0,R.stack)([uA,uA,uA],0)}else[Ee.position_ids,Ee.rope_deltas]=this.get_rope_index(Ee.input_ids,Ee.image_grid_thw,Ee.video_grid_thw,Ee.attention_mask);return Ee}}class ja extends Te{}class fr extends ja{}class Hn extends ja{}class Gs extends Te{}class ci extends Gs{}class M0 extends Gs{}class Rn extends Te{}class Vn extends Rn{}class G0 extends Rn{}class Ds extends Te{}class es extends Ds{}class Wn extends Ds{}class Gi extends Te{}class Xr extends Gi{}class ar extends Gi{}class gi extends Te{}class D0 extends gi{}class Qs extends gi{async _call(U){return new Nt(await super._call(U))}}class Ts extends Te{}class Ks extends Ts{}class jn extends Ts{async _call(U){return new Nt(await super._call(U))}}class Ca extends Te{}class Q0 extends Ca{}class Un extends Te{}class ui extends Un{}class Di extends Un{async _call(U){return new Nt(await super._call(U))}}class ia extends Te{}class Kn extends ia{}class _i extends Te{}class Zs extends _i{}class T0 extends _i{async _call(U){return new Nt(await super._call(U))}}class di extends Te{}class ct extends di{}class A extends Te{}class t extends A{}class r extends A{async _call(U){return new Nt(await super._call(U))}}class a extends Te{}class s extends a{async _call(U){return new W1(await super._call(U))}}class i extends Te{}class o extends i{}class c extends i{async _call(U){return new Nt(await super._call(U))}}class f extends Te{}class m extends f{}class p extends f{async _call(U){return new Nt(await super._call(U))}}class w extends Te{}class E extends w{}class P extends w{}class Y extends Te{}class Z extends Y{}class ee extends Y{}class ce extends Te{}class he extends ce{}class Be extends ce{async _call(U){return new Nt(await super._call(U))}}class Qe extends Te{}class Ve extends Qe{}class Ke extends Qe{async _call(U){return new cA(await super._call(U))}}class rA extends Qe{async _call(U){return new MA(await super._call(U))}}class cA extends pA{constructor({logits:U,pred_boxes:Ee}){super(),this.logits=U,this.pred_boxes=Ee}}class MA extends pA{constructor({logits:U,pred_boxes:Ee,pred_masks:eA}){super(),this.logits=U,this.pred_boxes=Ee,this.pred_masks=eA}}class zA extends Te{}class et extends zA{}class at extends zA{async _call(U){return new dt(await super._call(U))}}class dt extends pA{constructor({logits:U,pred_boxes:Ee}){super(),this.logits=U,this.pred_boxes=Ee}}class St extends Te{}class Zt extends St{}class er extends St{async _call(U){return new pr(await super._call(U))}}class pr extends cA{}class hr extends Te{}class yr extends hr{}class Er extends hr{async _call(U){return new Nt(await super._call(U))}}class Sr extends Te{}class Wr extends Sr{}class na extends Sr{async _call(U){return new Nt(await super._call(U))}}class qr extends Te{}class oa extends qr{}class Ba extends qr{async _call(U){return new Nt(await super._call(U))}}class As extends Te{}class os extends As{}class ls extends As{async _call(U){return new Nt(await super._call(U))}}class Ps extends Te{}class Qi extends Ps{}class fi extends Ps{}class pi extends Te{}class Ti extends pi{}class Zn extends pi{}class P0 extends Te{}class z0 extends P0{}class $i extends Te{}class d2 extends $i{}class f2 extends $i{}class p2 extends $i{}class h2 extends Te{}class m2 extends h2{}class po extends Te{}class C2 extends po{}class b2 extends po{}class ho extends Te{}class I2 extends ho{}class w2 extends ho{}class k2 extends Te{}class x2 extends k2{}class mo extends Te{}class v2 extends mo{}class B2 extends mo{async _call(U){return new Nt(await super._call(U))}}class Co extends Te{}class y2 extends Co{}class E2 extends Co{async _call(U){return new Nt(await super._call(U))}}class bo extends Te{}class M2 extends bo{}class Xs extends bo{async _call(U){return new Nt(await super._call(U))}}class qs extends Te{}class en extends qs{}class An extends qs{async _call(U){return new Nt(await super._call(U))}}class G2 extends Te{}class D2 extends G2{}class Io extends Te{}class Q2 extends Io{}class T2 extends Io{async _call(U){return new P2(await super._call(U))}}class P2 extends pA{constructor({logits:U,pred_boxes:Ee}){super(),this.logits=U,this.pred_boxes=Ee}}class z2 extends Te{}class S2 extends z2{async get_image_embeddings({pixel_values:U}){return await kA(this,{pixel_values:U})}async forward(U){if(U.image_embeddings&&U.image_positional_embeddings||(U={...U,...await this.get_image_embeddings(U)}),!U.input_labels&&U.input_points){const eA=U.input_points.dims.slice(0,-1),sA=eA.reduce((uA,SA)=>uA*SA,1);U.input_labels=new R.Tensor("int64",new BigInt64Array(sA).fill(1n),eA)}const Ee={image_embeddings:U.image_embeddings,image_positional_embeddings:U.image_positional_embeddings};return U.input_points&&(Ee.input_points=U.input_points),U.input_labels&&(Ee.input_labels=U.input_labels),U.input_boxes&&(Ee.input_boxes=U.input_boxes),await Ge(this.sessions.prompt_encoder_mask_decoder,Ee)}async _call(U){return new F2(await super._call(U))}}class F2 extends pA{constructor({iou_scores:U,pred_masks:Ee}){super(),this.iou_scores=U,this.pred_masks=Ee}}class Ra extends Te{}class N2 extends Ra{}class O2 extends Ra{}class Z0 extends Te{}class L2 extends Z0{}class S0 extends Z0{}class Pi extends Te{}class Y2 extends Pi{}class H2 extends Pi{async _call(U){return new Jn(await super._call(U))}}class R2 extends Pi{async _call(U){return new Nt(await super._call(U))}}class V2 extends Pi{async _call(U){return new Qa(await super._call(U))}}class X0 extends Te{}class W2 extends X0{}class j2 extends X0{async _call(U){return new Qa(await super._call(U))}}class U2 extends Te{}class K2 extends U2{}class F0 extends Te{}class Z2 extends F0{}class wo extends F0{async _call(U){return new Jn(await super._call(U))}}class X2 extends F0{async _call(U){return new Nt(await super._call(U))}}class N0 extends Te{}class q2 extends N0{}class J2 extends N0{async _call(U){return new Jn(await super._call(U))}}class _2 extends N0{async _call(U){return new Nt(await super._call(U))}}class $2 extends N0{async _call(U){return new Qa(await super._call(U))}}class q0 extends Te{}class el extends q0{}class Al extends q0{async _call(U){return new Jn(await super._call(U))}}class tl extends q0{async _call(U){return new Nt(await super._call(U))}}class D1 extends Te{}class rl extends Pi{}class al extends Pi{async _call(U){return new Jn(await super._call(U))}}class sl extends Pi{async _call(U){return new Nt(await super._call(U))}}class Xn extends Te{}class il extends Xn{}class nl extends Xn{async _call(U){return new Jn(await super._call(U))}}class ol extends Xn{async _call(U){return new Nt(await super._call(U))}}class ll extends Xn{async _call(U){return new V1(await super._call(U))}}class cl extends Xn{async _call(U){return new Qa(await super._call(U))}}class gl extends Te{}class ul extends gl{}class tn extends Te{}class dl extends tn{}class ko extends tn{}class xo extends tn{async generate_speech(U,Ee,{threshold:eA=.5,minlenratio:sA=0,maxlenratio:uA=20,vocoder:SA=null}={}){const XA={input_ids:U},{encoder_outputs:VA,encoder_attention_mask:_A}=await kA(this,XA),ft=VA.dims[1]/this.config.reduction_factor,gt=Math.floor(ft*uA),zt=Math.floor(ft*sA),Qt=this.config.num_mel_bins;let or=[],vt=null,Ot=null,Ir=0;for(;;){++Ir;const _r=Ue(!!Ot);let Na;Na=Ot?Ot.output_sequence_out:new R.Tensor("float32",new Float32Array(Qt),[1,1,Qt]);let $r={use_cache_branch:_r,output_sequence:Na,encoder_attention_mask:_A,speaker_embeddings:Ee,encoder_hidden_states:VA};this.addPastKeyValues($r,vt),Ot=await Ge(this.sessions.decoder_model_merged,$r),vt=this.getPastKeyValues(Ot,vt);const{prob:Yr,spectrum:ba}=Ot;if(or.push(ba),Ir>=zt&&(Array.from(Yr.data).filter(_t=>_t>=eA).length>0||Ir>=gt))break}const Mr=(0,R.cat)(or),{waveform:jr}=await Ge(SA.sessions.model,{spectrogram:Mr});return{spectrogram:Mr,waveform:jr}}}class vo extends Te{main_input_name="spectrogram"}class fl extends Te{}class pl extends fl{}class J0 extends Te{}class Bo extends J0{}class hl extends J0{}class yo extends Te{}class Eo extends yo{}class ml extends yo{}class Mo extends Te{}class Go extends Mo{}class Cl extends Mo{}class _0 extends Te{}class bl extends _0{}class Il extends _0{static async from_pretrained(U,Ee={}){return super.from_pretrained(U,{...Ee,model_file_name:Ee.model_file_name??"text_model"})}}class wl extends _0{static async from_pretrained(U,Ee={}){return super.from_pretrained(U,{...Ee,model_file_name:Ee.model_file_name??"audio_model"})}}class kl extends Te{}class Do extends kl{async _call(U){return new j1(await super._call(U))}}class $0 extends Te{}class Q1 extends $0{}class xl extends $0{}class vl extends $0{}class Qo extends Te{}class Bl extends Qo{}class yl extends Qo{}class To extends Te{}class El extends To{}class Ml extends To{async _call(U){return new Nt(await super._call(U))}}class Po extends Te{}class Gl extends Po{}class T1 extends Po{}class zo extends Te{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];_apply_and_filter_by_delay_pattern_mask(U){const[Ee,eA]=U.dims,sA=this.config.decoder.num_codebooks,uA=eA-sA;let SA=0;for(let _A=0;_A<U.size;++_A){if(U.data[_A]===this.config.decoder.pad_token_id)continue;const ft=_A%eA-Math.floor(_A/eA)%sA;ft>0&&ft<=uA&&(U.data[SA++]=U.data[_A])}const XA=Math.floor(Ee/sA),VA=SA/(XA*sA);return new R.Tensor(U.type,U.data.slice(0,SA),[XA,sA,VA])}prepare_inputs_for_generation(U,Ee,eA){let sA=structuredClone(U);for(let uA=0;uA<sA.length;++uA)for(let SA=0;SA<sA[uA].length;++SA)uA%this.config.decoder.num_codebooks>=SA&&(sA[uA][SA]=BigInt(this.config.decoder.pad_token_id));return eA.guidance_scale!==null&&eA.guidance_scale>1&&(sA=sA.concat(sA)),super.prepare_inputs_for_generation(sA,Ee,eA)}async generate(U){const Ee=await super.generate(U),eA=this._apply_and_filter_by_delay_pattern_mask(Ee).unsqueeze_(0),{audio_values:sA}=await Ge(this.sessions.encodec_decode,{audio_codes:eA});return sA}}class So extends Te{}class Dl extends So{}class Ql extends So{async _call(U){return new Nt(await super._call(U))}}class Fo extends Te{}class Tl extends Fo{}class Pl extends Fo{async _call(U){return new Nt(await super._call(U))}}class eo extends Te{}class zl extends eo{}class Sl extends eo{async _call(U){return new Nt(await super._call(U))}}class No extends Te{}class Fl extends No{}class Nl extends No{async _call(U){return new Nt(await super._call(U))}}class Ol extends Te{}class Ll extends Ol{}class Yl extends Te{}class Hl extends Yl{forward_params=["input_ids","pixel_values","images_seq_mask","images_emb_mask","attention_mask","position_ids","past_key_values"];constructor(...U){super(...U),this._generation_mode="text"}async forward(U){const Ee=this._generation_mode??"text";let eA;if(Ee!=="text"&&U.past_key_values){const VA=this.sessions.gen_img_embeds,_A=(0,j.pick)({image_ids:U.input_ids},VA.inputNames);eA=await Ge(VA,_A)}else{const VA=this.sessions.prepare_inputs_embeds,_A=(0,j.pick)(U,VA.inputNames);eA=await Ge(VA,_A)}const sA={...U,...eA},uA=await aA(this,sA),SA=this.sessions[Ee==="text"?"lm_head":"gen_head"];if(!SA)throw new Error(`Unable to find "${SA}" generation head`);const XA=await Ge(SA,(0,j.pick)(uA,SA.inputNames));return{...eA,...uA,...XA}}async generate(U){return this._generation_mode="text",super.generate(U)}async generate_images(U){this._generation_mode="image";const Ee=(U.inputs??U[this.main_input_name]).dims[1],eA=(await super.generate(U)).slice(null,[Ee,null]),sA=this.sessions.image_decode,{decoded_image:uA}=await Ge(sA,{generated_tokens:eA}),SA=uA.add_(1).mul_(127.5).clamp_(0,255).to("uint8"),XA=[];for(const VA of SA){const _A=re.RawImage.fromTensor(VA);XA.push(_A)}return XA}}class Rl extends pA{constructor({char_logits:U,bpe_logits:Ee,wp_logits:eA}){super(),this.char_logits=U,this.bpe_logits=Ee,this.wp_logits=eA}get logits(){return[this.char_logits,this.bpe_logits,this.wp_logits]}}class Vl extends Te{}class Wl extends Vl{async _call(U){return new Rl(await super._call(U))}}class Oo extends Te{}class jl extends Oo{}class O0 extends Oo{}class Lo extends Te{}class Yo extends Lo{}class Ul extends Lo{}class br{static MODEL_CLASS_MAPPINGS=null;static BASE_IF_FAIL=!1;static async from_pretrained(U,{progress_callback:Ee=null,config:eA=null,cache_dir:sA=null,local_files_only:uA=!1,revision:SA="main",model_file_name:XA=null,subfolder:VA="onnx",device:_A=null,dtype:ft=null,use_external_data_format:gt=null,session_options:zt={}}={}){const Qt={progress_callback:Ee,config:eA,cache_dir:sA,local_files_only:uA,revision:SA,model_file_name:XA,subfolder:VA,device:_A,dtype:ft,use_external_data_format:gt,session_options:zt};if(Qt.config=await k.AutoConfig.from_pretrained(U,Qt),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);for(const or of this.MODEL_CLASS_MAPPINGS){const vt=or.get(Qt.config.model_type);if(vt)return await vt[1].from_pretrained(U,Qt)}if(this.BASE_IF_FAIL)return console.warn(`Unknown model class "${Qt.config.model_type}", attempting to construct from base class.`),await Te.from_pretrained(U,Qt);throw Error(`Unsupported model type: ${Qt.config.model_type}`)}}const P1=new Map([["bert",["BertModel",YA]],["modernbert",["ModernBertModel",Fe]],["nomic_bert",["NomicBertModel",QA]],["roformer",["RoFormerModel",Mt]],["electra",["ElectraModel",ZA]],["esm",["EsmModel",Ns]],["convbert",["ConvBertModel",tr]],["camembert",["CamembertModel",Ss]],["deberta",["DebertaModel",Ma]],["deberta-v2",["DebertaV2Model",ds]],["mpnet",["MPNetModel",ti]],["albert",["AlbertModel",fA]],["distilbert",["DistilBertModel",rs]],["roberta",["RobertaModel",Ni]],["xlm",["XLMModel",n0]],["xlm-roberta",["XLMRobertaModel",g0]],["clap",["ClapModel",bl]],["clip",["CLIPModel",RA]],["clipseg",["CLIPSegModel",HA]],["chinese_clip",["ChineseCLIPModel",p0]],["siglip",["SiglipModel",xi]],["jina_clip",["JinaCLIPModel",ii]],["mobilebert",["MobileBertModel",Ys]],["squeezebert",["SqueezeBertModel",_]],["wav2vec2",["Wav2Vec2Model",Y2]],["wav2vec2-bert",["Wav2Vec2BertModel",el]],["unispeech",["UniSpeechModel",Z2]],["unispeech-sat",["UniSpeechSatModel",q2]],["hubert",["HubertModel",rl]],["wavlm",["WavLMModel",il]],["audio-spectrogram-transformer",["ASTModel",pn]],["vits",["VitsModel",Do]],["pyannote",["PyAnnoteModel",W2]],["wespeaker-resnet",["WeSpeakerResNetModel",K2]],["detr",["DetrModel",Ve]],["rt_detr",["RTDetrModel",et]],["table-transformer",["TableTransformerModel",Zt]],["vit",["ViTModel",D0]],["ijepa",["IJepaModel",Ks]],["pvt",["PvtModel",ui]],["vit_msn",["ViTMSNModel",Zs]],["vit_mae",["ViTMAEModel",Kn]],["groupvit",["GroupViTModel",ct]],["fastvit",["FastViTModel",t]],["mobilevit",["MobileViTModel",o]],["mobilevitv2",["MobileViTV2Model",m]],["owlvit",["OwlViTModel",E]],["owlv2",["Owlv2Model",Z]],["beit",["BeitModel",he]],["deit",["DeiTModel",yr]],["hiera",["HieraModel",Wr]],["convnext",["ConvNextModel",v2]],["convnextv2",["ConvNextV2Model",y2]],["dinov2",["Dinov2Model",M2]],["dinov2_with_registers",["Dinov2WithRegistersModel",en]],["resnet",["ResNetModel",oa]],["swin",["SwinModel",os]],["swin2sr",["Swin2SRModel",Qi]],["donut-swin",["DonutSwinModel",x2]],["yolos",["YolosModel",Q2]],["dpt",["DPTModel",Ti]],["glpn",["GLPNModel",I2]],["hifigan",["SpeechT5HifiGan",vo]],["efficientnet",["EfficientNetModel",El]],["decision_transformer",["DecisionTransformerModel",Ll]],["patchtst",["PatchTSTForPrediction",jl]],["patchtsmixer",["PatchTSMixerForPrediction",Yo]],["mobilenet_v1",["MobileNetV1Model",Dl]],["mobilenet_v2",["MobileNetV2Model",Tl]],["mobilenet_v3",["MobileNetV3Model",zl]],["mobilenet_v4",["MobileNetV4Model",Fl]],["maskformer",["MaskFormerModel",C2]],["mgp-str",["MgpstrForSceneTextRecognition",Wl]],["style_text_to_speech_2",["StyleTextToSpeech2Model",ul]]]),z1=new Map([["t5",["T5Model",Yt]],["longt5",["LongT5Model",sr]],["mt5",["MT5Model",KA]],["bart",["BartModel",pa]],["mbart",["MBartModel",gA]],["marian",["MarianModel",N2]],["whisper",["WhisperModel",u0]],["m2m_100",["M2M100Model",L2]],["blenderbot",["BlenderbotModel",Pr]],["blenderbot-small",["BlenderbotSmallModel",xr]]]),S1=new Map([["bloom",["BloomModel",Vn]],["jais",["JAISModel",m0]],["gpt2",["GPT2Model",vi]],["gptj",["GPTJModel",Ht]],["gpt_bigcode",["GPTBigCodeModel",x0]],["gpt_neo",["GPTNeoModel",b0]],["gpt_neox",["GPTNeoXModel",w0]],["codegen",["CodeGenModel",ra]],["llama",["LlamaModel",Mn]],["exaone",["ExaoneModel",Dn]],["olmo",["OlmoModel",B0]],["olmo2",["Olmo2Model",bs]],["mobilellm",["MobileLLMModel",Ui]],["granite",["GraniteModel",Sn]],["cohere",["CohereModel",Sa]],["gemma",["GemmaModel",$a]],["gemma2",["Gemma2Model",On]],["helium",["HeliumModel",Br]],["glm",["GlmModel",aa]],["openelm",["OpenELMModel",y0]],["qwen2",["Qwen2Model",Mi]],["phi",["PhiModel",fr]],["phi3",["Phi3Model",ci]],["mpt",["MptModel",es]],["opt",["OPTModel",Xr]],["mistral",["MistralModel",Bo]],["starcoder2",["Starcoder2Model",Eo]],["falcon",["FalconModel",Go]],["stablelm",["StableLmModel",Bl]]]),Ho=new Map([["speecht5",["SpeechT5ForSpeechToText",ko]],["whisper",["WhisperForConditionalGeneration",d0]],["moonshine",["MoonshineForConditionalGeneration",Pa]]]),Kl=new Map([["speecht5",["SpeechT5ForTextToSpeech",xo]]]),Zl=new Map([["vits",["VitsModel",Do]],["musicgen",["MusicgenForConditionalGeneration",zo]]]),Ro=new Map([["bert",["BertForSequenceClassification",OA]],["modernbert",["ModernBertForSequenceClassification",dA]],["roformer",["RoFormerForSequenceClassification",ut]],["electra",["ElectraForSequenceClassification",PA]],["esm",["EsmForSequenceClassification",Ii]],["convbert",["ConvBertForSequenceClassification",bt]],["camembert",["CamembertForSequenceClassification",xs]],["deberta",["DebertaForSequenceClassification",Rr]],["deberta-v2",["DebertaV2ForSequenceClassification",$s]],["mpnet",["MPNetForSequenceClassification",Hs]],["albert",["AlbertForSequenceClassification",NA]],["distilbert",["DistilBertForSequenceClassification",fs]],["roberta",["RobertaForSequenceClassification",Oi]],["xlm",["XLMForSequenceClassification",l0]],["xlm-roberta",["XLMRobertaForSequenceClassification",Ta]],["bart",["BartForSequenceClassification",rt]],["mbart",["MBartForSequenceClassification",ha]],["mobilebert",["MobileBertForSequenceClassification",wt]],["squeezebert",["SqueezeBertForSequenceClassification",Oe]]]),Xl=new Map([["bert",["BertForTokenClassification",ge]],["modernbert",["ModernBertForTokenClassification",oA]],["roformer",["RoFormerForTokenClassification",Ct]],["electra",["ElectraForTokenClassification",qt]],["esm",["EsmForTokenClassification",Ls]],["convbert",["ConvBertForTokenClassification",Za]],["camembert",["CamembertForTokenClassification",Fs]],["deberta",["DebertaForTokenClassification",us]],["deberta-v2",["DebertaV2ForTokenClassification",ei]],["mpnet",["MPNetForTokenClassification",as]],["distilbert",["DistilBertForTokenClassification",Ai]],["roberta",["RobertaForTokenClassification",Gt]],["xlm",["XLMForTokenClassification",c0]],["xlm-roberta",["XLMRobertaForTokenClassification",Zr]]]),Vo=new Map([["t5",["T5ForConditionalGeneration",Wt]],["longt5",["LongT5ForConditionalGeneration",jt]],["mt5",["MT5ForConditionalGeneration",Jt]],["bart",["BartForConditionalGeneration",ir]],["mbart",["MBartForConditionalGeneration",JA]],["marian",["MarianMTModel",O2]],["m2m_100",["M2M100ForConditionalGeneration",S0]],["blenderbot",["BlenderbotForConditionalGeneration",Cr]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",ri]]]),Wo=new Map([["bloom",["BloomForCausalLM",G0]],["gpt2",["GPT2LMHeadModel",ps]],["jais",["JAISLMHeadModel",C0]],["gptj",["GPTJForCausalLM",En]],["gpt_bigcode",["GPTBigCodeForCausalLM",ta]],["gpt_neo",["GPTNeoForCausalLM",I0]],["gpt_neox",["GPTNeoXForCausalLM",k0]],["codegen",["CodeGenForCausalLM",ms]],["llama",["LlamaForCausalLM",v0]],["exaone",["ExaoneForCausalLM",Qn]],["olmo",["OlmoForCausalLM",Pn]],["olmo2",["Olmo2ForCausalLM",Zi]],["mobilellm",["MobileLLMForCausalLM",ns]],["granite",["GraniteForCausalLM",Xi]],["cohere",["CohereForCausalLM",Ei]],["gemma",["GemmaForCausalLM",Nn]],["gemma2",["Gemma2ForCausalLM",li]],["helium",["HeliumForCausalLM",Bi]],["glm",["GlmForCausalLM",oi]],["openelm",["OpenELMForCausalLM",E0]],["qwen2",["Qwen2ForCausalLM",ma]],["phi",["PhiForCausalLM",Hn]],["phi3",["Phi3ForCausalLM",M0]],["mpt",["MptForCausalLM",Wn]],["opt",["OPTForCausalLM",ar]],["mbart",["MBartForCausalLM",Nr]],["mistral",["MistralForCausalLM",hl]],["starcoder2",["Starcoder2ForCausalLM",ml]],["falcon",["FalconForCausalLM",Cl]],["trocr",["TrOCRForCausalLM",pl]],["stablelm",["StableLmForCausalLM",yl]],["phi3_v",["Phi3VForCausalLM",DA]]]),F1=new Map([["multi_modality",["MultiModalityCausalLM",Hl]]]),ql=new Map([["bert",["BertForMaskedLM",J]],["modernbert",["ModernBertForMaskedLM",qe]],["roformer",["RoFormerForMaskedLM",Tt]],["electra",["ElectraForMaskedLM",$A]],["esm",["EsmForMaskedLM",Os]],["convbert",["ConvBertForMaskedLM",fa]],["camembert",["CamembertForMaskedLM",ks]],["deberta",["DebertaForMaskedLM",Tr]],["deberta-v2",["DebertaV2ForMaskedLM",Ci]],["mpnet",["MPNetForMaskedLM",Es]],["albert",["AlbertForMaskedLM",WA]],["distilbert",["DistilBertForMaskedLM",vs]],["roberta",["RobertaForMaskedLM",Ga]],["xlm",["XLMWithLMHeadModel",o0]],["xlm-roberta",["XLMRobertaForMaskedLM",Li]],["mobilebert",["MobileBertForMaskedLM",ys]],["squeezebert",["SqueezeBertForMaskedLM",ve]]]),Jl=new Map([["bert",["BertForQuestionAnswering",$]],["roformer",["RoFormerForQuestionAnswering",$t]],["electra",["ElectraForQuestionAnswering",gs]],["convbert",["ConvBertForQuestionAnswering",La]],["camembert",["CamembertForQuestionAnswering",ea]],["deberta",["DebertaForQuestionAnswering",Kt]],["deberta-v2",["DebertaV2ForQuestionAnswering",bi]],["mpnet",["MPNetForQuestionAnswering",Rs]],["albert",["AlbertForQuestionAnswering",He]],["distilbert",["DistilBertForQuestionAnswering",Ja]],["roberta",["RobertaForQuestionAnswering",Aa]],["xlm",["XLMForQuestionAnswering",ai]],["xlm-roberta",["XLMRobertaForQuestionAnswering",qA]],["mobilebert",["MobileBertForQuestionAnswering",Pt]],["squeezebert",["SqueezeBertForQuestionAnswering",We]]]),jo=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",rr]],["idefics3",["Idefics3ForConditionalGeneration",wn]]]),N1=new Map([["llava",["LlavaForConditionalGeneration",ki]],["llava_onevision",["LlavaOnevisionForConditionalGeneration",xa]],["moondream1",["Moondream1ForConditionalGeneration",Ws]],["florence2",["Florence2ForConditionalGeneration",Cn]],["qwen2-vl",["Qwen2VLForConditionalGeneration",Ji]],["idefics3",["Idefics3ForConditionalGeneration",wn]],["paligemma",["PaliGemmaForConditionalGeneration",js]]]),O1=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",rr]]]),_l=new Map([["vit",["ViTForImageClassification",Qs]],["ijepa",["IJepaForImageClassification",jn]],["pvt",["PvtForImageClassification",Di]],["vit_msn",["ViTMSNForImageClassification",T0]],["fastvit",["FastViTForImageClassification",r]],["mobilevit",["MobileViTForImageClassification",c]],["mobilevitv2",["MobileViTV2ForImageClassification",p]],["beit",["BeitForImageClassification",Be]],["deit",["DeiTForImageClassification",Er]],["hiera",["HieraForImageClassification",na]],["convnext",["ConvNextForImageClassification",B2]],["convnextv2",["ConvNextV2ForImageClassification",E2]],["dinov2",["Dinov2ForImageClassification",Xs]],["dinov2_with_registers",["Dinov2WithRegistersForImageClassification",An]],["resnet",["ResNetForImageClassification",Ba]],["swin",["SwinForImageClassification",ls]],["segformer",["SegformerForImageClassification",xl]],["efficientnet",["EfficientNetForImageClassification",Ml]],["mobilenet_v1",["MobileNetV1ForImageClassification",Ql]],["mobilenet_v2",["MobileNetV2ForImageClassification",Pl]],["mobilenet_v3",["MobileNetV3ForImageClassification",Sl]],["mobilenet_v4",["MobileNetV4ForImageClassification",Nl]]]),$l=new Map([["detr",["DetrForObjectDetection",Ke]],["rt_detr",["RTDetrForObjectDetection",at]],["table-transformer",["TableTransformerForObjectDetection",er]],["yolos",["YolosForObjectDetection",T2]]]),e1=new Map([["owlvit",["OwlViTForObjectDetection",P]],["owlv2",["Owlv2ForObjectDetection",ee]],["grounding-dino",["GroundingDinoForObjectDetection",D2]]]),A1=new Map([["detr",["DetrForSegmentation",rA]],["clipseg",["CLIPSegForImageSegmentation",_a]]]),t1=new Map([["segformer",["SegformerForSemanticSegmentation",vl]],["sapiens",["SapiensForSemanticSegmentation",d2]]]),r1=new Map([["detr",["DetrForSegmentation",rA]],["maskformer",["MaskFormerForInstanceSegmentation",b2]]]),Uo=new Map([["sam",["SamModel",S2]]]),a1=new Map([["wav2vec2",["Wav2Vec2ForCTC",H2]],["wav2vec2-bert",["Wav2Vec2BertForCTC",Al]],["unispeech",["UniSpeechForCTC",wo]],["unispeech-sat",["UniSpeechSatForCTC",J2]],["wavlm",["WavLMForCTC",nl]],["hubert",["HubertForCTC",al]]]),Ko=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",R2]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",tl]],["unispeech",["UniSpeechForSequenceClassification",X2]],["unispeech-sat",["UniSpeechSatForSequenceClassification",_2]],["wavlm",["WavLMForSequenceClassification",ol]],["hubert",["HubertForSequenceClassification",sl]],["audio-spectrogram-transformer",["ASTForAudioClassification",Yi]]]),Zo=new Map([["wavlm",["WavLMForXVector",ll]]]),Xo=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",$2]],["wavlm",["WavLMForAudioFrameClassification",cl]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",V2]],["pyannote",["PyAnnoteForAudioFrameClassification",j2]]]),s1=new Map([["vitmatte",["VitMatteForImageMatting",s]]]),L1=new Map([["patchtst",["PatchTSTForPrediction",O0]],["patchtsmixer",["PatchTSMixerForPrediction",Ul]]]),qo=new Map([["swin2sr",["Swin2SRForImageSuperResolution",fi]]]),i1=new Map([["dpt",["DPTForDepthEstimation",Zn]],["depth_anything",["DepthAnythingForDepthEstimation",z0]],["glpn",["GLPNForDepthEstimation",w2]],["sapiens",["SapiensForDepthEstimation",f2]],["depth_pro",["DepthProForDepthEstimation",m2]]]),n1=new Map([["sapiens",["SapiensForNormalEstimation",p2]]]),Y1=new Map([["vitpose",["VitPoseForPoseEstimation",Q0]]]),Jo=new Map([["clip",["CLIPVisionModelWithProjection",za]],["siglip",["SiglipVisionModel",zr]],["jina_clip",["JinaCLIPVisionModel",Ri]]]),rn=[[P1,g],[z1,b],[S1,M],[Ro,g],[Xl,g],[Vo,e],[Ho,e],[Wo,M],[F1,Re],[ql,g],[Jl,g],[jo,l],[N1,D],[_l,g],[A1,g],[r1,g],[t1,g],[s1,g],[L1,g],[qo,g],[i1,g],[n1,g],[Y1,g],[$l,g],[e1,g],[Uo,ue],[a1,g],[Ko,g],[Kl,e],[Zl,g],[Zo,g],[Xo,g],[Jo,g]];for(const[K,U]of rn)for(const[Ee,eA]of K.values())Ye.set(Ee,U),AA.set(eA,Ee),Je.set(Ee,eA);const o1=[["MusicgenForConditionalGeneration",zo,z],["Phi3VForCausalLM",DA,Ne],["CLIPTextModelWithProjection",Hi,g],["SiglipTextModel",vn,g],["JinaCLIPTextModel",h0,g],["ClapTextModelWithProjection",Il,g],["ClapAudioModelWithProjection",wl,g]];for(const[K,U,Ee]of o1)Ye.set(K,Ee),AA.set(U,K),Je.set(K,U);class fc extends br{static MODEL_CLASS_MAPPINGS=rn.map(U=>U[0]);static BASE_IF_FAIL=!0}class pc extends br{static MODEL_CLASS_MAPPINGS=[Ro]}class Dt extends br{static MODEL_CLASS_MAPPINGS=[Xl]}class H1 extends br{static MODEL_CLASS_MAPPINGS=[Vo]}class zi extends br{static MODEL_CLASS_MAPPINGS=[Ho]}class R1 extends br{static MODEL_CLASS_MAPPINGS=[Kl]}class l1 extends br{static MODEL_CLASS_MAPPINGS=[Zl]}class hc extends br{static MODEL_CLASS_MAPPINGS=[Wo]}class Jr extends br{static MODEL_CLASS_MAPPINGS=[ql]}class Ft extends br{static MODEL_CLASS_MAPPINGS=[Jl]}class Rt extends br{static MODEL_CLASS_MAPPINGS=[jo]}class an extends br{static MODEL_CLASS_MAPPINGS=[_l]}class mc extends br{static MODEL_CLASS_MAPPINGS=[A1]}class c1 extends br{static MODEL_CLASS_MAPPINGS=[t1]}class Cc extends br{static MODEL_CLASS_MAPPINGS=[r1]}class g1 extends br{static MODEL_CLASS_MAPPINGS=[$l]}class bc extends br{static MODEL_CLASS_MAPPINGS=[e1]}class Ic extends br{static MODEL_CLASS_MAPPINGS=[Uo]}class u1 extends br{static MODEL_CLASS_MAPPINGS=[a1]}class wc extends br{static MODEL_CLASS_MAPPINGS=[Ko]}class kc extends br{static MODEL_CLASS_MAPPINGS=[Zo]}class xc extends br{static MODEL_CLASS_MAPPINGS=[Xo]}class qn extends br{static MODEL_CLASS_MAPPINGS=[O1]}class d1 extends br{static MODEL_CLASS_MAPPINGS=[s1]}class vc extends br{static MODEL_CLASS_MAPPINGS=[qo]}class f1 extends br{static MODEL_CLASS_MAPPINGS=[i1]}class p1 extends br{static MODEL_CLASS_MAPPINGS=[n1]}class Bc extends br{static MODEL_CLASS_MAPPINGS=[Y1]}class yc extends br{static MODEL_CLASS_MAPPINGS=[Jo]}class Ec extends pA{constructor({logits:U,past_key_values:Ee,encoder_outputs:eA,decoder_attentions:sA=null,cross_attentions:uA=null}){super(),this.logits=U,this.past_key_values=Ee,this.encoder_outputs=eA,this.decoder_attentions=sA,this.cross_attentions=uA}}class Nt extends pA{constructor({logits:U,...Ee}){super(),this.logits=U;const eA=Object.values(Ee);eA.length>0&&(this.attentions=eA)}}class V1 extends pA{constructor({logits:U,embeddings:Ee}){super(),this.logits=U,this.embeddings=Ee}}class Qa extends pA{constructor({logits:U}){super(),this.logits=U}}class Fa extends pA{constructor({logits:U}){super(),this.logits=U}}class Ua extends pA{constructor({start_logits:U,end_logits:Ee}){super(),this.start_logits=U,this.end_logits=Ee}}class Jn extends pA{constructor({logits:U}){super(),this.logits=U}}class Mc extends pA{constructor({logits:U,past_key_values:Ee}){super(),this.logits=U,this.past_key_values=Ee}}class W1 extends pA{constructor({alphas:U}){super(),this.alphas=U}}class j1 extends pA{constructor({waveform:U,spectrogram:Ee}){super(),this.waveform=U,this.spectrogram=Ee}}},"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js":(I,C,d)=>{d.r(C),d.d(C,{ASTFeatureExtractor:()=>L});var k=d("./src/base/feature_extraction_utils.js");d("./src/utils/tensor.js");var T=d("./src/utils/audio.js");class L extends k.FeatureExtractor{constructor(j){super(j);const q=this.config.sampling_rate,W=(0,T.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(q/2),q,null,"kaldi",!0);for(let F=0;F<W.length;++F)W[F].push(0);this.mel_filters=W,this.window=(0,T.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(j,q){return(0,T.spectrogram)(j,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:q,transpose:!0})}async _call(j){(0,k.validate_audio_inputs)(j,"ASTFeatureExtractor");const q=await this._extract_fbank_features(j,this.config.max_length);if(this.config.do_normalize){const W=2*this.std,F=q.data;for(let X=0;X<F.length;++X)F[X]=(F[X]-this.mean)/W}return{input_values:q.unsqueeze_(0)}}}},"./src/models/auto/feature_extraction_auto.js":(I,C,d)=>{d.r(C),d.d(C,{AutoFeatureExtractor:()=>N});var k=d("./src/utils/constants.js"),T=d("./src/utils/hub.js");d("./src/base/feature_extraction_utils.js");var L=d("./src/models/feature_extractors.js");class N{static async from_pretrained(q,W={}){const F=await(0,T.getModelJSON)(q,k.FEATURE_EXTRACTOR_NAME,!0,W),X=F.feature_extractor_type,R=L[X];if(!R)throw new Error(`Unknown feature_extractor_type: '${X}'. Please report this at ${k.GITHUB_ISSUE_URL}.`);return new R(F)}}},"./src/models/auto/image_processing_auto.js":(I,C,d)=>{d.r(C),d.d(C,{AutoImageProcessor:()=>j});var k=d("./src/utils/constants.js"),T=d("./src/utils/hub.js"),L=d("./src/base/image_processors_utils.js"),N=d("./src/models/image_processors.js");class j{static async from_pretrained(W,F={}){const X=await(0,T.getModelJSON)(W,k.IMAGE_PROCESSOR_NAME,!0,F),R=X.image_processor_type??X.feature_extractor_type;let re=N[R];return re||(R!==void 0&&console.warn(`Image processor type '${R}' not found, assuming base ImageProcessor. Please report this at ${k.GITHUB_ISSUE_URL}.`),re=L.ImageProcessor),new re(X)}}},"./src/models/auto/processing_auto.js":(I,C,d)=>{d.r(C),d.d(C,{AutoProcessor:()=>W});var k=d("./src/utils/constants.js"),T=d("./src/utils/hub.js"),L=d("./src/base/processing_utils.js"),N=d("./src/models/processors.js"),j=d("./src/models/image_processors.js"),q=d("./src/models/feature_extractors.js");class W{static async from_pretrained(X,R={}){const re=await(0,T.getModelJSON)(X,k.IMAGE_PROCESSOR_NAME,!0,R),{image_processor_type:be,feature_extractor_type:xe,processor_class:ye}=re;if(ye&&N[ye])return N[ye].from_pretrained(X,R);if(!be&&!xe)throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");const se={};if(be){const ne=j[be];if(!ne)throw new Error(`Unknown image_processor_type: '${be}'.`);se.image_processor=new ne(re)}if(xe){const ne=j[xe];if(ne)se.image_processor=new ne(re);else{const we=q[xe];if(!we)throw new Error(`Unknown feature_extractor_type: '${xe}'.`);se.feature_extractor=new we(re)}}return new L.Processor({},se)}}},"./src/models/beit/image_processing_beit.js":(I,C,d)=>{d.r(C),d.d(C,{BeitFeatureExtractor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}},"./src/models/bit/image_processing_bit.js":(I,C,d)=>{d.r(C),d.d(C,{BitImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}},"./src/models/chinese_clip/image_processing_chinese_clip.js":(I,C,d)=>{d.r(C),d.d(C,{ChineseCLIPFeatureExtractor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}},"./src/models/clap/feature_extraction_clap.js":(I,C,d)=>{d.r(C),d.d(C,{ClapFeatureExtractor:()=>L});var k=d("./src/base/feature_extraction_utils.js");d("./src/utils/tensor.js");var T=d("./src/utils/audio.js");class L extends k.FeatureExtractor{constructor(j){super(j),this.mel_filters=(0,T.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,T.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,T.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(j,q,W,F){let X;const R=j.length-q;if(R>0){if(W!=="rand_trunc")throw new Error(`Truncation strategy "${W}" not implemented`);{const re=Math.floor(Math.random()*(R+1));j=j.subarray(re,re+q),X=await this._extract_fbank_features(j,this.mel_filters_slaney,this.config.nb_max_samples)}}else{if(R<0){let re=new Float64Array(q);if(re.set(j),F==="repeat")for(let be=j.length;be<q;be+=j.length)re.set(j.subarray(0,Math.min(j.length,q-be)),be);else if(F==="repeatpad")for(let be=j.length;be<-R;be+=j.length)re.set(j,be);j=re}if(W==="fusion")throw new Error(`Truncation strategy "${W}" not implemented`);X=await this._extract_fbank_features(j,this.mel_filters_slaney,this.config.nb_max_samples)}return X.unsqueeze_(0)}async _extract_fbank_features(j,q,W=null){return(0,T.spectrogram)(j,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:q,log_mel:"dB",max_num_frames:W,do_pad:!1,transpose:!0})}async _call(j,{max_length:q=null}={}){return(0,k.validate_audio_inputs)(j,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(j,q??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}},"./src/models/clip/image_processing_clip.js":(I,C,d)=>{d.r(C),d.d(C,{CLIPFeatureExtractor:()=>L,CLIPImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}class L extends T{}},"./src/models/convnext/image_processing_convnext.js":(I,C,d)=>{d.r(C),d.d(C,{ConvNextFeatureExtractor:()=>L,ConvNextImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{constructor(j){super(j),this.crop_pct=this.config.crop_pct??.875}async resize(j){const q=this.size?.shortest_edge;if(q===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(q<384){const W=Math.floor(q/this.crop_pct),[F,X]=this.get_resize_output_image_size(j,{shortest_edge:W});j=await j.resize(F,X,{resample:this.resample}),j=await j.center_crop(q,q)}else j=await j.resize(q,q,{resample:this.resample});return j}}class L extends T{}},"./src/models/deit/image_processing_deit.js":(I,C,d)=>{d.r(C),d.d(C,{DeiTFeatureExtractor:()=>L,DeiTImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}class L extends T{}},"./src/models/detr/image_processing_detr.js":(I,C,d)=>{d.r(C),d.d(C,{DetrFeatureExtractor:()=>N,DetrImageProcessor:()=>L});var k=d("./src/base/image_processors_utils.js"),T=d("./src/utils/tensor.js");class L extends k.ImageProcessor{async _call(q){const W=await super._call(q),F=[W.pixel_values.dims[0],64,64],X=(0,T.full)(F,1n);return{...W,pixel_mask:X}}post_process_object_detection(...q){return(0,k.post_process_object_detection)(...q)}post_process_panoptic_segmentation(...q){return(0,k.post_process_panoptic_segmentation)(...q)}post_process_instance_segmentation(...q){return(0,k.post_process_instance_segmentation)(...q)}}class N extends L{}},"./src/models/donut/image_processing_donut.js":(I,C,d)=>{d.r(C),d.d(C,{DonutFeatureExtractor:()=>L,DonutImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{pad_image(j,q,W,F={}){const[X,R,re]=q;let be=this.image_mean;Array.isArray(this.image_mean)||(be=new Array(re).fill(be));let xe=this.image_std;Array.isArray(xe)||(xe=new Array(re).fill(be));const ye=be.map((se,ne)=>-se/xe[ne]);return super.pad_image(j,q,W,{center:!0,constant_values:ye,...F})}}class L extends T{}},"./src/models/dpt/image_processing_dpt.js":(I,C,d)=>{d.r(C),d.d(C,{DPTFeatureExtractor:()=>L,DPTImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}class L extends T{}},"./src/models/efficientnet/image_processing_efficientnet.js":(I,C,d)=>{d.r(C),d.d(C,{EfficientNetImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{constructor(N){super(N),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(j=>j*j))}}},"./src/models/feature_extractors.js":(I,C,d)=>{d.r(C),d.d(C,{ASTFeatureExtractor:()=>k.ASTFeatureExtractor,ClapFeatureExtractor:()=>T.ClapFeatureExtractor,ImageFeatureExtractor:()=>R.ImageProcessor,MoonshineFeatureExtractor:()=>L.MoonshineFeatureExtractor,PyAnnoteFeatureExtractor:()=>N.PyAnnoteFeatureExtractor,SeamlessM4TFeatureExtractor:()=>j.SeamlessM4TFeatureExtractor,SpeechT5FeatureExtractor:()=>q.SpeechT5FeatureExtractor,Wav2Vec2FeatureExtractor:()=>W.Wav2Vec2FeatureExtractor,WeSpeakerFeatureExtractor:()=>F.WeSpeakerFeatureExtractor,WhisperFeatureExtractor:()=>X.WhisperFeatureExtractor});var k=d("./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"),T=d("./src/models/clap/feature_extraction_clap.js"),L=d("./src/models/moonshine/feature_extraction_moonshine.js"),N=d("./src/models/pyannote/feature_extraction_pyannote.js"),j=d("./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"),q=d("./src/models/speecht5/feature_extraction_speecht5.js"),W=d("./src/models/wav2vec2/feature_extraction_wav2vec2.js"),F=d("./src/models/wespeaker/feature_extraction_wespeaker.js"),X=d("./src/models/whisper/feature_extraction_whisper.js"),R=d("./src/base/image_processors_utils.js")},"./src/models/florence2/processing_florence2.js":(I,C,d)=>{d.r(C),d.d(C,{Florence2Processor:()=>N});var k=d("./src/base/processing_utils.js"),T=d("./src/models/auto/image_processing_auto.js"),L=d("./src/tokenizers.js");class N extends k.Processor{static tokenizer_class=L.AutoTokenizer;static image_processor_class=T.AutoImageProcessor;constructor(q,W){super(q,W);const{tasks_answer_post_processing_type:F,task_prompts_without_inputs:X,task_prompts_with_input:R}=this.image_processor.config;this.tasks_answer_post_processing_type=new Map(Object.entries(F??{})),this.task_prompts_without_inputs=new Map(Object.entries(X??{})),this.task_prompts_with_input=new Map(Object.entries(R??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(q){typeof q=="string"&&(q=[q]);const W=[];for(const F of q)if(this.task_prompts_without_inputs.has(F))W.push(this.task_prompts_without_inputs.get(F));else{for(const[X,R]of this.task_prompts_with_input)if(F.includes(X)){W.push(R.replaceAll("{input}",F).replaceAll(X,""));break}W.length!==q.length&&W.push(F)}return W}post_process_generation(q,W,F){const X=this.tasks_answer_post_processing_type.get(W)??"pure_text";let R;switch(q=q.replaceAll("<s>","").replaceAll("</s>",""),X){case"pure_text":R=q;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const re=X==="ocr"?"quad_boxes":"bboxes",be=q.matchAll(this.regexes[re]),xe=[],ye=[];for(const[se,ne,...we]of be)xe.push(ne?ne.trim():xe.at(-1)??""),ye.push(we.map((g,b)=>(Number(g)+.5)/this.size_per_bin*F[b%2]));R={labels:xe,[re]:ye};break;default:throw new Error(`Task "${W}" (of type "${X}") not yet implemented.`)}return{[W]:R}}async _call(q,W=null,F={}){if(!q&&!W)throw new Error("Either text or images must be provided");return{...await this.image_processor(q,F),...W?this.tokenizer(W,F):{}}}}},"./src/models/glpn/image_processing_glpn.js":(I,C,d)=>{d.r(C),d.d(C,{GLPNFeatureExtractor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}},"./src/models/grounding_dino/image_processing_grounding_dino.js":(I,C,d)=>{d.r(C),d.d(C,{GroundingDinoImageProcessor:()=>L});var k=d("./src/base/image_processors_utils.js"),T=d("./src/utils/tensor.js");class L extends k.ImageProcessor{async _call(j){const q=await super._call(j),W=q.pixel_values.dims,F=(0,T.ones)([W[0],W[2],W[3]]);return{...q,pixel_mask:F}}}},"./src/models/grounding_dino/processing_grounding_dino.js":(I,C,d)=>{d.r(C),d.d(C,{GroundingDinoProcessor:()=>q});var k=d("./src/base/processing_utils.js"),T=d("./src/models/auto/image_processing_auto.js"),L=d("./src/tokenizers.js"),N=d("./src/base/image_processors_utils.js");function j(W,F){const X=W.dims.at(-1)-1,R=W.tolist();R.fill(!1,0,1),R.fill(!1,X);const re=F.tolist();return R.map((be,xe)=>be?xe:null).filter(be=>be!==null).map(be=>re[be])}class q extends k.Processor{static tokenizer_class=L.AutoTokenizer;static image_processor_class=T.AutoImageProcessor;async _call(F,X,R={}){const re=F?await this.image_processor(F,R):{};return{...X?this.tokenizer(X,R):{},...re}}post_process_grounded_object_detection(F,X,{box_threshold:R=.25,text_threshold:re=.25,target_sizes:be=null}={}){const{logits:xe,pred_boxes:ye}=F,se=xe.dims[0];if(be!==null&&be.length!==se)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const ne=xe.dims.at(1),we=xe.sigmoid(),g=we.max(-1).tolist(),b=ye.tolist().map(l=>l.map(M=>(0,N.center_to_corners_format)(M))),e=[];for(let l=0;l<se;++l){const M=be!==null?be[l]:null;M!==null&&(b[l]=b[l].map(Ne=>Ne.map((Ye,Je)=>Ye*M[(Je+1)%2])));const ue=g[l],D=[],z=[],Re=[];for(let Ne=0;Ne<ne;++Ne){const Ye=ue[Ne];if(Ye<=R)continue;const Je=b[l][Ne],AA=we[l][Ne];D.push(Ye),Re.push(Je);const xA=j(AA.gt(re),X[l]);z.push(xA)}e.push({scores:D,boxes:Re,labels:this.batch_decode(z)})}return e}}},"./src/models/idefics3/image_processing_idefics3.js":(I,C,d)=>{d.r(C),d.d(C,{Idefics3ImageProcessor:()=>L});var k=d("./src/base/image_processors_utils.js"),T=d("./src/utils/tensor.js");class L extends k.ImageProcessor{constructor(j){super(j),this.do_image_splitting=j.do_image_splitting??!0,this.max_image_size=j.max_image_size}get_resize_for_vision_encoder(j,q){let[W,F]=j.dims.slice(-2);const X=F/W;return F>=W?(F=Math.ceil(F/q)*q,W=Math.floor(F/X),W=Math.ceil(W/q)*q):(W=Math.ceil(W/q)*q,F=Math.floor(W*X),F=Math.ceil(F/q)*q),{height:W,width:F}}async _call(j,{do_image_splitting:q=null,return_row_col_info:W=!1}={}){let F;if(Array.isArray(j)){if(j.length===0||!j[0])throw new Error("No images provided.");F=Array.isArray(j[0])?j:[j]}else F=[[j]];let X=[],R=[],re=[];const be=[],xe=[];for(const l of F){let M=await Promise.all(l.map(z=>this.preprocess(z)));be.push(...M.map(z=>z.original_size)),xe.push(...M.map(z=>z.reshaped_input_size)),M.forEach(z=>z.pixel_values.unsqueeze_(0));const{longest_edge:ue}=this.max_image_size;let D;if(q??this.do_image_splitting){let z=new Array(M.length),Re=new Array(M.length);D=await Promise.all(M.map(async(Ne,Ye)=>{const Je=this.get_resize_for_vision_encoder(Ne.pixel_values,ue),AA=await(0,T.interpolate_4d)(Ne.pixel_values,{size:[Je.height,Je.width]}),{frames:xA,num_splits_h:GA,num_splits_w:Ge}=await this.split_image(AA,this.max_image_size);return z[Ye]=GA,Re[Ye]=Ge,(0,T.cat)(xA,0)})),R.push(z),re.push(Re)}else{const z=[ue,ue];D=await Promise.all(M.map(Re=>(0,T.interpolate_4d)(Re.pixel_values,{size:z}))),R.push(new Array(M.length).fill(0)),re.push(new Array(M.length).fill(0))}X.push((0,T.cat)(D,0))}const ye=X.length,[se,ne,we,g]=X[0].dims;let b,e;if(ye===1)b=X[0].unsqueeze_(0),e=(0,T.full)([ye,se,we,g],!0);else{const l=Math.max(...X.map(D=>D.dims.at(0)));e=(0,T.full)([ye,l,we,g],!0);const M=e.data,ue=l*we*g;for(let D=0;D<ye;++D){const z=X[D].dims[0];if(z<l){X[D]=(0,T.cat)([X[D],(0,T.full)([l-z,ne,we,g],0)],0);const Re=D*ue+z*we*g,Ne=(D+1)*ue;M.fill(!1,Re,Ne)}}b=(0,T.stack)(X,0)}return{pixel_values:b,pixel_attention_mask:e,original_sizes:be,reshaped_input_sizes:xe,...W?{rows:R,cols:re}:{}}}async split_image(j,{longest_edge:q}){const W=q,F=q,X=[],[R,re]=j.dims.slice(-2);let be=0,xe=0;if(R>W||re>F){be=Math.ceil(R/W),xe=Math.ceil(re/F);const ye=Math.ceil(R/be),se=Math.ceil(re/xe);for(let g=0;g<be;++g)for(let b=0;b<xe;++b){let e,l,M,ue;g===be-1?(l=R-ye,ue=R):(l=g*ye,ue=(g+1)*ye),b===xe-1?(e=re-se,M=re):(e=b*se,M=(b+1)*se);const D=[l,e],z=[ue,M],Re=await(0,T.slice)(j,D,z,[2,3]);X.push(Re)}const ne=W,we=F;R===ne&&re===we||(j=await(0,T.interpolate_4d)(j,{size:[ne,we]}))}return X.push(j),{frames:X,num_splits_h:be,num_splits_w:xe}}}},"./src/models/idefics3/processing_idefics3.js":(I,C,d)=>{d.r(C),d.d(C,{Idefics3Processor:()=>q});var k=d("./src/base/processing_utils.js"),T=d("./src/models/auto/image_processing_auto.js"),L=d("./src/tokenizers.js");d("./src/utils/image.js");var N=d("./src/utils/core.js");function j(W,F,X,R,re,be){return W===0&&F===0?function(xe,ye,se,ne){return`${ye}${ne}`+se.repeat(xe)+`${ye}`}(X,R,re,be):function(xe,ye,se,ne,we,g){let b="";for(let e=0;e<ye;++e){for(let l=0;l<se;++l)b+=ne+`<row_${e+1}_col_${l+1}>`+we.repeat(xe);b+=`
`}return b+=`
${ne}${g}`+we.repeat(xe)+`${ne}`,b}(X,W,F,R,re,be)}class q extends k.Processor{static image_processor_class=T.AutoImageProcessor;static tokenizer_class=L.AutoTokenizer;static uses_processor_config=!0;fake_image_token="<fake_token_around_image>";image_token="<image>";global_img_token="<global-img>";async _call(F,X=null,R={}){let re;R.return_row_col_info??=!0,X&&(re=await this.image_processor(X,R)),Array.isArray(F)||(F=[F]);const be=re.rows??[new Array(F.length).fill(0)],xe=re.cols??[new Array(F.length).fill(0)],ye=this.config.image_seq_len,se=[],ne=[];for(let we=0;we<F.length;++we){const g=F[we],b=be[we],e=xe[we];se.push((0,N.count)(g,this.image_token));const l=b.map((D,z)=>j(D,e[z],ye,this.fake_image_token,this.image_token,this.global_img_token)),M=g.split(this.image_token);if(M.length===0)throw new Error("The image token should be present in the text.");let ue=M[0];for(let D=0;D<l.length;++D)ue+=l[D]+M[D+1];ne.push(ue)}return{...this.tokenizer(ne),...re}}}},"./src/models/image_processors.js":(I,C,d)=>{d.r(C),d.d(C,{BeitFeatureExtractor:()=>k.BeitFeatureExtractor,BitImageProcessor:()=>T.BitImageProcessor,CLIPFeatureExtractor:()=>N.CLIPFeatureExtractor,CLIPImageProcessor:()=>N.CLIPImageProcessor,ChineseCLIPFeatureExtractor:()=>L.ChineseCLIPFeatureExtractor,ConvNextFeatureExtractor:()=>j.ConvNextFeatureExtractor,ConvNextImageProcessor:()=>j.ConvNextImageProcessor,DPTFeatureExtractor:()=>X.DPTFeatureExtractor,DPTImageProcessor:()=>X.DPTImageProcessor,DeiTFeatureExtractor:()=>q.DeiTFeatureExtractor,DeiTImageProcessor:()=>q.DeiTImageProcessor,DetrFeatureExtractor:()=>W.DetrFeatureExtractor,DetrImageProcessor:()=>W.DetrImageProcessor,DonutFeatureExtractor:()=>F.DonutFeatureExtractor,DonutImageProcessor:()=>F.DonutImageProcessor,EfficientNetImageProcessor:()=>R.EfficientNetImageProcessor,GLPNFeatureExtractor:()=>re.GLPNFeatureExtractor,GroundingDinoImageProcessor:()=>be.GroundingDinoImageProcessor,Idefics3ImageProcessor:()=>xe.Idefics3ImageProcessor,JinaCLIPImageProcessor:()=>se.JinaCLIPImageProcessor,LlavaOnevisionImageProcessor:()=>ne.LlavaOnevisionImageProcessor,Mask2FormerImageProcessor:()=>we.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>g.MaskFormerFeatureExtractor,MaskFormerImageProcessor:()=>g.MaskFormerImageProcessor,MobileNetV1FeatureExtractor:()=>b.MobileNetV1FeatureExtractor,MobileNetV1ImageProcessor:()=>b.MobileNetV1ImageProcessor,MobileNetV2FeatureExtractor:()=>e.MobileNetV2FeatureExtractor,MobileNetV2ImageProcessor:()=>e.MobileNetV2ImageProcessor,MobileNetV3FeatureExtractor:()=>l.MobileNetV3FeatureExtractor,MobileNetV3ImageProcessor:()=>l.MobileNetV3ImageProcessor,MobileNetV4FeatureExtractor:()=>M.MobileNetV4FeatureExtractor,MobileNetV4ImageProcessor:()=>M.MobileNetV4ImageProcessor,MobileViTFeatureExtractor:()=>ue.MobileViTFeatureExtractor,MobileViTImageProcessor:()=>ue.MobileViTImageProcessor,NougatImageProcessor:()=>D.NougatImageProcessor,OwlViTFeatureExtractor:()=>Re.OwlViTFeatureExtractor,OwlViTImageProcessor:()=>Re.OwlViTImageProcessor,Owlv2ImageProcessor:()=>z.Owlv2ImageProcessor,Phi3VImageProcessor:()=>Ne.Phi3VImageProcessor,PvtImageProcessor:()=>Ye.PvtImageProcessor,Qwen2VLImageProcessor:()=>Je.Qwen2VLImageProcessor,RTDetrImageProcessor:()=>AA.RTDetrImageProcessor,SamImageProcessor:()=>xA.SamImageProcessor,SegformerFeatureExtractor:()=>GA.SegformerFeatureExtractor,SegformerImageProcessor:()=>GA.SegformerImageProcessor,SiglipImageProcessor:()=>Ge.SiglipImageProcessor,Swin2SRImageProcessor:()=>Ie.Swin2SRImageProcessor,VLMImageProcessor:()=>ye.VLMImageProcessor,ViTFeatureExtractor:()=>ze.ViTFeatureExtractor,ViTImageProcessor:()=>ze.ViTImageProcessor,VitMatteImageProcessor:()=>Ue.VitMatteImageProcessor,VitPoseImageProcessor:()=>Pe.VitPoseImageProcessor,YolosFeatureExtractor:()=>kA.YolosFeatureExtractor,YolosImageProcessor:()=>kA.YolosImageProcessor});var k=d("./src/models/beit/image_processing_beit.js"),T=d("./src/models/bit/image_processing_bit.js"),L=d("./src/models/chinese_clip/image_processing_chinese_clip.js"),N=d("./src/models/clip/image_processing_clip.js"),j=d("./src/models/convnext/image_processing_convnext.js"),q=d("./src/models/deit/image_processing_deit.js"),W=d("./src/models/detr/image_processing_detr.js"),F=d("./src/models/donut/image_processing_donut.js"),X=d("./src/models/dpt/image_processing_dpt.js"),R=d("./src/models/efficientnet/image_processing_efficientnet.js"),re=d("./src/models/glpn/image_processing_glpn.js"),be=d("./src/models/grounding_dino/image_processing_grounding_dino.js"),xe=d("./src/models/idefics3/image_processing_idefics3.js"),ye=d("./src/models/janus/image_processing_janus.js"),se=d("./src/models/jina_clip/image_processing_jina_clip.js"),ne=d("./src/models/llava_onevision/image_processing_llava_onevision.js"),we=d("./src/models/mask2former/image_processing_mask2former.js"),g=d("./src/models/maskformer/image_processing_maskformer.js"),b=d("./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"),e=d("./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"),l=d("./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"),M=d("./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"),ue=d("./src/models/mobilevit/image_processing_mobilevit.js"),D=d("./src/models/nougat/image_processing_nougat.js"),z=d("./src/models/owlv2/image_processing_owlv2.js"),Re=d("./src/models/owlvit/image_processing_owlvit.js"),Ne=d("./src/models/phi3_v/image_processing_phi3_v.js"),Ye=d("./src/models/pvt/image_processing_pvt.js"),Je=d("./src/models/qwen2_vl/image_processing_qwen2_vl.js"),AA=d("./src/models/rt_detr/image_processing_rt_detr.js"),xA=d("./src/models/sam/image_processing_sam.js"),GA=d("./src/models/segformer/image_processing_segformer.js"),Ge=d("./src/models/siglip/image_processing_siglip.js"),Ie=d("./src/models/swin2sr/image_processing_swin2sr.js"),ze=d("./src/models/vit/image_processing_vit.js"),Ue=d("./src/models/vitmatte/image_processing_vitmatte.js"),Pe=d("./src/models/vitpose/image_processing_vitpose.js"),kA=d("./src/models/yolos/image_processing_yolos.js")},"./src/models/janus/image_processing_janus.js":(I,C,d)=>{d.r(C),d.d(C,{VLMImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{constructor(N){super({do_pad:!0,pad_size:{width:N.image_size,height:N.image_size},...N}),this.constant_values=this.config.background_color.map(j=>j*this.rescale_factor)}pad_image(N,j,q,W){return super.pad_image(N,j,q,{constant_values:this.constant_values,center:!0,...W})}}},"./src/models/janus/processing_janus.js":(I,C,d)=>{d.r(C),d.d(C,{VLChatProcessor:()=>W});var k=d("./src/base/processing_utils.js"),T=d("./src/models/auto/image_processing_auto.js"),L=d("./src/tokenizers.js"),N=d("./src/utils/core.js"),j=d("./src/utils/tensor.js"),q=d("./src/utils/image.js");class W extends k.Processor{static image_processor_class=T.AutoImageProcessor;static tokenizer_class=L.AutoTokenizer;static uses_processor_config=!0;constructor(X,R){super(X,R),this.image_tag=this.config.image_tag,this.image_start_tag=this.config.image_start_tag,this.image_end_tag=this.config.image_end_tag,this.num_image_tokens=this.config.num_image_tokens}async _call(X,{images:R=null,chat_template:re="default"}={}){R?Array.isArray(R)||(R=[R]):R=await Promise.all(X.filter(ue=>ue.images).flatMap(ue=>ue.images).map(ue=>q.RawImage.read(ue)));const be=this.tokenizer,xe=ue=>be.encode(ue,{add_special_tokens:!1}),ye=be.apply_chat_template(X,{tokenize:!1,add_generation_prompt:!0,chat_template:re}).split(this.image_tag),se=ye.length-1;if(R.length!==se)throw new Error(`Number of images provided (${R.length}) does not match number of "${this.image_tag}" image tags (${se})`);const[ne,we,g]=be.model.convert_tokens_to_ids([this.image_tag,this.image_start_tag,this.image_end_tag]);let b=xe(ye[0]),e=new Array(b.length).fill(!1);for(let ue=1;ue<ye.length;++ue){const D=new Array(this.num_image_tokens).fill(ne),z=xe(ye[ue]);b=(0,N.mergeArrays)(b,[we],D,[g],z);const Re=new Array(this.num_image_tokens).fill(!0);e=(0,N.mergeArrays)(e,[!1],Re,[!1],new Array(z.length).fill(!1))}const l=[1,b.length],M={input_ids:new j.Tensor("int64",b,l),attention_mask:new j.Tensor("int64",new Array(b.length).fill(1),l),images_seq_mask:new j.Tensor("bool",e,l),images_emb_mask:new j.Tensor("bool",new Array(se*this.num_image_tokens).fill(!0),[1,se,this.num_image_tokens])};if(R&&R.length>0){const ue=await this.image_processor(R);return ue.pixel_values.unsqueeze_(0),{...M,...ue}}return M}}},"./src/models/jina_clip/image_processing_jina_clip.js":(I,C,d)=>{d.r(C),d.d(C,{JinaCLIPImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{constructor(N){const{resize_mode:j,fill_color:q,interpolation:W,size:F,...X}=N;super({...X,size:j==="squash"?{width:F,height:F}:j==="shortest"?{shortest_edge:F}:{longest_edge:F},resample:W==="bicubic"?3:2,do_center_crop:!0,crop_size:F,do_normalize:!0})}}},"./src/models/jina_clip/processing_jina_clip.js":(I,C,d)=>{d.r(C),d.d(C,{JinaCLIPProcessor:()=>N});var k=d("./src/base/processing_utils.js"),T=d("./src/models/auto/image_processing_auto.js"),L=d("./src/tokenizers.js");class N extends k.Processor{static tokenizer_class=L.AutoTokenizer;static image_processor_class=T.AutoImageProcessor;async _call(q=null,W=null,F={}){if(!q&&!W)throw new Error("Either text or images must be provided");return{...q?this.tokenizer(q,F):{},...W?await this.image_processor(W,F):{}}}}},"./src/models/llava_onevision/image_processing_llava_onevision.js":(I,C,d)=>{d.r(C),d.d(C,{LlavaOnevisionImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}},"./src/models/mask2former/image_processing_mask2former.js":(I,C,d)=>{d.r(C),d.d(C,{Mask2FormerImageProcessor:()=>T});var k=d("./src/models/maskformer/image_processing_maskformer.js");class T extends k.MaskFormerImageProcessor{}},"./src/models/maskformer/image_processing_maskformer.js":(I,C,d)=>{d.r(C),d.d(C,{MaskFormerFeatureExtractor:()=>L,MaskFormerImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{post_process_panoptic_segmentation(...j){return(0,k.post_process_panoptic_segmentation)(...j)}post_process_instance_segmentation(...j){return(0,k.post_process_instance_segmentation)(...j)}}class L extends T{}},"./src/models/mgp_str/processing_mgp_str.js":(I,C,d)=>{d.r(C),d.d(C,{MgpstrProcessor:()=>q});var k=d("./src/base/processing_utils.js"),T=d("./src/models/auto/image_processing_auto.js"),L=d("./src/tokenizers.js"),N=d("./src/utils/maths.js");const j={char:["char_decode",1],bpe:["bpe_decode",2],wp:["wp_decode",102]};class q extends k.Processor{static tokenizer_class=L.AutoTokenizer;static image_processor_class=T.AutoImageProcessor;get char_tokenizer(){return this.components.char_tokenizer}get bpe_tokenizer(){return this.components.bpe_tokenizer}get wp_tokenizer(){return this.components.wp_tokenizer}_decode_helper(F,X){if(!j.hasOwnProperty(X))throw new Error(`Format ${X} is not supported.`);const[R,re]=j[X],be=this[R].bind(this),[xe,ye]=F.dims,se=[],ne=[],we=F.tolist();for(let g=0;g<xe;++g){const b=we[g],e=[],l=[];for(let ue=1;ue<ye;++ue){const[D,z]=(0,N.max)((0,N.softmax)(b[ue]));if(l.push(D),z==re)break;e.push(z)}const M=l.length>0?l.reduce((ue,D)=>ue*D,1):0;ne.push(e),se.push(M)}return[be(ne),se]}char_decode(F){return this.char_tokenizer.batch_decode(F).map(X=>X.replaceAll(" ",""))}bpe_decode(F){return this.bpe_tokenizer.batch_decode(F)}wp_decode(F){return this.wp_tokenizer.batch_decode(F).map(X=>X.replaceAll(" ",""))}batch_decode([F,X,R]){const[re,be]=this._decode_helper(F,"char"),[xe,ye]=this._decode_helper(X,"bpe"),[se,ne]=this._decode_helper(R,"wp"),we=[],g=[];for(let b=0;b<re.length;++b){const[e,l]=(0,N.max)([be[b],ye[b],ne[b]]);we.push([re[b],xe[b],se[b]][l]),g.push(e)}return{generated_text:we,scores:g,char_preds:re,bpe_preds:xe,wp_preds:se}}static async from_pretrained(...F){const X=await super.from_pretrained(...F),R=await L.AutoTokenizer.from_pretrained("Xenova/gpt2"),re=await L.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");return X.components={image_processor:X.image_processor,char_tokenizer:X.tokenizer,bpe_tokenizer:R,wp_tokenizer:re},X}async _call(F,X=null){const R=await this.image_processor(F);return X&&(R.labels=this.tokenizer(X).input_ids),R}}},"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js":(I,C,d)=>{d.r(C),d.d(C,{MobileNetV1FeatureExtractor:()=>L,MobileNetV1ImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}class L extends T{}},"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js":(I,C,d)=>{d.r(C),d.d(C,{MobileNetV2FeatureExtractor:()=>L,MobileNetV2ImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}class L extends T{}},"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js":(I,C,d)=>{d.r(C),d.d(C,{MobileNetV3FeatureExtractor:()=>L,MobileNetV3ImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}class L extends T{}},"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js":(I,C,d)=>{d.r(C),d.d(C,{MobileNetV4FeatureExtractor:()=>L,MobileNetV4ImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}class L extends T{}},"./src/models/mobilevit/image_processing_mobilevit.js":(I,C,d)=>{d.r(C),d.d(C,{MobileViTFeatureExtractor:()=>L,MobileViTImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}class L extends T{}},"./src/models/moonshine/feature_extraction_moonshine.js":(I,C,d)=>{d.r(C),d.d(C,{MoonshineFeatureExtractor:()=>L});var k=d("./src/base/feature_extraction_utils.js"),T=d("./src/utils/tensor.js");class L extends k.FeatureExtractor{async _call(j){(0,k.validate_audio_inputs)(j,"MoonshineFeatureExtractor"),j instanceof Float64Array&&(j=new Float32Array(j));const q=[1,j.length];return{input_values:new T.Tensor("float32",j,q)}}}},"./src/models/moonshine/processing_moonshine.js":(I,C,d)=>{d.r(C),d.d(C,{MoonshineProcessor:()=>N});var k=d("./src/models/auto/feature_extraction_auto.js"),T=d("./src/tokenizers.js"),L=d("./src/base/processing_utils.js");class N extends L.Processor{static tokenizer_class=T.AutoTokenizer;static feature_extractor_class=k.AutoFeatureExtractor;async _call(q){return await this.feature_extractor(q)}}},"./src/models/nougat/image_processing_nougat.js":(I,C,d)=>{d.r(C),d.d(C,{NougatImageProcessor:()=>T});var k=d("./src/models/donut/image_processing_donut.js");class T extends k.DonutImageProcessor{}},"./src/models/owlv2/image_processing_owlv2.js":(I,C,d)=>{d.r(C),d.d(C,{Owlv2ImageProcessor:()=>T});var k=d("./src/models/owlvit/image_processing_owlvit.js");class T extends k.OwlViTImageProcessor{}},"./src/models/owlvit/image_processing_owlvit.js":(I,C,d)=>{d.r(C),d.d(C,{OwlViTFeatureExtractor:()=>L,OwlViTImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{post_process_object_detection(...j){return(0,k.post_process_object_detection)(...j)}}class L extends T{}},"./src/models/owlvit/processing_owlvit.js":(I,C,d)=>{d.r(C),d.d(C,{OwlViTProcessor:()=>N});var k=d("./src/base/processing_utils.js"),T=d("./src/models/auto/image_processing_auto.js"),L=d("./src/tokenizers.js");class N extends k.Processor{static tokenizer_class=L.AutoTokenizer;static image_processor_class=T.AutoImageProcessor}},"./src/models/paligemma/processing_paligemma.js":(I,C,d)=>{d.r(C),d.d(C,{PaliGemmaProcessor:()=>j});var k=d("./src/base/processing_utils.js"),T=d("./src/models/auto/image_processing_auto.js"),L=d("./src/tokenizers.js");const N="<image>";class j extends k.Processor{static tokenizer_class=L.AutoTokenizer;static image_processor_class=T.AutoImageProcessor;static uses_processor_config=!1;async _call(W,F=null,X={}){F||(console.warn("You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."),F=""),Array.isArray(W)||(W=[W]),Array.isArray(F)||(F=[F]);const R=this.tokenizer.bos_token,re=this.image_processor.config.image_seq_length;let be;F.some(ye=>ye.includes(N))?be=F.map(ye=>{const se=ye.replaceAll(N,N.repeat(re)),ne=se.lastIndexOf(N),we=ne===-1?0:ne+7;return se.slice(0,we)+R+se.slice(we)+`
`}):(console.warn("You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."),be=F.map(ye=>function(se,ne,we,g,b){return`${g.repeat(we*b)}${ne}${se}
`}(ye,R,re,N,W.length)));const xe=this.tokenizer(be,X);return{...await this.image_processor(W,X),...xe}}}},"./src/models/phi3_v/image_processing_phi3_v.js":(I,C,d)=>{d.r(C),d.d(C,{Phi3VImageProcessor:()=>F});var k=d("./src/base/image_processors_utils.js"),T=d("./src/utils/tensor.js");const L=336,N=[2,3],{ceil:j,floor:q,sqrt:W}=Math;class F extends k.ImageProcessor{constructor(R){super({...R,do_normalize:!0,do_pad:!0,pad_size:"custom",do_convert_rgb:!0,do_resize:!0}),this._num_crops=R.num_crops}calc_num_image_tokens_from_image_size(R,re){const{num_img_tokens:be}=this.config;return q((q(re/L)*q(R/L)+1)*be+1+(q(re/L)+1)*W(be))}get_resize_output_image_size(R,re){const be=this._num_crops,[xe,ye]=R.size;let se=xe/ye,ne=1;for(;ne*Math.ceil(ne/se)<=be;)ne+=1;ne-=1;const we=Math.floor(336*ne);return[we,Math.floor(we/se)]}pad_image(R,re,be,xe={}){const[ye,se]=re,ne=L*j(ye/L),we=L*j(se/L),g=[1,1,1].map((b,e)=>(b-this.image_mean[e])/this.image_std[e]);return super.pad_image(R,re,{width:we,height:ne},{center:!0,constant_values:g,...xe})}async _call(R,{num_crops:re=null}={}){if(this._num_crops=re??=this.config.num_crops,re<4||W(re)%1!=0)throw new Error("num_crops must be a square number >= 4");Array.isArray(R)||(R=[R]);const be=R.length,xe=await Promise.all(R.map(b=>this.preprocess(b))),ye=xe.map(b=>b.original_size),se=xe.map(b=>b.reshaped_input_size),ne=[];for(const{pixel_values:b}of xe){b.unsqueeze_(0);const[e,l]=b.dims.slice(-2),M=await(0,T.interpolate_4d)(b,{size:[L,L],mode:"bicubic"});if(re>0){const ue=[],D=W(re),z=q(l/D),Re=q(e/D);for(let Ye=0;Ye<D;++Ye)for(let Je=0;Je<D;++Je){let AA,xA,GA,Ge;Ye===D-1?(xA=e-Re,Ge=e):(xA=Ye*Re,Ge=(Ye+1)*Re),Je===D-1?(AA=l-z,GA=l):(AA=Je*z,GA=(Je+1)*z);const Ie=[xA,AA],ze=[Ge,GA],Ue=await(0,T.slice)(b,Ie,ze,N);ue.push(Ue)}const Ne=await(0,T.interpolate_4d)((0,T.cat)(ue,0),{size:[L,L],mode:"bicubic"});ne.push((0,T.cat)([M,Ne],0))}else ne.push(M)}const we=(0,T.stack)(ne,0),g=se.map(b=>b.map(e=>L*j(e/L)));return{pixel_values:we,original_sizes:ye,reshaped_input_sizes:se,image_sizes:new T.Tensor("int64",g.flat(),[be,2]),num_img_tokens:g.map(([b,e])=>this.calc_num_image_tokens_from_image_size(e,b))}}}},"./src/models/phi3_v/processing_phi3_v.js":(I,C,d)=>{d.r(C),d.d(C,{Phi3VProcessor:()=>q});var k=d("./src/base/processing_utils.js"),T=d("./src/models/auto/image_processing_auto.js"),L=d("./src/tokenizers.js");d("./src/utils/image.js");const N="<|image|>",j=/<\|image_\d+\|>/g;class q extends k.Processor{static image_processor_class=T.AutoImageProcessor;static tokenizer_class=L.AutoTokenizer;async _call(F,X=null,{padding:R=!0,truncation:re=!0,num_crops:be=null}={}){let xe,ye;if(Array.isArray(F)||(F=[F]),X){ye=await this.image_processor(X,{num_crops:be});const{num_img_tokens:se}=ye,ne=F.map((g,b)=>g.split(j).join(N.repeat(se[b])));xe=this.tokenizer(ne,{padding:R,truncation:re});const we=this.tokenizer.model.convert_tokens_to_ids([N])[0];xe.input_ids.map_(g=>g==we?-g:g)}else xe=this.tokenizer(F);return{...xe,...ye}}}},"./src/models/processors.js":(I,C,d)=>{d.r(C),d.d(C,{Florence2Processor:()=>k.Florence2Processor,GroundingDinoProcessor:()=>T.GroundingDinoProcessor,Idefics3Processor:()=>L.Idefics3Processor,JinaCLIPProcessor:()=>j.JinaCLIPProcessor,MgpstrProcessor:()=>q.MgpstrProcessor,MoonshineProcessor:()=>W.MoonshineProcessor,OwlViTProcessor:()=>F.OwlViTProcessor,PaliGemmaProcessor:()=>R.PaliGemmaProcessor,Phi3VProcessor:()=>X.Phi3VProcessor,PyAnnoteProcessor:()=>re.PyAnnoteProcessor,Qwen2VLProcessor:()=>be.Qwen2VLProcessor,SamProcessor:()=>xe.SamProcessor,SpeechT5Processor:()=>ye.SpeechT5Processor,VLChatProcessor:()=>N.VLChatProcessor,Wav2Vec2Processor:()=>se.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>ne.Wav2Vec2ProcessorWithLM,WhisperProcessor:()=>we.WhisperProcessor});var k=d("./src/models/florence2/processing_florence2.js"),T=d("./src/models/grounding_dino/processing_grounding_dino.js"),L=d("./src/models/idefics3/processing_idefics3.js"),N=d("./src/models/janus/processing_janus.js"),j=d("./src/models/jina_clip/processing_jina_clip.js"),q=d("./src/models/mgp_str/processing_mgp_str.js"),W=d("./src/models/moonshine/processing_moonshine.js"),F=d("./src/models/owlvit/processing_owlvit.js"),X=d("./src/models/phi3_v/processing_phi3_v.js"),R=d("./src/models/paligemma/processing_paligemma.js"),re=d("./src/models/pyannote/processing_pyannote.js"),be=d("./src/models/qwen2_vl/processing_qwen2_vl.js"),xe=d("./src/models/sam/processing_sam.js"),ye=d("./src/models/speecht5/processing_speecht5.js"),se=d("./src/models/wav2vec2/processing_wav2vec2.js"),ne=d("./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js"),we=d("./src/models/whisper/processing_whisper.js")},"./src/models/pvt/image_processing_pvt.js":(I,C,d)=>{d.r(C),d.d(C,{PvtImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}},"./src/models/pyannote/feature_extraction_pyannote.js":(I,C,d)=>{d.r(C),d.d(C,{PyAnnoteFeatureExtractor:()=>N});var k=d("./src/base/feature_extraction_utils.js"),T=d("./src/utils/tensor.js"),L=d("./src/utils/maths.js");class N extends k.FeatureExtractor{async _call(q){(0,k.validate_audio_inputs)(q,"PyAnnoteFeatureExtractor"),q instanceof Float64Array&&(q=new Float32Array(q));const W=[1,1,q.length];return{input_values:new T.Tensor("float32",q,W)}}samples_to_frames(q){return(q-this.config.offset)/this.config.step}post_process_speaker_diarization(q,W){const F=W/this.samples_to_frames(W)/this.config.sampling_rate,X=[];for(const R of q.tolist()){const re=[];let be=-1;for(let xe=0;xe<R.length;++xe){const ye=(0,L.softmax)(R[xe]),[se,ne]=(0,L.max)(ye),[we,g]=[xe,xe+1];ne!==be?(be=ne,re.push({id:ne,start:we,end:g,score:se})):(re.at(-1).end=g,re.at(-1).score+=se)}X.push(re.map(({id:xe,start:ye,end:se,score:ne})=>({id:xe,start:ye*F,end:se*F,confidence:ne/(se-ye)})))}return X}}},"./src/models/pyannote/processing_pyannote.js":(I,C,d)=>{d.r(C),d.d(C,{PyAnnoteProcessor:()=>L});var k=d("./src/base/processing_utils.js"),T=d("./src/models/pyannote/feature_extraction_pyannote.js");class L extends k.Processor{static feature_extractor_class=T.PyAnnoteFeatureExtractor;async _call(j){return await this.feature_extractor(j)}post_process_speaker_diarization(...j){return this.feature_extractor.post_process_speaker_diarization(...j)}get sampling_rate(){return this.feature_extractor.config.sampling_rate}}},"./src/models/qwen2_vl/image_processing_qwen2_vl.js":(I,C,d)=>{d.r(C),d.d(C,{Qwen2VLImageProcessor:()=>L});var k=d("./src/base/image_processors_utils.js"),T=d("./src/utils/tensor.js");class L extends k.ImageProcessor{async _call(j,...q){const{pixel_values:W,original_sizes:F,reshaped_input_sizes:X}=await super._call(j,...q);let R=W;const{temporal_patch_size:re,merge_size:be,patch_size:xe}=this.config;R.dims[0]===1&&(R=(0,T.cat)(Array.from({length:re},()=>R),0));const ye=R.dims[0]/re,se=R.dims[1],ne=Math.floor(R.dims[2]/xe),we=Math.floor(R.dims[3]/xe);return{pixel_values:R.view(ye,re,se,Math.floor(ne/be),be,xe,Math.floor(we/be),be,xe).permute(0,3,6,4,7,2,1,5,8).view(ye*ne*we,se*re*xe*xe),image_grid_thw:new T.Tensor("int64",[ye,ne,we],[1,3]),original_sizes:F,reshaped_input_sizes:X}}}},"./src/models/qwen2_vl/processing_qwen2_vl.js":(I,C,d)=>{d.r(C),d.d(C,{Qwen2VLProcessor:()=>N});var k=d("./src/base/processing_utils.js"),T=d("./src/models/auto/image_processing_auto.js"),L=d("./src/tokenizers.js");d("./src/utils/image.js");class N extends k.Processor{static image_processor_class=T.AutoImageProcessor;static tokenizer_class=L.AutoTokenizer;async _call(q,W=null,...F){let X,R;if(Array.isArray(q)||(q=[q]),W&&(X=await this.image_processor(W),R=X.image_grid_thw),R){let re=this.image_processor.config.merge_size**2,be=0;const xe=R.tolist();q=q.map(ye=>{for(;ye.includes("<|image_pad|>");){const se=Number(xe[be++].reduce((ne,we)=>ne*we,1n));ye=ye.replace("<|image_pad|>","<|placeholder|>".repeat(Math.floor(se/re)))}return ye.replaceAll("<|placeholder|>","<|image_pad|>")})}return{...this.tokenizer(q),...X}}}},"./src/models/rt_detr/image_processing_rt_detr.js":(I,C,d)=>{d.r(C),d.d(C,{RTDetrImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{post_process_object_detection(...N){return(0,k.post_process_object_detection)(...N)}}},"./src/models/sam/image_processing_sam.js":(I,C,d)=>{d.r(C),d.d(C,{SamImageProcessor:()=>N});var k=d("./src/base/image_processors_utils.js"),T=d("./src/utils/core.js"),L=d("./src/utils/tensor.js");class N extends k.ImageProcessor{reshape_input_points(q,W,F,X=!1){q=structuredClone(q);let R=(0,T.calculateDimensions)(q);if(R.length===3)X||(R=[1,...R]),q=[q];else if(R.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let re=0;re<q.length;++re){let be=W[re],xe=F[re],ye=[xe[0]/be[0],xe[1]/be[1]];for(let se=0;se<q[re].length;++se)for(let ne=0;ne<q[re][se].length;++ne)for(let we=0;we<q[re][se][ne].length;++we)q[re][se][ne][we]*=ye[we%2]}return new L.Tensor("float32",Float32Array.from(q.flat(1/0)),R)}add_input_labels(q,W){let F=(0,T.calculateDimensions)(q);if(F.length===2)F=[1,...F],q=[q];else if(F.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(F.some((X,R)=>X!==W.dims[R]))throw Error(`The first ${F.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new L.Tensor("int64",q.flat(1/0).map(BigInt),F)}async _call(q,{input_points:W=null,input_labels:F=null,input_boxes:X=null}={}){const R=await super._call(q);if(W&&(R.input_points=this.reshape_input_points(W,R.original_sizes,R.reshaped_input_sizes)),F){if(!R.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");R.input_labels=this.add_input_labels(F,R.input_points)}return X&&(R.input_boxes=this.reshape_input_points(X,R.original_sizes,R.reshaped_input_sizes,!0)),R}async post_process_masks(q,W,F,{mask_threshold:X=0,binarize:R=!0,pad_size:re=null}={}){const be=[],xe=[(re=re??this.pad_size).height,re.width];for(let ye=0;ye<W.length;++ye){const se=W[ye],ne=F[ye];let we=await(0,L.interpolate_4d)(q[ye],{mode:"bilinear",size:xe});if(we=we.slice(null,null,[0,ne[0]],[0,ne[1]]),we=await(0,L.interpolate_4d)(we,{mode:"bilinear",size:se}),R){const g=we.data,b=new Uint8Array(g.length);for(let e=0;e<g.length;++e)g[e]>X&&(b[e]=1);we=new L.Tensor("bool",b,we.dims)}be.push(we)}return be}generate_crop_boxes(q,W,{crop_n_layers:F=0,overlap_ratio:X=512/1500,points_per_crop:R=32,crop_n_points_downscale_factor:re=1}={}){}}},"./src/models/sam/processing_sam.js":(I,C,d)=>{d.r(C),d.d(C,{SamProcessor:()=>L});var k=d("./src/base/processing_utils.js"),T=d("./src/models/auto/image_processing_auto.js");class L extends k.Processor{static image_processor_class=T.AutoImageProcessor;async _call(...j){return await this.image_processor(...j)}post_process_masks(...j){return this.image_processor.post_process_masks(...j)}reshape_input_points(...j){return this.image_processor.reshape_input_points(...j)}}},"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js":(I,C,d)=>{d.r(C),d.d(C,{SeamlessM4TFeatureExtractor:()=>N});var k=d("./src/base/feature_extraction_utils.js"),T=d("./src/utils/tensor.js"),L=d("./src/utils/audio.js");class N extends k.FeatureExtractor{constructor(q){super(q);const W=this.config.sampling_rate,F=(0,L.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(W/2),W,null,"kaldi",!0);for(let X=0;X<F.length;++X)F[X].push(0);this.mel_filters=F,this.window=(0,L.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(q,W){return q=q.map(F=>32768*F),(0,L.spectrogram)(q,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:W,transpose:!0})}async _call(q,{padding:W=!0,pad_to_multiple_of:F=2,do_normalize_per_mel_bins:X=!0,return_attention_mask:R=!0}={}){(0,k.validate_audio_inputs)(q,"SeamlessM4TFeatureExtractor");let re,be=await this._extract_fbank_features(q,this.config.max_length);if(X){const[g,b]=be.dims,e=be.data;for(let l=0;l<b;++l){let M=0;for(let Re=0;Re<g;++Re)M+=e[Re*b+l];const ue=M/g;let D=0;for(let Re=0;Re<g;++Re)D+=(e[Re*b+l]-ue)**2;D/=g-1;const z=Math.sqrt(D+1e-7);for(let Re=0;Re<g;++Re){const Ne=Re*b+l;e[Ne]=(e[Ne]-ue)/z}}}if(W){const[g,b]=be.dims,e=be.data,l=g%F;if(l>0){const M=new Float32Array(b*(g+l));M.set(e),M.fill(this.config.padding_value,e.length);const ue=g+l;be=new T.Tensor(be.type,M,[ue,b]),R&&(re=new T.Tensor("int64",new BigInt64Array(ue),[1,ue]),re.data.fill(1n,0,g))}}const[xe,ye]=be.dims,se=this.config.stride;if(xe%se!==0)throw new Error(`The number of frames (${xe}) must be a multiple of the stride (${se}).`);const ne=be.view(1,Math.floor(xe/se),ye*se),we={input_features:ne};if(R){const g=ne.dims[1],b=new BigInt64Array(g);if(re){const e=re.data;for(let l=1,M=0;l<xe;l+=se,++M)b[M]=e[l]}else b.fill(1n);we.attention_mask=new T.Tensor("int64",b,[1,g])}return we}}},"./src/models/segformer/image_processing_segformer.js":(I,C,d)=>{d.r(C),d.d(C,{SegformerFeatureExtractor:()=>L,SegformerImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{post_process_semantic_segmentation(...j){return(0,k.post_process_semantic_segmentation)(...j)}}class L extends T{}},"./src/models/siglip/image_processing_siglip.js":(I,C,d)=>{d.r(C),d.d(C,{SiglipImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}},"./src/models/speecht5/feature_extraction_speecht5.js":(I,C,d)=>{d.r(C),d.d(C,{SpeechT5FeatureExtractor:()=>T});var k=d("./src/base/feature_extraction_utils.js");class T extends k.FeatureExtractor{}},"./src/models/speecht5/processing_speecht5.js":(I,C,d)=>{d.r(C),d.d(C,{SpeechT5Processor:()=>N});var k=d("./src/base/processing_utils.js"),T=d("./src/tokenizers.js"),L=d("./src/models/auto/feature_extraction_auto.js");class N extends k.Processor{static tokenizer_class=T.AutoTokenizer;static feature_extractor_class=L.AutoFeatureExtractor;async _call(q){return await this.feature_extractor(q)}}},"./src/models/swin2sr/image_processing_swin2sr.js":(I,C,d)=>{d.r(C),d.d(C,{Swin2SRImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{pad_image(N,j,q,W={}){const[F,X,R]=j;return super.pad_image(N,j,{width:X+(q-X%q)%q,height:F+(q-F%q)%q},{mode:"symmetric",center:!1,constant_values:-1,...W})}}},"./src/models/vit/image_processing_vit.js":(I,C,d)=>{d.r(C),d.d(C,{ViTFeatureExtractor:()=>L,ViTImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{}class L extends T{}},"./src/models/vitmatte/image_processing_vitmatte.js":(I,C,d)=>{d.r(C),d.d(C,{VitMatteImageProcessor:()=>L});var k=d("./src/base/image_processors_utils.js"),T=d("./src/utils/tensor.js");class L extends k.ImageProcessor{async _call(j,q){Array.isArray(j)||(j=[j]),Array.isArray(q)||(q=[q]);const W=await Promise.all(j.map(R=>this.preprocess(R))),F=await Promise.all(q.map(R=>this.preprocess(R,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,T.stack)(W.map((R,re)=>(0,T.cat)([R.pixel_values,F[re].pixel_values],0)),0),original_sizes:W.map(R=>R.original_size),reshaped_input_sizes:W.map(R=>R.reshaped_input_size)}}}},"./src/models/vitpose/image_processing_vitpose.js":(I,C,d)=>{d.r(C),d.d(C,{VitPoseImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{post_process_pose_estimation(N,j,{threshold:q=null}={}){const W=N.tolist(),[F,X,R,re]=N.dims,be=[];for(let xe=0;xe<F;++xe){const ye=W[xe],se=j[xe],ne=[];for(let we=0;we<se.length;++we){const g=se[we],b=[],e=[],l=[],M=g.at(-2)/re,ue=g.at(-1)/R;for(let D=0;D<ye.length;++D){let[z,Re]=[0,0],Ne=0,Ye=-1/0;const Je=ye[D];for(let xA=0;xA<Je.length;++xA){const GA=Je[xA];for(let Ge=0;Ge<GA.length;++Ge){const Ie=GA[Ge];Ne+=Ie,Ye=Math.max(Ye,Ie),z+=(Ge+.5)*Ie,Re+=xA*Ie}}if(q!=null&&Ye<q)continue;const AA=[M*z/Ne,ue*Re/Ne];b.push(AA),l.push(D),e.push(Ye)}ne.push({bbox:g,scores:e,labels:l,keypoints:b})}be.push(ne)}return be}}},"./src/models/wav2vec2/feature_extraction_wav2vec2.js":(I,C,d)=>{d.r(C),d.d(C,{Wav2Vec2FeatureExtractor:()=>L});var k=d("./src/base/feature_extraction_utils.js"),T=d("./src/utils/tensor.js");class L extends k.FeatureExtractor{_zero_mean_unit_var_norm(j){const q=j.reduce((X,R)=>X+R,0),W=q/j.length,F=j.reduce((X,R)=>X+(R-W)**2,0)/j.length;return j.map(X=>(X-W)/Math.sqrt(F+1e-7))}async _call(j){(0,k.validate_audio_inputs)(j,"Wav2Vec2FeatureExtractor"),j instanceof Float64Array&&(j=new Float32Array(j));let q=j;this.config.do_normalize&&(q=this._zero_mean_unit_var_norm(q));const W=[1,q.length];return{input_values:new T.Tensor("float32",q,W),attention_mask:new T.Tensor("int64",new BigInt64Array(q.length).fill(1n),W)}}}},"./src/models/wav2vec2/processing_wav2vec2.js":(I,C,d)=>{d.r(C),d.d(C,{Wav2Vec2Processor:()=>N});var k=d("./src/tokenizers.js"),T=d("./src/models/auto/feature_extraction_auto.js"),L=d("./src/base/processing_utils.js");class N extends L.Processor{static tokenizer_class=k.AutoTokenizer;static feature_extractor_class=T.AutoFeatureExtractor;async _call(q){return await this.feature_extractor(q)}}},"./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js":(I,C,d)=>{d.r(C),d.d(C,{Wav2Vec2ProcessorWithLM:()=>N});var k=d("./src/tokenizers.js"),T=d("./src/models/auto/feature_extraction_auto.js"),L=d("./src/base/processing_utils.js");class N extends L.Processor{static tokenizer_class=k.AutoTokenizer;static feature_extractor_class=T.AutoFeatureExtractor;async _call(q){return await this.feature_extractor(q)}}},"./src/models/wespeaker/feature_extraction_wespeaker.js":(I,C,d)=>{d.r(C),d.d(C,{WeSpeakerFeatureExtractor:()=>L});var k=d("./src/base/feature_extraction_utils.js");d("./src/utils/tensor.js");var T=d("./src/utils/audio.js");class L extends k.FeatureExtractor{constructor(j){super(j);const q=this.config.sampling_rate,W=(0,T.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(q/2),q,null,"kaldi",!0);for(let F=0;F<W.length;++F)W[F].push(0);this.mel_filters=W,this.window=(0,T.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(j){return j=j.map(q=>32768*q),(0,T.spectrogram)(j,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(j){(0,k.validate_audio_inputs)(j,"WeSpeakerFeatureExtractor");const q=(await this._extract_fbank_features(j)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const W=q.mean(1).data,F=q.data,[X,R,re]=q.dims;for(let be=0;be<X;++be){const xe=be*R*re,ye=be*re;for(let se=0;se<R;++se){const ne=xe+se*re;for(let we=0;we<re;++we)F[ne+we]-=W[ye+we]}}}return{input_features:q}}}},"./src/models/whisper/common_whisper.js":(I,C,d)=>{d.r(C),d.d(C,{WHISPER_LANGUAGE_MAPPING:()=>T,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>L,whisper_language_to_code:()=>N});const k=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],T=new Map(k),L=new Map([...k.map(([j,q])=>[q,j]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function N(j){j=j.toLowerCase();let q=L.get(j);if(q===void 0){if(!T.has(j)){const W=j.length===2?T.keys():T.values();throw new Error(`Language "${j}" is not supported. Must be one of: ${JSON.stringify(W)}`)}q=j}return q}},"./src/models/whisper/feature_extraction_whisper.js":(I,C,d)=>{d.r(C),d.d(C,{WhisperFeatureExtractor:()=>N});var k=d("./src/base/feature_extraction_utils.js");d("./src/utils/tensor.js");var T=d("./src/utils/audio.js"),L=d("./src/utils/maths.js");class N extends k.FeatureExtractor{constructor(q){super(q),this.config.mel_filters??=(0,T.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney"),this.window=(0,T.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(q){const W=await(0,T.spectrogram)(q,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:this.config.nb_max_frames}),F=W.data,X=(0,L.max)(F)[0];for(let R=0;R<F.length;++R)F[R]=(Math.max(F[R],X-8)+4)/4;return W}async _call(q){let W;return(0,k.validate_audio_inputs)(q,"WhisperFeatureExtractor"),q.length>this.config.n_samples?(console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),W=q.slice(0,this.config.n_samples)):(W=new Float32Array(this.config.n_samples),W.set(q)),{input_features:(await this._extract_fbank_features(W)).unsqueeze_(0)}}}},"./src/models/whisper/generation_whisper.js":(I,C,d)=>{d.r(C),d.d(C,{WhisperGenerationConfig:()=>T});var k=d("./src/generation/configuration_utils.js");class T extends k.GenerationConfig{return_timestamps=null;return_token_timestamps=null;num_frames=null;alignment_heads=null;task=null;language=null;no_timestamps_token_id=null;prompt_ids=null;is_multilingual=null;lang_to_id=null;task_to_id=null;max_initial_timestamp_index=1}},"./src/models/whisper/processing_whisper.js":(I,C,d)=>{d.r(C),d.d(C,{WhisperProcessor:()=>N});var k=d("./src/models/auto/feature_extraction_auto.js"),T=d("./src/tokenizers.js"),L=d("./src/base/processing_utils.js");class N extends L.Processor{static tokenizer_class=T.AutoTokenizer;static feature_extractor_class=k.AutoFeatureExtractor;async _call(q){return await this.feature_extractor(q)}}},"./src/models/yolos/image_processing_yolos.js":(I,C,d)=>{d.r(C),d.d(C,{YolosFeatureExtractor:()=>L,YolosImageProcessor:()=>T});var k=d("./src/base/image_processors_utils.js");class T extends k.ImageProcessor{post_process_object_detection(...j){return(0,k.post_process_object_detection)(...j)}}class L extends T{}},"./src/ops/registry.js":(I,C,d)=>{d.r(C),d.d(C,{TensorOpRegistry:()=>q});var k=d("./src/backends/onnx.js"),T=d("./src/utils/tensor.js"),L=d("./src/env.js");const N=L.apis.IS_BROWSER_ENV||L.apis.IS_WEBWORKER_ENV,j=async(W,F,X)=>{const R=await(0,k.createInferenceSession)(new Uint8Array(W),F);let re=Promise.resolve();return async be=>{const xe=(0,k.isONNXProxy)(),ye=Object.fromEntries(Object.entries(be).map(([ne,we])=>[ne,(xe?we.clone():we).ort_tensor])),se=await(re=N?re.then(()=>R.run(ye)):R.run(ye));return Array.isArray(X)?X.map(ne=>new T.Tensor(se[ne])):new T.Tensor(se[X])}};class q{static session_options={};static get nearest_interpolate_4d(){return this._nearest_interpolate_4d||(this._nearest_interpolate_4d=j([8,10,18,0,58,129,1,10,41,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,18,10,4,109,111,100,101,34,7,110,101,97,114,101,115,116,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,21],this.session_options,"y")),this._nearest_interpolate_4d}static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=j([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=j([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=j([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=j([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=j([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=j([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}static get slice(){return this._slice||(this._slice=j([8,7,18,0,58,96,10,25,10,1,120,10,1,115,10,1,101,10,1,97,10,1,116,18,1,121,34,5,83,108,105,99,101,18,1,114,90,9,10,1,120,18,4,10,2,8,1,90,9,10,1,115,18,4,10,2,8,7,90,9,10,1,101,18,4,10,2,8,7,90,9,10,1,97,18,4,10,2,8,7,90,9,10,1,116,18,4,10,2,8,7,98,9,10,1,121,18,4,10,2,8,1,66,2,16,13],this.session_options,"y")),this._slice}}},"./src/pipelines.js":(I,C,d)=>{d.r(C),d.d(C,{AudioClassificationPipeline:()=>Re,AutomaticSpeechRecognitionPipeline:()=>Ye,DepthEstimationPipeline:()=>kA,DocumentQuestionAnsweringPipeline:()=>ze,FeatureExtractionPipeline:()=>D,FillMaskPipeline:()=>we,ImageClassificationPipeline:()=>AA,ImageFeatureExtractionPipeline:()=>z,ImageSegmentationPipeline:()=>xA,ImageToImagePipeline:()=>Pe,ImageToTextPipeline:()=>Je,ObjectDetectionPipeline:()=>Ge,Pipeline:()=>xe,QuestionAnsweringPipeline:()=>ne,SummarizationPipeline:()=>b,Text2TextGenerationPipeline:()=>g,TextClassificationPipeline:()=>ye,TextGenerationPipeline:()=>M,TextToAudioPipeline:()=>Ue,TokenClassificationPipeline:()=>se,TranslationPipeline:()=>e,ZeroShotAudioClassificationPipeline:()=>Ne,ZeroShotClassificationPipeline:()=>ue,ZeroShotImageClassificationPipeline:()=>GA,ZeroShotObjectDetectionPipeline:()=>Ie,pipeline:()=>yA});var k=d("./src/tokenizers.js"),T=d("./src/models.js"),L=d("./src/models/auto/processing_auto.js");d("./src/base/processing_utils.js");var N=d("./src/utils/generic.js"),j=d("./src/utils/core.js"),q=d("./src/utils/maths.js"),W=d("./src/utils/audio.js"),F=d("./src/utils/tensor.js"),X=d("./src/utils/image.js");async function R(nA){return Array.isArray(nA)||(nA=[nA]),await Promise.all(nA.map(Se=>X.RawImage.read(Se)))}async function re(nA,Se){return Array.isArray(nA)||(nA=[nA]),await Promise.all(nA.map(Ze=>typeof Ze=="string"||Ze instanceof URL?(0,W.read_audio)(Ze,Se):Ze instanceof Float64Array?new Float32Array(Ze):Ze))}function be(nA,Se){Se&&(nA=nA.map(pA=>0|pA));const[Ze,mA,CA,Te]=nA;return{xmin:Ze,ymin:mA,xmax:CA,ymax:Te}}class xe extends N.Callable{constructor({task:Se,model:Ze,tokenizer:mA=null,processor:CA=null}){super(),this.task=Se,this.model=Ze,this.tokenizer=mA,this.processor=CA}async dispose(){await this.model.dispose()}}class ye extends xe{constructor(Se){super(Se)}async _call(Se,{top_k:Ze=1}={}){const mA=this.tokenizer(Se,{padding:!0,truncation:!0}),CA=await this.model(mA),Te=this.model.config.problem_type==="multi_label_classification"?FA=>FA.sigmoid():FA=>new F.Tensor("float32",(0,q.softmax)(FA.data),FA.dims),pA=this.model.config.id2label,EA=[];for(const FA of CA.logits){const YA=Te(FA),J=await(0,F.topk)(YA,Ze),OA=J[0].tolist(),ge=J[1].tolist().map(($,me)=>({label:pA?pA[$]:`LABEL_${$}`,score:OA[me]}));Ze===1?EA.push(...ge):EA.push(ge)}return Array.isArray(Se)||Ze===1?EA:EA[0]}}class se extends xe{constructor(Se){super(Se)}async _call(Se,{ignore_labels:Ze=["O"]}={}){const mA=Array.isArray(Se),CA=this.tokenizer(mA?Se:[Se],{padding:!0,truncation:!0}),Te=(await this.model(CA)).logits,pA=this.model.config.id2label,EA=[];for(let FA=0;FA<Te.dims[0];++FA){const YA=CA.input_ids[FA],J=Te[FA],OA=[];for(let ge=0;ge<J.dims[0];++ge){const $=J[ge],me=(0,q.max)($.data)[1],Fe=pA?pA[me]:`LABEL_${me}`;if(Ze.includes(Fe))continue;const qe=this.tokenizer.decode([YA[ge].item()],{skip_special_tokens:!0});if(qe==="")continue;const dA=(0,q.softmax)($.data);OA.push({entity:Fe,score:dA[me],index:ge,word:qe})}EA.push(OA)}return mA?EA:EA[0]}}class ne extends xe{constructor(Se){super(Se)}async _call(Se,Ze,{top_k:mA=1}={}){const CA=this.tokenizer(Se,{text_pair:Ze,padding:!0,truncation:!0}),{start_logits:Te,end_logits:pA}=await this.model(CA),EA=CA.input_ids.tolist(),FA=CA.attention_mask.tolist(),YA=this.tokenizer.all_special_ids,J=[];for(let OA=0;OA<Te.dims[0];++OA){const ge=EA[OA],$=ge.findIndex(vA=>vA==this.tokenizer.sep_token_id);FA[OA].map((vA,QA)=>vA==1&&(QA===0||QA>$&&YA.findIndex(TA=>TA==ge[QA])===-1));const me=Te[OA].tolist(),Fe=pA[OA].tolist();for(let vA=1;vA<me.length;++vA)(FA[OA]==0||vA<=$||YA.findIndex(QA=>QA==ge[vA])!==-1)&&(me[vA]=-1/0,Fe[vA]=-1/0);const qe=(0,q.softmax)(me).map((vA,QA)=>[vA,QA]),dA=(0,q.softmax)(Fe).map((vA,QA)=>[vA,QA]);qe[0][0]=0,dA[0][0]=0;const oA=(0,j.product)(qe,dA).filter(vA=>vA[0][1]<=vA[1][1]).map(vA=>[vA[0][1],vA[1][1],vA[0][0]*vA[1][0]]).sort((vA,QA)=>QA[2]-vA[2]);for(let vA=0;vA<Math.min(oA.length,mA);++vA){const[QA,TA,Mt]=oA[vA],Tt=ge.slice(QA,TA+1),ut=this.tokenizer.decode(Tt,{skip_special_tokens:!0});J.push({answer:ut,score:Mt})}}return mA===1?J[0]:J}}class we extends xe{constructor(Se){super(Se)}async _call(Se,{top_k:Ze=5}={}){const mA=this.tokenizer(Se,{padding:!0,truncation:!0}),{logits:CA}=await this.model(mA),Te=[],pA=mA.input_ids.tolist();for(let EA=0;EA<pA.length;++EA){const FA=pA[EA],YA=FA.findIndex(me=>me==this.tokenizer.mask_token_id);if(YA===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const J=CA[EA][YA],OA=await(0,F.topk)(new F.Tensor("float32",(0,q.softmax)(J.data),J.dims),Ze),ge=OA[0].tolist(),$=OA[1].tolist();Te.push($.map((me,Fe)=>{const qe=FA.slice();return qe[YA]=me,{score:ge[Fe],token:Number(me),token_str:this.tokenizer.decode([me]),sequence:this.tokenizer.decode(qe,{skip_special_tokens:!0})}}))}return Array.isArray(Se)?Te:Te[0]}}class g extends xe{_key="generated_text";constructor(Se){super(Se)}async _call(Se,Ze={}){Array.isArray(Se)||(Se=[Se]),this.model.config.prefix&&(Se=Se.map(FA=>this.model.config.prefix+FA));const mA=this.model.config.task_specific_params;mA&&mA[this.task]&&mA[this.task].prefix&&(Se=Se.map(FA=>mA[this.task].prefix+FA));const CA=this.tokenizer,Te={padding:!0,truncation:!0};let pA;pA=this instanceof e&&"_build_translation_inputs"in CA?CA._build_translation_inputs(Se,Te,Ze):CA(Se,Te);const EA=await this.model.generate({...pA,...Ze});return CA.batch_decode(EA,{skip_special_tokens:!0}).map(FA=>({[this._key]:FA}))}}class b extends g{_key="summary_text";constructor(Se){super(Se)}}class e extends g{_key="translation_text";constructor(Se){super(Se)}}function l(nA){return Array.isArray(nA)&&nA.every(Se=>"role"in Se&&"content"in Se)}class M extends xe{constructor(Se){super(Se)}async _call(Se,Ze={}){let mA,CA=!1,Te=!1;if(typeof Se=="string")mA=Se=[Se];else if(Array.isArray(Se)&&Se.every($=>typeof $=="string"))CA=!0,mA=Se;else{if(l(Se))Se=[Se];else{if(!Array.isArray(Se)||!Se.every(l))throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");CA=!0}Te=!0,mA=Se.map($=>this.tokenizer.apply_chat_template($,{tokenize:!1,add_generation_prompt:!0}))}const pA=Ze.add_special_tokens??!1,EA=!Te&&(Ze.return_full_text??!0);this.tokenizer.padding_side="left";const FA=this.tokenizer(mA,{add_special_tokens:pA,padding:!0,truncation:!0}),YA=await this.model.generate({...FA,...Ze}),J=this.tokenizer.batch_decode(YA,{skip_special_tokens:!0});let OA;!EA&&FA.input_ids.dims.at(-1)>0&&(OA=this.tokenizer.batch_decode(FA.input_ids,{skip_special_tokens:!0}).map($=>$.length));const ge=Array.from({length:Se.length},$=>[]);for(let $=0;$<J.length;++$){const me=Math.floor($/YA.dims[0]*Se.length);OA&&(J[$]=J[$].slice(OA[me])),ge[me].push({generated_text:Te?[...Se[me],{role:"assistant",content:J[$]}]:J[$]})}return CA||ge.length!==1?ge:ge[0]}}class ue extends xe{constructor(Se){super(Se),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([Ze,mA])=>[Ze.toLowerCase(),mA])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(Se,Ze,{hypothesis_template:mA="This example is {}.",multi_label:CA=!1}={}){const Te=Array.isArray(Se);Te||(Se=[Se]),Array.isArray(Ze)||(Ze=[Ze]);const pA=Ze.map(YA=>mA.replace("{}",YA)),EA=CA||Ze.length===1,FA=[];for(const YA of Se){const J=[];for(const $ of pA){const me=this.tokenizer(YA,{text_pair:$,padding:!0,truncation:!0}),Fe=await this.model(me);EA?J.push([Fe.logits.data[this.contradiction_id],Fe.logits.data[this.entailment_id]]):J.push(Fe.logits.data[this.entailment_id])}const OA=EA?J.map($=>(0,q.softmax)($)[1]):(0,q.softmax)(J),ge=OA.map(($,me)=>[$,me]).sort(($,me)=>me[0]-$[0]);FA.push({sequence:YA,labels:ge.map($=>Ze[$[1]]),scores:ge.map($=>$[0])})}return Te?FA:FA[0]}}class D extends xe{constructor(Se){super(Se)}async _call(Se,{pooling:Ze="none",normalize:mA=!1,quantize:CA=!1,precision:Te="binary"}={}){const pA=this.tokenizer(Se,{padding:!0,truncation:!0}),EA=await this.model(pA);let FA=EA.last_hidden_state??EA.logits??EA.token_embeddings;if(Ze!=="none")if(Ze==="mean")FA=(0,F.mean_pooling)(FA,pA.attention_mask);else{if(Ze!=="cls")throw Error(`Pooling method '${Ze}' not supported.`);FA=FA.slice(null,0)}return mA&&(FA=FA.normalize(2,-1)),CA&&(FA=(0,F.quantize_embeddings)(FA,Te)),FA}}class z extends xe{constructor(Se){super(Se)}async _call(Se,{pool:Ze=null}={}){const mA=await R(Se),{pixel_values:CA}=await this.processor(mA),Te=await this.model({pixel_values:CA});let pA;if(Ze){if(!("pooler_output"in Te))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");pA=Te.pooler_output}else pA=Te.last_hidden_state??Te.logits??Te.image_embeds;return pA}}class Re extends xe{constructor(Se){super(Se)}async _call(Se,{top_k:Ze=5}={}){const mA=this.processor.feature_extractor.config.sampling_rate,CA=await re(Se,mA),Te=this.model.config.id2label,pA=[];for(const EA of CA){const FA=await this.processor(EA),YA=(await this.model(FA)).logits[0],J=await(0,F.topk)(new F.Tensor("float32",(0,q.softmax)(YA.data),YA.dims),Ze),OA=J[0].tolist(),ge=J[1].tolist().map(($,me)=>({label:Te?Te[$]:`LABEL_${$}`,score:OA[me]}));pA.push(ge)}return Array.isArray(Se)?pA:pA[0]}}class Ne extends xe{constructor(Se){super(Se)}async _call(Se,Ze,{hypothesis_template:mA="This is a sound of {}."}={}){const CA=!Array.isArray(Se);CA&&(Se=[Se]);const Te=Ze.map(J=>mA.replace("{}",J)),pA=this.tokenizer(Te,{padding:!0,truncation:!0}),EA=this.processor.feature_extractor.config.sampling_rate,FA=await re(Se,EA),YA=[];for(const J of FA){const OA=await this.processor(J),ge=await this.model({...pA,...OA}),$=(0,q.softmax)(ge.logits_per_audio.data);YA.push([...$].map((me,Fe)=>({score:me,label:Ze[Fe]})))}return CA?YA[0]:YA}}class Ye extends xe{constructor(Se){super(Se)}async _call(Se,Ze={}){switch(this.model.config.model_type){case"whisper":return this._call_whisper(Se,Ze);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(Se,Ze);case"moonshine":return this._call_moonshine(Se,Ze);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(Se,Ze){Ze.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),Ze.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const mA=!Array.isArray(Se);mA&&(Se=[Se]);const CA=this.processor.feature_extractor.config.sampling_rate,Te=await re(Se,CA),pA=[];for(const EA of Te){const FA=await this.processor(EA),YA=(await this.model(FA)).logits[0],J=[];for(const ge of YA)J.push((0,q.max)(ge.data)[1]);const OA=this.tokenizer.decode(J);pA.push({text:OA})}return mA?pA[0]:pA}async _call_whisper(Se,Ze){const mA=Ze.return_timestamps??!1,CA=Ze.chunk_length_s??0,Te=Ze.force_full_sequences??!1;let pA=Ze.stride_length_s??null;const EA={...Ze};mA==="word"&&(EA.return_token_timestamps=!0,EA.return_timestamps=!1);const FA=!Array.isArray(Se);FA&&(Se=[Se]);const YA=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,J=this.processor.feature_extractor.config.hop_length,OA=this.processor.feature_extractor.config.sampling_rate,ge=await re(Se,OA),$=[];for(const me of ge){let Fe=[];if(CA>0){if(pA===null)pA=CA/6;else if(CA<=pA)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const oA=OA*CA,vA=OA*pA,QA=oA-2*vA;let TA=0;for(;;){const Mt=TA+oA,Tt=me.subarray(TA,Mt),ut=await this.processor(Tt),Ct=TA===0,$t=Mt>=me.length;if(Fe.push({stride:[Tt.length,Ct?0:vA,$t?0:vA],input_features:ut.input_features,is_last:$t}),$t)break;TA+=QA}}else Fe=[{stride:[me.length,0,0],input_features:(await this.processor(me)).input_features,is_last:!0}];for(const oA of Fe){EA.num_frames=Math.floor(oA.stride[0]/J);const vA=await this.model.generate({inputs:oA.input_features,...EA});mA==="word"?(oA.tokens=vA.sequences.tolist()[0],oA.token_timestamps=vA.token_timestamps.tolist()[0].map(QA=>(0,q.round)(QA,2))):oA.tokens=vA[0].tolist(),oA.stride=oA.stride.map(QA=>QA/OA)}const[qe,dA]=this.tokenizer._decode_asr(Fe,{time_precision:YA,return_timestamps:mA,force_full_sequences:Te});$.push({text:qe,...dA})}return FA?$[0]:$}async _call_moonshine(Se,Ze){const mA=!Array.isArray(Se);mA&&(Se=[Se]);const CA=this.processor.feature_extractor.config.sampling_rate,Te=await re(Se,CA),pA=[];for(const EA of Te){const FA=await this.processor(EA),YA=6*Math.floor(EA.length/CA),J=await this.model.generate({max_new_tokens:YA,...Ze,...FA}),OA=this.processor.batch_decode(J,{skip_special_tokens:!0})[0];pA.push({text:OA})}return mA?pA[0]:pA}}class Je extends xe{constructor(Se){super(Se)}async _call(Se,Ze={}){const mA=Array.isArray(Se),CA=await R(Se),{pixel_values:Te}=await this.processor(CA),pA=[];for(const EA of Te){EA.dims=[1,...EA.dims];const FA=await this.model.generate({inputs:EA,...Ze}),YA=this.tokenizer.batch_decode(FA,{skip_special_tokens:!0}).map(J=>({generated_text:J.trim()}));pA.push(YA)}return mA?pA:pA[0]}}class AA extends xe{constructor(Se){super(Se)}async _call(Se,{top_k:Ze=5}={}){const mA=await R(Se),{pixel_values:CA}=await this.processor(mA),Te=await this.model({pixel_values:CA}),pA=this.model.config.id2label,EA=[];for(const FA of Te.logits){const YA=await(0,F.topk)(new F.Tensor("float32",(0,q.softmax)(FA.data),FA.dims),Ze),J=YA[0].tolist(),OA=YA[1].tolist().map((ge,$)=>({label:pA?pA[ge]:`LABEL_${ge}`,score:J[$]}));EA.push(OA)}return Array.isArray(Se)?EA:EA[0]}}class xA extends xe{constructor(Se){super(Se),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(Se,{threshold:Ze=.5,mask_threshold:mA=.5,overlap_mask_area_threshold:CA=.8,label_ids_to_fuse:Te=null,target_sizes:pA=null,subtask:EA=null}={}){if(Array.isArray(Se)&&Se.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const FA=await R(Se),YA=FA.map(qe=>[qe.height,qe.width]),{pixel_values:J,pixel_mask:OA}=await this.processor(FA),ge=await this.model({pixel_values:J,pixel_mask:OA});let $=null;if(EA!==null)$=this.subtasks_mapping[EA];else for(let[qe,dA]of Object.entries(this.subtasks_mapping))if(dA in this.processor.image_processor){$=this.processor.image_processor[dA].bind(this.processor.image_processor),EA=qe;break}const me=this.model.config.id2label,Fe=[];if(EA==="panoptic"||EA==="instance"){const qe=$(ge,Ze,mA,CA,Te,pA??YA)[0],dA=qe.segmentation;for(const oA of qe.segments_info){const vA=new Uint8ClampedArray(dA.data.length);for(let TA=0;TA<dA.data.length;++TA)dA.data[TA]===oA.id&&(vA[TA]=255);const QA=new X.RawImage(vA,dA.dims[1],dA.dims[0],1);Fe.push({score:oA.score,label:me[oA.label_id],mask:QA})}}else{if(EA!=="semantic")throw Error(`Subtask ${EA} not supported.`);{const{segmentation:qe,labels:dA}=$(ge,pA??YA)[0];for(const oA of dA){const vA=new Uint8ClampedArray(qe.data.length);for(let TA=0;TA<qe.data.length;++TA)qe.data[TA]===oA&&(vA[TA]=255);const QA=new X.RawImage(vA,qe.dims[1],qe.dims[0],1);Fe.push({score:null,label:me[oA],mask:QA})}}}return Fe}}class GA extends xe{constructor(Se){super(Se)}async _call(Se,Ze,{hypothesis_template:mA="This is a photo of {}"}={}){const CA=Array.isArray(Se),Te=await R(Se),pA=Ze.map(ge=>mA.replace("{}",ge)),EA=this.tokenizer(pA,{padding:this.model.config.model_type!=="siglip"||"max_length",truncation:!0}),{pixel_values:FA}=await this.processor(Te),YA=await this.model({...EA,pixel_values:FA}),J=this.model.config.model_type==="siglip"?ge=>ge.sigmoid().data:ge=>(0,q.softmax)(ge.data),OA=[];for(const ge of YA.logits_per_image){const $=[...J(ge)].map((me,Fe)=>({score:me,label:Ze[Fe]}));$.sort((me,Fe)=>Fe.score-me.score),OA.push($)}return CA?OA:OA[0]}}class Ge extends xe{constructor(Se){super(Se)}async _call(Se,{threshold:Ze=.9,percentage:mA=!1}={}){const CA=Array.isArray(Se);if(CA&&Se.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const Te=await R(Se),pA=mA?null:Te.map($=>[$.height,$.width]),{pixel_values:EA,pixel_mask:FA}=await this.processor(Te),YA=await this.model({pixel_values:EA,pixel_mask:FA}),J=this.processor.image_processor.post_process_object_detection(YA,Ze,pA),OA=this.model.config.id2label,ge=J.map($=>$.boxes.map((me,Fe)=>({score:$.scores[Fe],label:OA[$.classes[Fe]],box:be(me,!mA)})));return CA?ge:ge[0]}}class Ie extends xe{constructor(Se){super(Se)}async _call(Se,Ze,{threshold:mA=.1,top_k:CA=null,percentage:Te=!1}={}){const pA=Array.isArray(Se),EA=await R(Se),FA=this.tokenizer(Ze,{padding:!0,truncation:!0}),YA=await this.processor(EA),J=[];for(let OA=0;OA<EA.length;++OA){const ge=EA[OA],$=Te?null:[[ge.height,ge.width]],me=YA.pixel_values[OA].unsqueeze_(0),Fe=await this.model({...FA,pixel_values:me});let qe;if("post_process_grounded_object_detection"in this.processor){const dA=this.processor.post_process_grounded_object_detection(Fe,FA.input_ids,{box_threshold:mA,text_threshold:mA,target_sizes:$})[0];qe=dA.boxes.map((oA,vA)=>({score:dA.scores[vA],label:dA.labels[vA],box:be(oA,!Te)}))}else{const dA=this.processor.image_processor.post_process_object_detection(Fe,mA,$,!0)[0];qe=dA.boxes.map((oA,vA)=>({score:dA.scores[vA],label:Ze[dA.classes[vA]],box:be(oA,!Te)}))}qe.sort((dA,oA)=>oA.score-dA.score),CA!==null&&(qe=qe.slice(0,CA)),J.push(qe)}return pA?J:J[0]}}class ze extends xe{constructor(Se){super(Se)}async _call(Se,Ze,mA={}){const CA=(await R(Se))[0],{pixel_values:Te}=await this.processor(CA),pA=`<s_docvqa><s_question>${Ze}</s_question><s_answer>`,EA=this.tokenizer(pA,{add_special_tokens:!1,padding:!0,truncation:!0}).input_ids,FA=await this.model.generate({inputs:Te,max_length:this.model.config.decoder.max_position_embeddings,decoder_input_ids:EA,...mA}),YA=this.tokenizer.batch_decode(FA)[0].match(/<s_answer>(.*?)<\/s_answer>/);let J=null;return YA&&YA.length>=2&&(J=YA[1].trim()),[{answer:J}]}}class Ue extends xe{DEFAULT_VOCODER_ID="Xenova/speecht5_hifigan";constructor(Se){super(Se),this.vocoder=Se.vocoder??null}async _call(Se,{speaker_embeddings:Ze=null}={}){return this.processor?this._call_text_to_spectrogram(Se,{speaker_embeddings:Ze}):this._call_text_to_waveform(Se)}async _call_text_to_waveform(Se){const Ze=this.tokenizer(Se,{padding:!0,truncation:!0}),{waveform:mA}=await this.model(Ze),CA=this.model.config.sampling_rate;return new W.RawAudio(mA.data,CA)}async _call_text_to_spectrogram(Se,{speaker_embeddings:Ze}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await T.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof Ze=="string"||Ze instanceof URL)&&(Ze=new Float32Array(await(await fetch(Ze)).arrayBuffer())),Ze instanceof Float32Array)Ze=new F.Tensor("float32",Ze,[1,Ze.length]);else if(!(Ze instanceof F.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:mA}=this.tokenizer(Se,{padding:!0,truncation:!0}),{waveform:CA}=await this.model.generate_speech(mA,Ze,{vocoder:this.vocoder}),Te=this.processor.feature_extractor.config.sampling_rate;return new W.RawAudio(CA.data,Te)}}class Pe extends xe{constructor(Se){super(Se)}async _call(Se){const Ze=await R(Se),mA=await this.processor(Ze),CA=await this.model(mA),Te=[];for(const pA of CA.reconstruction){const EA=pA.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");Te.push(X.RawImage.fromTensor(EA))}return Te.length>1?Te:Te[0]}}class kA extends xe{constructor(Se){super(Se)}async _call(Se){const Ze=await R(Se),mA=await this.processor(Ze),{predicted_depth:CA}=await this.model(mA),Te=[];for(let pA=0;pA<Ze.length;++pA){const EA=CA[pA],[FA,YA]=EA.dims.slice(-2),[J,OA]=Ze[pA].size,ge=(await(0,F.interpolate_4d)(EA.view(1,1,FA,YA),{size:[OA,J],mode:"bilinear"})).view(OA,J),$=ge.min().item(),me=ge.max().item(),Fe=ge.sub($).div_(me-$).mul_(255).to("uint8").unsqueeze(0),qe=X.RawImage.fromTensor(Fe);Te.push({predicted_depth:ge,depth:qe})}return Te.length>1?Te:Te[0]}}const aA=Object.freeze({"text-classification":{tokenizer:k.AutoTokenizer,pipeline:ye,model:T.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:k.AutoTokenizer,pipeline:se,model:T.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:k.AutoTokenizer,pipeline:ne,model:T.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:k.AutoTokenizer,pipeline:we,model:T.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:k.AutoTokenizer,pipeline:b,model:T.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:k.AutoTokenizer,pipeline:e,model:T.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:k.AutoTokenizer,pipeline:g,model:T.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:k.AutoTokenizer,pipeline:M,model:T.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:k.AutoTokenizer,pipeline:ue,model:T.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:Re,model:T.AutoModelForAudioClassification,processor:L.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:k.AutoTokenizer,pipeline:Ne,model:T.AutoModel,processor:L.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:k.AutoTokenizer,pipeline:Ye,model:[T.AutoModelForSpeechSeq2Seq,T.AutoModelForCTC],processor:L.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:k.AutoTokenizer,pipeline:Ue,model:[T.AutoModelForTextToWaveform,T.AutoModelForTextToSpectrogram],processor:[L.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:k.AutoTokenizer,pipeline:Je,model:T.AutoModelForVision2Seq,processor:L.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:AA,model:T.AutoModelForImageClassification,processor:L.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:xA,model:[T.AutoModelForImageSegmentation,T.AutoModelForSemanticSegmentation,T.AutoModelForUniversalSegmentation],processor:L.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"zero-shot-image-classification":{tokenizer:k.AutoTokenizer,pipeline:GA,model:T.AutoModel,processor:L.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:Ge,model:T.AutoModelForObjectDetection,processor:L.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:k.AutoTokenizer,pipeline:Ie,model:T.AutoModelForZeroShotObjectDetection,processor:L.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:k.AutoTokenizer,pipeline:ze,model:T.AutoModelForDocumentQuestionAnswering,processor:L.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:Pe,model:T.AutoModelForImageToImage,processor:L.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:kA,model:T.AutoModelForDepthEstimation,processor:L.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:k.AutoTokenizer,pipeline:D,model:T.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:L.AutoProcessor,pipeline:z,model:[T.AutoModelForImageFeatureExtraction,T.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),iA=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function yA(nA,Se=null,{progress_callback:Ze=null,config:mA=null,cache_dir:CA=null,local_files_only:Te=!1,revision:pA="main",device:EA=null,dtype:FA=null,model_file_name:YA=null,session_options:J={}}={}){nA=iA[nA]??nA;const OA=aA[nA.split("_",1)[0]];if(!OA)throw Error(`Unsupported pipeline: ${nA}. Must be one of [${Object.keys(aA)}]`);Se||(Se=OA.default.model,console.log(`No model specified. Using default model: "${Se}".`));const ge={progress_callback:Ze,config:mA,cache_dir:CA,local_files_only:Te,revision:pA,device:EA,dtype:FA,model_file_name:YA,session_options:J},$=new Map([["tokenizer",OA.tokenizer],["model",OA.model],["processor",OA.processor]]),me=await async function(Fe,qe,dA){const oA=Object.create(null),vA=[];for(const[QA,TA]of Fe.entries()){if(!TA)continue;let Mt;Mt=Array.isArray(TA)?new Promise(async(Tt,ut)=>{let Ct;for(const $t of TA){if($t===null)return void Tt(null);try{return void Tt(await $t.from_pretrained(qe,dA))}catch(Qr){if(Qr.message?.includes("Unsupported model type"))Ct=Qr;else{if(!Qr.message?.includes("Could not locate file"))return void ut(Qr);Ct=Qr}}}ut(Ct)}):TA.from_pretrained(qe,dA),oA[QA]=Mt,vA.push(Mt)}await Promise.all(vA);for(const[QA,TA]of Object.entries(oA))oA[QA]=await TA;return oA}($,Se,ge);return me.task=nA,(0,j.dispatchCallback)(Ze,{status:"ready",task:nA,model:Se}),new OA.pipeline(me)}},"./src/tokenizers.js":(I,C,d)=>{d.r(C),d.d(C,{AlbertTokenizer:()=>La,AutoTokenizer:()=>Rs,BartTokenizer:()=>Ma,BertTokenizer:()=>Za,BlenderbotSmallTokenizer:()=>Pt,BlenderbotTokenizer:()=>wt,BloomTokenizer:()=>Kt,CLIPTokenizer:()=>Ls,CamembertTokenizer:()=>ks,CodeGenTokenizer:()=>Ii,CodeLlamaTokenizer:()=>Ci,CohereTokenizer:()=>Hs,ConvBertTokenizer:()=>gs,DebertaTokenizer:()=>$A,DebertaV2Tokenizer:()=>PA,DistilBertTokenizer:()=>Ss,ElectraTokenizer:()=>Fs,EsmTokenizer:()=>rs,FalconTokenizer:()=>bi,GPT2Tokenizer:()=>xt,GPTNeoXTokenizer:()=>Kr,GemmaTokenizer:()=>Ai,Grok1Tokenizer:()=>Ja,HerbertTokenizer:()=>qt,LlamaTokenizer:()=>ds,M2M100Tokenizer:()=>Ns,MBart50Tokenizer:()=>Rr,MBartTokenizer:()=>Tr,MPNetTokenizer:()=>ei,MarianTokenizer:()=>Ys,MgpstrTokenizer:()=>as,MobileBertTokenizer:()=>wa,NllbTokenizer:()=>kr,NougatTokenizer:()=>ti,PreTrainedTokenizer:()=>bt,Qwen2Tokenizer:()=>fs,RoFormerTokenizer:()=>Xa,RobertaTokenizer:()=>us,SiglipTokenizer:()=>Bs,SpeechT5Tokenizer:()=>ka,SqueezeBertTokenizer:()=>ZA,T5Tokenizer:()=>ea,TokenizerModel:()=>l,VitsTokenizer:()=>Es,Wav2Vec2CTCTokenizer:()=>ys,WhisperTokenizer:()=>Os,XLMRobertaTokenizer:()=>$s,XLMTokenizer:()=>xs,is_chinese_char:()=>se});var k=d("./src/utils/generic.js"),T=d("./src/utils/core.js"),L=d("./src/utils/hub.js"),N=d("./src/utils/maths.js"),j=d("./src/utils/tensor.js"),q=d("./src/utils/data-structures.js"),W=d("./node_modules/@huggingface/jinja/dist/index.js"),F=d("./src/models/whisper/common_whisper.js");async function X(tA,_){const ve=await Promise.all([(0,L.getModelJSON)(tA,"tokenizer.json",!0,_),(0,L.getModelJSON)(tA,"tokenizer_config.json",!0,_)]);return _.legacy!==null&&(ve[1].legacy=_.legacy),ve}function R(tA,_=!0){if(tA.Regex!==void 0){let ve=tA.Regex.replace(/\\([#&~])/g,"$1");for(const[Oe,We]of b)ve=ve.replaceAll(Oe,We);return new RegExp(ve,"gu")}if(tA.String!==void 0){const ve=(0,T.escapeRegExp)(tA.String);return new RegExp(_?ve:`(${ve})`,"gu")}return console.warn("Unknown pattern type:",tA),null}function re(tA){return new Map(Object.entries(tA))}function be(tA){const _=tA.dims;switch(_.length){case 1:return tA.tolist();case 2:if(_[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return tA.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${_.length}.`)}}function xe(tA){return tA.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function ye(tA){return tA.replace(/\p{M}/gu,"")}function se(tA){return tA>=19968&&tA<=40959||tA>=13312&&tA<=19903||tA>=131072&&tA<=173791||tA>=173824&&tA<=177983||tA>=177984&&tA<=178207||tA>=178208&&tA<=183983||tA>=63744&&tA<=64255||tA>=194560&&tA<=195103}const ne="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",we=new RegExp(`^[${ne}]+$`,"gu"),g=".,!?…。，、।۔،",b=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],[` ?[^(\\s|[${g}])]+`,` ?[^\\s${g}]+`]]);class e{constructor(_){this.content=_.content,this.id=_.id,this.single_word=_.single_word??!1,this.lstrip=_.lstrip??!1,this.rstrip=_.rstrip??!1,this.special=_.special??!1,this.normalized=_.normalized??null}}class l extends k.Callable{constructor(_){super(),this.config=_,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(_,...ve){switch(_.type){case"WordPiece":return new M(_);case"Unigram":return new ue(_,...ve);case"BPE":return new Re(_);default:if(_.vocab)return Array.isArray(_.vocab)?new ue(_,...ve):typeof _.vocab=="object"&&_.continuing_subword_prefix&&_.unk_token?new M(_):new Ne(_,...ve);throw new Error(`Unknown TokenizerModel type: ${_.type}`)}}_call(_){return _=this.encode(_),this.fuse_unk&&(_=function(ve,Oe,We){const $e=[];let fA=0;for(;fA<ve.length;)if($e.push(ve[fA]),(Oe.get(ve[fA])??We)===We)for(;++fA<ve.length&&(Oe.get(ve[fA])??We)===We;)Oe.get($e.at(-1))!==We&&($e[$e.length-1]+=ve[fA]);else++fA;return $e}(_,this.tokens_to_ids,this.unk_token_id)),_}encode(_){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(_){return _.map(ve=>this.tokens_to_ids.get(ve)??this.unk_token_id)}convert_ids_to_tokens(_){return _.map(ve=>this.vocab[ve]??this.unk_token)}}class M extends l{constructor(_){super(_),this.tokens_to_ids=re(_.vocab),this.unk_token_id=this.tokens_to_ids.get(_.unk_token),this.unk_token=_.unk_token,this.max_input_chars_per_word=_.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[ve,Oe]of this.tokens_to_ids)this.vocab[Oe]=ve}encode(_){const ve=[];for(const Oe of _){const We=[...Oe];if(We.length>this.max_input_chars_per_word){ve.push(this.unk_token);continue}let $e=!1,fA=0;const NA=[];for(;fA<We.length;){let He=We.length,WA=null;for(;fA<He;){let bA=We.slice(fA,He).join("");if(fA>0&&(bA=this.config.continuing_subword_prefix+bA),this.tokens_to_ids.has(bA)){WA=bA;break}--He}if(WA===null){$e=!0;break}NA.push(WA),fA=He}$e?ve.push(this.unk_token):ve.push(...NA)}return ve}}class ue extends l{constructor(_,ve){super(_);const Oe=_.vocab.length;this.vocab=new Array(Oe),this.scores=new Array(Oe);for(let We=0;We<Oe;++We)[this.vocab[We],this.scores[We]]=_.vocab[We];this.unk_token_id=_.unk_id,this.unk_token=this.vocab[_.unk_id],this.tokens_to_ids=new Map(this.vocab.map((We,$e)=>[We,$e])),this.bos_token=" ",this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=ve.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.unk_token=this.vocab[this.unk_token_id],this.minScore=(0,N.min)(this.scores)[0],this.unk_score=this.minScore-10,this.scores[this.unk_token_id]=this.unk_score,this.trie=new q.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(_){const ve=_.chars;let Oe=0;for(;Oe<ve.length;){let We=!1;const $e=ve.slice(Oe).join(""),fA=this.trie.commonPrefixSearch($e);for(const NA of fA){const He=this.tokens_to_ids.get(NA),WA=this.scores[He],bA=(0,T.len)(NA);_.insert(Oe,bA,WA,He),We||bA!==1||(We=!0)}We||_.insert(Oe,1,this.unk_score,this.unk_token_id),Oe+=1}}tokenize(_){const ve=new q.TokenLattice(_,this.bos_token_id,this.eos_token_id);return this.populateNodes(ve),ve.tokens()}encode(_){const ve=[];for(const Oe of _){const We=this.tokenize(Oe);ve.push(...We)}return ve}}const D=(()=>{const tA=[...Array.from({length:94},(We,$e)=>$e+33),...Array.from({length:12},(We,$e)=>$e+161),...Array.from({length:82},(We,$e)=>$e+174)],_=tA.slice();let ve=0;for(let We=0;We<256;++We)tA.includes(We)||(tA.push(We),_.push(256+ve),ve+=1);const Oe=_.map(We=>String.fromCharCode(We));return Object.fromEntries(tA.map((We,$e)=>[We,Oe[$e]]))})(),z=(0,T.reverseDictionary)(D);class Re extends l{constructor(_){super(_),this.tokens_to_ids=re(_.vocab),this.unk_token_id=this.tokens_to_ids.get(_.unk_token),this.unk_token=_.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[Oe,We]of this.tokens_to_ids)this.vocab[We]=Oe;const ve=Array.isArray(_.merges[0]);this.merges=ve?_.merges:_.merges.map(Oe=>Oe.split(" ",2)),this.bpe_ranks=new Map(this.merges.map((Oe,We)=>[JSON.stringify(Oe),We])),this.end_of_word_suffix=_.end_of_word_suffix,this.continuing_subword_suffix=_.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.cache=new Map}bpe(_){if(_.length===0)return[];const ve=this.cache.get(_);if(ve!==void 0)return ve;const Oe=Array.from(_);this.end_of_word_suffix&&(Oe[Oe.length-1]+=this.end_of_word_suffix);let We=[];if(Oe.length>1){const $e=new q.PriorityQueue((He,WA)=>He.score<WA.score);let fA={token:Oe[0],bias:0,prev:null,next:null},NA=fA;for(let He=1;He<Oe.length;++He){const WA={bias:He/Oe.length,token:Oe[He],prev:NA,next:null};NA.next=WA,this._add_node($e,NA),NA=WA}for(;!$e.isEmpty();){const He=$e.pop();if(He.deleted||!He.next||He.next.deleted)continue;if(He.deleted=!0,He.next.deleted=!0,He.prev){const bA={...He.prev};He.prev.deleted=!0,He.prev=bA,bA.prev?bA.prev.next=bA:fA=bA}const WA={token:He.token+He.next.token,bias:He.bias,prev:He.prev,next:He.next.next};WA.prev?(WA.prev.next=WA,this._add_node($e,WA.prev)):fA=WA,WA.next&&(WA.next.prev=WA,this._add_node($e,WA))}for(let He=fA;He!==null;He=He.next)We.push(He.token)}else We=Oe;if(this.continuing_subword_suffix)for(let $e=0;$e<We.length-1;++$e)We[$e]+=this.continuing_subword_suffix;return this.cache.set(_,We),We}_add_node(_,ve){const Oe=this.bpe_ranks.get(JSON.stringify([ve.token,ve.next.token]));Oe!==void 0&&(ve.score=Oe+ve.bias,_.push(ve))}encode(_){const ve=[];for(const Oe of _){if(this.ignore_merges&&this.tokens_to_ids.has(Oe)){ve.push(Oe);continue}const We=this.bpe(Oe);for(const $e of We)if(this.tokens_to_ids.has($e))ve.push($e);else if(this.byte_fallback){const fA=Array.from(this.text_encoder.encode($e)).map(NA=>`<0x${NA.toString(16).toUpperCase().padStart(2,"0")}>`);fA.every(NA=>this.tokens_to_ids.has(NA))?ve.push(...fA):ve.push(this.unk_token)}else ve.push(this.unk_token)}return ve}}class Ne extends l{constructor(_,ve){super(_),this.tokens_to_ids=re(ve.target_lang?_.vocab[ve.target_lang]:_.vocab),this.bos_token=ve.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=ve.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=ve.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=ve.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[Oe,We]of this.tokens_to_ids)this.vocab[We]=Oe}encode(_){return _}}class Ye extends k.Callable{constructor(_){super(),this.config=_}static fromConfig(_){if(_===null)return null;switch(_.type){case"BertNormalizer":return new kA(_);case"Precompiled":return new Mt(_);case"Sequence":return new Pe(_);case"Replace":return new Je(_);case"NFC":return new AA(_);case"NFKC":return new xA(_);case"NFKD":return new GA(_);case"Strip":return new Ge(_);case"StripAccents":return new Ie(_);case"Lowercase":return new ze(_);case"Prepend":return new Ue(_);default:throw new Error(`Unknown Normalizer type: ${_.type}`)}}normalize(_){throw Error("normalize should be implemented in subclass.")}_call(_){return this.normalize(_)}}class Je extends Ye{normalize(_){const ve=R(this.config.pattern);return ve===null?_:_.replaceAll(ve,this.config.content)}}class AA extends Ye{normalize(_){return _=_.normalize("NFC")}}class xA extends Ye{normalize(_){return _=_.normalize("NFKC")}}class GA extends Ye{normalize(_){return _=_.normalize("NFKD")}}class Ge extends Ye{normalize(_){return this.config.strip_left&&this.config.strip_right?_=_.trim():(this.config.strip_left&&(_=_.trimStart()),this.config.strip_right&&(_=_.trimEnd())),_}}class Ie extends Ye{normalize(_){return _=ye(_)}}class ze extends Ye{normalize(_){return _=_.toLowerCase()}}class Ue extends Ye{normalize(_){return _=this.config.prepend+_}}class Pe extends Ye{constructor(_){super(_),this.normalizers=_.normalizers.map(ve=>Ye.fromConfig(ve))}normalize(_){return this.normalizers.reduce((ve,Oe)=>Oe.normalize(ve),_)}}class kA extends Ye{_tokenize_chinese_chars(_){const ve=[];for(let Oe=0;Oe<_.length;++Oe){const We=_[Oe];se(We.charCodeAt(0))?(ve.push(" "),ve.push(We),ve.push(" ")):ve.push(We)}return ve.join("")}stripAccents(_){return _.normalize("NFD").replace(/\p{Mn}/gu,"")}_is_control(_){switch(_){case"	":case`
`:case"\r":return!1;default:return/^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(_)}}_clean_text(_){const ve=[];for(const Oe of _){const We=Oe.charCodeAt(0);We===0||We===65533||this._is_control(Oe)||(/^\s$/.test(Oe)?ve.push(" "):ve.push(Oe))}return ve.join("")}normalize(_){return this.config.clean_text&&(_=this._clean_text(_)),this.config.handle_chinese_chars&&(_=this._tokenize_chinese_chars(_)),this.config.lowercase?(_=_.toLowerCase(),this.config.strip_accents!==!1&&(_=this.stripAccents(_))):this.config.strip_accents&&(_=this.stripAccents(_)),_}}class aA extends k.Callable{static fromConfig(_){if(_===null)return null;switch(_.type){case"BertPreTokenizer":return new iA(_);case"Sequence":return new Tt(_);case"Whitespace":return new ut(_);case"WhitespaceSplit":return new Ct(_);case"Metaspace":return new QA(_);case"ByteLevel":return new yA(_);case"Split":return new nA(_);case"Punctuation":return new Se(_);case"Digits":return new Ze(_);case"Replace":return new $t(_);default:throw new Error(`Unknown PreTokenizer type: ${_.type}`)}}pre_tokenize_text(_,ve){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(_,ve){return(Array.isArray(_)?_.map(Oe=>this.pre_tokenize_text(Oe,ve)):this.pre_tokenize_text(_,ve)).flat()}_call(_,ve){return this.pre_tokenize(_,ve)}}class iA extends aA{constructor(_){super(),this.pattern=new RegExp(`[^\\s${ne}]+|[${ne}]`,"gu")}pre_tokenize_text(_,ve){return _.trim().match(this.pattern)||[]}}class yA extends aA{constructor(_){super(),this.config=_,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,this.byte_encoder=D,this.text_encoder=new TextEncoder}pre_tokenize_text(_,ve){return this.add_prefix_space&&!_.startsWith(" ")&&(_=" "+_),(this.use_regex?_.match(this.pattern)||[]:[_]).map(Oe=>Array.from(this.text_encoder.encode(Oe),We=>this.byte_encoder[We]).join(""))}}class nA extends aA{constructor(_){super(),this.config=_,this.pattern=R(this.config.pattern,this.config.invert)}pre_tokenize_text(_,ve){return this.pattern===null?[]:this.config.invert?_.match(this.pattern)||[]:this.config.behavior?.toLowerCase()==="removed"?_.split(this.pattern).filter(Oe=>Oe):function(Oe,We){const $e=[];let fA=0;for(const NA of Oe.matchAll(We)){const He=NA[0];fA<NA.index&&$e.push(Oe.slice(fA,NA.index)),He.length>0&&$e.push(He),fA=NA.index+He.length}return fA<Oe.length&&$e.push(Oe.slice(fA)),$e}(_,this.pattern)}}class Se extends aA{constructor(_){super(),this.config=_,this.pattern=new RegExp(`[^${ne}]+|[${ne}]+`,"gu")}pre_tokenize_text(_,ve){return _.match(this.pattern)||[]}}class Ze extends aA{constructor(_){super(),this.config=_;const ve="[^\\d]+|\\d"+(this.config.individual_digits?"":"+");this.pattern=new RegExp(ve,"gu")}pre_tokenize_text(_,ve){return _.match(this.pattern)||[]}}class mA extends k.Callable{constructor(_){super(),this.config=_}static fromConfig(_){if(_===null)return null;switch(_.type){case"TemplateProcessing":return new pA(_);case"ByteLevel":return new EA(_);case"RobertaProcessing":return new Te(_);case"BertProcessing":return new CA(_);case"Sequence":return new FA(_);default:throw new Error(`Unknown PostProcessor type: ${_.type}`)}}post_process(_,...ve){throw Error("post_process should be implemented in subclass.")}_call(_,...ve){return this.post_process(_,...ve)}}class CA extends mA{constructor(_){super(_),this.cls=_.cls[0],this.sep=_.sep[0]}post_process(_,ve=null,{add_special_tokens:Oe=!0}={}){Oe&&(_=(0,T.mergeArrays)([this.cls],_,[this.sep]));let We=new Array(_.length).fill(0);if(ve!==null){const $e=Oe&&this instanceof Te?[this.sep]:[],fA=Oe?[this.sep]:[];_=(0,T.mergeArrays)(_,$e,ve,fA),We=(0,T.mergeArrays)(We,new Array(ve.length+$e.length+fA.length).fill(1))}return{tokens:_,token_type_ids:We}}}class Te extends CA{}class pA extends mA{constructor(_){super(_),this.single=_.single,this.pair=_.pair}post_process(_,ve=null,{add_special_tokens:Oe=!0}={}){const We=ve===null?this.single:this.pair;let $e=[],fA=[];for(const NA of We)"SpecialToken"in NA?Oe&&($e.push(NA.SpecialToken.id),fA.push(NA.SpecialToken.type_id)):"Sequence"in NA&&(NA.Sequence.id==="A"?($e=(0,T.mergeArrays)($e,_),fA=(0,T.mergeArrays)(fA,new Array(_.length).fill(NA.Sequence.type_id))):NA.Sequence.id==="B"&&($e=(0,T.mergeArrays)($e,ve),fA=(0,T.mergeArrays)(fA,new Array(ve.length).fill(NA.Sequence.type_id))));return{tokens:$e,token_type_ids:fA}}}class EA extends mA{post_process(_,ve=null){return ve&&(_=(0,T.mergeArrays)(_,ve)),{tokens:_}}}class FA extends mA{constructor(_){super(_),this.processors=_.processors.map(ve=>mA.fromConfig(ve))}post_process(_,ve=null,Oe={}){let We;for(const $e of this.processors)if($e instanceof EA)_=$e.post_process(_).tokens,ve&&(ve=$e.post_process(ve).tokens);else{const fA=$e.post_process(_,ve,Oe);_=fA.tokens,We=fA.token_type_ids}return{tokens:_,token_type_ids:We}}}class YA extends k.Callable{constructor(_){super(),this.config=_,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=_.trim_offsets}static fromConfig(_){if(_===null)return null;switch(_.type){case"WordPiece":return new me(_);case"Metaspace":return new TA(_);case"ByteLevel":return new Fe(_);case"Replace":return new J(_);case"ByteFallback":return new OA(_);case"Fuse":return new ge(_);case"Strip":return new $(_);case"Sequence":return new dA(_);case"CTC":return new qe(_);case"BPEDecoder":return new oA(_);default:throw new Error(`Unknown Decoder type: ${_.type}`)}}_call(_){return this.decode(_)}decode(_){return this.decode_chain(_).join("")}decode_chain(_){throw Error("`decode_chain` should be implemented in subclass.")}}class J extends YA{decode_chain(_){const ve=R(this.config.pattern);return ve===null?_:_.map(Oe=>Oe.replaceAll(ve,this.config.content))}}class OA extends YA{constructor(_){super(_),this.text_decoder=new TextDecoder}decode_chain(_){const ve=[];let Oe=[];for(const We of _){let $e=null;if(We.length===6&&We.startsWith("<0x")&&We.endsWith(">")){const fA=parseInt(We.slice(3,5),16);isNaN(fA)||($e=fA)}if($e!==null)Oe.push($e);else{if(Oe.length>0){const fA=this.text_decoder.decode(Uint8Array.from(Oe));ve.push(fA),Oe=[]}ve.push(We)}}if(Oe.length>0){const We=this.text_decoder.decode(Uint8Array.from(Oe));ve.push(We),Oe=[]}return ve}}class ge extends YA{decode_chain(_){return[_.join("")]}}class $ extends YA{constructor(_){super(_),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(_){return _.map(ve=>{let Oe=0;for(let $e=0;$e<this.start&&ve[$e]===this.content;++$e)Oe=$e+1;let We=ve.length;for(let $e=0;$e<this.stop;++$e){const fA=ve.length-$e-1;if(ve[fA]!==this.content)break;We=fA}return ve.slice(Oe,We)})}}class me extends YA{constructor(_){super(_),this.cleanup=_.cleanup}decode_chain(_){return _.map((ve,Oe)=>(Oe!==0&&(ve=ve.startsWith(this.config.prefix)?ve.replace(this.config.prefix,""):" "+ve),this.cleanup&&(ve=xe(ve)),ve))}}class Fe extends YA{constructor(_){super(_),this.byte_decoder=z,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(_){const ve=_.join(""),Oe=new Uint8Array([...ve].map(We=>this.byte_decoder[We]));return this.text_decoder.decode(Oe)}decode_chain(_){const ve=[];let Oe=[];for(const We of _)this.added_tokens.find($e=>$e.content===We)!==void 0?(Oe.length>0&&(ve.push(this.convert_tokens_to_string(Oe)),Oe=[]),ve.push(We)):Oe.push(We);return Oe.length>0&&ve.push(this.convert_tokens_to_string(Oe)),ve}}class qe extends YA{constructor(_){super(_),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(_){if(_.length===0)return"";const ve=[_[0]];for(let We=1;We<_.length;++We)_[We]!==ve.at(-1)&&ve.push(_[We]);let Oe=ve.filter(We=>We!==this.pad_token).join("");return this.cleanup&&(Oe=xe(Oe).replaceAll(this.word_delimiter_token," ").trim()),Oe}decode_chain(_){return[this.convert_tokens_to_string(_)]}}class dA extends YA{constructor(_){super(_),this.decoders=_.decoders.map(ve=>YA.fromConfig(ve))}decode_chain(_){return this.decoders.reduce((ve,Oe)=>Oe.decode_chain(ve),_)}}class oA extends YA{constructor(_){super(_),this.suffix=this.config.suffix}decode_chain(_){return _.map((ve,Oe)=>ve.replaceAll(this.suffix,Oe===_.length-1?"":" "))}}class vA extends YA{decode_chain(_){let ve="";for(let Oe=1;Oe<_.length;Oe+=2)ve+=_[Oe];return[ve]}}class QA extends aA{constructor(_){super(),this.addPrefixSpace=_.add_prefix_space,this.replacement=_.replacement,this.strRep=_.str_rep||this.replacement,this.prepend_scheme=_.prepend_scheme??"always"}pre_tokenize_text(_,{section_index:ve}={}){let Oe=_.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!Oe.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&ve===0)&&(Oe=this.strRep+Oe),[Oe]}}class TA extends YA{constructor(_){super(_),this.addPrefixSpace=_.add_prefix_space,this.replacement=_.replacement}decode_chain(_){const ve=[];for(let Oe=0;Oe<_.length;++Oe){let We=_[Oe].replaceAll(this.replacement," ");this.addPrefixSpace&&Oe==0&&We.startsWith(" ")&&(We=We.substring(1)),ve.push(We)}return ve}}class Mt extends Ye{constructor(_){super(_),this.charsmap=_.precompiled_charsmap}normalize(_){return(_=(_=_.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,"")).replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm," ")).includes("～")?_=_.split("～").map(Oe=>Oe.normalize("NFKC")).join("～"):_=_.normalize("NFKC"),_}}class Tt extends aA{constructor(_){super(),this.tokenizers=_.pretokenizers.map(ve=>aA.fromConfig(ve))}pre_tokenize_text(_,ve){return this.tokenizers.reduce((Oe,We)=>We.pre_tokenize(Oe,ve),[_])}}class ut extends aA{constructor(_){super()}pre_tokenize_text(_,ve){return _.match(/\w+|[^\w\s]+/g)||[]}}class Ct extends aA{constructor(_){super()}pre_tokenize_text(_,ve){return function(Oe){return Oe.match(/\S+/g)||[]}(_)}}class $t extends aA{constructor(_){super(),this.config=_,this.pattern=R(this.config.pattern),this.content=this.config.content}pre_tokenize_text(_,ve){return this.pattern===null?[_]:[_.replaceAll(this.pattern,this.config.content)]}}const Qr=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function tr(tA,_,ve,Oe){for(const We of Object.keys(tA)){const $e=_-tA[We].length,fA=ve(We),NA=new Array($e).fill(fA);tA[We]=Oe==="right"?(0,T.mergeArrays)(tA[We],NA):(0,T.mergeArrays)(NA,tA[We])}}function fa(tA,_){for(const ve of Object.keys(tA))tA[ve].length=_}class bt extends k.Callable{return_token_type_ids=!1;padding_side="right";constructor(_,ve){super(),this._tokenizer_config=ve,this.normalizer=Ye.fromConfig(_.normalizer),this.pre_tokenizer=aA.fromConfig(_.pre_tokenizer),this.model=l.fromConfig(_.model,ve),this.post_processor=mA.fromConfig(_.post_processor),this.decoder=YA.fromConfig(_.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const Oe of _.added_tokens){const We=new e(Oe);this.added_tokens.push(We),this.model.tokens_to_ids.set(We.content,We.id),this.model.vocab[We.id]=We.content,We.special&&(this.special_tokens.push(We.content),this.all_special_ids.push(We.id))}if(this.additional_special_tokens=ve.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_regex=this.added_tokens.length>0?new RegExp(this.added_tokens.slice().sort((Oe,We)=>We.content.length-Oe.content.length).map(Oe=>`${Oe.lstrip?"\\s*":""}(${(0,T.escapeRegExp)(Oe.content)})${Oe.rstrip?"\\s*":""}`).join("|")):null,this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.bos_token=this.getToken("bos_token"),this.bos_token_id=this.model.tokens_to_ids.get(this.bos_token),this.eos_token=this.getToken("eos_token"),this.eos_token_id=this.model.tokens_to_ids.get(this.eos_token),this.model_max_length=ve.model_max_length,this.remove_space=ve.remove_space,this.clean_up_tokenization_spaces=ve.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=ve.do_lowercase_and_remove_accent??!1,ve.padding_side&&(this.padding_side=ve.padding_side),this.legacy=!1,this.chat_template=ve.chat_template??null,Array.isArray(this.chat_template)){const Oe=Object.create(null);for(const{name:We,template:$e}of this.chat_template){if(typeof We!="string"||typeof $e!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');Oe[We]=$e}this.chat_template=Oe}this._compiled_template_cache=new Map}getToken(..._){for(const ve of _){const Oe=this._tokenizer_config[ve];if(Oe){if(typeof Oe=="object"){if(Oe.__type==="AddedToken")return Oe.content;throw Error(`Unknown token: ${Oe}`)}return Oe}}return null}static async from_pretrained(_,{progress_callback:ve=null,config:Oe=null,cache_dir:We=null,local_files_only:$e=!1,revision:fA="main",legacy:NA=null}={}){return new this(...await X(_,{progress_callback:ve,config:Oe,cache_dir:We,local_files_only:$e,revision:fA,legacy:NA}))}_call(_,{text_pair:ve=null,add_special_tokens:Oe=!0,padding:We=!1,truncation:$e=null,max_length:fA=null,return_tensor:NA=!0,return_token_type_ids:He=null}={}){const WA=Array.isArray(_);let bA;if(WA){if(_.length===0)throw Error("text array must be non-empty");if(ve!==null){if(!Array.isArray(ve))throw Error("text_pair must also be an array");if(_.length!==ve.length)throw Error("text and text_pair must have the same length");bA=_.map((Wt,cr)=>this._encode_plus(Wt,{text_pair:ve[cr],add_special_tokens:Oe,return_token_type_ids:He}))}else bA=_.map(Wt=>this._encode_plus(Wt,{add_special_tokens:Oe,return_token_type_ids:He}))}else{if(_==null)throw Error("text may not be null or undefined");if(Array.isArray(ve))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");bA=[this._encode_plus(_,{text_pair:ve,add_special_tokens:Oe,return_token_type_ids:He})]}if(fA===null?fA=We==="max_length"?this.model_max_length:(0,N.max)(bA.map(Wt=>Wt.input_ids.length))[0]:$e||console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=true` to explicitly truncate examples to max length."),fA=Math.min(fA,this.model_max_length??1/0),We||$e)for(let Wt=0;Wt<bA.length;++Wt)bA[Wt].input_ids.length!==fA&&(bA[Wt].input_ids.length>fA?$e&&fa(bA[Wt],fA):We&&tr(bA[Wt],fA,cr=>cr==="input_ids"?this.pad_token_id:0,this.padding_side));const Yt={};if(NA){if((!We||!$e)&&bA.some(cr=>{for(const sr of Object.keys(cr))if(cr[sr].length!==bA[0][sr]?.length)return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const Wt=[bA.length,bA[0].input_ids.length];for(const cr of Object.keys(bA[0]))Yt[cr]=new j.Tensor("int64",BigInt64Array.from(bA.flatMap(sr=>sr[cr]).map(BigInt)),Wt)}else{for(const Wt of Object.keys(bA[0]))Yt[Wt]=bA.map(cr=>cr[Wt]);if(!WA)for(const Wt of Object.keys(Yt))Yt[Wt]=Yt[Wt][0]}return Yt}_encode_text(_){return _===null?null:(this.added_tokens_regex?_.split(this.added_tokens_regex).filter(We=>We):[_]).map((We,$e)=>{if(this.added_tokens.find(NA=>NA.content===We)!==void 0)return We;{if(this.remove_space===!0&&(We=We.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(We=function(He){return ye(He.toLowerCase())}(We)),this.normalizer!==null&&(We=this.normalizer(We)),We.length===0)return[];const NA=this.pre_tokenizer!==null?this.pre_tokenizer(We,{section_index:$e}):[We];return this.model(NA)}}).flat()}_encode_plus(_,{text_pair:ve=null,add_special_tokens:Oe=!0,return_token_type_ids:We=null}={}){const{tokens:$e,token_type_ids:fA}=this._tokenize_helper(_,{pair:ve,add_special_tokens:Oe}),NA=this.model.convert_tokens_to_ids($e),He={input_ids:NA,attention_mask:new Array(NA.length).fill(1)};return(We??this.return_token_type_ids)&&fA&&(He.token_type_ids=fA),He}_tokenize_helper(_,{pair:ve=null,add_special_tokens:Oe=!1}={}){const We=this._encode_text(_),$e=this._encode_text(ve);return this.post_processor?this.post_processor(We,$e,{add_special_tokens:Oe}):{tokens:(0,T.mergeArrays)(We??[],$e??[])}}tokenize(_,{pair:ve=null,add_special_tokens:Oe=!1}={}){return this._tokenize_helper(_,{pair:ve,add_special_tokens:Oe}).tokens}encode(_,{text_pair:ve=null,add_special_tokens:Oe=!0,return_token_type_ids:We=null}={}){return this._encode_plus(_,{text_pair:ve,add_special_tokens:Oe,return_token_type_ids:We}).input_ids}batch_decode(_,ve={}){return _ instanceof j.Tensor&&(_=_.tolist()),_.map(Oe=>this.decode(Oe,ve))}decode(_,ve={}){if(_ instanceof j.Tensor&&(_=be(_)),!Array.isArray(_)||_.length===0||!(0,T.isIntegralNumber)(_[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(_,ve)}decode_single(_,{skip_special_tokens:ve=!1,clean_up_tokenization_spaces:Oe=null}){let We=this.model.convert_ids_to_tokens(_);ve&&(We=We.filter(fA=>!this.special_tokens.includes(fA)));let $e=this.decoder?this.decoder(We):We.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&($e=$e.replaceAll(this.decoder.end_of_word_suffix," "),ve&&($e=$e.trim())),(Oe??this.clean_up_tokenization_spaces)&&($e=xe($e)),$e}get_chat_template({chat_template:_=null,tools:ve=null}={}){if(this.chat_template&&typeof this.chat_template=="object"){const Oe=this.chat_template;if(_!==null&&Object.hasOwn(Oe,_))_=Oe[_];else if(_===null)if(ve!==null&&"tool_use"in Oe)_=Oe.tool_use;else{if(!("default"in Oe))throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(Oe).sort()}.`);_=Oe.default}}else if(_===null){if(!this.chat_template)throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");_=this.chat_template}return _}apply_chat_template(_,{tools:ve=null,documents:Oe=null,chat_template:We=null,add_generation_prompt:$e=!1,tokenize:fA=!0,padding:NA=!1,truncation:He=!1,max_length:WA=null,return_tensor:bA=!0,return_dict:Yt=!1,tokenizer_kwargs:Wt={},...cr}={}){if(typeof(We=this.get_chat_template({chat_template:We,tools:ve}))!="string")throw Error("chat_template must be a string, but got "+typeof We);let sr=this._compiled_template_cache.get(We);sr===void 0&&(sr=new W.Template(We),this._compiled_template_cache.set(We,sr));const jt=Object.create(null);for(const KA of Qr){const Jt=this.getToken(KA);Jt&&(jt[KA]=Jt)}const jA=sr.render({messages:_,add_generation_prompt:$e,tools:ve,documents:Oe,...jt,...cr});if(fA){const KA=this._call(jA,{add_special_tokens:!1,padding:NA,truncation:He,max_length:WA,return_tensor:bA,...Wt});return Yt?KA:KA.input_ids}return jA}}class Za extends bt{return_token_type_ids=!0}class La extends bt{return_token_type_ids=!0}class wa extends bt{return_token_type_ids=!0}class ZA extends bt{return_token_type_ids=!0}class $A extends bt{return_token_type_ids=!0}class PA extends bt{return_token_type_ids=!0}class qt extends bt{return_token_type_ids=!0}class gs extends bt{return_token_type_ids=!0}class Xa extends bt{return_token_type_ids=!0}class Ss extends bt{}class ks extends bt{}class xs extends bt{return_token_type_ids=!0;constructor(_,ve){super(_,ve),console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class Fs extends bt{return_token_type_ids=!0}class ea extends bt{}class xt extends bt{}class Ma extends bt{}class Tr extends bt{constructor(_,ve){super(_,ve),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(Oe=>this.languageRegex.test(Oe)),this.lang_to_token=Oe=>Oe}_build_translation_inputs(_,ve,Oe){return vs(this,_,ve,Oe)}}class Rr extends Tr{}class us extends bt{}class Kt extends bt{}const qa="▁";class ds extends bt{padding_side="left";constructor(_,ve){super(_,ve),this.legacy=ve.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new QA({replacement:qa,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(_){if(_===null)return null;if(this.legacy||_.length===0)return super._encode_text(_);let ve=super._encode_text(qa+_.replaceAll(qa," "));return ve.length>1&&ve[0]===qa&&this.special_tokens.includes(ve[1])&&(ve=ve.slice(1)),ve}}class Ci extends bt{}class $s extends bt{}class ei extends bt{}class bi extends bt{}class Kr extends bt{}class rs extends bt{}class fs extends bt{}class Ai extends bt{}class Ja extends bt{}function vs(tA,_,ve,Oe){if(!("language_codes"in tA)||!Array.isArray(tA.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in tA&&tA.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in tA)||typeof tA.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const We=Oe.src_lang,$e=Oe.tgt_lang;if(!tA.language_codes.includes($e))throw new Error(`Target language code "${$e}" is not valid. Must be one of: {${tA.language_codes.join(", ")}}`);if(We!==void 0){if(!tA.language_codes.includes(We))throw new Error(`Source language code "${We}" is not valid. Must be one of: {${tA.language_codes.join(", ")}}`);for(const fA of tA.post_processor.config.single)if("SpecialToken"in fA&&tA.languageRegex.test(fA.SpecialToken.id)){fA.SpecialToken.id=tA.lang_to_token(We);break}}return Oe.forced_bos_token_id=tA.model.convert_tokens_to_ids([tA.lang_to_token($e)])[0],tA._call(_,ve)}class kr extends bt{constructor(_,ve){super(_,ve),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(Oe=>this.languageRegex.test(Oe)),this.lang_to_token=Oe=>Oe}_build_translation_inputs(_,ve,Oe){return vs(this,_,ve,Oe)}}class Ns extends bt{constructor(_,ve){super(_,ve),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(Oe=>this.languageRegex.test(Oe)).map(Oe=>Oe.slice(2,-2)),this.lang_to_token=Oe=>`__${Oe}__`}_build_translation_inputs(_,ve,Oe){return vs(this,_,ve,Oe)}}class Os extends bt{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(_,{return_timestamps:ve=!1,return_language:Oe=!1,time_precision:We=null,force_full_sequences:$e=!0}={}){if(We===null)throw Error("Must specify time_precision");let fA=null;const NA=ve==="word";function He(){return{language:fA,timestamp:[null,null],text:""}}const WA=[];let bA=He(),Yt=0;const Wt=this.timestamp_begin,cr=Wt+1500;let sr=[],jt=[],jA=!1,KA=null;const Jt=new Set(this.all_special_ids);for(const ir of _){const rt=ir.tokens,dr=NA?ir.token_timestamps:null;let gA=null,JA=Wt;if("stride"in ir){const[Vr,Pr,Cr]=ir.stride;if(Yt-=Pr,KA=Vr-Cr,Pr&&(JA=Pr/We+Wt),Cr)for(let Ut=rt.length-1;Ut>=0;--Ut){const xr=Number(rt[Ut]);if(xr>=Wt){if(gA!==null&&(xr-Wt)*We<KA)break;gA=xr}}}let ha=[],Nr=[];for(let Vr=0;Vr<rt.length;++Vr){const Pr=Number(rt[Vr]);if(Jt.has(Pr)){const Cr=this.decode([Pr]),Ut=F.WHISPER_LANGUAGE_MAPPING.get(Cr.slice(2,-2));if(Ut!==void 0){if(fA!==null&&Ut!==fA&&!ve){sr.push(ha);const xr=this.findLongestCommonSequence(sr)[0],ri=this.decode(xr);bA.text=ri,WA.push(bA),sr=[],ha=[],bA=He()}fA=bA.language=Ut}}else if(Pr>=Wt&&Pr<=cr){const Cr=(Pr-Wt)*We+Yt,Ut=(0,N.round)(Cr,2);if(gA!==null&&Pr>=gA)jA=!0;else if(jA||sr.length>0&&Pr<JA)jA=!1;else if(bA.timestamp[0]===null)bA.timestamp[0]=Ut;else if(Ut!==bA.timestamp[0]){bA.timestamp[1]=Ut,sr.push(ha),NA&&jt.push(Nr);const[xr,ri]=this.findLongestCommonSequence(sr,jt),Ha=this.decode(xr);bA.text=Ha,NA&&(bA.words=this.collateWordTimestamps(xr,ri,fA)),WA.push(bA),sr=[],ha=[],jt=[],Nr=[],bA=He()}}else if(ha.push(Pr),NA){let Cr,Ut=(0,N.round)(dr[Vr]+Yt,2);if(Vr+1<dr.length){Cr=(0,N.round)(dr[Vr+1]+Yt,2);const xr=this.decode([Pr]);we.test(xr)&&(Cr=(0,N.round)(Math.min(Ut+We,Cr),2))}else Cr=null;Nr.push([Ut,Cr])}}if("stride"in ir){const[Vr,Pr,Cr]=ir.stride;Yt+=Vr-Cr}ha.length>0?(sr.push(ha),NA&&jt.push(Nr)):sr.every(Vr=>Vr.length===0)&&(bA=He(),sr=[],ha=[],jt=[],Nr=[])}if(sr.length>0){if($e&&ve)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[ir,rt]=this.findLongestCommonSequence(sr,jt),dr=this.decode(ir);bA.text=dr,NA&&(bA.words=this.collateWordTimestamps(ir,rt,fA)),WA.push(bA)}let Ya=Object.create(null);const pa=WA.map(ir=>ir.text).join("");if(ve||Oe){for(let ir=0;ir<WA.length;++ir){const rt=WA[ir];ve||delete rt.timestamp,Oe||delete rt.language}if(NA){const ir=[];for(const rt of WA)for(const dr of rt.words)ir.push(dr);Ya={chunks:ir}}else Ya={chunks:WA}}return[pa,Ya]}findLongestCommonSequence(_,ve=null){let Oe=_[0],We=Oe.length,$e=[];const fA=Array.isArray(ve)&&ve.length>0;let NA=fA?[]:null,He=fA?ve[0]:null;for(let WA=1;WA<_.length;++WA){const bA=_[WA];let Yt=0,Wt=[We,We,0,0];const cr=bA.length;for(let pa=1;pa<We+cr;++pa){const ir=Math.max(0,We-pa),rt=Math.min(We,We+cr-pa),dr=Oe.slice(ir,rt),gA=Math.max(0,pa-We),JA=Math.min(cr,pa),ha=bA.slice(gA,JA);if(dr.length!==ha.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let Nr;Nr=fA?dr.filter((Pr,Cr)=>Pr===ha[Cr]&&He[ir+Cr]<=ve[WA][gA+Cr]).length:dr.filter((Pr,Cr)=>Pr===ha[Cr]).length;const Vr=Nr/pa+pa/1e4;Nr>1&&Vr>Yt&&(Yt=Vr,Wt=[ir,rt,gA,JA])}const[sr,jt,jA,KA]=Wt,Jt=Math.floor((jt+sr)/2),Ya=Math.floor((KA+jA)/2);$e.push(...Oe.slice(0,Jt)),Oe=bA.slice(Ya),We=Oe.length,fA&&(NA.push(...He.slice(0,Jt)),He=ve[WA].slice(Ya))}return $e.push(...Oe),fA?(NA.push(...He),[$e,NA]):[$e,[]]}collateWordTimestamps(_,ve,Oe){const[We,$e,fA]=this.combineTokensIntoWords(_,Oe),NA=[];for(let He=0;He<We.length;++He){const WA=fA[He];NA.push({text:We[He],timestamp:[ve[WA.at(0)][0],ve[WA.at(-1)][1]]})}return NA}combineTokensIntoWords(_,ve,Oe=`"'“¡¿([{-`,We=`"'.。,，!！?？:：”)]}、`){let $e,fA,NA;return["chinese","japanese","thai","lao","myanmar"].includes(ve=ve??"english")?[$e,fA,NA]=this.splitTokensOnUnicode(_):[$e,fA,NA]=this.splitTokensOnSpaces(_),this.mergePunctuations($e,fA,NA,Oe,We)}decode(_,ve){let Oe;return ve?.decode_with_timestamps?(_ instanceof j.Tensor&&(_=be(_)),Oe=this.decodeWithTimestamps(_,ve)):Oe=super.decode(_,ve),Oe}decodeWithTimestamps(_,ve){const Oe=ve?.time_precision??.02,We=Array.from(this.all_special_ids).at(-1)+1;let $e=[[]];for(let fA of _)if(fA=Number(fA),fA>=We){const NA=((fA-We)*Oe).toFixed(2);$e.push(`<|${NA}|>`),$e.push([])}else $e[$e.length-1].push(fA);return $e=$e.map(fA=>typeof fA=="string"?fA:super.decode(fA,ve)),$e.join("")}splitTokensOnUnicode(_){const ve=this.decode(_,{decode_with_timestamps:!0}),Oe=[],We=[],$e=[];let fA=[],NA=[],He=0;for(let WA=0;WA<_.length;++WA){const bA=_[WA];fA.push(bA),NA.push(WA);const Yt=this.decode(fA,{decode_with_timestamps:!0});Yt.includes("�")&&ve[He+Yt.indexOf("�")]!=="�"||(Oe.push(Yt),We.push(fA),$e.push(NA),fA=[],NA=[],He+=Yt.length)}return[Oe,We,$e]}splitTokensOnSpaces(_){const[ve,Oe,We]=this.splitTokensOnUnicode(_),$e=[],fA=[],NA=[],He=new RegExp(`^[${ne}]$`,"gu");for(let WA=0;WA<ve.length;++WA){const bA=ve[WA],Yt=Oe[WA],Wt=We[WA],cr=Yt[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),sr=bA.startsWith(" "),jt=bA.trim(),jA=He.test(jt);if(cr||sr||jA||$e.length===0)$e.push(bA),fA.push(Yt),NA.push(Wt);else{const KA=$e.length-1;$e[KA]+=bA,fA[KA].push(...Yt),NA[KA].push(...Wt)}}return[$e,fA,NA]}mergePunctuations(_,ve,Oe,We,$e){const fA=structuredClone(_),NA=structuredClone(ve),He=structuredClone(Oe);let WA=fA.length-2,bA=fA.length-1;for(;WA>=0;)fA[WA].startsWith(" ")&&We.includes(fA[WA].trim())?(fA[bA]=fA[WA]+fA[bA],NA[bA]=(0,T.mergeArrays)(NA[WA],NA[bA]),He[bA]=(0,T.mergeArrays)(He[WA],He[bA]),fA[WA]="",NA[WA]=[],He[WA]=[]):bA=WA,--WA;for(WA=0,bA=1;bA<fA.length;)!fA[WA].endsWith(" ")&&$e.includes(fA[bA])?(fA[WA]+=fA[bA],NA[WA]=(0,T.mergeArrays)(NA[WA],NA[bA]),He[WA]=(0,T.mergeArrays)(He[WA],He[bA]),fA[bA]="",NA[bA]=[],He[bA]=[]):WA=bA,++bA;return[fA.filter(Yt=>Yt),NA.filter(Yt=>Yt.length>0),He.filter(Yt=>Yt.length>0)]}}class Ii extends bt{}class Ls extends bt{}class Bs extends bt{}class Ys extends bt{constructor(_,ve){super(_,ve),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(Oe=>this.languageRegex.test(Oe)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(_){if(_===null)return null;const[ve,...Oe]=_.trim().split(this.languageRegex);if(Oe.length===0)return super._encode_text(ve);if(Oe.length===2){const[We,$e]=Oe;return this.supported_language_codes.includes(We)||console.warn(`Unsupported language code "${We}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,T.mergeArrays)([We],super._encode_text($e))}}}class ys extends bt{}class wt extends bt{}class Pt extends bt{}class ka extends bt{}class ti extends bt{}class Es extends bt{constructor(_,ve){super(_,ve),this.decoder=new vA({})}}class Hs extends bt{}class as extends bt{}class Rs{static TOKENIZER_CLASS_MAPPING={T5Tokenizer:ea,DistilBertTokenizer:Ss,CamembertTokenizer:ks,DebertaTokenizer:$A,DebertaV2Tokenizer:PA,BertTokenizer:Za,HerbertTokenizer:qt,ConvBertTokenizer:gs,RoFormerTokenizer:Xa,XLMTokenizer:xs,ElectraTokenizer:Fs,MobileBertTokenizer:wa,SqueezeBertTokenizer:ZA,AlbertTokenizer:La,GPT2Tokenizer:xt,BartTokenizer:Ma,MBartTokenizer:Tr,MBart50Tokenizer:Rr,RobertaTokenizer:us,WhisperTokenizer:Os,CodeGenTokenizer:Ii,CLIPTokenizer:Ls,SiglipTokenizer:Bs,MarianTokenizer:Ys,BloomTokenizer:Kt,NllbTokenizer:kr,M2M100Tokenizer:Ns,LlamaTokenizer:ds,CodeLlamaTokenizer:Ci,XLMRobertaTokenizer:$s,MPNetTokenizer:ei,FalconTokenizer:bi,GPTNeoXTokenizer:Kr,EsmTokenizer:rs,Wav2Vec2CTCTokenizer:ys,BlenderbotTokenizer:wt,BlenderbotSmallTokenizer:Pt,SpeechT5Tokenizer:ka,NougatTokenizer:ti,VitsTokenizer:Es,Qwen2Tokenizer:fs,GemmaTokenizer:Ai,Grok1Tokenizer:Ja,CohereTokenizer:Hs,MgpstrTokenizer:as,PreTrainedTokenizer:bt};static async from_pretrained(_,{progress_callback:ve=null,config:Oe=null,cache_dir:We=null,local_files_only:$e=!1,revision:fA="main",legacy:NA=null}={}){const[He,WA]=await X(_,{progress_callback:ve,config:Oe,cache_dir:We,local_files_only:$e,revision:fA,legacy:NA}),bA=WA.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let Yt=this.TOKENIZER_CLASS_MAPPING[bA];return Yt||(console.warn(`Unknown tokenizer class "${bA}", attempting to construct from base class.`),Yt=bt),new Yt(He,WA)}}},"./src/utils/audio.js":(I,C,d)=>{d.r(C),d.d(C,{RawAudio:()=>e,hamming:()=>R,hanning:()=>X,mel_filter_bank:()=>se,read_audio:()=>W,spectrogram:()=>we,window_function:()=>g});var k=d("./src/utils/hub.js"),T=d("./src/utils/maths.js"),L=d("./src/utils/core.js"),N=d("./src/env.js"),j=d("?7a2c"),q=d("./src/utils/tensor.js");async function W(l,M){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const ue=await(await(0,k.getFile)(l)).arrayBuffer(),D=new AudioContext({sampleRate:M});M===void 0&&console.warn(`No sampling rate provided, using default of ${D.sampleRate}Hz.`);const z=await D.decodeAudioData(ue);let Re;if(z.numberOfChannels===2){const Ne=Math.sqrt(2),Ye=z.getChannelData(0),Je=z.getChannelData(1);Re=new Float32Array(Ye.length);for(let AA=0;AA<z.length;++AA)Re[AA]=Ne*(Ye[AA]+Je[AA])/2}else Re=z.getChannelData(0);return Re}function F(l,M){if(l<1)return new Float64Array;if(l===1)return new Float64Array([1]);const ue=1-M,D=2*Math.PI/(l-1),z=new Float64Array(l);for(let Re=0;Re<l;++Re)z[Re]=M-ue*Math.cos(Re*D);return z}function X(l){return F(l,.5)}function R(l){return F(l,.54)}const re={htk:l=>2595*Math.log10(1+l/700),kaldi:l=>1127*Math.log(1+l/700),slaney:(l,M=1e3,ue=15,D=27/Math.log(6.4))=>l>=M?ue+Math.log(l/M)*D:3*l/200};function be(l,M="htk"){const ue=re[M];if(!ue)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof l=="number"?ue(l):l.map(D=>ue(D))}const xe={htk:l=>700*(10**(l/2595)-1),kaldi:l=>700*(Math.exp(l/1127)-1),slaney:(l,M=1e3,ue=15,D=Math.log(6.4)/27)=>l>=ue?M*Math.exp(D*(l-ue)):200*l/3};function ye(l,M,ue){const D=(M-l)/(ue-1);return Float64Array.from({length:ue},(z,Re)=>l+D*Re)}function se(l,M,ue,D,z,Re=null,Ne="htk",Ye=!1){if(Re!==null&&Re!=="slaney")throw new Error('norm must be one of null or "slaney"');const Je=ye(be(ue,Ne),be(D,Ne),M+2);let AA,xA=function(Ge,Ie="htk"){const ze=xe[Ie];if(!ze)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof Ge=="number"?ze(Ge):Ge.map(Ue=>ze(Ue))}(Je,Ne);if(Ye){const Ge=z/(2*l);AA=be(Float64Array.from({length:l},(Ie,ze)=>ze*Ge),Ne),xA=Je}else AA=ye(0,Math.floor(z/2),l);const GA=function(Ge,Ie){const ze=Float64Array.from({length:Ie.length-1},(aA,iA)=>Ie[iA+1]-Ie[iA]),Ue=Array.from({length:Ge.length},()=>new Array(Ie.length));for(let aA=0;aA<Ge.length;++aA){const iA=Ue[aA];for(let yA=0;yA<Ie.length;++yA)iA[yA]=Ie[yA]-Ge[aA]}const Pe=Ie.length-2,kA=Array.from({length:Pe},()=>new Array(Ge.length));for(let aA=0;aA<Ge.length;++aA){const iA=Ue[aA];for(let yA=0;yA<Pe;++yA){const nA=-iA[yA]/ze[yA],Se=iA[yA+2]/ze[yA+1];kA[yA][aA]=Math.max(0,Math.min(nA,Se))}}return kA}(AA,xA);if(Re!==null&&Re==="slaney")for(let Ge=0;Ge<M;++Ge){const Ie=GA[Ge],ze=2/(xA[Ge+2]-xA[Ge]);for(let Ue=0;Ue<l;++Ue)Ie[Ue]*=ze}return GA}function ne(l,M,ue,D,z){if(ue<=0)throw new Error("reference must be greater than zero");if(D<=0)throw new Error("min_value must be greater than zero");ue=Math.max(D,ue);const Re=Math.log10(ue);for(let Ne=0;Ne<l.length;++Ne)l[Ne]=M*Math.log10(Math.max(D,l[Ne])-Re);if(z!==null){if(z<=0)throw new Error("db_range must be greater than zero");const Ne=(0,T.max)(l)[0]-z;for(let Ye=0;Ye<l.length;++Ye)l[Ye]=Math.max(l[Ye],Ne)}return l}async function we(l,M,ue,D,{fft_length:z=null,power:Re=1,center:Ne=!0,pad_mode:Ye="reflect",onesided:Je=!0,preemphasis:AA=null,mel_filters:xA=null,mel_floor:GA=1e-10,log_mel:Ge=null,reference:Ie=1,min_value:ze=1e-10,db_range:Ue=null,remove_dc_offset:Pe=null,min_num_frames:kA=null,max_num_frames:aA=null,do_pad:iA=!0,transpose:yA=!1}={}){const nA=M.length;if(z===null&&(z=ue),ue>z)throw Error(`frame_length (${ue}) may not be larger than fft_length (${z})`);if(nA!==ue)throw new Error(`Length of the window (${nA}) must equal frame_length (${ue})`);if(D<=0)throw new Error("hop_length must be greater than zero");if(Re===null&&xA!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(Ne){if(Ye!=="reflect")throw new Error(`pad_mode="${Ye}" not implemented yet.`);const ge=Math.floor((z-1)/2)+1;l=function($,me,Fe){const qe=new $.constructor($.length+me+Fe),dA=$.length-1;for(let oA=0;oA<$.length;++oA)qe[me+oA]=$[oA];for(let oA=1;oA<=me;++oA)qe[me-oA]=$[(0,L.calculateReflectOffset)(oA,dA)];for(let oA=1;oA<=Fe;++oA)qe[dA+me+oA]=$[(0,L.calculateReflectOffset)(dA-oA,dA)];return qe}(l,ge,ge)}let Se=Math.floor(1+Math.floor((l.length-ue)/D));kA!==null&&Se<kA&&(Se=kA);const Ze=Je?Math.floor(z/2)+1:z;let mA=Se,CA=Se;aA!==null&&(aA>Se?iA&&(CA=aA):CA=mA=aA);const Te=new T.FFT(z),pA=new Float64Array(z),EA=new Float64Array(Te.outputBufferSize),FA=new Float32Array(Ze*CA);for(let ge=0;ge<mA;++ge){const $=ge*D,me=Math.min(l.length-$,ue);me!==ue&&pA.fill(0,0,ue);for(let Fe=0;Fe<me;++Fe)pA[Fe]=l[$+Fe];if(Pe){let Fe=0;for(let dA=0;dA<me;++dA)Fe+=pA[dA];const qe=Fe/me;for(let dA=0;dA<me;++dA)pA[dA]-=qe}if(AA!==null){for(let Fe=me-1;Fe>=1;--Fe)pA[Fe]-=AA*pA[Fe-1];pA[0]*=1-AA}for(let Fe=0;Fe<M.length;++Fe)pA[Fe]*=M[Fe];Te.realTransform(EA,pA);for(let Fe=0;Fe<Ze;++Fe){const qe=Fe<<1;FA[Fe*CA+ge]=EA[qe]**2+EA[qe+1]**2}}if(Re!==null&&Re!==2){const ge=2/Re;for(let $=0;$<FA.length;++$)FA[$]**=ge}const YA=xA.length;let J=await(0,q.matmul)(new q.Tensor("float32",xA.flat(),[YA,Ze]),new q.Tensor("float32",FA,[Ze,CA]));yA&&(J=J.transpose(1,0));const OA=J.data;for(let ge=0;ge<OA.length;++ge)OA[ge]=Math.max(GA,OA[ge]);if(Re!==null&&Ge!==null){const ge=Math.min(OA.length,mA*YA);switch(Ge){case"log":for(let $=0;$<ge;++$)OA[$]=Math.log(OA[$]);break;case"log10":for(let $=0;$<ge;++$)OA[$]=Math.log10(OA[$]);break;case"dB":if(Re===1)(function($,me=1,Fe=1e-5,qe=null){ne($,20,me,Fe,qe)})(OA,Ie,ze,Ue);else{if(Re!==2)throw new Error(`Cannot use log_mel option '${Ge}' with power ${Re}`);(function($,me=1,Fe=1e-10,qe=null){ne($,10,me,Fe,qe)})(OA,Ie,ze,Ue)}break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${Ge}'`)}}return J}function g(l,M,{periodic:ue=!0,frame_length:D=null,center:z=!0}={}){const Re=ue?l+1:l;let Ne;switch(M){case"boxcar":Ne=new Float64Array(Re).fill(1);break;case"hann":case"hann_window":Ne=X(Re);break;case"hamming":Ne=R(Re);break;case"povey":Ne=X(Re).map(Ye=>Math.pow(Ye,.85));break;default:throw new Error(`Unknown window type ${M}.`)}if(ue&&(Ne=Ne.subarray(0,l)),D===null)return Ne;if(l>D)throw new Error(`Length of the window (${l}) may not be larger than frame_length (${D})`);return Ne}function b(l,M,ue){for(let D=0;D<ue.length;++D)l.setUint8(M+D,ue.charCodeAt(D))}class e{constructor(M,ue){this.audio=M,this.sampling_rate=ue}toWav(){return function(M,ue){let D=44;const z=new ArrayBuffer(D+4*M.length),Re=new DataView(z);b(Re,0,"RIFF"),Re.setUint32(4,36+4*M.length,!0),b(Re,8,"WAVE"),b(Re,12,"fmt "),Re.setUint32(16,16,!0),Re.setUint16(20,3,!0),Re.setUint16(22,1,!0),Re.setUint32(24,ue,!0),Re.setUint32(28,4*ue,!0),Re.setUint16(32,4,!0),Re.setUint16(34,32,!0),b(Re,36,"data"),Re.setUint32(40,4*M.length,!0);for(let Ne=0;Ne<M.length;++Ne,D+=4)Re.setFloat32(D,M[Ne],!0);return z}(this.audio,this.sampling_rate)}toBlob(){const M=this.toWav();return new Blob([M],{type:"audio/wav"})}async save(M){let ue;if(N.apis.IS_BROWSER_ENV){if(N.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save a file from a Web Worker.");ue=L.saveBlob}else{if(!N.apis.IS_FS_AVAILABLE)throw new Error("Unable to save because filesystem is disabled in this environment.");ue=async(D,z)=>{let Re=await z.arrayBuffer();j.writeFileSync(D,Buffer.from(Re))}}await ue(M,this.toBlob())}}},"./src/utils/constants.js":(I,C,d)=>{d.r(C),d.d(C,{CHAT_TEMPLATE_NAME:()=>q,CONFIG_NAME:()=>T,FEATURE_EXTRACTOR_NAME:()=>L,GENERATION_CONFIG_NAME:()=>W,GITHUB_ISSUE_URL:()=>k,IMAGE_PROCESSOR_NAME:()=>N,PROCESSOR_NAME:()=>j});const k="https://github.com/huggingface/transformers.js/issues/new/choose",T="config.json",L="preprocessor_config.json",N=L,j="processor_config.json",q="chat_template.json",W="generation_config.json"},"./src/utils/core.js":(I,C,d)=>{function k(ne,we){ne&&ne(we)}function T(ne){return Object.fromEntries(Object.entries(ne).map(([we,g])=>[g,we]))}function L(ne){return ne.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function N(ne){return ne?.prototype?.__proto__?.constructor?.name==="TypedArray"}function j(ne){return Number.isInteger(ne)||typeof ne=="bigint"}function q(ne){return ne==null||ne===-1}function W(ne){const we=[];let g=ne;for(;Array.isArray(g);)we.push(g.length),g=g[0];return we}function F(ne,we,g=void 0){const b=ne[we];if(b!==void 0)return delete ne[we],b;if(g===void 0)throw Error(`Key ${we} does not exist in object.`);return g}function X(...ne){return Array.prototype.concat.apply([],ne)}function R(...ne){return ne.reduce((we,g)=>we.flatMap(b=>g.map(e=>[b,e])))}function re(ne,we){return Math.abs((ne+we)%(2*we)-we)}function be(ne,we){const g=URL.createObjectURL(we),b=document.createElement("a");b.href=g,b.download=ne,b.click(),b.remove(),URL.revokeObjectURL(g)}function xe(ne,we){return Object.assign({},...we.map(g=>{if(ne[g]!==void 0)return{[g]:ne[g]}}))}function ye(ne){let we=0;for(const g of ne)++we;return we}function se(ne,we){let g=0;for(const b of ne)b===we&&++g;return g}d.r(C),d.d(C,{calculateDimensions:()=>W,calculateReflectOffset:()=>re,count:()=>se,dispatchCallback:()=>k,escapeRegExp:()=>L,isIntegralNumber:()=>j,isNullishDimension:()=>q,isTypedArray:()=>N,len:()=>ye,mergeArrays:()=>X,pick:()=>xe,pop:()=>F,product:()=>R,reverseDictionary:()=>T,saveBlob:()=>be})},"./src/utils/data-structures.js":(I,C,d)=>{d.r(C),d.d(C,{CharTrie:()=>T,PriorityQueue:()=>k,TokenLattice:()=>N});class k{constructor(W=(X,R)=>X>R,F=1/0){this._heap=[],this._comparator=W,this._maxSize=F}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...W){return this.extend(W)}extend(W){for(const F of W)if(this.size<this._maxSize)this._heap.push(F),this._siftUp();else{const X=this._smallest();this._comparator(F,this._heap[X])&&(this._heap[X]=F,this._siftUpFrom(X))}return this.size}pop(){const W=this.peek(),F=this.size-1;return F>0&&this._swap(0,F),this._heap.pop(),this._siftDown(),W}replace(W){const F=this.peek();return this._heap[0]=W,this._siftDown(),F}_parent(W){return(W+1>>>1)-1}_left(W){return 1+(W<<1)}_right(W){return W+1<<1}_greater(W,F){return this._comparator(this._heap[W],this._heap[F])}_swap(W,F){const X=this._heap[W];this._heap[W]=this._heap[F],this._heap[F]=X}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(W){for(;W>0&&this._greater(W,this._parent(W));)this._swap(W,this._parent(W)),W=this._parent(W)}_siftDown(){let W=0;for(;this._left(W)<this.size&&this._greater(this._left(W),W)||this._right(W)<this.size&&this._greater(this._right(W),W);){const F=this._right(W)<this.size&&this._greater(this._right(W),this._left(W))?this._right(W):this._left(W);this._swap(W,F),W=F}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class T{constructor(){this.root=L.default()}extend(W){for(const F of W)this.push(F)}push(W){let F=this.root;for(const X of W){let R=F.children.get(X);R===void 0&&(R=L.default(),F.children.set(X,R)),F=R}F.isLeaf=!0}*commonPrefixSearch(W){let F=this.root;if(F===void 0)return;let X="";for(const R of W){if(X+=R,F=F.children.get(R),F===void 0)return;F.isLeaf&&(yield X)}}}class L{constructor(W,F){this.isLeaf=W,this.children=F}static default(){return new L(!1,new Map)}}class N{constructor(W,F,X){this.chars=Array.from(W),this.len=this.chars.length,this.bosTokenId=F,this.eosTokenId=X,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const R=new j(this.bosTokenId,0,0,0,0),re=new j(this.eosTokenId,1,this.len,0,0);this.nodes.push(R.clone()),this.nodes.push(re.clone()),this.beginNodes[this.len].push(re),this.endNodes[0].push(R)}insert(W,F,X,R){const re=this.nodes.length,be=new j(R,re,W,F,X);this.beginNodes[W].push(be),this.endNodes[W+F].push(be),this.nodes.push(be)}viterbi(){const W=this.len;let F=0;for(;F<=W;){if(this.beginNodes[F].length==0)return[];for(let be of this.beginNodes[F]){be.prev=null;let xe=0,ye=null;for(let se of this.endNodes[F]){const ne=se.backtraceScore+be.score;(ye===null||ne>xe)&&(ye=se.clone(),xe=ne)}if(ye===null)return[];be.prev=ye,be.backtraceScore=xe}++F}const X=[],R=this.beginNodes[W][0].prev;if(R===null)return[];let re=R.clone();for(;re.prev!==null;)X.push(re.clone()),re=re.clone().prev.clone();return X.reverse(),X}piece(W){return this.chars.slice(W.pos,W.pos+W.length).join("")}tokens(){return this.viterbi().map(W=>this.piece(W))}tokenIds(){return this.viterbi().map(W=>W.tokenId)}}class j{constructor(W,F,X,R,re){this.tokenId=W,this.nodeId=F,this.pos=X,this.length=R,this.score=re,this.prev=null,this.backtraceScore=0}clone(){const W=new j(this.tokenId,this.nodeId,this.pos,this.length,this.score);return W.prev=this.prev,W.backtraceScore=this.backtraceScore,W}}},"./src/utils/devices.js":(I,C,d)=>{d.r(C),d.d(C,{DEVICE_TYPES:()=>k});const k=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})},"./src/utils/dtypes.js":(I,C,d)=>{d.r(C),d.d(C,{DATA_TYPES:()=>N,DEFAULT_DEVICE_DTYPE_MAPPING:()=>j,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>q,isWebGpuFp16Supported:()=>L});var k=d("./src/env.js"),T=d("./src/utils/devices.js");const L=function(){let W;return async function(){if(W===void 0)if(k.apis.IS_WEBGPU_AVAILABLE)try{W=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{W=!1}else W=!1;return W}}(),N=Object.freeze({auto:"auto",fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),j=Object.freeze({[T.DEVICE_TYPES.wasm]:N.q8}),q=Object.freeze({[N.fp32]:"",[N.fp16]:"_fp16",[N.int8]:"_int8",[N.uint8]:"_uint8",[N.q8]:"_quantized",[N.q4]:"_q4",[N.q4f16]:"_q4f16",[N.bnb4]:"_bnb4"})},"./src/utils/generic.js":(I,C,d)=>{d.r(C),d.d(C,{Callable:()=>k});const k=class{constructor(){let T=function(...L){return T._call(...L)};return Object.setPrototypeOf(T,new.target.prototype)}_call(...T){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(I,C,d)=>{d.r(C),d.d(C,{getFile:()=>F,getModelFile:()=>re,getModelJSON:()=>be});var k=d("?7a2c"),T=d("?a42a"),L=d("./src/env.js"),N=d("./src/utils/core.js");const j={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class q{constructor(se){if(this.filePath=se,this.headers=new Headers,this.exists=k.existsSync(se),this.exists){this.status=200,this.statusText="OK";let ne=k.statSync(se);this.headers.set("content-length",ne.size.toString()),this.updateContentType();let we=this;this.body=new ReadableStream({start(g){we.arrayBuffer().then(b=>{g.enqueue(new Uint8Array(b)),g.close()})}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const se=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",j[se]??"application/octet-stream")}clone(){let se=new q(this.filePath);return se.exists=this.exists,se.status=this.status,se.statusText=this.statusText,se.headers=new Headers(this.headers),se}async arrayBuffer(){return(await k.promises.readFile(this.filePath)).buffer}async blob(){const se=await k.promises.readFile(this.filePath);return new Blob([se],{type:this.headers.get("content-type")})}async text(){return await k.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function W(ye,se=null,ne=null){let we;try{we=new URL(ye)}catch{return!1}return!(se&&!se.includes(we.protocol))&&!(ne&&!ne.includes(we.hostname))}async function F(ye){if(L.env.useFS&&!W(ye,["http:","https:","blob:"]))return new q(ye);if(typeof process<"u"&&process?.release?.name==="node"){const se=!!tg?.TESTING_REMOTELY,ne=L.env.version,we=new Headers;if(we.set("User-Agent",`transformers.js/${ne}; is_ci/${se};`),W(ye,["http:","https:"],["huggingface.co","hf.co"])){const g=tg?.HF_TOKEN??tg?.HF_ACCESS_TOKEN;g&&we.set("Authorization",`Bearer ${g}`)}return fetch(ye,{headers:we})}return fetch(ye)}const X={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};class R{constructor(se){this.path=se}async match(se){let ne=T.join(this.path,se),we=new q(ne);return we.exists?we:void 0}async put(se,ne){const we=Buffer.from(await ne.arrayBuffer());let g=T.join(this.path,se);try{await k.promises.mkdir(T.dirname(g),{recursive:!0}),await k.promises.writeFile(g,we)}catch(b){console.warn("An error occurred while writing the file to cache:",b)}}}async function re(ye,se,ne=!0,we={}){if(!L.env.allowLocalModels){if(we.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!L.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}let g;if((0,N.dispatchCallback)(we.progress_callback,{status:"initiate",name:ye,file:se}),!g&&L.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{g=await caches.open("transformers-cache")}catch(AA){console.warn("An error occurred while opening the browser cache:",AA)}}if(!g&&L.env.useFSCache&&(g=new R(we.cache_dir??L.env.cacheDir)),!g&&L.env.useCustomCache){if(!L.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!L.env.customCache.match||!L.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");g=L.env.customCache}const b=we.revision??"main";let e,l,M=xe(ye,se),ue=xe(L.env.localModelPath,M),D=xe(L.env.remoteHost,L.env.remotePathTemplate.replaceAll("{model}",ye).replaceAll("{revision}",encodeURIComponent(b)),se),z=b==="main"?M:xe(ye,b,se),Re=g instanceof R?z:D,Ne=!1;g&&(l=await async function(AA,...xA){for(let GA of xA)try{let Ge=await AA.match(GA);if(Ge)return Ge}catch{continue}}(g,ue,Re));const Ye=l!==void 0;if(l===void 0){if(L.env.allowLocalModels)if(W(M,["http:","https:"])){if(we.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${M}.`);if(!L.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${M}.`)}else try{l=await F(ue),e=ue}catch(AA){console.warn(`Unable to load from local path "${ue}": "${AA}"`)}if(l===void 0||l.status===404){if(we.local_files_only||!L.env.allowRemoteModels){if(ne)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${ue}".`);return null}if(l=await F(D),l.status!==200)return function(AA,xA,GA){if(!GA)return null;const Ge=X[AA]??`Error (${AA}) occurred while trying to load file`;throw Error(`${Ge}: "${xA}".`)}(l.status,D,ne);e=Re}Ne=g&&typeof Response<"u"&&l instanceof Response&&l.status===200}let Je;return(0,N.dispatchCallback)(we.progress_callback,{status:"download",name:ye,file:se}),we.progress_callback?Ye&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(Je=new Uint8Array(await l.arrayBuffer()),(0,N.dispatchCallback)(we.progress_callback,{status:"progress",name:ye,file:se,progress:100,loaded:Je.length,total:Je.length})):Je=await async function(AA,xA){const GA=AA.headers.get("Content-Length");GA===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let Ge=parseInt(GA??"0"),Ie=new Uint8Array(Ge),ze=0;const Ue=AA.body.getReader();async function Pe(){const{done:kA,value:aA}=await Ue.read();if(kA)return;let iA=ze+aA.length;if(iA>Ge){Ge=iA;let yA=new Uint8Array(Ge);yA.set(Ie),Ie=yA}return Ie.set(aA,ze),ze=iA,xA({progress:ze/Ge*100,loaded:ze,total:Ge}),Pe()}return await Pe(),Ie}(l,AA=>{(0,N.dispatchCallback)(we.progress_callback,{status:"progress",name:ye,file:se,...AA})}):Je=new Uint8Array(await l.arrayBuffer()),Ne&&e&&await g.match(e)===void 0&&await g.put(e,new Response(Je,{headers:l.headers})).catch(AA=>{console.warn(`Unable to add response to browser cache: ${AA}.`)}),(0,N.dispatchCallback)(we.progress_callback,{status:"done",name:ye,file:se}),Je}async function be(ye,se,ne=!0,we={}){let g=await re(ye,se,ne,we);if(g===null)return{};let b=new TextDecoder("utf-8").decode(g);return JSON.parse(b)}function xe(...ye){return(ye=ye.map((se,ne)=>(ne&&(se=se.replace(new RegExp("^/"),"")),ne!==ye.length-1&&(se=se.replace(new RegExp("/$"),"")),se))).join("/")}},"./src/utils/image.js":(I,C,d)=>{d.r(C),d.d(C,{RawImage:()=>be,load_image:()=>xe});var k=d("./src/utils/core.js"),T=d("./src/utils/hub.js"),L=d("./src/env.js"),N=d("./src/utils/tensor.js"),j=d("?2b25");let q,W,F;const X=L.apis.IS_BROWSER_ENV||L.apis.IS_WEBWORKER_ENV;if(X)q=(ye,se)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(ye,se)},F=self.createImageBitmap,W=self.ImageData;else{if(!j)throw new Error("Unable to load image processing library.");F=async ye=>{const se=(await ye.metadata()).channels,{data:ne,info:we}=await ye.rotate().raw().toBuffer({resolveWithObject:!0}),g=new be(new Uint8ClampedArray(ne),we.width,we.height,we.channels);return se!==void 0&&se!==we.channels&&g.convert(se),g}}const R={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},re=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class be{constructor(se,ne,we,g){this.data=se,this.width=ne,this.height=we,this.channels=g}get size(){return[this.width,this.height]}static async read(se){if(se instanceof be)return se;if(typeof se=="string"||se instanceof URL)return await this.fromURL(se);throw new Error("Unsupported input type: "+typeof se)}static fromCanvas(se){if(!X)throw new Error("fromCanvas() is only supported in browser environments.");const ne=se.getContext("2d").getImageData(0,0,se.width,se.height).data;return new be(ne,se.width,se.height,4)}static async fromURL(se){const ne=await(0,T.getFile)(se);if(ne.status!==200)throw new Error(`Unable to read image from "${se}" (${ne.status} ${ne.statusText})`);const we=await ne.blob();return this.fromBlob(we)}static async fromBlob(se){if(X){const ne=await F(se),we=q(ne.width,ne.height).getContext("2d");return we.drawImage(ne,0,0),new this(we.getImageData(0,0,ne.width,ne.height).data,ne.width,ne.height,4)}{const ne=j(await se.arrayBuffer());return await F(ne)}}static fromTensor(se,ne="CHW"){if(se.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${se.dims.length} dimensions.`);if(ne==="CHW")se=se.transpose(1,2,0);else if(ne!=="HWC")throw new Error(`Unsupported channel format: ${ne}`);if(!(se.data instanceof Uint8ClampedArray||se.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${se.type}`);switch(se.dims[2]){case 1:case 2:case 3:case 4:return new be(se.data,se.dims[1],se.dims[0],se.dims[2]);default:throw new Error(`Unsupported number of channels: ${se.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const se=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let ne=0,we=0;ne<this.data.length;ne+=this.channels){const g=this.data[ne],b=this.data[ne+1],e=this.data[ne+2];se[we++]=Math.round(.2989*g+.587*b+.114*e)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(se,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const se=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let ne=0,we=0;ne<this.data.length;++ne)se[we++]=this.data[ne],se[we++]=this.data[ne],se[we++]=this.data[ne];break;case 4:for(let ne=0,we=0;ne<this.data.length;ne+=4)se[we++]=this.data[ne],se[we++]=this.data[ne+1],se[we++]=this.data[ne+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(se,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const se=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let ne=0,we=0;ne<this.data.length;++ne)se[we++]=this.data[ne],se[we++]=this.data[ne],se[we++]=this.data[ne],se[we++]=255;break;case 3:for(let ne=0,we=0;ne<this.data.length;ne+=3)se[we++]=this.data[ne],se[we++]=this.data[ne+1],se[we++]=this.data[ne+2],se[we++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(se,this.width,this.height,4)}putAlpha(se){if(se.width!==this.width||se.height!==this.height)throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${se.width}x${se.height}`);if(se.channels!==1)throw new Error(`Expected mask to have 1 channel, but got ${se.channels}`);const ne=this.data,we=se.data,g=this.width*this.height;if(this.channels===3){const b=new Uint8ClampedArray(4*g);for(let e=0,l=0,M=0;e<g;++e)b[M++]=ne[l++],b[M++]=ne[l++],b[M++]=ne[l++],b[M++]=we[e];return this._update(b,this.width,this.height,4)}if(this.channels===4){for(let b=0;b<g;++b)ne[4*b+3]=we[b];return this}throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`)}async resize(se,ne,{resample:we=2}={}){if(this.width===se&&this.height===ne)return this;let g=R[we]??we;const b=(0,k.isNullishDimension)(se),e=(0,k.isNullishDimension)(ne);if(b&&e)return this;if(b?se=ne/this.height*this.width:e&&(ne=se/this.width*this.height),X){const l=this.channels,M=this.toCanvas(),ue=q(se,ne).getContext("2d");return ue.drawImage(M,0,0,se,ne),new be(ue.getImageData(0,0,se,ne).data,se,ne,4).convert(l)}{let l=this.toSharp();switch(g){case"box":case"hamming":g!=="box"&&g!=="hamming"||(console.warn(`Resampling method ${g} is not yet supported. Using bilinear instead.`),g="bilinear");case"nearest":case"bilinear":case"bicubic":l=l.affine([se/this.width,0,0,ne/this.height],{interpolator:g});break;case"lanczos":l=l.resize({width:se,height:ne,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${g} is not supported.`)}return await F(l)}}async pad([se,ne,we,g]){if(se=Math.max(se,0),ne=Math.max(ne,0),we=Math.max(we,0),g=Math.max(g,0),se===0&&ne===0&&we===0&&g===0)return this;if(X){const b=this.channels,e=this.toCanvas(),l=this.width+se+ne,M=this.height+we+g,ue=q(l,M).getContext("2d");return ue.drawImage(e,0,0,this.width,this.height,se,we,this.width,this.height),new be(ue.getImageData(0,0,l,M).data,l,M,4).convert(b)}{const b=this.toSharp().extend({left:se,right:ne,top:we,bottom:g});return await F(b)}}async crop([se,ne,we,g]){if(se=Math.max(se,0),ne=Math.max(ne,0),we=Math.min(we,this.width-1),g=Math.min(g,this.height-1),se===0&&ne===0&&we===this.width-1&&g===this.height-1)return this;const b=we-se+1,e=g-ne+1;if(X){const l=this.channels,M=this.toCanvas(),ue=q(b,e).getContext("2d");return ue.drawImage(M,se,ne,b,e,0,0,b,e),new be(ue.getImageData(0,0,b,e).data,b,e,4).convert(l)}{const l=this.toSharp().extract({left:se,top:ne,width:b,height:e});return await F(l)}}async center_crop(se,ne){if(this.width===se&&this.height===ne)return this;const we=(this.width-se)/2,g=(this.height-ne)/2;if(X){const b=this.channels,e=this.toCanvas(),l=q(se,ne).getContext("2d");let M=0,ue=0,D=0,z=0;return we>=0?M=we:D=-we,g>=0?ue=g:z=-g,l.drawImage(e,M,ue,se,ne,D,z,se,ne),new be(l.getImageData(0,0,se,ne).data,se,ne,4).convert(b)}{let b=this.toSharp();if(we>=0&&g>=0)b=b.extract({left:Math.floor(we),top:Math.floor(g),width:se,height:ne});else if(we<=0&&g<=0){const e=Math.floor(-g),l=Math.floor(-we);b=b.extend({top:e,left:l,right:se-this.width-l,bottom:ne-this.height-e})}else{let e=[0,0],l=0;g<0?(e[0]=Math.floor(-g),e[1]=ne-this.height-e[0]):l=Math.floor(g);let M=[0,0],ue=0;we<0?(M[0]=Math.floor(-we),M[1]=se-this.width-M[0]):ue=Math.floor(we),b=b.extend({top:e[0],bottom:e[1],left:M[0],right:M[1]}).extract({left:ue,top:l,width:se,height:ne})}return await F(b)}}async toBlob(se="image/png",ne=1){if(!X)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:se,quality:ne})}toTensor(se="CHW"){let ne=new N.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(se!=="HWC"){if(se!=="CHW")throw new Error(`Unsupported channel format: ${se}`);ne=ne.permute(2,0,1)}return ne}toCanvas(){if(!X)throw new Error("toCanvas() is only supported in browser environments.");const se=this.clone().rgba(),ne=q(se.width,se.height),we=new W(se.data,se.width,se.height);return ne.getContext("2d").putImageData(we,0,0),ne}split(){const{data:se,width:ne,height:we,channels:g}=this,b=se.constructor,e=se.length/g,l=Array.from({length:g},()=>new b(e));for(let M=0;M<e;++M){const ue=g*M;for(let D=0;D<g;++D)l[D][M]=se[ue+D]}return l.map(M=>new be(M,ne,we,1))}_update(se,ne,we,g=null){return this.data=se,this.width=ne,this.height=we,g!==null&&(this.channels=g),this}clone(){return new be(this.data.slice(),this.width,this.height,this.channels)}convert(se){if(this.channels===se)return this;switch(se){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(se){if(!X){if(L.apis.IS_FS_AVAILABLE)return await this.toSharp().toFile(se);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}{if(L.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save an image from a Web Worker.");const ne=se.split(".").pop().toLowerCase(),we=re.get(ne)??"image/png",g=await this.toBlob(we);(0,k.saveBlob)(se,g)}}toSharp(){if(X)throw new Error("toSharp() is only supported in server-side environments.");return j(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}const xe=be.read.bind(be)},"./src/utils/maths.js":(I,C,d)=>{function k(g,[b,e,l],[M,ue],D="bilinear",z=!1){const Re=ue/l,Ne=M/e,Ye=new g.constructor(M*ue*b),Je=e*l,AA=M*ue;for(let xA=0;xA<M;++xA)for(let GA=0;GA<ue;++GA){const Ge=xA*ue+GA,Ie=(GA+.5)/Re-.5,ze=(xA+.5)/Ne-.5;let Ue=Math.floor(Ie),Pe=Math.floor(ze);const kA=Math.min(Ue+1,l-1),aA=Math.min(Pe+1,e-1);Ue=Math.max(Ue,0),Pe=Math.max(Pe,0);const iA=Ie-Ue,yA=ze-Pe,nA=(1-iA)*(1-yA),Se=iA*(1-yA),Ze=(1-iA)*yA,mA=iA*yA,CA=Pe*l,Te=aA*l,pA=CA+Ue,EA=CA+kA,FA=Te+Ue,YA=Te+kA;for(let J=0;J<b;++J){const OA=J*Je;Ye[J*AA+Ge]=nA*g[OA+pA]+Se*g[OA+EA]+Ze*g[OA+FA]+mA*g[OA+YA]}}return Ye}function T(g,b,e){const l=new Array(e.length),M=new Array(e.length);for(let z=e.length-1,Re=1;z>=0;--z)M[z]=Re,l[z]=b[e[z]],Re*=l[z];const ue=e.map((z,Re)=>M[e.indexOf(Re)]),D=new g.constructor(g.length);for(let z=0;z<g.length;++z){let Re=0;for(let Ne=b.length-1,Ye=z;Ne>=0;--Ne)Re+=Ye%b[Ne]*ue[Ne],Ye=Math.floor(Ye/b[Ne]);D[Re]=g[z]}return[D,l]}function L(g){const b=X(g)[0],e=g.map(ue=>Math.exp(ue-b)),l=e.reduce((ue,D)=>ue+D,0);return e.map(ue=>ue/l)}function N(g){const b=X(g)[0];let e=0;for(let ue=0;ue<g.length;++ue)e+=Math.exp(g[ue]-b);const l=Math.log(e);return g.map(ue=>ue-b-l)}function j(g,b){let e=0;for(let l=0;l<g.length;++l)e+=g[l]*b[l];return e}function q(g,b){return j(g,b)/(W(g)*W(b))}function W(g){return Math.sqrt(g.reduce((b,e)=>b+e*e,0))}function F(g){if(g.length===0)throw Error("Array must not be empty");let b=g[0],e=0;for(let l=1;l<g.length;++l)g[l]<b&&(b=g[l],e=l);return[b,e]}function X(g){if(g.length===0)throw Error("Array must not be empty");let b=g[0],e=0;for(let l=1;l<g.length;++l)g[l]>b&&(b=g[l],e=l);return[b,e]}function R(g){return g>0&&!(g&g-1)}d.r(C),d.d(C,{FFT:()=>xe,bankers_round:()=>ne,cos_sim:()=>q,dot:()=>j,dynamic_time_warping:()=>we,interpolate_data:()=>k,log_softmax:()=>N,magnitude:()=>W,max:()=>X,medianFilter:()=>ye,min:()=>F,permute_data:()=>T,round:()=>se,softmax:()=>L});class re{constructor(b){if(this.size=0|b,this.size<=1||!R(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=b<<1,this.table=new Float64Array(2*this.size);for(let l=0;l<this.table.length;l+=2){const M=Math.PI*l/this.size;this.table[l]=Math.cos(M),this.table[l+1]=-Math.sin(M)}let e=0;for(let l=1;this.size>l;l<<=1)++e;this._width=e%2==0?e-1:e,this._bitrev=new Int32Array(1<<this._width);for(let l=0;l<this._bitrev.length;++l){this._bitrev[l]=0;for(let M=0;M<this._width;M+=2){const ue=this._width-M-2;this._bitrev[l]|=(l>>>M&3)<<ue}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(b,e){const l=e||new Array(b.length>>>1);for(let M=0;M<b.length;M+=2)l[M>>>1]=b[M];return l}toComplexArray(b,e){const l=e||this.createComplexArray();for(let M=0;M<l.length;M+=2)l[M]=b[M>>>1],l[M+1]=0;return l}transform(b,e){if(b===e)throw new Error("Input and output buffers must be different");this._transform4(b,e,1)}realTransform(b,e){if(b===e)throw new Error("Input and output buffers must be different");this._realTransform4(b,e,1)}inverseTransform(b,e){if(b===e)throw new Error("Input and output buffers must be different");this._transform4(b,e,-1);for(let l=0;l<b.length;++l)b[l]/=this.size}_transform4(b,e,l){const M=this._csize;let ue,D,z=1<<this._width,Re=M/z<<1;const Ne=this._bitrev;if(Re===4)for(ue=0,D=0;ue<M;ue+=Re,++D){const Je=Ne[D];this._singleTransform2(e,b,ue,Je,z)}else for(ue=0,D=0;ue<M;ue+=Re,++D){const Je=Ne[D];this._singleTransform4(e,b,ue,Je,z,l)}const Ye=this.table;for(z>>=2;z>=2;z>>=2){Re=M/z<<1;const Je=Re>>>2;for(ue=0;ue<M;ue+=Re){const AA=ue+Je-1;for(let xA=ue,GA=0;xA<AA;xA+=2,GA+=z){const Ge=xA,Ie=Ge+Je,ze=Ie+Je,Ue=ze+Je,Pe=b[Ge],kA=b[Ge+1],aA=b[Ie],iA=b[Ie+1],yA=b[ze],nA=b[ze+1],Se=b[Ue],Ze=b[Ue+1],mA=Ye[GA],CA=l*Ye[GA+1],Te=aA*mA-iA*CA,pA=aA*CA+iA*mA,EA=Ye[2*GA],FA=l*Ye[2*GA+1],YA=yA*EA-nA*FA,J=yA*FA+nA*EA,OA=Ye[3*GA],ge=l*Ye[3*GA+1],$=Se*OA-Ze*ge,me=Se*ge+Ze*OA,Fe=Pe+YA,qe=kA+J,dA=Pe-YA,oA=kA-J,vA=Te+$,QA=pA+me,TA=l*(Te-$),Mt=l*(pA-me);b[Ge]=Fe+vA,b[Ge+1]=qe+QA,b[Ie]=dA+Mt,b[Ie+1]=oA-TA,b[ze]=Fe-vA,b[ze+1]=qe-QA,b[Ue]=dA-Mt,b[Ue+1]=oA+TA}}}}_singleTransform2(b,e,l,M,ue){const D=b[M],z=b[M+1],Re=b[M+ue],Ne=b[M+ue+1];e[l]=D+Re,e[l+1]=z+Ne,e[l+2]=D-Re,e[l+3]=z-Ne}_singleTransform4(b,e,l,M,ue,D){const z=2*ue,Re=3*ue,Ne=b[M],Ye=b[M+1],Je=b[M+ue],AA=b[M+ue+1],xA=b[M+z],GA=b[M+z+1],Ge=b[M+Re],Ie=b[M+Re+1],ze=Ne+xA,Ue=Ye+GA,Pe=Ne-xA,kA=Ye-GA,aA=Je+Ge,iA=AA+Ie,yA=D*(Je-Ge),nA=D*(AA-Ie);e[l]=ze+aA,e[l+1]=Ue+iA,e[l+2]=Pe+nA,e[l+3]=kA-yA,e[l+4]=ze-aA,e[l+5]=Ue-iA,e[l+6]=Pe-nA,e[l+7]=kA+yA}_realTransform4(b,e,l){const M=this._csize;let ue,D,z=1<<this._width,Re=M/z<<1;const Ne=this._bitrev;if(Re===4)for(ue=0,D=0;ue<M;ue+=Re,++D){const AA=Ne[D];this._singleRealTransform2(e,b,ue,AA>>>1,z>>>1)}else for(ue=0,D=0;ue<M;ue+=Re,++D){const AA=Ne[D];this._singleRealTransform4(e,b,ue,AA>>>1,z>>>1,l)}const Ye=this.table;for(z>>=2;z>=2;z>>=2){Re=M/z<<1;const AA=Re>>>1,xA=AA>>>1,GA=xA>>>1;for(ue=0;ue<M;ue+=Re)for(let Ge=0,Ie=0;Ge<=GA;Ge+=2,Ie+=z){const ze=ue+Ge,Ue=ze+xA,Pe=Ue+xA,kA=Pe+xA,aA=b[ze],iA=b[ze+1],yA=b[Ue],nA=b[Ue+1],Se=b[Pe],Ze=b[Pe+1],mA=b[kA],CA=b[kA+1],Te=aA,pA=iA,EA=Ye[Ie],FA=l*Ye[Ie+1],YA=yA*EA-nA*FA,J=yA*FA+nA*EA,OA=Ye[2*Ie],ge=l*Ye[2*Ie+1],$=Se*OA-Ze*ge,me=Se*ge+Ze*OA,Fe=Ye[3*Ie],qe=l*Ye[3*Ie+1],dA=mA*Fe-CA*qe,oA=mA*qe+CA*Fe,vA=Te+$,QA=pA+me,TA=Te-$,Mt=pA-me,Tt=YA+dA,ut=J+oA,Ct=l*(YA-dA),$t=l*(J-oA);if(b[ze]=vA+Tt,b[ze+1]=QA+ut,b[Ue]=TA+$t,b[Ue+1]=Mt-Ct,Ge===0){b[Pe]=vA-Tt,b[Pe+1]=QA-ut;continue}if(Ge===GA)continue;const Qr=ue+xA-Ge,tr=ue+AA-Ge;b[Qr]=TA-l*$t,b[Qr+1]=-Mt-l*Ct,b[tr]=vA-l*Tt,b[tr+1]=l*ut-QA}}const Je=M>>>1;for(let AA=2;AA<Je;AA+=2)b[M-AA]=b[AA],b[M-AA+1]=-b[AA+1]}_singleRealTransform2(b,e,l,M,ue){const D=b[M],z=b[M+ue];e[l]=D+z,e[l+1]=0,e[l+2]=D-z,e[l+3]=0}_singleRealTransform4(b,e,l,M,ue,D){const z=2*ue,Re=3*ue,Ne=b[M],Ye=b[M+ue],Je=b[M+z],AA=b[M+Re],xA=Ne+Je,GA=Ne-Je,Ge=Ye+AA,Ie=D*(Ye-AA);e[l]=xA+Ge,e[l+1]=0,e[l+2]=GA,e[l+3]=-Ie,e[l+4]=xA-Ge,e[l+5]=0,e[l+6]=GA,e[l+7]=Ie}}class be{constructor(b){const e=2*(b-1),l=2*(2*b-1),M=2**Math.ceil(Math.log2(l));this.bufferSize=M,this._a=e;const ue=new Float64Array(l),D=new Float64Array(M);this._chirpBuffer=new Float64Array(M),this._buffer1=new Float64Array(M),this._buffer2=new Float64Array(M),this._outBuffer1=new Float64Array(M),this._outBuffer2=new Float64Array(M);const z=-2*Math.PI/b,Re=Math.cos(z),Ne=Math.sin(z);for(let Ye=0;Ye<l>>1;++Ye){const Je=(Ye+1-b)**2/2,AA=Math.sqrt(Re**2+Ne**2)**Je,xA=Je*Math.atan2(Ne,Re),GA=2*Ye;ue[GA]=AA*Math.cos(xA),ue[GA+1]=AA*Math.sin(xA),D[GA]=ue[GA],D[GA+1]=-ue[GA+1]}this._slicedChirpBuffer=ue.subarray(e,l),this._f=new re(M>>1),this._f.transform(this._chirpBuffer,D)}_transform(b,e,l){const M=this._buffer1,ue=this._buffer2,D=this._outBuffer1,z=this._outBuffer2,Re=this._chirpBuffer,Ne=this._slicedChirpBuffer,Ye=this._a;if(l)for(let Je=0;Je<Ne.length;Je+=2){const AA=Je+1,xA=e[Je>>1];M[Je]=xA*Ne[Je],M[AA]=xA*Ne[AA]}else for(let Je=0;Je<Ne.length;Je+=2){const AA=Je+1;M[Je]=e[Je]*Ne[Je]-e[AA]*Ne[AA],M[AA]=e[Je]*Ne[AA]+e[AA]*Ne[Je]}this._f.transform(D,M);for(let Je=0;Je<Re.length;Je+=2){const AA=Je+1;ue[Je]=D[Je]*Re[Je]-D[AA]*Re[AA],ue[AA]=D[Je]*Re[AA]+D[AA]*Re[Je]}this._f.inverseTransform(z,ue);for(let Je=0;Je<z.length;Je+=2){const AA=z[Je+Ye],xA=z[Je+Ye+1],GA=Ne[Je],Ge=Ne[Je+1];b[Je]=AA*GA-xA*Ge,b[Je+1]=AA*Ge+xA*GA}}transform(b,e){this._transform(b,e,!1)}realTransform(b,e){this._transform(b,e,!0)}}class xe{constructor(b){this.fft_length=b,this.isPowerOfTwo=R(b),this.isPowerOfTwo?(this.fft=new re(b),this.outputBufferSize=2*b):(this.fft=new be(b),this.outputBufferSize=this.fft.bufferSize)}realTransform(b,e){this.fft.realTransform(b,e)}transform(b,e){this.fft.transform(b,e)}}function ye(g,b){if(b%2==0||b<=0)throw new Error("Window size must be a positive odd number");const e=new g.constructor(g.length),l=new g.constructor(b),M=Math.floor(b/2);for(let ue=0;ue<g.length;++ue){let D=0;for(let z=-M;z<=M;++z){let Re=ue+z;Re<0?Re=Math.abs(Re):Re>=g.length&&(Re=2*(g.length-1)-Re),l[D++]=g[Re]}l.sort(),e[ue]=l[M]}return e}function se(g,b){const e=Math.pow(10,b);return Math.round(g*e)/e}function ne(g){const b=Math.round(g);return Math.abs(g)%1==.5?b%2==0?b:b-1:b}function we(g){const b=g.length,e=g[0].length,l=[b+1,e+1],M=Array.from({length:l[0]},()=>Array(l[1]).fill(1/0));M[0][0]=0;const ue=Array.from({length:l[0]},()=>Array(l[1]).fill(-1));for(let Ye=1;Ye<l[1];++Ye)for(let Je=1;Je<l[0];++Je){const AA=M[Je-1][Ye-1],xA=M[Je-1][Ye],GA=M[Je][Ye-1];let Ge,Ie;AA<xA&&AA<GA?(Ge=AA,Ie=0):xA<AA&&xA<GA?(Ge=xA,Ie=1):(Ge=GA,Ie=2),M[Je][Ye]=g[Je-1][Ye-1]+Ge,ue[Je][Ye]=Ie}for(let Ye=0;Ye<l[1];++Ye)ue[0][Ye]=2;for(let Ye=0;Ye<l[0];++Ye)ue[Ye][0]=1;let D=b,z=e,Re=[],Ne=[];for(;D>0||z>0;)switch(Re.push(D-1),Ne.push(z-1),ue[D][z]){case 0:--D,--z;break;case 1:--D;break;case 2:--z;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${D}, ${z}]. Please file a bug report.`)}return Re.reverse(),Ne.reverse(),[Re,Ne]}},"./src/utils/tensor.js":(I,C,d)=>{d.r(C),d.d(C,{Tensor:()=>j,cat:()=>b,full:()=>z,full_like:()=>Re,interpolate:()=>W,interpolate_4d:()=>F,layer_norm:()=>se,matmul:()=>X,mean:()=>ue,mean_pooling:()=>ye,ones:()=>Ne,ones_like:()=>Ye,permute:()=>q,quantize_embeddings:()=>GA,rand:()=>xA,rfft:()=>R,slice:()=>xe,stack:()=>e,std_mean:()=>M,topk:()=>re,zeros:()=>Je,zeros_like:()=>AA});var k=d("./src/utils/maths.js"),T=d("./src/backends/onnx.js"),L=d("./src/ops/registry.js");const N=Object.freeze({float32:Float32Array,float16:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array,uint4:Uint8Array,int4:Int8Array});class j{get dims(){return this.ort_tensor.dims}set dims(Ie){this.ort_tensor.dims=Ie}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}ort_tensor;constructor(...Ie){return(0,T.isONNXTensor)(Ie[0])?this.ort_tensor=Ie[0]:this.ort_tensor=new T.Tensor(Ie[0],Ie[1],Ie[2]),new Proxy(this,{get:(ze,Ue)=>{if(typeof Ue=="string"){let Pe=Number(Ue);if(Number.isInteger(Pe))return ze._getitem(Pe)}return ze[Ue]},set:(ze,Ue,Pe)=>ze[Ue]=Pe})}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[Ie,...ze]=this.dims;if(ze.length>0){const Ue=ze.reduce((Pe,kA)=>Pe*kA);for(let Pe=0;Pe<Ie;++Pe)yield this._subarray(Pe,Ue,ze)}else yield*this.data}_getitem(Ie){const[ze,...Ue]=this.dims;if(Ie=g(Ie,ze),Ue.length>0){const Pe=Ue.reduce((kA,aA)=>kA*aA);return this._subarray(Ie,Pe,Ue)}return new j(this.type,[this.data[Ie]],Ue)}indexOf(Ie){const ze=this.data;for(let Ue=0;Ue<ze.length;++Ue)if(ze[Ue]==Ie)return Ue;return-1}_subarray(Ie,ze,Ue){const Pe=Ie*ze,kA=(Ie+1)*ze,aA="subarray"in this.data?this.data.subarray(Pe,kA):this.data.slice(Pe,kA);return new j(this.type,aA,Ue)}item(){const Ie=this.data;if(Ie.length!==1)throw new Error(`a Tensor with ${Ie.length} elements cannot be converted to Scalar`);return Ie[0]}tolist(){return function(Ie,ze){const Ue=Ie.length,Pe=ze.reduce((aA,iA)=>aA*iA);if(Ue!==Pe)throw Error(`cannot reshape array of size ${Ue} into shape (${ze})`);let kA=Ie;for(let aA=ze.length-1;aA>=0;aA--)kA=kA.reduce((iA,yA)=>{let nA=iA[iA.length-1];return nA.length<ze[aA]?nA.push(yA):iA.push([yA]),iA},[[]]);return kA[0]}(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const Ie=this.data;for(let ze=0;ze<Ie.length;++ze)Ie[ze]=1/(1+Math.exp(-Ie[ze]));return this}map(Ie){return this.clone().map_(Ie)}map_(Ie){const ze=this.data;for(let Ue=0;Ue<ze.length;++Ue)ze[Ue]=Ie(ze[Ue],Ue,ze);return this}mul(Ie){return this.clone().mul_(Ie)}mul_(Ie){const ze=this.data;for(let Ue=0;Ue<ze.length;++Ue)ze[Ue]*=Ie;return this}div(Ie){return this.clone().div_(Ie)}div_(Ie){const ze=this.data;for(let Ue=0;Ue<ze.length;++Ue)ze[Ue]/=Ie;return this}add(Ie){return this.clone().add_(Ie)}add_(Ie){const ze=this.data;for(let Ue=0;Ue<ze.length;++Ue)ze[Ue]+=Ie;return this}sub(Ie){return this.clone().sub_(Ie)}sub_(Ie){const ze=this.data;for(let Ue=0;Ue<ze.length;++Ue)ze[Ue]-=Ie;return this}clone(){return new j(this.type,this.data.slice(),this.dims.slice())}slice(...Ie){const ze=[],Ue=[];for(let nA=0;nA<this.dims.length;++nA){let Se=Ie[nA];if(Se==null)Ue.push([0,this.dims[nA]]),ze.push(this.dims[nA]);else if(typeof Se=="number")Se=g(Se,this.dims[nA],nA),Ue.push([Se,Se+1]);else{if(!Array.isArray(Se)||Se.length!==2)throw new Error(`Invalid slice: ${Se}`);{let[Ze,mA]=Se;if(Ze=Ze===null?0:g(Ze,this.dims[nA],nA,!1),mA=mA===null?this.dims[nA]:g(mA,this.dims[nA],nA,!1),Ze>mA)throw new Error(`Invalid slice: ${Se}`);const CA=[Math.max(Ze,0),Math.min(mA,this.dims[nA])];Ue.push(CA),ze.push(CA[1]-CA[0])}}}const Pe=Ue.map(([nA,Se])=>Se-nA),kA=Pe.reduce((nA,Se)=>nA*Se),aA=this.data,iA=new aA.constructor(kA),yA=this.stride();for(let nA=0;nA<kA;++nA){let Se=0;for(let Ze=Pe.length-1,mA=nA;Ze>=0;--Ze){const CA=Pe[Ze];Se+=(mA%CA+Ue[Ze][0])*yA[Ze],mA=Math.floor(mA/CA)}iA[nA]=aA[Se]}return new j(this.type,iA,ze)}permute(...Ie){return q(this,Ie)}transpose(...Ie){return this.permute(...Ie)}sum(Ie=null,ze=!1){return this.norm(1,Ie,ze)}norm(Ie="fro",ze=null,Ue=!1){if(Ie==="fro")Ie=2;else if(typeof Ie=="string")throw Error(`Unsupported norm: ${Ie}`);const Pe=this.data,kA=(nA,Se)=>nA+Se**Ie;if(ze===null){const nA=Pe.reduce(kA,0)**(1/Ie);return new j(this.type,[nA],[])}const[aA,iA,yA]=l(kA,this,ze,Ue);if(Ie!==1)for(let nA=0;nA<iA.length;++nA)iA[nA]=iA[nA]**(1/Ie);return new j(aA,iA,yA)}normalize_(Ie=2,ze=1){ze=g(ze,this.dims.length);const Ue=this.norm(Ie,ze,!0),Pe=this.data,kA=Ue.data;for(let aA=0;aA<Pe.length;++aA){let iA=0;for(let yA=this.dims.length-1,nA=aA,Se=1;yA>=0;--yA){const Ze=this.dims[yA];yA!==ze&&(iA+=nA%Ze*Se,Se*=this.dims[yA]),nA=Math.floor(nA/Ze)}Pe[aA]/=kA[iA]}return this}normalize(Ie=2,ze=1){return this.clone().normalize_(Ie,ze)}stride(){return function(Ie){const ze=new Array(Ie.length);for(let Ue=Ie.length-1,Pe=1;Ue>=0;--Ue)ze[Ue]=Pe,Pe*=Ie[Ue];return ze}(this.dims)}squeeze(Ie=null){return new j(this.type,this.data,ne(this.dims,Ie))}squeeze_(Ie=null){return this.dims=ne(this.dims,Ie),this}unsqueeze(Ie=null){return new j(this.type,this.data,we(this.dims,Ie))}unsqueeze_(Ie=null){return this.dims=we(this.dims,Ie),this}flatten_(Ie=0,ze=-1){ze=(ze+this.dims.length)%this.dims.length;let Ue=this.dims.slice(0,Ie),Pe=this.dims.slice(Ie,ze+1),kA=this.dims.slice(ze+1);return this.dims=[...Ue,Pe.reduce((aA,iA)=>aA*iA,1),...kA],this}flatten(Ie=0,ze=-1){return this.clone().flatten_(Ie,ze)}view(...Ie){let ze=-1;for(let Pe=0;Pe<Ie.length;++Pe)if(Ie[Pe]===-1){if(ze!==-1)throw new Error("Only one dimension can be inferred");ze=Pe}const Ue=this.data;if(ze!==-1){const Pe=Ie.reduce((kA,aA,iA)=>iA!==ze?kA*aA:kA,1);Ie[ze]=Ue.length/Pe}return new j(this.type,Ue,Ie)}neg_(){const Ie=this.data;for(let ze=0;ze<Ie.length;++ze)Ie[ze]=-Ie[ze];return this}neg(){return this.clone().neg_()}gt(Ie){const ze=new Uint8Array(this.data.length),Ue=this.data;for(let Pe=0;Pe<Ue.length;++Pe)ze[Pe]=Ue[Pe]>Ie?1:0;return new j("bool",ze,this.dims)}lt(Ie){const ze=new Uint8Array(this.data.length),Ue=this.data;for(let Pe=0;Pe<Ue.length;++Pe)ze[Pe]=Ue[Pe]<Ie?1:0;return new j("bool",ze,this.dims)}clamp_(Ie,ze){const Ue=this.data;for(let Pe=0;Pe<Ue.length;++Pe)Ue[Pe]=Math.min(Math.max(Ue[Pe],Ie),ze);return this}clamp(Ie,ze){return this.clone().clamp_(Ie,ze)}round_(){const Ie=this.data;for(let ze=0;ze<Ie.length;++ze)Ie[ze]=Math.round(Ie[ze]);return this}round(){return this.clone().round_()}mean(Ie=null,ze=!1){return ue(this,Ie,ze)}min(Ie=null,ze=!1){if(Ie===null){const aA=(0,k.min)(this.data)[0];return new j(this.type,[aA],[])}const[Ue,Pe,kA]=l((aA,iA)=>Math.min(aA,iA),this,Ie,ze,1/0);return new j(Ue,Pe,kA)}max(Ie=null,ze=!1){if(Ie===null){const aA=(0,k.max)(this.data)[0];return new j(this.type,[aA],[])}const[Ue,Pe,kA]=l((aA,iA)=>Math.max(aA,iA),this,Ie,ze,-1/0);return new j(Ue,Pe,kA)}argmin(Ie=null,ze=!1){if(Ie!==null)throw new Error("`dim !== null` not yet implemented.");const Ue=(0,k.min)(this.data)[1];return new j("int64",[BigInt(Ue)],[])}argmax(Ie=null,ze=!1){if(Ie!==null)throw new Error("`dim !== null` not yet implemented.");const Ue=(0,k.max)(this.data)[1];return new j("int64",[BigInt(Ue)],[])}to(Ie){if(this.type===Ie)return this;if(!N.hasOwnProperty(Ie))throw new Error(`Unsupported type: ${Ie}`);let ze;const Ue=["int64","uint64"].includes(this.type),Pe=["int64","uint64"].includes(Ie);return Ue&&!Pe?ze=Number:!Ue&&Pe&&(ze=BigInt),new j(Ie,N[Ie].from(this.data,ze),this.dims)}}function q(Ge,Ie){const[ze,Ue]=(0,k.permute_data)(Ge.data,Ge.dims,Ie);return new j(Ge.type,ze,Ue)}function W(Ge,[Ie,ze],Ue="bilinear",Pe=!1){const kA=Ge.dims.at(-3)??1,aA=Ge.dims.at(-2),iA=Ge.dims.at(-1);let yA=(0,k.interpolate_data)(Ge.data,[kA,aA,iA],[Ie,ze],Ue,Pe);return new j(Ge.type,yA,[kA,Ie,ze])}async function F(Ge,{size:Ie=null,mode:ze="bilinear"}={}){if(Ge.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!Ie)throw new Error("`interpolate_4d` requires a `size` argument.");let Ue,Pe;if(Ie.length===2)Ue=[...Ge.dims.slice(0,2),...Ie];else if(Ie.length===3)Ue=[Ge.dims[0],...Ie];else{if(Ie.length!==4)throw new Error("`size` must be of length 2, 3, or 4.");Ue=Ie}if(ze==="nearest")Pe=await L.TensorOpRegistry.nearest_interpolate_4d;else if(ze==="bilinear")Pe=await L.TensorOpRegistry.bilinear_interpolate_4d;else{if(ze!=="bicubic")throw new Error(`Unsupported mode: ${ze}`);Pe=await L.TensorOpRegistry.bicubic_interpolate_4d}const kA=new j("int64",new BigInt64Array(Ue.map(BigInt)),[Ue.length]);return await Pe({x:Ge,s:kA})}async function X(Ge,Ie){return await(await L.TensorOpRegistry.matmul)({a:Ge,b:Ie})}async function R(Ge,Ie){return await(await L.TensorOpRegistry.rfft)({x:Ge,a:Ie})}async function re(Ge,Ie){const ze=await L.TensorOpRegistry.top_k;return Ie=Ie==null?Ge.dims.at(-1):Math.min(Ie,Ge.dims.at(-1)),await ze({x:Ge,k:new j("int64",[BigInt(Ie)],[1])})}const be=Ge=>new j("int64",Ge,[Ge.length]);async function xe(Ge,Ie,ze,Ue,Pe){return await(await L.TensorOpRegistry.slice)({x:Ge,s:be(Ie),e:be(ze),a:be(Ue),t:be(Pe??new Array(Ue.length).fill(1))})}function ye(Ge,Ie){const ze=Ge.data,Ue=Ie.data,Pe=[Ge.dims[0],Ge.dims[2]],kA=new ze.constructor(Pe[0]*Pe[1]),[aA,iA,yA]=Ge.dims;let nA=0;for(let Se=0;Se<aA;++Se){const Ze=Se*yA*iA;for(let mA=0;mA<yA;++mA){let CA=0,Te=0;const pA=Se*iA,EA=Ze+mA;for(let YA=0;YA<iA;++YA){const J=Number(Ue[pA+YA]);Te+=J,CA+=ze[EA+YA*yA]*J}const FA=CA/Te;kA[nA++]=FA}}return new j(Ge.type,kA,Pe)}function se(Ge,Ie,{eps:ze=1e-5}={}){if(Ge.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[Ue,Pe]=Ge.dims;if(Ie.length!==1&&Ie[0]!==Pe)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[kA,aA]=M(Ge,1,0,!0),iA=kA.data,yA=aA.data,nA=Ge.data,Se=new nA.constructor(nA.length);for(let Ze=0;Ze<Ue;++Ze){const mA=Ze*Pe;for(let CA=0;CA<Pe;++CA){const Te=mA+CA;Se[Te]=(nA[Te]-yA[Ze])/(iA[Ze]+ze)}}return new j(Ge.type,Se,Ge.dims)}function ne(Ge,Ie){return Ge=Ge.slice(),Ie===null?Ge=Ge.filter(ze=>ze!==1):typeof Ie=="number"?Ge[Ie]===1&&Ge.splice(Ie,1):Array.isArray(Ie)&&(Ge=Ge.filter((ze,Ue)=>ze!==1||!Ie.includes(Ue))),Ge}function we(Ge,Ie){return Ie=g(Ie,Ge.length+1),(Ge=Ge.slice()).splice(Ie,0,1),Ge}function g(Ge,Ie,ze=null,Ue=!0){if(Ue&&(Ge<-Ie||Ge>=Ie))throw new Error(`IndexError: index ${Ge} is out of bounds for dimension${ze===null?"":" "+ze} with size ${Ie}`);return Ge<0&&(Ge=(Ge%Ie+Ie)%Ie),Ge}function b(Ge,Ie=0){Ie=g(Ie,Ge[0].dims.length);const ze=Ge[0].dims.slice();ze[Ie]=Ge.reduce((aA,iA)=>aA+iA.dims[Ie],0);const Ue=ze.reduce((aA,iA)=>aA*iA,1),Pe=new Ge[0].data.constructor(Ue),kA=Ge[0].type;if(Ie===0){let aA=0;for(const iA of Ge){const yA=iA.data;Pe.set(yA,aA),aA+=yA.length}}else{let aA=0;for(let iA=0;iA<Ge.length;++iA){const{data:yA,dims:nA}=Ge[iA];for(let Se=0;Se<yA.length;++Se){let Ze=0;for(let mA=nA.length-1,CA=Se,Te=1;mA>=0;--mA){const pA=nA[mA];let EA=CA%pA;mA===Ie&&(EA+=aA),Ze+=EA*Te,Te*=ze[mA],CA=Math.floor(CA/pA)}Pe[Ze]=yA[Se]}aA+=nA[Ie]}}return new j(kA,Pe,ze)}function e(Ge,Ie=0){return b(Ge.map(ze=>ze.unsqueeze(Ie)),Ie)}function l(Ge,Ie,ze=null,Ue=!1,Pe=null){const kA=Ie.data,aA=Ie.dims;ze=g(ze,aA.length);const iA=aA.slice();iA[ze]=1;const yA=new kA.constructor(kA.length/aA[ze]);Pe!==null&&yA.fill(Pe);for(let nA=0;nA<kA.length;++nA){let Se=0;for(let Ze=aA.length-1,mA=nA,CA=1;Ze>=0;--Ze){const Te=aA[Ze];Ze!==ze&&(Se+=mA%Te*CA,CA*=iA[Ze]),mA=Math.floor(mA/Te)}yA[Se]=Ge(yA[Se],kA[nA],nA,Se)}return Ue||iA.splice(ze,1),[Ie.type,yA,iA]}function M(Ge,Ie=null,ze=1,Ue=!1){const Pe=Ge.data,kA=Ge.dims;if(Ie===null){const Ze=Pe.reduce((pA,EA)=>pA+EA,0),mA=Ze/Pe.length,CA=Math.sqrt(Pe.reduce((pA,EA)=>pA+(EA-mA)**2,0)/(Pe.length-ze)),Te=new j(Ge.type,[mA],[]);return[new j(Ge.type,[CA],[]),Te]}const aA=ue(Ge,Ie=g(Ie,kA.length),Ue),iA=aA.data,[yA,nA,Se]=l((Ze,mA,CA,Te)=>Ze+(mA-iA[Te])**2,Ge,Ie,Ue);for(let Ze=0;Ze<nA.length;++Ze)nA[Ze]=Math.sqrt(nA[Ze]/(kA[Ie]-ze));return[new j(yA,nA,Se),aA]}function ue(Ge,Ie=null,ze=!1){const Ue=Ge.dims,Pe=Ge.data;if(Ie===null){const yA=Pe.reduce((nA,Se)=>nA+Se,0);return new j(Ge.type,[yA/Pe.length],[])}Ie=g(Ie,Ue.length);const[kA,aA,iA]=l((yA,nA)=>yA+nA,Ge,Ie,ze);if(Ue[Ie]!==1)for(let yA=0;yA<aA.length;++yA)aA[yA]/=Ue[Ie];return new j(kA,aA,iA)}function D(Ge,Ie,ze,Ue){const Pe=Ge.reduce((kA,aA)=>kA*aA,1);return new j(ze,new Ue(Pe).fill(Ie),Ge)}function z(Ge,Ie){let ze,Ue;if(typeof Ie=="number")ze="float32",Ue=Float32Array;else if(typeof Ie=="bigint")ze="int64",Ue=BigInt64Array;else{if(typeof Ie!="boolean")throw new Error("Unsupported data type: "+typeof Ie);ze="bool",Ue=Uint8Array}return D(Ge,Ie,ze,Ue)}function Re(Ge,Ie){return z(Ge.dims,Ie)}function Ne(Ge){return D(Ge,1n,"int64",BigInt64Array)}function Ye(Ge){return Ne(Ge.dims)}function Je(Ge){return D(Ge,0n,"int64",BigInt64Array)}function AA(Ge){return Je(Ge.dims)}function xA(Ge){const Ie=Ge.reduce((ze,Ue)=>ze*Ue,1);return new j("float32",Float32Array.from({length:Ie},()=>Math.random()),Ge)}function GA(Ge,Ie){if(Ge.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(Ge.dims.at(-1)%8!=0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(Ie))throw new Error("The precision must be either 'binary' or 'ubinary'");const ze=Ie==="binary",Ue=ze?"int8":"uint8",Pe=ze?Int8Array:Uint8Array,kA=Ge.data,aA=new Pe(kA.length/8);for(let iA=0;iA<kA.length;++iA){const yA=kA[iA]>0?1:0,nA=Math.floor(iA/8),Se=iA%8;aA[nA]|=yA<<7-Se,ze&&Se===0&&(aA[nA]-=128)}return new j(Ue,aA,[Ge.dims[0],Ge.dims[1]/8])}}},Ju={};function ur(I){var C=Ju[I];if(C!==void 0)return C.exports;var d=Ju[I]={exports:{}};return pd[I](d,d.exports,ur),d.exports}ur.m=pd,s2=Object.getPrototypeOf?I=>Object.getPrototypeOf(I):I=>I.__proto__,ur.t=function(I,C){if(1&C&&(I=this(I)),8&C||typeof I=="object"&&I&&(4&C&&I.__esModule||16&C&&typeof I.then=="function"))return I;var d=Object.create(null);ur.r(d);var k={};rg=rg||[null,s2({}),s2([]),s2(s2)];for(var T=2&C&&I;typeof T=="object"&&!~rg.indexOf(T);T=s2(T))Object.getOwnPropertyNames(T).forEach(L=>k[L]=()=>I[L]);return k.default=()=>I,ur.d(d,k),d},ur.d=(I,C)=>{for(var d in C)ur.o(C,d)&&!ur.o(I,d)&&Object.defineProperty(I,d,{enumerable:!0,get:C[d]})},ur.o=(I,C)=>Object.prototype.hasOwnProperty.call(I,C),ur.r=I=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},(()=>{var I;if(typeof import.meta.url=="string"&&(I=import.meta.url),!I)throw new Error("Automatic publicPath is not supported in this browser");I=I.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),ur.p=I})(),ur.b=new URL(import.meta.url);var c2={};(()=>{ur.r(c2),ur.d(c2,{ASTFeatureExtractor:()=>F.ASTFeatureExtractor,ASTForAudioClassification:()=>d.ASTForAudioClassification,ASTModel:()=>d.ASTModel,ASTPreTrainedModel:()=>d.ASTPreTrainedModel,AlbertForMaskedLM:()=>d.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>d.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>d.AlbertForSequenceClassification,AlbertModel:()=>d.AlbertModel,AlbertPreTrainedModel:()=>d.AlbertPreTrainedModel,AlbertTokenizer:()=>k.AlbertTokenizer,AudioClassificationPipeline:()=>C.AudioClassificationPipeline,AutoConfig:()=>T.AutoConfig,AutoFeatureExtractor:()=>X.AutoFeatureExtractor,AutoImageProcessor:()=>be.AutoImageProcessor,AutoModel:()=>d.AutoModel,AutoModelForAudioClassification:()=>d.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>d.AutoModelForAudioFrameClassification,AutoModelForCTC:()=>d.AutoModelForCTC,AutoModelForCausalLM:()=>d.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>d.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>d.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>d.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>d.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>d.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>d.AutoModelForImageSegmentation,AutoModelForImageToImage:()=>d.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>d.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>d.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>d.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>d.AutoModelForObjectDetection,AutoModelForPoseEstimation:()=>d.AutoModelForPoseEstimation,AutoModelForQuestionAnswering:()=>d.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>d.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>d.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>d.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>d.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>d.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>d.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>d.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>d.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>d.AutoModelForVision2Seq,AutoModelForXVector:()=>d.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>d.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>se.AutoProcessor,AutoTokenizer:()=>k.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>C.AutomaticSpeechRecognitionPipeline,BartForConditionalGeneration:()=>d.BartForConditionalGeneration,BartForSequenceClassification:()=>d.BartForSequenceClassification,BartModel:()=>d.BartModel,BartPretrainedModel:()=>d.BartPretrainedModel,BartTokenizer:()=>k.BartTokenizer,BaseModelOutput:()=>d.BaseModelOutput,BaseStreamer:()=>ne.BaseStreamer,BeitFeatureExtractor:()=>re.BeitFeatureExtractor,BeitForImageClassification:()=>d.BeitForImageClassification,BeitModel:()=>d.BeitModel,BeitPreTrainedModel:()=>d.BeitPreTrainedModel,BertForMaskedLM:()=>d.BertForMaskedLM,BertForQuestionAnswering:()=>d.BertForQuestionAnswering,BertForSequenceClassification:()=>d.BertForSequenceClassification,BertForTokenClassification:()=>d.BertForTokenClassification,BertModel:()=>d.BertModel,BertPreTrainedModel:()=>d.BertPreTrainedModel,BertTokenizer:()=>k.BertTokenizer,BitImageProcessor:()=>re.BitImageProcessor,BlenderbotForConditionalGeneration:()=>d.BlenderbotForConditionalGeneration,BlenderbotModel:()=>d.BlenderbotModel,BlenderbotPreTrainedModel:()=>d.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>d.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>d.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>d.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>k.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>k.BlenderbotTokenizer,BloomForCausalLM:()=>d.BloomForCausalLM,BloomModel:()=>d.BloomModel,BloomPreTrainedModel:()=>d.BloomPreTrainedModel,BloomTokenizer:()=>k.BloomTokenizer,CLIPFeatureExtractor:()=>re.CLIPFeatureExtractor,CLIPImageProcessor:()=>re.CLIPImageProcessor,CLIPModel:()=>d.CLIPModel,CLIPPreTrainedModel:()=>d.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>d.CLIPSegForImageSegmentation,CLIPSegModel:()=>d.CLIPSegModel,CLIPSegPreTrainedModel:()=>d.CLIPSegPreTrainedModel,CLIPTextModel:()=>d.CLIPTextModel,CLIPTextModelWithProjection:()=>d.CLIPTextModelWithProjection,CLIPTokenizer:()=>k.CLIPTokenizer,CLIPVisionModel:()=>d.CLIPVisionModel,CLIPVisionModelWithProjection:()=>d.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>d.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>d.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>d.CamembertForSequenceClassification,CamembertForTokenClassification:()=>d.CamembertForTokenClassification,CamembertModel:()=>d.CamembertModel,CamembertPreTrainedModel:()=>d.CamembertPreTrainedModel,CamembertTokenizer:()=>k.CamembertTokenizer,CausalLMOutput:()=>d.CausalLMOutput,CausalLMOutputWithPast:()=>d.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>re.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>d.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>d.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>d.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>F.ClapFeatureExtractor,ClapModel:()=>d.ClapModel,ClapPreTrainedModel:()=>d.ClapPreTrainedModel,ClapTextModelWithProjection:()=>d.ClapTextModelWithProjection,ClassifierFreeGuidanceLogitsProcessor:()=>g.ClassifierFreeGuidanceLogitsProcessor,CodeGenForCausalLM:()=>d.CodeGenForCausalLM,CodeGenModel:()=>d.CodeGenModel,CodeGenPreTrainedModel:()=>d.CodeGenPreTrainedModel,CodeGenTokenizer:()=>k.CodeGenTokenizer,CodeLlamaTokenizer:()=>k.CodeLlamaTokenizer,CohereForCausalLM:()=>d.CohereForCausalLM,CohereModel:()=>d.CohereModel,CoherePreTrainedModel:()=>d.CoherePreTrainedModel,CohereTokenizer:()=>k.CohereTokenizer,ConvBertForMaskedLM:()=>d.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>d.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>d.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>d.ConvBertForTokenClassification,ConvBertModel:()=>d.ConvBertModel,ConvBertPreTrainedModel:()=>d.ConvBertPreTrainedModel,ConvBertTokenizer:()=>k.ConvBertTokenizer,ConvNextFeatureExtractor:()=>re.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>d.ConvNextForImageClassification,ConvNextImageProcessor:()=>re.ConvNextImageProcessor,ConvNextModel:()=>d.ConvNextModel,ConvNextPreTrainedModel:()=>d.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>d.ConvNextV2ForImageClassification,ConvNextV2Model:()=>d.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>d.ConvNextV2PreTrainedModel,DPTFeatureExtractor:()=>re.DPTFeatureExtractor,DPTForDepthEstimation:()=>d.DPTForDepthEstimation,DPTImageProcessor:()=>re.DPTImageProcessor,DPTModel:()=>d.DPTModel,DPTPreTrainedModel:()=>d.DPTPreTrainedModel,DebertaForMaskedLM:()=>d.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>d.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>d.DebertaForSequenceClassification,DebertaForTokenClassification:()=>d.DebertaForTokenClassification,DebertaModel:()=>d.DebertaModel,DebertaPreTrainedModel:()=>d.DebertaPreTrainedModel,DebertaTokenizer:()=>k.DebertaTokenizer,DebertaV2ForMaskedLM:()=>d.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>d.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>d.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>d.DebertaV2ForTokenClassification,DebertaV2Model:()=>d.DebertaV2Model,DebertaV2PreTrainedModel:()=>d.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>k.DebertaV2Tokenizer,DecisionTransformerModel:()=>d.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>d.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>re.DeiTFeatureExtractor,DeiTForImageClassification:()=>d.DeiTForImageClassification,DeiTImageProcessor:()=>re.DeiTImageProcessor,DeiTModel:()=>d.DeiTModel,DeiTPreTrainedModel:()=>d.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>d.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>d.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>C.DepthEstimationPipeline,DepthProForDepthEstimation:()=>d.DepthProForDepthEstimation,DepthProPreTrainedModel:()=>d.DepthProPreTrainedModel,DetrFeatureExtractor:()=>re.DetrFeatureExtractor,DetrForObjectDetection:()=>d.DetrForObjectDetection,DetrForSegmentation:()=>d.DetrForSegmentation,DetrImageProcessor:()=>re.DetrImageProcessor,DetrModel:()=>d.DetrModel,DetrObjectDetectionOutput:()=>d.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>d.DetrPreTrainedModel,DetrSegmentationOutput:()=>d.DetrSegmentationOutput,Dinov2ForImageClassification:()=>d.Dinov2ForImageClassification,Dinov2Model:()=>d.Dinov2Model,Dinov2PreTrainedModel:()=>d.Dinov2PreTrainedModel,Dinov2WithRegistersForImageClassification:()=>d.Dinov2WithRegistersForImageClassification,Dinov2WithRegistersModel:()=>d.Dinov2WithRegistersModel,Dinov2WithRegistersPreTrainedModel:()=>d.Dinov2WithRegistersPreTrainedModel,DistilBertForMaskedLM:()=>d.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>d.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>d.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>d.DistilBertForTokenClassification,DistilBertModel:()=>d.DistilBertModel,DistilBertPreTrainedModel:()=>d.DistilBertPreTrainedModel,DistilBertTokenizer:()=>k.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>C.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>re.DonutFeatureExtractor,DonutImageProcessor:()=>re.DonutImageProcessor,DonutSwinModel:()=>d.DonutSwinModel,DonutSwinPreTrainedModel:()=>d.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>d.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>re.EfficientNetImageProcessor,EfficientNetModel:()=>d.EfficientNetModel,EfficientNetPreTrainedModel:()=>d.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>d.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>d.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>d.ElectraForSequenceClassification,ElectraForTokenClassification:()=>d.ElectraForTokenClassification,ElectraModel:()=>d.ElectraModel,ElectraPreTrainedModel:()=>d.ElectraPreTrainedModel,ElectraTokenizer:()=>k.ElectraTokenizer,EosTokenCriteria:()=>we.EosTokenCriteria,EsmForMaskedLM:()=>d.EsmForMaskedLM,EsmForSequenceClassification:()=>d.EsmForSequenceClassification,EsmForTokenClassification:()=>d.EsmForTokenClassification,EsmModel:()=>d.EsmModel,EsmPreTrainedModel:()=>d.EsmPreTrainedModel,EsmTokenizer:()=>k.EsmTokenizer,ExaoneForCausalLM:()=>d.ExaoneForCausalLM,ExaoneModel:()=>d.ExaoneModel,ExaonePreTrainedModel:()=>d.ExaonePreTrainedModel,FFT:()=>q.FFT,FalconForCausalLM:()=>d.FalconForCausalLM,FalconModel:()=>d.FalconModel,FalconPreTrainedModel:()=>d.FalconPreTrainedModel,FalconTokenizer:()=>k.FalconTokenizer,FastViTForImageClassification:()=>d.FastViTForImageClassification,FastViTModel:()=>d.FastViTModel,FastViTPreTrainedModel:()=>d.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>C.FeatureExtractionPipeline,FeatureExtractor:()=>W.FeatureExtractor,FillMaskPipeline:()=>C.FillMaskPipeline,Florence2ForConditionalGeneration:()=>d.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>d.Florence2PreTrainedModel,Florence2Processor:()=>ye.Florence2Processor,ForcedBOSTokenLogitsProcessor:()=>g.ForcedBOSTokenLogitsProcessor,ForcedEOSTokenLogitsProcessor:()=>g.ForcedEOSTokenLogitsProcessor,GLPNFeatureExtractor:()=>re.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>d.GLPNForDepthEstimation,GLPNModel:()=>d.GLPNModel,GLPNPreTrainedModel:()=>d.GLPNPreTrainedModel,GPT2LMHeadModel:()=>d.GPT2LMHeadModel,GPT2Model:()=>d.GPT2Model,GPT2PreTrainedModel:()=>d.GPT2PreTrainedModel,GPT2Tokenizer:()=>k.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>d.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>d.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>d.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>d.GPTJForCausalLM,GPTJModel:()=>d.GPTJModel,GPTJPreTrainedModel:()=>d.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>d.GPTNeoForCausalLM,GPTNeoModel:()=>d.GPTNeoModel,GPTNeoPreTrainedModel:()=>d.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>d.GPTNeoXForCausalLM,GPTNeoXModel:()=>d.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>d.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>k.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>d.Gemma2ForCausalLM,Gemma2Model:()=>d.Gemma2Model,Gemma2PreTrainedModel:()=>d.Gemma2PreTrainedModel,GemmaForCausalLM:()=>d.GemmaForCausalLM,GemmaModel:()=>d.GemmaModel,GemmaPreTrainedModel:()=>d.GemmaPreTrainedModel,GemmaTokenizer:()=>k.GemmaTokenizer,GlmForCausalLM:()=>d.GlmForCausalLM,GlmModel:()=>d.GlmModel,GlmPreTrainedModel:()=>d.GlmPreTrainedModel,GraniteForCausalLM:()=>d.GraniteForCausalLM,GraniteModel:()=>d.GraniteModel,GranitePreTrainedModel:()=>d.GranitePreTrainedModel,Grok1Tokenizer:()=>k.Grok1Tokenizer,GroundingDinoForObjectDetection:()=>d.GroundingDinoForObjectDetection,GroundingDinoImageProcessor:()=>re.GroundingDinoImageProcessor,GroundingDinoPreTrainedModel:()=>d.GroundingDinoPreTrainedModel,GroundingDinoProcessor:()=>ye.GroundingDinoProcessor,GroupViTModel:()=>d.GroupViTModel,GroupViTPreTrainedModel:()=>d.GroupViTPreTrainedModel,HeliumForCausalLM:()=>d.HeliumForCausalLM,HeliumModel:()=>d.HeliumModel,HeliumPreTrainedModel:()=>d.HeliumPreTrainedModel,HerbertTokenizer:()=>k.HerbertTokenizer,HieraForImageClassification:()=>d.HieraForImageClassification,HieraModel:()=>d.HieraModel,HieraPreTrainedModel:()=>d.HieraPreTrainedModel,HubertForCTC:()=>d.HubertForCTC,HubertForSequenceClassification:()=>d.HubertForSequenceClassification,HubertModel:()=>d.HubertModel,HubertPreTrainedModel:()=>d.HubertPreTrainedModel,IJepaForImageClassification:()=>d.IJepaForImageClassification,IJepaModel:()=>d.IJepaModel,IJepaPreTrainedModel:()=>d.IJepaPreTrainedModel,Idefics3ForConditionalGeneration:()=>d.Idefics3ForConditionalGeneration,Idefics3ImageProcessor:()=>re.Idefics3ImageProcessor,Idefics3PreTrainedModel:()=>d.Idefics3PreTrainedModel,Idefics3Processor:()=>ye.Idefics3Processor,ImageClassificationPipeline:()=>C.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>C.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>F.ImageFeatureExtractor,ImageMattingOutput:()=>d.ImageMattingOutput,ImageProcessor:()=>R.ImageProcessor,ImageSegmentationPipeline:()=>C.ImageSegmentationPipeline,ImageToImagePipeline:()=>C.ImageToImagePipeline,ImageToTextPipeline:()=>C.ImageToTextPipeline,InterruptableStoppingCriteria:()=>we.InterruptableStoppingCriteria,JAISLMHeadModel:()=>d.JAISLMHeadModel,JAISModel:()=>d.JAISModel,JAISPreTrainedModel:()=>d.JAISPreTrainedModel,JinaCLIPImageProcessor:()=>re.JinaCLIPImageProcessor,JinaCLIPModel:()=>d.JinaCLIPModel,JinaCLIPPreTrainedModel:()=>d.JinaCLIPPreTrainedModel,JinaCLIPProcessor:()=>ye.JinaCLIPProcessor,JinaCLIPTextModel:()=>d.JinaCLIPTextModel,JinaCLIPVisionModel:()=>d.JinaCLIPVisionModel,LlamaForCausalLM:()=>d.LlamaForCausalLM,LlamaModel:()=>d.LlamaModel,LlamaPreTrainedModel:()=>d.LlamaPreTrainedModel,LlamaTokenizer:()=>k.LlamaTokenizer,LlavaForConditionalGeneration:()=>d.LlavaForConditionalGeneration,LlavaOnevisionForConditionalGeneration:()=>d.LlavaOnevisionForConditionalGeneration,LlavaOnevisionImageProcessor:()=>re.LlavaOnevisionImageProcessor,LlavaPreTrainedModel:()=>d.LlavaPreTrainedModel,LogitsProcessor:()=>g.LogitsProcessor,LogitsProcessorList:()=>g.LogitsProcessorList,LogitsWarper:()=>g.LogitsWarper,LongT5ForConditionalGeneration:()=>d.LongT5ForConditionalGeneration,LongT5Model:()=>d.LongT5Model,LongT5PreTrainedModel:()=>d.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>d.M2M100ForConditionalGeneration,M2M100Model:()=>d.M2M100Model,M2M100PreTrainedModel:()=>d.M2M100PreTrainedModel,M2M100Tokenizer:()=>k.M2M100Tokenizer,MBart50Tokenizer:()=>k.MBart50Tokenizer,MBartForCausalLM:()=>d.MBartForCausalLM,MBartForConditionalGeneration:()=>d.MBartForConditionalGeneration,MBartForSequenceClassification:()=>d.MBartForSequenceClassification,MBartModel:()=>d.MBartModel,MBartPreTrainedModel:()=>d.MBartPreTrainedModel,MBartTokenizer:()=>k.MBartTokenizer,MPNetForMaskedLM:()=>d.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>d.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>d.MPNetForSequenceClassification,MPNetForTokenClassification:()=>d.MPNetForTokenClassification,MPNetModel:()=>d.MPNetModel,MPNetPreTrainedModel:()=>d.MPNetPreTrainedModel,MPNetTokenizer:()=>k.MPNetTokenizer,MT5ForConditionalGeneration:()=>d.MT5ForConditionalGeneration,MT5Model:()=>d.MT5Model,MT5PreTrainedModel:()=>d.MT5PreTrainedModel,MarianMTModel:()=>d.MarianMTModel,MarianModel:()=>d.MarianModel,MarianPreTrainedModel:()=>d.MarianPreTrainedModel,MarianTokenizer:()=>k.MarianTokenizer,Mask2FormerImageProcessor:()=>re.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>re.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>d.MaskFormerForInstanceSegmentation,MaskFormerImageProcessor:()=>re.MaskFormerImageProcessor,MaskFormerModel:()=>d.MaskFormerModel,MaskFormerPreTrainedModel:()=>d.MaskFormerPreTrainedModel,MaskedLMOutput:()=>d.MaskedLMOutput,MaxLengthCriteria:()=>we.MaxLengthCriteria,MgpstrForSceneTextRecognition:()=>d.MgpstrForSceneTextRecognition,MgpstrModelOutput:()=>d.MgpstrModelOutput,MgpstrPreTrainedModel:()=>d.MgpstrPreTrainedModel,MgpstrProcessor:()=>ye.MgpstrProcessor,MgpstrTokenizer:()=>k.MgpstrTokenizer,MinLengthLogitsProcessor:()=>g.MinLengthLogitsProcessor,MinNewTokensLengthLogitsProcessor:()=>g.MinNewTokensLengthLogitsProcessor,MistralForCausalLM:()=>d.MistralForCausalLM,MistralModel:()=>d.MistralModel,MistralPreTrainedModel:()=>d.MistralPreTrainedModel,MobileBertForMaskedLM:()=>d.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>d.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>d.MobileBertForSequenceClassification,MobileBertModel:()=>d.MobileBertModel,MobileBertPreTrainedModel:()=>d.MobileBertPreTrainedModel,MobileBertTokenizer:()=>k.MobileBertTokenizer,MobileLLMForCausalLM:()=>d.MobileLLMForCausalLM,MobileLLMModel:()=>d.MobileLLMModel,MobileLLMPreTrainedModel:()=>d.MobileLLMPreTrainedModel,MobileNetV1FeatureExtractor:()=>re.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>d.MobileNetV1ForImageClassification,MobileNetV1ImageProcessor:()=>re.MobileNetV1ImageProcessor,MobileNetV1Model:()=>d.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>d.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>re.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>d.MobileNetV2ForImageClassification,MobileNetV2ImageProcessor:()=>re.MobileNetV2ImageProcessor,MobileNetV2Model:()=>d.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>d.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>re.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>d.MobileNetV3ForImageClassification,MobileNetV3ImageProcessor:()=>re.MobileNetV3ImageProcessor,MobileNetV3Model:()=>d.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>d.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>re.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>d.MobileNetV4ForImageClassification,MobileNetV4ImageProcessor:()=>re.MobileNetV4ImageProcessor,MobileNetV4Model:()=>d.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>d.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>re.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>d.MobileViTForImageClassification,MobileViTImageProcessor:()=>re.MobileViTImageProcessor,MobileViTModel:()=>d.MobileViTModel,MobileViTPreTrainedModel:()=>d.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>d.MobileViTV2ForImageClassification,MobileViTV2Model:()=>d.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>d.MobileViTV2PreTrainedModel,ModelOutput:()=>d.ModelOutput,ModernBertForMaskedLM:()=>d.ModernBertForMaskedLM,ModernBertForSequenceClassification:()=>d.ModernBertForSequenceClassification,ModernBertForTokenClassification:()=>d.ModernBertForTokenClassification,ModernBertModel:()=>d.ModernBertModel,ModernBertPreTrainedModel:()=>d.ModernBertPreTrainedModel,Moondream1ForConditionalGeneration:()=>d.Moondream1ForConditionalGeneration,MoonshineFeatureExtractor:()=>F.MoonshineFeatureExtractor,MoonshineForConditionalGeneration:()=>d.MoonshineForConditionalGeneration,MoonshineModel:()=>d.MoonshineModel,MoonshinePreTrainedModel:()=>d.MoonshinePreTrainedModel,MoonshineProcessor:()=>ye.MoonshineProcessor,MptForCausalLM:()=>d.MptForCausalLM,MptModel:()=>d.MptModel,MptPreTrainedModel:()=>d.MptPreTrainedModel,MultiModalityCausalLM:()=>d.MultiModalityCausalLM,MultiModalityPreTrainedModel:()=>d.MultiModalityPreTrainedModel,MusicgenForCausalLM:()=>d.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>d.MusicgenForConditionalGeneration,MusicgenModel:()=>d.MusicgenModel,MusicgenPreTrainedModel:()=>d.MusicgenPreTrainedModel,NllbTokenizer:()=>k.NllbTokenizer,NoBadWordsLogitsProcessor:()=>g.NoBadWordsLogitsProcessor,NoRepeatNGramLogitsProcessor:()=>g.NoRepeatNGramLogitsProcessor,NomicBertModel:()=>d.NomicBertModel,NomicBertPreTrainedModel:()=>d.NomicBertPreTrainedModel,NougatImageProcessor:()=>re.NougatImageProcessor,NougatTokenizer:()=>k.NougatTokenizer,OPTForCausalLM:()=>d.OPTForCausalLM,OPTModel:()=>d.OPTModel,OPTPreTrainedModel:()=>d.OPTPreTrainedModel,ObjectDetectionPipeline:()=>C.ObjectDetectionPipeline,Olmo2ForCausalLM:()=>d.Olmo2ForCausalLM,Olmo2Model:()=>d.Olmo2Model,Olmo2PreTrainedModel:()=>d.Olmo2PreTrainedModel,OlmoForCausalLM:()=>d.OlmoForCausalLM,OlmoModel:()=>d.OlmoModel,OlmoPreTrainedModel:()=>d.OlmoPreTrainedModel,OpenELMForCausalLM:()=>d.OpenELMForCausalLM,OpenELMModel:()=>d.OpenELMModel,OpenELMPreTrainedModel:()=>d.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>re.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>d.OwlViTForObjectDetection,OwlViTImageProcessor:()=>re.OwlViTImageProcessor,OwlViTModel:()=>d.OwlViTModel,OwlViTPreTrainedModel:()=>d.OwlViTPreTrainedModel,OwlViTProcessor:()=>ye.OwlViTProcessor,Owlv2ForObjectDetection:()=>d.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>re.Owlv2ImageProcessor,Owlv2Model:()=>d.Owlv2Model,Owlv2PreTrainedModel:()=>d.Owlv2PreTrainedModel,PaliGemmaForConditionalGeneration:()=>d.PaliGemmaForConditionalGeneration,PaliGemmaPreTrainedModel:()=>d.PaliGemmaPreTrainedModel,PaliGemmaProcessor:()=>ye.PaliGemmaProcessor,PatchTSMixerForPrediction:()=>d.PatchTSMixerForPrediction,PatchTSMixerModel:()=>d.PatchTSMixerModel,PatchTSMixerPreTrainedModel:()=>d.PatchTSMixerPreTrainedModel,PatchTSTForPrediction:()=>d.PatchTSTForPrediction,PatchTSTModel:()=>d.PatchTSTModel,PatchTSTPreTrainedModel:()=>d.PatchTSTPreTrainedModel,Phi3ForCausalLM:()=>d.Phi3ForCausalLM,Phi3Model:()=>d.Phi3Model,Phi3PreTrainedModel:()=>d.Phi3PreTrainedModel,Phi3VForCausalLM:()=>d.Phi3VForCausalLM,Phi3VImageProcessor:()=>re.Phi3VImageProcessor,Phi3VPreTrainedModel:()=>d.Phi3VPreTrainedModel,Phi3VProcessor:()=>ye.Phi3VProcessor,PhiForCausalLM:()=>d.PhiForCausalLM,PhiModel:()=>d.PhiModel,PhiPreTrainedModel:()=>d.PhiPreTrainedModel,Pipeline:()=>C.Pipeline,PreTrainedModel:()=>d.PreTrainedModel,PreTrainedTokenizer:()=>k.PreTrainedTokenizer,PretrainedConfig:()=>T.PretrainedConfig,PretrainedMixin:()=>d.PretrainedMixin,Processor:()=>xe.Processor,PvtForImageClassification:()=>d.PvtForImageClassification,PvtImageProcessor:()=>re.PvtImageProcessor,PvtModel:()=>d.PvtModel,PvtPreTrainedModel:()=>d.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>F.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>d.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>d.PyAnnoteModel,PyAnnotePreTrainedModel:()=>d.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>ye.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>d.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>C.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>d.Qwen2ForCausalLM,Qwen2Model:()=>d.Qwen2Model,Qwen2PreTrainedModel:()=>d.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>k.Qwen2Tokenizer,Qwen2VLForConditionalGeneration:()=>d.Qwen2VLForConditionalGeneration,Qwen2VLImageProcessor:()=>re.Qwen2VLImageProcessor,Qwen2VLPreTrainedModel:()=>d.Qwen2VLPreTrainedModel,Qwen2VLProcessor:()=>ye.Qwen2VLProcessor,RTDetrForObjectDetection:()=>d.RTDetrForObjectDetection,RTDetrImageProcessor:()=>re.RTDetrImageProcessor,RTDetrModel:()=>d.RTDetrModel,RTDetrObjectDetectionOutput:()=>d.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>d.RTDetrPreTrainedModel,RawAudio:()=>L.RawAudio,RawImage:()=>N.RawImage,RepetitionPenaltyLogitsProcessor:()=>g.RepetitionPenaltyLogitsProcessor,ResNetForImageClassification:()=>d.ResNetForImageClassification,ResNetModel:()=>d.ResNetModel,ResNetPreTrainedModel:()=>d.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>d.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>d.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>d.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>d.RoFormerForTokenClassification,RoFormerModel:()=>d.RoFormerModel,RoFormerPreTrainedModel:()=>d.RoFormerPreTrainedModel,RoFormerTokenizer:()=>k.RoFormerTokenizer,RobertaForMaskedLM:()=>d.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>d.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>d.RobertaForSequenceClassification,RobertaForTokenClassification:()=>d.RobertaForTokenClassification,RobertaModel:()=>d.RobertaModel,RobertaPreTrainedModel:()=>d.RobertaPreTrainedModel,RobertaTokenizer:()=>k.RobertaTokenizer,SamImageProcessor:()=>re.SamImageProcessor,SamImageSegmentationOutput:()=>d.SamImageSegmentationOutput,SamModel:()=>d.SamModel,SamPreTrainedModel:()=>d.SamPreTrainedModel,SamProcessor:()=>ye.SamProcessor,SapiensForDepthEstimation:()=>d.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>d.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>d.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>d.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>F.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>re.SegformerFeatureExtractor,SegformerForImageClassification:()=>d.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>d.SegformerForSemanticSegmentation,SegformerImageProcessor:()=>re.SegformerImageProcessor,SegformerModel:()=>d.SegformerModel,SegformerPreTrainedModel:()=>d.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>d.Seq2SeqLMOutput,SequenceClassifierOutput:()=>d.SequenceClassifierOutput,SiglipImageProcessor:()=>re.SiglipImageProcessor,SiglipModel:()=>d.SiglipModel,SiglipPreTrainedModel:()=>d.SiglipPreTrainedModel,SiglipTextModel:()=>d.SiglipTextModel,SiglipTokenizer:()=>k.SiglipTokenizer,SiglipVisionModel:()=>d.SiglipVisionModel,SpeechT5FeatureExtractor:()=>F.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>d.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>d.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>d.SpeechT5HifiGan,SpeechT5Model:()=>d.SpeechT5Model,SpeechT5PreTrainedModel:()=>d.SpeechT5PreTrainedModel,SpeechT5Processor:()=>ye.SpeechT5Processor,SpeechT5Tokenizer:()=>k.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>d.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>d.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>d.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>d.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>d.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>k.SqueezeBertTokenizer,StableLmForCausalLM:()=>d.StableLmForCausalLM,StableLmModel:()=>d.StableLmModel,StableLmPreTrainedModel:()=>d.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>d.Starcoder2ForCausalLM,Starcoder2Model:()=>d.Starcoder2Model,Starcoder2PreTrainedModel:()=>d.Starcoder2PreTrainedModel,StoppingCriteria:()=>we.StoppingCriteria,StoppingCriteriaList:()=>we.StoppingCriteriaList,StyleTextToSpeech2Model:()=>d.StyleTextToSpeech2Model,StyleTextToSpeech2PreTrainedModel:()=>d.StyleTextToSpeech2PreTrainedModel,SummarizationPipeline:()=>C.SummarizationPipeline,SuppressTokensAtBeginLogitsProcessor:()=>g.SuppressTokensAtBeginLogitsProcessor,Swin2SRForImageSuperResolution:()=>d.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>re.Swin2SRImageProcessor,Swin2SRModel:()=>d.Swin2SRModel,Swin2SRPreTrainedModel:()=>d.Swin2SRPreTrainedModel,SwinForImageClassification:()=>d.SwinForImageClassification,SwinModel:()=>d.SwinModel,SwinPreTrainedModel:()=>d.SwinPreTrainedModel,T5ForConditionalGeneration:()=>d.T5ForConditionalGeneration,T5Model:()=>d.T5Model,T5PreTrainedModel:()=>d.T5PreTrainedModel,T5Tokenizer:()=>k.T5Tokenizer,TableTransformerForObjectDetection:()=>d.TableTransformerForObjectDetection,TableTransformerModel:()=>d.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>d.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>d.TableTransformerPreTrainedModel,TemperatureLogitsWarper:()=>g.TemperatureLogitsWarper,Tensor:()=>j.Tensor,Text2TextGenerationPipeline:()=>C.Text2TextGenerationPipeline,TextClassificationPipeline:()=>C.TextClassificationPipeline,TextGenerationPipeline:()=>C.TextGenerationPipeline,TextStreamer:()=>ne.TextStreamer,TextToAudioPipeline:()=>C.TextToAudioPipeline,TokenClassificationPipeline:()=>C.TokenClassificationPipeline,TokenClassifierOutput:()=>d.TokenClassifierOutput,TokenizerModel:()=>k.TokenizerModel,TopKLogitsWarper:()=>g.TopKLogitsWarper,TopPLogitsWarper:()=>g.TopPLogitsWarper,TrOCRForCausalLM:()=>d.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>d.TrOCRPreTrainedModel,TranslationPipeline:()=>C.TranslationPipeline,UniSpeechForCTC:()=>d.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>d.UniSpeechForSequenceClassification,UniSpeechModel:()=>d.UniSpeechModel,UniSpeechPreTrainedModel:()=>d.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>d.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>d.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>d.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>d.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>d.UniSpeechSatPreTrainedModel,VLChatProcessor:()=>ye.VLChatProcessor,VLMImageProcessor:()=>re.VLMImageProcessor,ViTFeatureExtractor:()=>re.ViTFeatureExtractor,ViTForImageClassification:()=>d.ViTForImageClassification,ViTImageProcessor:()=>re.ViTImageProcessor,ViTMAEModel:()=>d.ViTMAEModel,ViTMAEPreTrainedModel:()=>d.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>d.ViTMSNForImageClassification,ViTMSNModel:()=>d.ViTMSNModel,ViTMSNPreTrainedModel:()=>d.ViTMSNPreTrainedModel,ViTModel:()=>d.ViTModel,ViTPreTrainedModel:()=>d.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>d.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>d.VitMatteForImageMatting,VitMatteImageProcessor:()=>re.VitMatteImageProcessor,VitMattePreTrainedModel:()=>d.VitMattePreTrainedModel,VitPoseForPoseEstimation:()=>d.VitPoseForPoseEstimation,VitPoseImageProcessor:()=>re.VitPoseImageProcessor,VitPosePreTrainedModel:()=>d.VitPosePreTrainedModel,VitsModel:()=>d.VitsModel,VitsModelOutput:()=>d.VitsModelOutput,VitsPreTrainedModel:()=>d.VitsPreTrainedModel,VitsTokenizer:()=>k.VitsTokenizer,Wav2Vec2BertForCTC:()=>d.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>d.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>d.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>d.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>k.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>F.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>d.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>d.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>d.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>d.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>d.Wav2Vec2PreTrainedModel,Wav2Vec2Processor:()=>ye.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>ye.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>d.WavLMForAudioFrameClassification,WavLMForCTC:()=>d.WavLMForCTC,WavLMForSequenceClassification:()=>d.WavLMForSequenceClassification,WavLMForXVector:()=>d.WavLMForXVector,WavLMModel:()=>d.WavLMModel,WavLMPreTrainedModel:()=>d.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>F.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>d.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>d.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>F.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>d.WhisperForConditionalGeneration,WhisperModel:()=>d.WhisperModel,WhisperPreTrainedModel:()=>d.WhisperPreTrainedModel,WhisperProcessor:()=>ye.WhisperProcessor,WhisperTextStreamer:()=>ne.WhisperTextStreamer,WhisperTimeStampLogitsProcessor:()=>g.WhisperTimeStampLogitsProcessor,WhisperTokenizer:()=>k.WhisperTokenizer,XLMForQuestionAnswering:()=>d.XLMForQuestionAnswering,XLMForSequenceClassification:()=>d.XLMForSequenceClassification,XLMForTokenClassification:()=>d.XLMForTokenClassification,XLMModel:()=>d.XLMModel,XLMPreTrainedModel:()=>d.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>d.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>d.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>d.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>d.XLMRobertaForTokenClassification,XLMRobertaModel:()=>d.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>d.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>k.XLMRobertaTokenizer,XLMTokenizer:()=>k.XLMTokenizer,XLMWithLMHeadModel:()=>d.XLMWithLMHeadModel,XVectorOutput:()=>d.XVectorOutput,YolosFeatureExtractor:()=>re.YolosFeatureExtractor,YolosForObjectDetection:()=>d.YolosForObjectDetection,YolosImageProcessor:()=>re.YolosImageProcessor,YolosModel:()=>d.YolosModel,YolosObjectDetectionOutput:()=>d.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>d.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>C.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>C.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>C.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>C.ZeroShotObjectDetectionPipeline,bankers_round:()=>q.bankers_round,cat:()=>j.cat,cos_sim:()=>q.cos_sim,dot:()=>q.dot,dynamic_time_warping:()=>q.dynamic_time_warping,env:()=>I.env,full:()=>j.full,full_like:()=>j.full_like,getKeyValueShapes:()=>T.getKeyValueShapes,hamming:()=>L.hamming,hanning:()=>L.hanning,interpolate:()=>j.interpolate,interpolate_4d:()=>j.interpolate_4d,interpolate_data:()=>q.interpolate_data,is_chinese_char:()=>k.is_chinese_char,layer_norm:()=>j.layer_norm,load_image:()=>N.load_image,log_softmax:()=>q.log_softmax,magnitude:()=>q.magnitude,matmul:()=>j.matmul,max:()=>q.max,mean:()=>j.mean,mean_pooling:()=>j.mean_pooling,medianFilter:()=>q.medianFilter,mel_filter_bank:()=>L.mel_filter_bank,min:()=>q.min,ones:()=>j.ones,ones_like:()=>j.ones_like,permute:()=>j.permute,permute_data:()=>q.permute_data,pipeline:()=>C.pipeline,quantize_embeddings:()=>j.quantize_embeddings,rand:()=>j.rand,read_audio:()=>L.read_audio,rfft:()=>j.rfft,round:()=>q.round,slice:()=>j.slice,softmax:()=>q.softmax,spectrogram:()=>L.spectrogram,stack:()=>j.stack,std_mean:()=>j.std_mean,topk:()=>j.topk,window_function:()=>L.window_function,zeros:()=>j.zeros,zeros_like:()=>j.zeros_like});var I=ur("./src/env.js"),C=ur("./src/pipelines.js"),d=ur("./src/models.js"),k=ur("./src/tokenizers.js"),T=ur("./src/configs.js"),L=ur("./src/utils/audio.js"),N=ur("./src/utils/image.js"),j=ur("./src/utils/tensor.js"),q=ur("./src/utils/maths.js"),W=ur("./src/base/feature_extraction_utils.js"),F=ur("./src/models/feature_extractors.js"),X=ur("./src/models/auto/feature_extraction_auto.js"),R=ur("./src/base/image_processors_utils.js"),re=ur("./src/models/image_processors.js"),be=ur("./src/models/auto/image_processing_auto.js"),xe=ur("./src/base/processing_utils.js"),ye=ur("./src/models/processors.js"),se=ur("./src/models/auto/processing_auto.js"),ne=ur("./src/generation/streamers.js"),we=ur("./src/generation/stopping_criteria.js"),g=ur("./src/generation/logits_process.js")})();var kh=c2.AutoTokenizer,xh=c2.RawAudio,vh=c2.StyleTextToSpeech2Model,_u=c2.Tensor,pe=pe!==void 0?pe:{};pe.expectedDataFileDownloads||(pe.expectedDataFileDownloads=0);var Bh=typeof importScripts=="function",ag=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",$u=typeof atob=="function"?atob:function(I){var C,d,k,T,L,N,j="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",q="",W=0;I=I.replace(/[^A-Za-z0-9\+\/\=]/g,"");do C=j.indexOf(I.charAt(W++))<<2|(T=j.indexOf(I.charAt(W++)))>>4,d=(15&T)<<4|(L=j.indexOf(I.charAt(W++)))>>2,k=(3&L)<<6|(N=j.indexOf(I.charAt(W++))),q+=String.fromCharCode(C),L!==64&&(q+=String.fromCharCode(d)),N!==64&&(q+=String.fromCharCode(k));while(W<I.length);return q};ag&&(process.argv.length>1&&(fg=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",function(I){if(!(I instanceof yh))throw I}),process.on("unhandledRejection",function(I){throw I}),pe.inspect=function(){return"[Emscripten Module object]"}),pe.expectedDataFileDownloads++,function(){if(pe.ENVIRONMENT_IS_PTHREAD)return;const I="/usr/share/espeak-ng-data",C=I+"/lang",d=I+"/voices";(function(k){var T=null,L=null;function N(){function j(R,re){if(!R)throw re+new Error().stack}function q(R,re,be){this.start=R,this.end=re,this.audio=be}pe.FS_createPath("/","usr",!0,!0),pe.FS_createPath("/usr","share",!0,!0),pe.FS_createPath("/usr/share","espeak-ng-data",!0,!0),pe.FS_createPath(I,"lang",!0,!0),pe.FS_createPath(C,"aav",!0,!0),pe.FS_createPath(C,"art",!0,!0),pe.FS_createPath(C,"azc",!0,!0),pe.FS_createPath(C,"bat",!0,!0),pe.FS_createPath(C,"bnt",!0,!0),pe.FS_createPath(C,"ccs",!0,!0),pe.FS_createPath(C,"cel",!0,!0),pe.FS_createPath(C,"cus",!0,!0),pe.FS_createPath(C,"dra",!0,!0),pe.FS_createPath(C,"esx",!0,!0),pe.FS_createPath(C,"gmq",!0,!0),pe.FS_createPath(C,"gmw",!0,!0),pe.FS_createPath(C,"grk",!0,!0),pe.FS_createPath(C,"inc",!0,!0),pe.FS_createPath(C,"ine",!0,!0),pe.FS_createPath(C,"ira",!0,!0),pe.FS_createPath(C,"iro",!0,!0),pe.FS_createPath(C,"itc",!0,!0),pe.FS_createPath(C,"jpx",!0,!0),pe.FS_createPath(C,"map",!0,!0),pe.FS_createPath(C,"miz",!0,!0),pe.FS_createPath(C,"myn",!0,!0),pe.FS_createPath(C,"poz",!0,!0),pe.FS_createPath(C,"roa",!0,!0),pe.FS_createPath(C,"sai",!0,!0),pe.FS_createPath(C,"sem",!0,!0),pe.FS_createPath(C,"sit",!0,!0),pe.FS_createPath(C,"tai",!0,!0),pe.FS_createPath(C,"trk",!0,!0),pe.FS_createPath(C,"urj",!0,!0),pe.FS_createPath(C,"zle",!0,!0),pe.FS_createPath(C,"zls",!0,!0),pe.FS_createPath(C,"zlw",!0,!0),pe.FS_createPath(I,"voices",!0,!0),pe.FS_createPath(d,"!v",!0,!0),pe.FS_createPath(d,"mb",!0,!0),q.prototype={requests:{},open:function(R,re){this.name=re,this.requests[re]=this,pe.addRunDependency("fp "+this.name)},send:function(){},onload:function(){var R=this.byteArray.subarray(this.start,this.end);this.finish(R)},finish:function(R){pe.FS_createDataFile(this.name,null,R,!0,!0,!0),pe.removeRunDependency("fp "+this.name),this.requests[this.name]=null}};for(var W=k.files,F=0;F<W.length;++F)new q(W[F].start,W[F].end,W[F].audio||0).open("GET",W[F].filename);function X(R){j(R,"Loading data file failed."),j(R.constructor.name===ArrayBuffer.name,"bad input to processPackageData");var re=new Uint8Array(R);q.prototype.byteArray=re;for(var be=k.files,xe=0;xe<be.length;++xe)q.prototype.requests[be[xe].filename].onload();pe.removeRunDependency("datafile_js/espeakng.worker.data")}pe.addRunDependency("datafile_js/espeakng.worker.data"),L?(X(L),L=null):T=X}(async()=>{const j=function(X){if(typeof ag=="boolean"&&ag){var R=Buffer.from(X,"base64");return new Uint8Array(R.buffer,R.byteOffset,R.byteLength)}try{for(var re=$u(X),be=new Uint8Array(re.length),xe=0;xe<re.length;++xe)be[xe]=re.charCodeAt(xe);return be}catch(ye){throw console.error($u),console.error(ye),new Error("Converting base64 string to bytes failed.")}}(""),q=new Blob([j]).stream().pipeThrough(new DecompressionStream("gzip")),W=[];for await(const X of q)W.push(X);const F=await new Blob(W).arrayBuffer();T?(T(F),T=null):L=F})(),pe.calledRun?N():(pe.preRun||(pe.preRun=[]),pe.preRun.push(N))})({files:[{filename:I+"/en_dict",start:0,end:167064},{filename:I+"/intonations",start:167064,end:169104},{filename:C+"/aav/vi",start:169104,end:169215},{filename:C+"/aav/vi-VN-x-central",start:169215,end:169358},{filename:C+"/aav/vi-VN-x-south",start:169358,end:169500},{filename:C+"/art/eo",start:169500,end:169541},{filename:C+"/art/ia",start:169541,end:169570},{filename:C+"/art/io",start:169570,end:169620},{filename:C+"/art/jbo",start:169620,end:169689},{filename:C+"/art/lfn",start:169689,end:169824},{filename:C+"/art/piqd",start:169824,end:169880},{filename:C+"/art/py",start:169880,end:170020},{filename:C+"/art/qdb",start:170020,end:170077},{filename:C+"/art/qya",start:170077,end:170250},{filename:C+"/art/sjn",start:170250,end:170425},{filename:C+"/azc/nci",start:170425,end:170539},{filename:C+"/bat/lt",start:170539,end:170567},{filename:C+"/bat/ltg",start:170567,end:170879},{filename:C+"/bat/lv",start:170879,end:171108},{filename:C+"/bnt/sw",start:171108,end:171149},{filename:C+"/bnt/tn",start:171149,end:171191},{filename:C+"/ccs/ka",start:171191,end:171315},{filename:C+"/cel/cy",start:171315,end:171352},{filename:C+"/cel/ga",start:171352,end:171418},{filename:C+"/cel/gd",start:171418,end:171469},{filename:C+"/cus/om",start:171469,end:171508},{filename:C+"/dra/kn",start:171508,end:171563},{filename:C+"/dra/ml",start:171563,end:171620},{filename:C+"/dra/ta",start:171620,end:171671},{filename:C+"/dra/te",start:171671,end:171741},{filename:C+"/esx/kl",start:171741,end:171771},{filename:C+"/eu",start:171771,end:171825},{filename:C+"/gmq/da",start:171825,end:171868},{filename:C+"/gmq/is",start:171868,end:171895},{filename:C+"/gmq/nb",start:171895,end:171982},{filename:C+"/gmq/sv",start:171982,end:172007},{filename:C+"/gmw/af",start:172007,end:172130},{filename:C+"/gmw/de",start:172130,end:172172},{filename:C+"/gmw/en",start:172172,end:172312},{filename:C+"/gmw/en-029",start:172312,end:172647},{filename:C+"/gmw/en-GB-scotland",start:172647,end:172942},{filename:C+"/gmw/en-GB-x-gbclan",start:172942,end:173180},{filename:C+"/gmw/en-GB-x-gbcwmd",start:173180,end:173368},{filename:C+"/gmw/en-GB-x-rp",start:173368,end:173617},{filename:C+"/gmw/en-US",start:173617,end:173874},{filename:C+"/gmw/en-US-nyc",start:173874,end:174145},{filename:C+"/gmw/lb",start:174145,end:174176},{filename:C+"/gmw/nl",start:174176,end:174199},{filename:C+"/grk/el",start:174199,end:174222},{filename:C+"/grk/grc",start:174222,end:174321},{filename:C+"/inc/as",start:174321,end:174363},{filename:C+"/inc/bn",start:174363,end:174388},{filename:C+"/inc/bpy",start:174388,end:174427},{filename:C+"/inc/gu",start:174427,end:174469},{filename:C+"/inc/hi",start:174469,end:174492},{filename:C+"/inc/kok",start:174492,end:174518},{filename:C+"/inc/mr",start:174518,end:174559},{filename:C+"/inc/ne",start:174559,end:174596},{filename:C+"/inc/or",start:174596,end:174635},{filename:C+"/inc/pa",start:174635,end:174660},{filename:C+"/inc/sd",start:174660,end:174726},{filename:C+"/inc/si",start:174726,end:174781},{filename:C+"/inc/ur",start:174781,end:174875},{filename:C+"/ine/hy",start:174875,end:174936},{filename:C+"/ine/hyw",start:174936,end:175301},{filename:C+"/ine/sq",start:175301,end:175404},{filename:C+"/ira/fa",start:175404,end:175494},{filename:C+"/ira/fa-Latn",start:175494,end:175763},{filename:C+"/ira/ku",start:175763,end:175803},{filename:C+"/iro/chr",start:175803,end:176372},{filename:C+"/itc/la",start:176372,end:176669},{filename:C+"/jpx/ja",start:176669,end:176721},{filename:C+"/ko",start:176721,end:176772},{filename:C+"/map/haw",start:176772,end:176814},{filename:C+"/miz/mto",start:176814,end:176997},{filename:C+"/myn/quc",start:176997,end:177207},{filename:C+"/poz/id",start:177207,end:177341},{filename:C+"/poz/mi",start:177341,end:177708},{filename:C+"/poz/ms",start:177708,end:178138},{filename:C+"/qu",start:178138,end:178226},{filename:C+"/roa/an",start:178226,end:178253},{filename:C+"/roa/ca",start:178253,end:178278},{filename:C+"/roa/es",start:178278,end:178341},{filename:C+"/roa/es-419",start:178341,end:178508},{filename:C+"/roa/fr",start:178508,end:178587},{filename:C+"/roa/fr-BE",start:178587,end:178671},{filename:C+"/roa/fr-CH",start:178671,end:178757},{filename:C+"/roa/ht",start:178757,end:178897},{filename:C+"/roa/it",start:178897,end:179006},{filename:C+"/roa/pap",start:179006,end:179068},{filename:C+"/roa/pt",start:179068,end:179163},{filename:C+"/roa/pt-BR",start:179163,end:179272},{filename:C+"/roa/ro",start:179272,end:179298},{filename:C+"/sai/gn",start:179298,end:179345},{filename:C+"/sem/am",start:179345,end:179386},{filename:C+"/sem/ar",start:179386,end:179436},{filename:C+"/sem/he",start:179436,end:179476},{filename:C+"/sem/mt",start:179476,end:179517},{filename:C+"/sem/ti",start:179517,end:179610},{filename:C+"/sit/cmn",start:179610,end:180296},{filename:C+"/sit/cmn-Latn-pinyin",start:180296,end:180457},{filename:C+"/sit/hak",start:180457,end:180585},{filename:C+"/sit/my",start:180585,end:180641},{filename:C+"/sit/yue",start:180641,end:180835},{filename:C+"/sit/yue-Latn-jyutping",start:180835,end:181048},{filename:C+"/tai/shn",start:181048,end:181140},{filename:C+"/tai/th",start:181140,end:181177},{filename:C+"/trk/az",start:181177,end:181222},{filename:C+"/trk/ba",start:181222,end:181247},{filename:C+"/trk/cv",start:181247,end:181287},{filename:C+"/trk/kk",start:181287,end:181327},{filename:C+"/trk/ky",start:181327,end:181370},{filename:C+"/trk/nog",start:181370,end:181409},{filename:C+"/trk/tk",start:181409,end:181434},{filename:C+"/trk/tr",start:181434,end:181459},{filename:C+"/trk/tt",start:181459,end:181482},{filename:C+"/trk/ug",start:181482,end:181506},{filename:C+"/trk/uz",start:181506,end:181545},{filename:C+"/urj/et",start:181545,end:181782},{filename:C+"/urj/fi",start:181782,end:182019},{filename:C+"/urj/hu",start:182019,end:182092},{filename:C+"/urj/smj",start:182092,end:182137},{filename:C+"/zle/be",start:182137,end:182189},{filename:C+"/zle/ru",start:182189,end:182246},{filename:C+"/zle/ru-LV",start:182246,end:182526},{filename:C+"/zle/ru-cl",start:182526,end:182617},{filename:C+"/zle/uk",start:182617,end:182714},{filename:C+"/zls/bg",start:182714,end:182825},{filename:C+"/zls/bs",start:182825,end:183055},{filename:C+"/zls/hr",start:183055,end:183317},{filename:C+"/zls/mk",start:183317,end:183345},{filename:C+"/zls/sl",start:183345,end:183388},{filename:C+"/zls/sr",start:183388,end:183638},{filename:C+"/zlw/cs",start:183638,end:183661},{filename:C+"/zlw/pl",start:183661,end:183699},{filename:C+"/zlw/sk",start:183699,end:183723},{filename:I+"/phondata",start:183723,end:734147},{filename:I+"/phonindex",start:734147,end:773403},{filename:I+"/phontab",start:773403,end:829491},{filename:d+"/!v/Alex",start:829491,end:829619},{filename:d+"/!v/Alicia",start:829619,end:830093},{filename:d+"/!v/Andrea",start:830093,end:830450},{filename:d+"/!v/Andy",start:830450,end:830770},{filename:d+"/!v/Annie",start:830770,end:831085},{filename:d+"/!v/AnxiousAndy",start:831085,end:831446},{filename:d+"/!v/Demonic",start:831446,end:835304},{filename:d+"/!v/Denis",start:835304,end:835609},{filename:d+"/!v/Diogo",start:835609,end:835988},{filename:d+"/!v/Gene",start:835988,end:836269},{filename:d+"/!v/Gene2",start:836269,end:836552},{filename:d+"/!v/Henrique",start:836552,end:836933},{filename:d+"/!v/Hugo",start:836933,end:837311},{filename:d+"/!v/Jacky",start:837311,end:837578},{filename:d+"/!v/Lee",start:837578,end:837916},{filename:d+"/!v/Marco",start:837916,end:838383},{filename:d+"/!v/Mario",start:838383,end:838653},{filename:d+"/!v/Michael",start:838653,end:838923},{filename:d+"/!v/Mike",start:838923,end:839035},{filename:d+"/!v/Mr serious",start:839035,end:842228},{filename:d+"/!v/Nguyen",start:842228,end:842508},{filename:d+"/!v/Reed",start:842508,end:842710},{filename:d+"/!v/RicishayMax",start:842710,end:842943},{filename:d+"/!v/RicishayMax2",start:842943,end:843378},{filename:d+"/!v/RicishayMax3",start:843378,end:843813},{filename:d+"/!v/Storm",start:843813,end:844233},{filename:d+"/!v/Tweaky",start:844233,end:847422},{filename:d+"/!v/UniRobot",start:847422,end:847839},{filename:d+"/!v/adam",start:847839,end:847914},{filename:d+"/!v/anika",start:847914,end:848407},{filename:d+"/!v/anikaRobot",start:848407,end:848919},{filename:d+"/!v/announcer",start:848919,end:849219},{filename:d+"/!v/antonio",start:849219,end:849600},{filename:d+"/!v/aunty",start:849600,end:849958},{filename:d+"/!v/belinda",start:849958,end:850298},{filename:d+"/!v/benjamin",start:850298,end:850499},{filename:d+"/!v/boris",start:850499,end:850723},{filename:d+"/!v/caleb",start:850723,end:850780},{filename:d+"/!v/croak",start:850780,end:850873},{filename:d+"/!v/david",start:850873,end:850985},{filename:d+"/!v/ed",start:850985,end:851272},{filename:d+"/!v/edward",start:851272,end:851423},{filename:d+"/!v/edward2",start:851423,end:851575},{filename:d+"/!v/f1",start:851575,end:851899},{filename:d+"/!v/f2",start:851899,end:852256},{filename:d+"/!v/f3",start:852256,end:852631},{filename:d+"/!v/f4",start:852631,end:852981},{filename:d+"/!v/f5",start:852981,end:853413},{filename:d+"/!v/fast",start:853413,end:853562},{filename:d+"/!v/grandma",start:853562,end:853825},{filename:d+"/!v/grandpa",start:853825,end:854081},{filename:d+"/!v/gustave",start:854081,end:854334},{filename:d+"/!v/ian",start:854334,end:857502},{filename:d+"/!v/iven",start:857502,end:857763},{filename:d+"/!v/iven2",start:857763,end:858042},{filename:d+"/!v/iven3",start:858042,end:858304},{filename:d+"/!v/iven4",start:858304,end:858565},{filename:d+"/!v/john",start:858565,end:861751},{filename:d+"/!v/kaukovalta",start:861751,end:862112},{filename:d+"/!v/klatt",start:862112,end:862150},{filename:d+"/!v/klatt2",start:862150,end:862188},{filename:d+"/!v/klatt3",start:862188,end:862227},{filename:d+"/!v/klatt4",start:862227,end:862266},{filename:d+"/!v/klatt5",start:862266,end:862305},{filename:d+"/!v/klatt6",start:862305,end:862344},{filename:d+"/!v/linda",start:862344,end:862694},{filename:d+"/!v/m1",start:862694,end:863029},{filename:d+"/!v/m2",start:863029,end:863293},{filename:d+"/!v/m3",start:863293,end:863593},{filename:d+"/!v/m4",start:863593,end:863883},{filename:d+"/!v/m5",start:863883,end:864145},{filename:d+"/!v/m6",start:864145,end:864333},{filename:d+"/!v/m7",start:864333,end:864587},{filename:d+"/!v/m8",start:864587,end:864871},{filename:d+"/!v/marcelo",start:864871,end:865122},{filename:d+"/!v/max",start:865122,end:865347},{filename:d+"/!v/michel",start:865347,end:865751},{filename:d+"/!v/miguel",start:865751,end:866133},{filename:d+"/!v/mike2",start:866133,end:866321},{filename:d+"/!v/norbert",start:866321,end:869510},{filename:d+"/!v/pablo",start:869510,end:872652},{filename:d+"/!v/paul",start:872652,end:872936},{filename:d+"/!v/pedro",start:872936,end:873288},{filename:d+"/!v/quincy",start:873288,end:873642},{filename:d+"/!v/rob",start:873642,end:873907},{filename:d+"/!v/robert",start:873907,end:874181},{filename:d+"/!v/robosoft",start:874181,end:874632},{filename:d+"/!v/robosoft2",start:874632,end:875086},{filename:d+"/!v/robosoft3",start:875086,end:875541},{filename:d+"/!v/robosoft4",start:875541,end:875988},{filename:d+"/!v/robosoft5",start:875988,end:876433},{filename:d+"/!v/robosoft6",start:876433,end:876720},{filename:d+"/!v/robosoft7",start:876720,end:877130},{filename:d+"/!v/robosoft8",start:877130,end:877373},{filename:d+"/!v/sandro",start:877373,end:877903},{filename:d+"/!v/shelby",start:877903,end:878183},{filename:d+"/!v/steph",start:878183,end:878547},{filename:d+"/!v/steph2",start:878547,end:878914},{filename:d+"/!v/steph3",start:878914,end:879291},{filename:d+"/!v/travis",start:879291,end:879674},{filename:d+"/!v/victor",start:879674,end:879927},{filename:d+"/!v/whisper",start:879927,end:880113},{filename:d+"/!v/whisperf",start:880113,end:880505},{filename:d+"/!v/zac",start:880505,end:880780},{filename:d+"/mb/mb-af1",start:880780,end:880868},{filename:d+"/mb/mb-af1-en",start:880868,end:880951},{filename:d+"/mb/mb-ar1",start:880951,end:881035},{filename:d+"/mb/mb-ar2",start:881035,end:881119},{filename:d+"/mb/mb-br1",start:881119,end:881251},{filename:d+"/mb/mb-br2",start:881251,end:881387},{filename:d+"/mb/mb-br3",start:881387,end:881519},{filename:d+"/mb/mb-br4",start:881519,end:881655},{filename:d+"/mb/mb-ca1",start:881655,end:881760},{filename:d+"/mb/mb-ca2",start:881760,end:881865},{filename:d+"/mb/mb-cn1",start:881865,end:881957},{filename:d+"/mb/mb-cr1",start:881957,end:882068},{filename:d+"/mb/mb-cz1",start:882068,end:882138},{filename:d+"/mb/mb-cz2",start:882138,end:882220},{filename:d+"/mb/mb-de1",start:882220,end:882364},{filename:d+"/mb/mb-de1-en",start:882364,end:882460},{filename:d+"/mb/mb-de2",start:882460,end:882588},{filename:d+"/mb/mb-de2-en",start:882588,end:882668},{filename:d+"/mb/mb-de3",start:882668,end:882767},{filename:d+"/mb/mb-de3-en",start:882767,end:882863},{filename:d+"/mb/mb-de4",start:882863,end:882992},{filename:d+"/mb/mb-de4-en",start:882992,end:883073},{filename:d+"/mb/mb-de5",start:883073,end:883309},{filename:d+"/mb/mb-de5-en",start:883309,end:883399},{filename:d+"/mb/mb-de6",start:883399,end:883521},{filename:d+"/mb/mb-de6-en",start:883521,end:883595},{filename:d+"/mb/mb-de6-grc",start:883595,end:883678},{filename:d+"/mb/mb-de7",start:883678,end:883828},{filename:d+"/mb/mb-de8",start:883828,end:883899},{filename:d+"/mb/mb-ee1",start:883899,end:883996},{filename:d+"/mb/mb-en1",start:883996,end:884127},{filename:d+"/mb/mb-es1",start:884127,end:884241},{filename:d+"/mb/mb-es2",start:884241,end:884349},{filename:d+"/mb/mb-es3",start:884349,end:884453},{filename:d+"/mb/mb-es4",start:884453,end:884541},{filename:d+"/mb/mb-fr1",start:884541,end:884707},{filename:d+"/mb/mb-fr1-en",start:884707,end:884811},{filename:d+"/mb/mb-fr2",start:884811,end:884914},{filename:d+"/mb/mb-fr3",start:884914,end:885014},{filename:d+"/mb/mb-fr4",start:885014,end:885141},{filename:d+"/mb/mb-fr4-en",start:885141,end:885248},{filename:d+"/mb/mb-fr5",start:885248,end:885348},{filename:d+"/mb/mb-fr6",start:885348,end:885448},{filename:d+"/mb/mb-fr7",start:885448,end:885531},{filename:d+"/mb/mb-gr1",start:885531,end:885625},{filename:d+"/mb/mb-gr2",start:885625,end:885719},{filename:d+"/mb/mb-gr2-en",start:885719,end:885807},{filename:d+"/mb/mb-hb1",start:885807,end:885875},{filename:d+"/mb/mb-hb2",start:885875,end:885958},{filename:d+"/mb/mb-hu1",start:885958,end:886060},{filename:d+"/mb/mb-hu1-en",start:886060,end:886157},{filename:d+"/mb/mb-ic1",start:886157,end:886245},{filename:d+"/mb/mb-id1",start:886245,end:886346},{filename:d+"/mb/mb-in1",start:886346,end:886415},{filename:d+"/mb/mb-in2",start:886415,end:886500},{filename:d+"/mb/mb-ir1",start:886500,end:887253},{filename:d+"/mb/mb-it1",start:887253,end:887337},{filename:d+"/mb/mb-it2",start:887337,end:887424},{filename:d+"/mb/mb-it3",start:887424,end:887566},{filename:d+"/mb/mb-it4",start:887566,end:887711},{filename:d+"/mb/mb-jp1",start:887711,end:887782},{filename:d+"/mb/mb-jp2",start:887782,end:887883},{filename:d+"/mb/mb-jp3",start:887883,end:887970},{filename:d+"/mb/mb-la1",start:887970,end:888053},{filename:d+"/mb/mb-lt1",start:888053,end:888140},{filename:d+"/mb/mb-lt2",start:888140,end:888227},{filename:d+"/mb/mb-ma1",start:888227,end:888325},{filename:d+"/mb/mb-mx1",start:888325,end:888445},{filename:d+"/mb/mb-mx2",start:888445,end:888565},{filename:d+"/mb/mb-nl1",start:888565,end:888634},{filename:d+"/mb/mb-nl2",start:888634,end:888730},{filename:d+"/mb/mb-nl2-en",start:888730,end:888821},{filename:d+"/mb/mb-nl3",start:888821,end:888906},{filename:d+"/mb/mb-nz1",start:888906,end:888974},{filename:d+"/mb/mb-pl1",start:888974,end:889073},{filename:d+"/mb/mb-pl1-en",start:889073,end:889155},{filename:d+"/mb/mb-pt1",start:889155,end:889286},{filename:d+"/mb/mb-ro1",start:889286,end:889373},{filename:d+"/mb/mb-ro1-en",start:889373,end:889454},{filename:d+"/mb/mb-sw1",start:889454,end:889552},{filename:d+"/mb/mb-sw1-en",start:889552,end:889645},{filename:d+"/mb/mb-sw2",start:889645,end:889747},{filename:d+"/mb/mb-sw2-en",start:889747,end:889846},{filename:d+"/mb/mb-tl1",start:889846,end:889931},{filename:d+"/mb/mb-tr1",start:889931,end:890016},{filename:d+"/mb/mb-tr2",start:890016,end:890130},{filename:d+"/mb/mb-us1",start:890130,end:890300},{filename:d+"/mb/mb-us2",start:890300,end:890478},{filename:d+"/mb/mb-us3",start:890478,end:890658},{filename:d+"/mb/mb-vz1",start:890658,end:890802}]})}();var ed=Object.assign({},pe),fg="./this.program",lc=pe.print||console.log.bind(console),g2=pe.printErr||console.warn.bind(console);Object.assign(pe,ed),ed=null,pe.arguments&&pe.arguments,pe.thisProgram&&(fg=pe.thisProgram),pe.quit&&pe.quit,pe.wasmBinary&&pe.wasmBinary,pe.noExitRuntime;var ug,u2={Memory:function(I){this.buffer=new ArrayBuffer(65536*I.initial)},Module:function(I){},Instance:function(I,C){this.exports=function(d){for(var k,T=new Uint8Array(123),L=25;L>=0;--L)T[48+L]=52+L,T[65+L]=L,T[97+L]=26+L;function N(se,ne,we){for(var g,b,e=0,l=ne,M=we.length,ue=ne+(3*M>>2)-(we[M-2]=="=")-(we[M-1]=="=");e<M;e+=4)g=T[we.charCodeAt(e+1)],b=T[we.charCodeAt(e+2)],se[l++]=T[we.charCodeAt(e)]<<2|g>>4,l<ue&&(se[l++]=g<<4|b>>2),l<ue&&(se[l++]=b<<6|T[we.charCodeAt(e+3)])}T[43]=62,T[47]=63;var j=new ArrayBuffer(16),q=new Int32Array(j),W=new Float32Array(j),F=new Float64Array(j);function X(se){return q[se]}function R(se,ne){q[se]=ne}function re(){return F[0]}function be(se){F[0]=se}function xe(){throw new Error("abort")}function ye(se){W[2]=se}return function(se){var ne=se.a,we=ne.a.buffer,g=new Int8Array(we),b=new Int16Array(we),e=new Int32Array(we),l=new Uint8Array(we),M=new Uint16Array(we),ue=new Uint32Array(we),D=new Float64Array(we),z=Math.imul,Re=Math.fround,Ne=Math.abs,Ye=Math.clz32,Je=Math.min,AA=Math.floor,xA=Math.ceil,GA=ne.b,Ge=ne.c,Ie=ne.d,ze=ne.e,Ue=ne.f,Pe=ne.g,kA=ne.h,aA=ne.i,iA=ne.j,yA=ne.k,nA=ne.l,Se=ne.m,Ze=ne.n,mA=ne.o,CA=ne.p,Te=ne.q,pA=ne.r,EA=ne.s,FA=ne.t,YA=ne.u,J=294656,OA=0,ge=0,$=0;function me(A){var t,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0,et=0,at=0,dt=0,St=0,Zt=0,er=0,pr=0,hr=0,yr=0,Er=0,Sr=0,Wr=0,na=0,qr=0,oa=0,Ba=0,As=0,os=0,ls=0,Ps=0,Qi=0,fi=0,pi=0,Ti=0,Zn=0,P0=0,z0=0,$i=0;if(J=t=J-16|0,(0|A)!=2)if(A=e[33283],e[A>>2]!=e[A+4>>2]){if(ma(e[e[32972]+60>>2]),Z=e[47192],oa=t+12|0,Ps=t+8|0,J=f=J-6832|0,e[f+6816>>2]=0,e[f+6808>>2]=32,e[f+6800>>2]=0,Z){e[47351]=0,e[47350]=0,e[47352]=0,g[189076]=0,A=e[33284],e[47353]=(0|A)>0?A:0,e[47355]=e[47354]+1,jA(MA=f+5184|0,0,1600),Wr=f+6800|0,J=o=J-2608|0,e[o+2156>>2]=32,e[o+2148>>2]=0,l[134760]&&(g[190280]=0,g[134760]=0),e[Z+8216>>2]=0,e[Z+8220>>2]=0,e[Z+288>>2]=0,e[f+780>>2]=0,g[189360]=0;e:if(A=e[33691])e[o+2152>>2]=A;else{A:{r:{if(!(r=e[33285])){if(A=e[33283],e[A>>2]==e[A+4>>2]){e[o+2152>>2]=0;break e}if(!(r=e[33285]))break r}e[33285]=0;break A}e[33284]=e[33284]+1,A=e[33283],r=0|ct[e[A+8>>2]](A)}e[o+2152>>2]=r}Ti=MA+2|0,Ke=32;e:{for(;;){Ve=Ke;A:{r:{s:{if(r=e[33691],(s=e[33285])?A=0:(s=e[33285],A=e[33283],A=e[A>>2]==e[A+4>>2]),r|!A|s||!(e[32524]<0)){if(!Ui(e[o+2156>>2])){if((s=(0|(A=e[49828]))>0)&(0|(r=A))<(0|(A=e[33284])))break s;if(!((0|(r=e[49845]))<=0|(0|A)<(0|r))){e[49845]=0,g[134760]=1,e[33285]=e[o+2152>>2],a=16384;break e}}Ke=e[o+2156>>2],e[o+2156>>2]=e[o+2152>>2];i:{c:{o:{u:{l:{if((0|(r=e[32524]))>=0){if(l[r+134736|0])break l;e[32524]=-1}if(r=e[33285])break o;if(A=e[33283],e[A>>2]!=e[A+4>>2])break u;r=32;break i}e[33691]|r||(e[o+2156>>2]=g[134736],r=1),e[32524]=r+1,r=g[r+134736|0];break i}if(!(r=e[33285]))break c}e[33285]=0;break i}e[33284]=e[33284]+1,A=e[33283],r=0|ct[e[A+8>>2]](A)}e[o+2152>>2]=r,e[33691]=0;i:if(!(m|!e[47203])){c:{if((0|(A=e[o+2156>>2]))!=60){if((0|r)!=35&r-97>>>0>25|(0|A)!=38)break i;for(s=e[33285],i=0;;){o:{if(e[o+2156>>2]=r,!s){if(A=e[33283],e[A>>2]==e[A+4>>2])break o;r=e[o+2156>>2]}if(!(!((r=!!(0|Ui(r)))|(0|(A=e[o+2156>>2]))==35)|i>>>0>19)){g[(o+112|0)+i|0]=A,i=i+1|0,(r=e[33285])?(e[33285]=0,s=0):(e[33284]=e[33284]+1,A=e[33283],r=0|ct[e[A+8>>2]](A),s=e[33285]);continue}}break}g[(o+112|0)+i|0]=0;o:{u:{if(!(r=e[33285])){if(r=0,A=e[33283],e[A>>2]==e[A+4>>2])break o;if(!(r=e[33285]))break u}e[33285]=0;break o}e[33284]=e[33284]+1,A=e[33283],r=0|ct[e[A+8>>2]](A)}e[o+2152>>2]=r,e[o+100>>2]=e[o+2156>>2],e[o+104>>2]=r,e[o+96>>2]=o+112,DA(134736,84252,o+96|0);o:{if(e[o+2156>>2]==59){i=o+2156|0,Y=o+2152|0,J=s=J-32|0;u:if(l[0|(r=o+112|0)]!=35)A=-1,(0|(r=bs(130752,r)))!=-1&&(e[i>>2]=r,e[Y>>2]||(e[Y>>2]=32),A=r);else{if(l[0|(A=r+1|0)]==120){e[s>>2]=i,A=ut(r+2|0,90005,s);break u}e[s+16>>2]=i,A=ut(A,90070,s+16|0)}if(J=s+32|0,(0|A)>0)break o}e[32524]=0,e[o+2156>>2]=38,e[o+2152>>2]=32;break i}if((0|(A=e[o+2156>>2]))>32)break i;if(!(r=e[33692]-20|0)|(0|r)==16)break c;break i}if((0|r)!=47&&!ns(r)&&(0|(A=e[o+2152>>2]))!=63&&(0|A)!=33)break i;if((0|(A=e[o+2148>>2]))>780){e[33691]=e[o+2156>>2],g[0|(A=A+189424|0)]=32,g[A+1|0]=0,e[33285]=e[o+2152>>2],a=16384;break e}for(Y=e[33285],i=0,r=e[o+2152>>2];e[o+2156>>2]=r,s=0,Y||(A=e[33283],s=e[A>>2]==e[A+4>>2],r=e[o+2156>>2]),!((0|r)==62|s|i>>>0>499);)e[(o+144|0)+(i<<2)>>2]=r,i=i+1|0,(r=e[33285])?(Y=0,e[33285]=0):(e[33284]=e[33284]+1,A=e[33283],r=0|ct[e[A+8>>2]](A),Y=e[33285]);e[(s=o+144|0)+(i<<2)>>2]=0,e[o+2152>>2]=32,rA=o+2148|0,Ve=e[32525],r=0,J=Qe=J-560|0;o:if(Gn(s,84333,3)&&Gn(s,84477,4)){for(A=(s+(y0(s)<<2)|0)-4|0,(0|(zA=e[A>>2]))==47&&(e[A>>2]=32);;){if(A=e[s+(r<<2)>>2]){if(Or(A))A=r;else if(g[(Qe+512|0)+r|0]=Ht(A<<24>>24),A=39,(0|(r=r+1|0))!=39)continue}else A=r;break}if(g[(Qe+512|0)+A|0]=0,l[Qe+512|0]!=47){if((0|(Y=bs(130480,Qe+512|0)))!=16&&(r=e[rA>>2],e[rA>>2]=r+1,g[r+189424|0]=32),(0|zA)==47&&(r=0,!(502241>>>Y&1)))break o}else(0|(r=bs(130480,Qe+512|1)))!=16&&(i=e[rA>>2],e[rA>>2]=i+1,g[i+189424|0]=32),Y=r+32|0;i=s+(A<<2)|0,A=e[33708],m=z(A,76)+133076|0,r=262174;u:{l:{n:{p:switch(Y-1|0){case 33:C:if(!((0|A)<=1)){for(;;){if(e[z(r=A-1|0,76)+133152>>2]==2)break C;if(e[33708]=r,s=A>>>0>2,A=r,!s)break}A=1}r=Ma(i,34,A);break o;case 32:C:if(!((0|A)<=1)){for(;;){if(e[z(r=A-1|0,76)+133152>>2]==1)break C;if(e[33708]=r,s=A>>>0>2,A=r,!s)break}A=1}r=Ma(i,33,A)+524328|0;break o;case 9:(0|(r=e[33709]))<=18&&(e[33709]=r+1),e[(A=134912+(m=r<<6)|0)>>2]=10,e[A+4>>2]=-1,e[A+8>>2]=-1,e[A+52>>2]=-1,e[A+56>>2]=-1,e[A+44>>2]=-1,e[A+48>>2]=-1,e[A+36>>2]=-1,e[A+40>>2]=-1,e[A+28>>2]=-1,e[A+32>>2]=-1,e[A+20>>2]=-1,e[A+24>>2]=-1,e[A+12>>2]=-1,e[A+16>>2]=-1,e[A+60>>2]=-1,A=Ut(i,88301),s=Ut(i,88390),yn(A,88479)?yn(A,88528)||(e[28+(134912+(r<<6)|0)>>2]=xa(s,130224)):e[24+(m+134912|0)>>2]=xa(s,130192),Ja(rA,e[33709]);break n;case 2:for((0|(A=e[33709]))<=18&&(e[33709]=A+1),e[(A=134912+(Qi=A<<6)|0)>>2]=3,e[A+4>>2]=-1,e[A+8>>2]=-1,e[A+52>>2]=-1,e[A+56>>2]=-1,e[A+44>>2]=-1,e[A+48>>2]=-1,e[A+36>>2]=-1,e[A+40>>2]=-1,e[A+28>>2]=-1,e[A+32>>2]=-1,e[A+20>>2]=-1,e[A+24>>2]=-1,e[A+12>>2]=-1,e[A+16>>2]=-1,e[A+60>>2]=-1,er=1;;){if(s=Ut(i,e[130448+(pr=er<<2)>>2])){zA=0,A=e[pr+131072>>2];C:if(Y=e[A>>2])for(;;){for(r=0;m=g[r+Y|0],(Ve=e[(r<<2)+s>>2])&&(r=r+1|0,(0|m)==(0|Ve)););switch(Ve-34|0){case 0:case 5:if(!m)break C}if(!(Y=e[A+((zA=zA+1|0)<<3)>>2]))break}Zn=pr+(Qi+134912|0)|0;C:if((0|(A=e[4+(A+(zA<<3)|0)>>2]))>=0)A=(0|z(A,e[4+(pr+134912|0)>>2]))/100|0;else{for(;s=(A=s)+4|0,Or(e[A>>2]););for(fi=e[A>>2]==43,s=((pi=e[(A=A+(fi<<2)|0)>>2]==45)<<2)+A|0,zA=Qe+96|0,J=Y=(J=m=J-16|0)-224|0,jA(Y+16|0,0,144),A=Y+160|4,e[Y+24>>2]=A,e[Y+60>>2]=A,e[Y+92>>2]=-1,e[Y+64>>2]=60,e[Y+20>>2]=A,e[Y+48>>2]=19,r=s;r=(A=r)+4|0,Ve=(Ve=e[A>>2])?Lr(124960,Ve):0;);e[Y+100>>2]=A,_a(r=Y+16|0,0,0),vA(Y,r,1,1),r=e[Y+8>>2],P0=e[Y+12>>2],Ve=e[Y>>2],z0=e[Y+4>>2],zA&&($i=zA,zA=e[Y+136>>2]+(e[Y+20>>2]-e[Y+60>>2]|0)|0,e[$i>>2]=zA?A+(zA<<2)|0:s),e[(A=m)+8>>2]=r,e[A+12>>2]=P0,e[A>>2]=Ve,e[A+4>>2]=z0,J=Y+224|0,Be=Es(e[A>>2],e[A+4>>2],e[A+8>>2],e[A+12>>2]),J=A+16|0;m:{r=100;b:if((0|(A=s))!=(0|(s=e[Qe+96>>2]))){r=pi?-1:fi;h:{if((0|(A=e[s>>2]))!=115){if((0|A)!=37)break h;if(Ne(Be=r?+(0|r)*Be+100:Be)<2147483648){r=~~Be;break b}r=-2147483648;break b}if(e[s+4>>2]==116){be(+(St=Be*+(0|r)/12)),A=0|X(1),X(0);E:{if((r=(A=A>>>20&2047)-969|0)>>>0>=63){if(Be=St+1,(0|r)<0)break E;if(be(+St),r=0|X(1),s=0|X(0),!(A>>>0<1033)){if(Be=0,!s&(0|r)==-1048576||(Be=St+1,A>>>0>=2047))break E;if((0|r)>0|(0|r)>=0){D[8+(A=J-16|0)>>3]=3105036184601418e216,Be=3105036184601418e216*D[A+8>>3];break E}if(!(r>>>0<3230714880)){D[8+(A=J-16|0)>>3]=12882297539194267e-247,Be=12882297539194267e-247*D[A+8>>3];break E}}m=A,A=!(s<<1)&(0|(A=r<<1|s>>>31))==-2129002496|A>>>0<2165964800?m:0}Ba=(St=(Be=St-((na=(Be=D[14416])+St)-Be))*Be)*St*(Be*D[14421]+D[14420]),St*=Be*D[14419]+D[14418],Be*=D[14417],be(+na),X(1),m=0|X(0),Be=Ba+(St+(Be+D[115376+(s=m<<4&2032)>>3])),Ve=e[(s=s+115384|0)>>2],Y=e[s+4>>2],s=(r=Ve)+(Ve=0)|0,r=(m<<13)+Y|0,r=s>>>0<Ve>>>0?r+1|0:r,A?(R(0,0|s),R(1,0|r),Be=(St=+re())*Be+St):-2147483648&m?(R(0,0|s),R(1,r+1071644672|0),(Be=(na=(St=+re())*Be)+St)<1&&(e[8+(A=J-16|0)>>2]=0,e[A+12>>2]=1048576,D[A+8>>3]=22250738585072014e-324*D[A+8>>3],Be=(Be=(Ba=Be+1)+(na+(St-Be)+(Be+(1-Ba)))+-1)==0?0:Be),Be*=22250738585072014e-324):(R(0,0|s),R(1,r+-1048576|0),Be=(St=+re())*Be+St,Be+=Be)}if(Ne(Be*=100)<2147483648){r=~~Be;break b}r=-2147483648;break b}}if((0|er)!=1)break m;if(r)r=100+(A=Ne(Be=Be*+(0|r)*100)<2147483648?~~Be:-2147483648)|0;else{if(Ne(Be*=100)<2147483648){r=~~Be;break b}r=-2147483648}}A=(0|z(r,e[pr+134848>>2]))/100|0;break C}A=Ne(Be)<2147483648?~~Be:-2147483648,r&&(A=e[pr+134848>>2]+z(A,r)|0)}e[Zn+4>>2]=A}if((0|(er=er+1|0))==5)break}Ja(rA,e[33709]);break n;case 11:(0|(r=e[33709]))<=18&&(e[33709]=r+1),e[(A=134912+(r<<6)|0)>>2]=12,e[A+4>>2]=-1,e[A+8>>2]=-1,e[A+52>>2]=-1,e[A+56>>2]=-1,e[A+44>>2]=-1,e[A+48>>2]=-1,e[A+36>>2]=-1,e[A+40>>2]=-1,e[A+28>>2]=-1,e[A+32>>2]=-1,e[A+20>>2]=-1,e[A+24>>2]=-1,e[A+12>>2]=-1,e[A+16>>2]=-1,e[A+60>>2]=-1,A=(A=Ut(i,88658))?xa(A,130400):3,s=134912+(r<<6)|0,e[e[47192]+148>>2]!=1?(e[52+(134912+(r<<6)|0)>>2]=A,A=l[A+102776|0]):(e[20+(134912+(r<<6)|0)>>2]=l[A+102764|0],A=l[A+102770|0]),e[s+12>>2]=A,Ja(rA,e[33709]);break n;case 34:case 41:case 43:if(!((0|(A=e[33709]))<=0)){if(i=Y-32|0,Y=0,s=0,r=0,A>>>0>=4)for(m=-4&A,zA=0;er=2|r,pr=1|r,s=(0|i)==e[134912+((Ve=3|r)<<6)>>2]?Ve:(0|i)==e[134912+(er<<6)>>2]?er:(0|i)==e[134912+(pr<<6)>>2]?pr:(0|i)==e[134912+(r<<6)>>2]?r:s,r=r+4|0,(0|m)!=(0|(zA=zA+4|0)););if(m=3&A)for(;s=(0|i)==e[134912+(r<<6)>>2]?r:s,r=r+1|0,(0|m)!=(0|(Y=Y+1|0)););(0|s)<=0||(e[33709]=s,A=s)}Ja(rA,A);break n;case 7:if(A=Ut(i,88741),r=Ut(i,88860),(0|xa(A,130176))!=1)break n;A=e[rA>>2],e[rA>>2]=A+1,g[A+189424|0]=91,A=e[rA>>2],e[rA>>2]=A+1,g[A+189424|0]=91,A=Pa((A=e[rA>>2])+189424|0,r,800-A|0)+e[rA>>2]|0,e[rA>>2]=A+1,g[A+189424|0]=93,A=e[rA>>2],e[rA>>2]=A+1,g[A+189424|0]=93;break n;case 35:e[33692]==36&&(g[e[rA>>2]+189424|0]=0,(s=bs(131104,r=(A=e[33707])+189424|0))&&(e[rA>>2]=zr(s,r)+A)),A=e[rA>>2],e[rA>>2]=A+1,g[A+189424|0]=1,A=e[rA>>2],e[rA>>2]=A+1,g[A+189424|0]=89,e[33692]=0;break n;case 8:if(!(A=Ut(i,89299)))break n;g[134824]=1,r=e[rA>>2],e[rA>>2]=Pa(r+189424|0,A,800-r|0)+e[rA>>2];break n;case 13:g[134824]=1;break n;case 40:case 45:g[134824]=0;break n;case 4:if(!(A=Ut(i,89360)))break n;if(Pa(Qe+352|0,A,160),l[Qe+352|0]&&!Br(199328,Qe+352|0)){g[134760]=1,g[199328]=0,r=16384;break o}if((0|(A=Wi(Qe+352|0)))<0)break n;e[Qe+20>>2]=A,e[Qe+16>>2]=1,DA(A=Qe+352|0,89460,Qe+16|0),qA(e[rA>>2]+189424|0,A),e[rA>>2]=e[rA>>2]+HA(A);break n;case 10:(0|(r=e[33709]))<=18&&(e[33709]=r+1),e[(A=134912+(r<<6)|0)>>2]=11,e[A+4>>2]=-1,e[A+8>>2]=-1,e[A+52>>2]=-1,e[A+56>>2]=-1,e[A+44>>2]=-1,e[A+48>>2]=-1,e[A+36>>2]=-1,e[A+40>>2]=-1,e[A+28>>2]=-1,e[A+32>>2]=-1,e[A+20>>2]=-1,e[A+24>>2]=-1,e[A+12>>2]=-1,e[A+16>>2]=-1,e[A+60>>2]=-1;C:if(A=Ut(i,89514)){if(Pa(Qe+352|0,A,160),e[34441]){if((0|(A=Wi(Qe+352|0)))<0||0|ct[e[34441]](1,A+e[33282]|0,Ve))break C;e[Qe+68>>2]=A,e[Qe+64>>2]=1,DA(Qe+352|0,89658,Qe- -64|0)}else{if(!Ve|l[Qe+352|0]==47?A=d0(Qe+352|0):(e[Qe+48>>2]=Ve,e[Qe+52>>2]=Qe+352,DA(A=Qe+96|0,89564,Qe+48|0),A=d0(A)),(0|A)<0)break C;e[Qe+36>>2]=A,e[Qe+32>>2]=1,DA(Qe+352|0,89623,Qe+32|0)}A=Qe+352|0,qA(e[rA>>2]+189424|0,A),e[rA>>2]=e[rA>>2]+HA(A),e[4+(134912+(r<<6)|0)>>2]=1}if(Ja(rA,e[33709]),(0|zA)==47){n0(11,rA),r=16384;break o}g[134772]=1,r=16384;break o;case 42:n0(43,rA),g[134772]=0,r=16384;break o;case 12:C:{if(A=Ut(i,89714)){if(r=16384,(m=(0|(A=xa(A,130336)))<0?2:A)>>>0<=2&&(A=e[rA>>2],e[Qe+84>>2]=m,e[Qe+80>>2]=1,DA(A+189424|0,89770,Qe+80|0),e[rA>>2]=e[rA>>2]+3,r=0),A=e[102784+(m<<2)>>2],!(s=Ut(i,89907)))break C;break l}if(r=16384,s=Ut(i,89907))break l;A=21;break u}if(m>>>0<3)break n;break u;case 0:(A=Ut(i,89965))&&(Pa(r=Qe+352|0,A,160),Wi(r)),r=Ma(i,1,e[33708])?147456:0;break o;case 1:r=Ma(i,2,A)?147456:0;break o;case 5:r=0,e[m>>2]==6&&(r=Ma(i,38,A),A=e[33708]),r=524358+(Ma(i,6,A)|r)|0;break o;case 6:r=0,(0|(s=e[m>>2]))==6&&(r=Ma(i,38,A),s=e[m>>2]),(0|s)==7&&(r=Ma(i,39,e[33708])|r),r=524358+(r|Ma(i,7,e[33708]))|0;break o;case 37:if(r=524328,e[m>>2]!=6)break o;r=Ma(i,38,A)+524328|0;break o;case 38:if(r=524358,(-2&e[m>>2])!=6)break o;r=Ma(i,39,A)+524358|0;break o;case 14:case 46:break o;case 3:break p;default:break n}A=Ut(i,88893),r=Ut(i,88992),s=Ut(i,89153),i=xa(A,130272),r=xa(r,130320),A=I0(s,0),e[Qe>>2]=1,s=(0|A)<2?193:A- -64|0,r=(0|(A=(0|r)==1?19:i))==64?s:A,e[Qe+4>>2]=r,DA(A=Qe+352|0,89230,Qe),qA(e[rA>>2]+189424|0,A),A=e[rA>>2]+HA(A)|0,e[rA>>2]=A,e[33707]=A,e[33692]=r}r=0;break o}A=I0(s,1),s=e[33722],Qn(1,e[33713]),(0|(A=(0|(s=(0|z(A,s))/100<<8))/(0|z(e[36429],10))|0))<=199&&(A=(0|s)/(0|z(e[36428],10))|0),r=r||16384}s=A>>>5|0,i=A,r=((A=(0|A)>4095)?s>>>0>=4095?4095:s:i)+(A?8388608|r:r)|0}if(J=Qe+560|0,r){if(A=e[o+2148>>2]+189424|0,g[0|A]=32,g[A+1|0]=0,!(131072&r)){a=r;break e}qA(189360,134784),a=r;break e}e[o+2156>>2]=32;o:{u:{if(!(r=e[33285])){if(m=0,A=e[33283],e[A>>2]==e[A+4>>2])continue;if(!(r=e[33285]))break u}e[33285]=0;break o}e[33284]=e[33284]+1,A=e[33283],r=0|ct[e[A+8>>2]](A)}e[o+2152>>2]=r,m=0;continue}e[o+2156>>2]=A+57344}if(l[134824])continue;if(s=e[o+2156>>2],!((0|(A=e[o+2152>>2]))!=10|e[47268]!=-1)){(0|(a=Ys(s)))==16384?(A=e[o+2148>>2],b[MA+(A<<1)>>1]=e[33284]-e[47353],e[Wr>>2]=A,a=524328,A=zr(e[o+2156>>2],A+189424|0)+e[o+2148>>2]|0):A=e[o+2148>>2],g[0|(A=A+189424|0)]=32,g[A+1|0]=0;break e}i:if((0|s)==1){if((0|A)!=66){if((0|A)!=86)break i;for(A=e[o+2148>>2],e[o+2148>>2]=A+1,g[A+189424|0]=0;;){c:{o:{u:{if(!(r=e[33285])){if(A=e[33283],e[A>>2]==e[A+4>>2])break c;if(!(r=e[33285]))break u}e[33285]=0;break o}e[33284]=e[33284]+1,A=e[33283],r=0|ct[e[A+8>>2]](A)}if(e[o+2156>>2]=r,!(Or(r)||(0|(A=e[o+2148>>2]))>=799)){e[o+2148>>2]=A+1,g[A+189424|0]=e[o+2156>>2];continue}}break}g[e[o+2148>>2]+189424|0]=0,a=147456;break e}r=e[o+2148>>2],g[0|(A=r+189424|0)]=32,g[A+1|0]=32,g[A+2|0]=32,g[A+3|0]=0,e[o+2148>>2]=r+3;c:{o:{u:{l:{n:{p:{if(!(r=e[33285])){if(A=e[33283],e[A>>2]==e[A+4>>2])break l;if(!(r=e[33285]))break p}e[33285]=0;break n}e[33284]=e[33284]+1,A=e[33283],r=0|ct[e[A+8>>2]](A)}if(e[o+2152>>2]=r,s=0,(0|r)!=48)break u;break o}r=e[o+2152>>2]}if(e[47208]=0,e[47201]=1,(0|r)==49)break c;for(s=e[33285],i=0;;){u:{if(!s){if(A=e[33283],e[A>>2]==e[A+4>>2])break u;r=e[o+2152>>2]}if(!(Or(r)|i>>>0>58)){e[188832+(i<<2)>>2]=e[o+2152>>2],(r=e[33285])?(e[33285]=0,s=0):(e[33284]=e[33284]+1,A=e[33283],r=0|ct[e[A+8>>2]](A),s=e[33285]),i=i+1|0,e[o+2152>>2]=r,A=e[o+2148>>2],e[o+2148>>2]=A+1,g[A+189424|0]=32;continue}}break}s=2,e[188832+(i<<2)>>2]=0}e[47201]=s}c:{if(!(r=e[33285])){if(A=e[33283],e[A>>2]==e[A+4>>2])continue;if(!(r=e[33285]))break c}e[33285]=0,e[o+2152>>2]=r;continue}e[33284]=e[33284]+1,A=e[33283],e[o+2152>>2]=ct[e[A+8>>2]](A);continue}yr=yr+1|0,r=0,A=e[Z+340>>2];i:if(i=M[A>>1]){for(;;){if((65535&i)!=(0|s)){if(i=M[A+((r=r+2|0)<<1)>>1])continue;break i}break}switch(0|(A=M[A+(r<<1|2)>>1])){case 1:continue;case 0:break i}e[o+2156>>2]=A,s=A}Ui(s)?(ce=1,r=e[o+2156>>2]):at?(e[33285]=e[o+2152>>2],r=1328,e[o+2156>>2]=1328,e[o+2152>>2]=32,at=0):(0|(r=e[o+2156>>2]))!=3851?(at=0,(0|r)!=3405|e[o+2152>>2]!=8205||(r=3406,e[o+2156>>2]=3406)):(r=32,e[o+2156>>2]=32,at=0);i:if(ms(r)){if(e[Z+8216>>2]=e[Z+8216>>2]+1,e[33692]|e[47200]!=2||ms(Ke)||(e[o+2544>>2]=0,e[o+2548>>2]=0,e[o+2304>>2]=84731,!kr(Z,o+2304|0,o+2160|0,o+2544|0,0,0))||($t(Z,A=o+2160|0,o+2544|0,-1,0),JA(r=A,A=o+2336|0),e[o+80>>2]=A,DA(r=o+2240|0,85451,o+80|0),A=e[o+2148>>2],(0|(r=HA(r)+A|0))>=800))break i;qA(A+189424|0,o+2240|0),e[o+2148>>2]=r}else ns(e[o+2156>>2])&&(e[Z+8220>>2]=e[Z+8220>>2]+1);if(r=e[o+2152>>2],A=e[o+2156>>2],e[47204])if((0|m)>0)m=m-1|0;else{if(!((0|A)!=91|(0|r)!=91)){s=0,m=-1;break A}m=(0|A)==93&&(0|r)==93?2:m}if((0|A)==10){for(s=e[33285],i=0;;){i:{if(!s){if(A=e[33283],e[A>>2]==e[A+4>>2])break i;r=e[o+2152>>2]}if(Or(r)){i=(e[o+2152>>2]==10)+i|0,(r=e[33285])?(e[33285]=0,s=0):(e[33284]=e[33284]+1,A=e[33283],r=0|ct[e[A+8>>2]](A),s=e[33285]),e[o+2152>>2]=r;continue}}break}if((0|i)>0){a&&jA(A=Er+189424|0,32,Gt(o+2336|0,A)),A=e[o+2148>>2]+189424|0,g[0|A]=32,g[A+1|0]=0,e[33285]=e[o+2152>>2],a=e[47203]?524358:z((0|i)>=3?3:i,30)+524328|0;break e}if(A=e[47268]<(0|yr),yr=0,!A){A=e[o+2148>>2]+189424|0,g[0|A]=32,g[A+1|0]=0,e[33285]=e[o+2152>>2],a=262174;break e}}if(s=0,e[33692]|m)break A;if(A=0,!a)break r;if(Or(e[o+2156>>2])){A=a;break r}if(rr(e[o+2156>>2])&&Cs(e[o+2156>>2]))break r;e[33691]=e[o+2156>>2],g[0|(A=Er+189424|0)]=32,g[A+1|0]=0,e[33285]=e[o+2152>>2];break e}at&&(e[o+2148>>2]=zr(1328,e[o+2148>>2]+189424|0)+e[o+2148>>2]),a&&jA(A=Er+189424|0,32,Gt(o+2336|0,A)),A=e[o+2148>>2]+189424|0,g[0|A]=32,g[A+1|0]=0}a=589864;break e}if(!((0|(r=e[o+2156>>2]))!=46|e[o+2152>>2]!=46)){r:{s:{i:{if(!(r=e[33285])){if(r=e[33283],e[r>>2]==e[r+4>>2])break r;if(!(r=e[33285]))break i}e[33285]=0;break s}e[33284]=e[33284]+1,r=e[33283],r=0|ct[e[r+8>>2]](r)}if(c=r,(0|r)==46)for(e[o+2152>>2]=32,e[o+2156>>2]=8230,c=e[33285];;){s:{i:{if(!c){if(r=e[33283],e[r>>2]==e[r+4>>2]){c=46;break r}if(!(c=e[33285]))break i}e[33285]=0,r=0;break s}e[33284]=e[33284]+1,r=e[33283],c=0|ct[e[r+8>>2]](r),r=e[33285]}if((0|c)!=46)break r;e[o+2152>>2]=32,e[o+2156>>2]=8230,c=r}}(0|(r=e[o+2156>>2]))!=8230?e[33285]=c:(e[o+2152>>2]=c,r=8230)}if(zA=0,(0|(Y=Ys(r)))!=16384){r:if(536621&Y)for(r=e[33285];;){if(!r&&(r=e[33283],e[r>>2]==e[r+4>>2])||!(536621&Ys(e[o+2152>>2])))break r;(c=e[33285])?(e[33285]=0,r=0):(e[33284]=e[33284]+1,r=e[33283],c=0|ct[e[r+8>>2]](r),r=e[33285]),e[o+2152>>2]=c}if(1048576&Y){e[f+780>>2]=Y>>>12&15,at=1,m=0,a=A;continue}(Or(e[o+2152>>2])|32768&Y||ci(e[o+2152>>2])||(0|(r=e[o+2152>>2]))==63||(i=0,e[33285]||(r=e[33283],i=e[r>>2]==e[r+4>>2],r=e[o+2152>>2]),i||(0|r)==1))&&(zA=1)}if((0|(r=e[o+2156>>2]))==57404&&(e[o+2156>>2]=60,r=60),e[47201]){a=0;r:if(!(1<<(i=Wa(r))&1879048255&&i>>>0<=30)){if(!((i=Wa(r))>>>0>27)){if(116672&(m=1<<i))break r;if(134227968&m){a=!(1024&Fe(r,i));break r}}a=1}if(!(l[134772]|!a)&&(e[47201]==1||Lr(188832,e[o+2156>>2]))){e[Z+288>>2]=0,s=e[o+2156>>2],g[o+2336|0]=0,m=e[o+2152>>2],r=0;r:{s:if(!((0|(a=e[34064]))<=0))for(;;){if((0|s)==e[136272+(r<<4)>>2]){if(e[136276+(r<<4)>>2])break r;if(ei(0,r))break s;break r}if((0|a)==(0|(r=r+1|0)))break}r=-1}r:if((0|r)>=0)e[o>>2]=r,DA(o+2336|0,86007,o),e[33285]=m;else if((i=!zA)|(0|s)!=46|(0|m)==46||(e[o+2600>>2]=0,e[o+2604>>2]=0,e[o+2540>>2]=86036,!kr(Z,o+2540|0,o+2544|0,o+2600|0,0,0))?r=Ai(o+2240|0,Z,s,0):($t(Z,r=o+2544|0,o+2600|0,-1,0),JA(a=r,r=o+2160|0),e[o+64>>2]=r,DA(r=o+2304|0,85451,o- -64|0)),a=r,i|!e[o+2148>>2]|2&l[Z+76|0]){for(r=e[33285],i=1;;){s:{i:{if(!r){if(r=e[33283],e[r>>2]==e[r+4>>2]|(0|s)==60|(0|s)!=(0|m))break s;if(i=i+1|0,m=e[33285])break i;e[33284]=e[33284]+1,r=e[33283],m=0|ct[e[r+8>>2]](r),r=e[33285];continue}if((0|s)==60|(0|s)!=(0|m))break s;m=r,i=i+1|0}r=0,e[33285]=0;continue}break}if(e[o+2152>>2]=m,zA&&(e[33285]=m),(0|i)==1){e[o+16>>2]=a,DA(o+2336|0,86219,o+16|0);break r}if((0|i)<=3){if(g[o+2336|0]=0,(0|(r=e[50786]))<=299&&(e[o+2336>>2]=l[86728]|l[86729]<<8|l[86730]<<16|l[86731]<<24,b[o+2340>>1]=l[86732]|l[86733]<<8),(0|i)>0){for(;e[o+32>>2]=a,DA(r=o+2160|0,86219,o+32|0),m=i>>>0>1,ia(o+2336|0,r),i=i-1|0,m;);r=e[50786]}if((0|r)>299)break r;e[o+2160>>2]=l[86857]|l[86858]<<8|l[86859]<<16|l[86860]<<24,r=l[86860]|l[86861]<<8|l[86862]<<16|l[86863]<<24,g[o+2163|0]=r,g[o+2164|0]=r>>>8,g[o+2165|0]=r>>>16,g[o+2166|0]=r>>>24,ia(o+2336|0,o+2160|0);break r}e[o+56>>2]=a,e[o+52>>2]=i,e[o+48>>2]=a,DA(o+2336|0,86932,o+48|0)}else e[33691]=s,e[33285]=m,b[o+2336>>1]=32;if(i=HA(a=o+2336|0),qA((r=e[o+2148>>2])+189424|0,a),e[o+2148>>2]=r+i,zA){if((0|s)==45){a=16384;break e}if(a=Ys(s),!(2&l[Z+76|0]|(0|r)<=0)){a=(-32769&a)==266270?262148:(28672&a)==4096?266244:262148;break e}if(!(524288&a)){a=(28672&a)==4096?266244:262148;break e}if((0|a)>=0)break e}s=e[o+2156>>2]}}if(s|!(2097152&Y)||(r=qA(e[o+2148>>2]+189424|0,Ai(o+2336|0,Z,e[o+2156>>2],1)),l[0|r]?(e[o+2148>>2]=e[o+2148>>2]+HA(r),Y&=-28673,s=e[o+2156>>2]):s=0),m=0,zA){r:if(Or(c=e[o+2152>>2]))for(i=e[33285],r=0;;){if(!i&&(a=e[33283],e[a>>2]==e[a+4>>2])||!Or(c))break r;r=((0|c)==10)+r|0,(c=e[33285])?(e[33285]=0,i=0):(e[33284]=e[33284]+1,a=e[33283],c=0|ct[e[a+8>>2]](a),i=e[33285])}else r=0;a=(0|(m=e[o+2156>>2]))==46&&(0|r)<2?4194304|Y:Y;r:{if(!r){i=1,(0|m)!=44|(0|Ke)!=46|e[Z+212>>2]!=26741|Ve-48>>>0>=10||c-48>>>0>=10&&!Cs(c)||(e[o+2156>>2]=1367,i=0),(0|(Y=e[o+2156>>2]))!=46|(0|c)!=39||(m=i,Y=e[33283],(0|(Qe=e[Y>>2]))==e[Y+4>>2]?i=0:(i=0|ct[e[Y+8>>2]](Y),e[Y>>2]=Qe),Y=e[o+2156>>2],i=(0|i)!=115&m);s:if((0|Y)!=46)i&=ce;else{i:if(1&g[Z+106|0]){if(!(Ke-48>>>0<10)&&((m=Ke-73|0)>>>0>15|!(1<<m&40969)||!(1<<(m=Ve-73|0)&40969&&m>>>0<=15||Or(Ve))))break i;i=Ke-48>>>0>=10?0:!Cs(c)&(0|c)!=45&i}if(Cs(c)&&(i=l[Z+208|0]!=0&i),ce){Y=e[o+2156>>2];break s}Y=32,e[o+2156>>2]=32,i=0}if(!(!i|(0|Y)!=46|!e[47203]|(0|c)!=60)){Er=e[o+2148>>2],A=a;break r}if(!i)break r}if(A=e[o+2148>>2]+189424|0,g[0|A]=32,g[A+1|0]=0,e[33285]=c,Ke-48>>>0<10&&(a=rr(c)?a:-4194305&a),(0|r)<2)break e;a=(0|a)==536621?536656:(0|a)==532520?532555:524358;break e}(e[33285]||(m=0,r=e[33283],e[r>>2]!=e[r+4>>2]))&&(m=0,Or(e[o+2152>>2])&&(e[33285]=c))}a=A}if(e[33712]!=1){if((0|s)!=(0|(r=e[o+2156>>2])))i=e[o+2148>>2],(0|r)==57404&&(r=60,e[o+2156>>2]=60);else{A:{if(ci(s))r=57384;else{if(r=45,e[o+2156>>2]==45)break A;r=32}e[o+2156>>2]=r}i=e[o+2148>>2]}e[o+2148>>2]=zr(r,i+189424|0)+e[o+2148>>2],Or(e[o+2156>>2])||ci(e[o+2156>>2])||(A=e[o+2148>>2],b[MA+(A<<1)>>1]=e[33284]-e[47353],(0|A)<=(i+1|0)||jA(Ti+(i<<1)|0,255,A+~i<<1)),r=e[o+2148>>2],e[Wr>>2]=r;A:{r:{if((0|r)>725){if(!rr(e[o+2156>>2]))break r;r=e[o+2148>>2]}if((0|r)<796)continue;break A}if(r=e[o+2148>>2],!(e[o+2156>>2]-48>>>0>=10)&&(0|r)<796)continue}break}}g[0|(A=r+189424|0)]=32,g[A+1|0]=0,e[33285]=e[o+2152>>2],a=16384}J=o+2608|0,at=a,oa&&(A=e[f+780>>2],e[oa>>2]=A||at>>>12&7),A=(f+5184|0)+(e[f+6800>>2]<<1)|0,b[A+6>>1]=0,b[A+2>>1]=0,b[A+4>>1]=32767,Y=z(4095&at,8388608&at?320:10),a=189424;e:{A:{r:if(A=l[189424]){for(;;){if(!!(255&(A=A<<24>>24))&A>>>0<33){if(A=l[0|(a=a+1|0)])continue;break r}break}if(l[0|a])break A}Y=(0|(r=Y-(A=e[47566])|0))>0?r:0,e[47566]=Y+A,at=l[190268]?524288|at:at,e[Z+8240>>2]=at;break e}e[47566]=Y,A=l[190268],e[Z+8240>>2]=at,A&&(dt=1,e[47568]=e[47568]+1,(0|(A=e[47569]))<=0||(A=A-1|0,e[47569]=A,A||(g[190280]=0)))}e[49572]=1,e[47572]=655360,e[47573]=0,e[Z+8184>>2]=0,e[Z+8188>>2]=0,A=0,e[Z+288>>2]=0,e[(r=Z- -8192|0)>>2]=0,e[r+4>>2]=0,e[Z+8200>>2]=0,e[Z+8224>>2]=0,e[Z+8228>>2]=0,e[(r=Z+8232|0)>>2]=0,e[r+4>>2]=0,g[f+786|0]=32,b[f+784>>1]=8192,e[f+6812>>2]=32,b[f+1588>>1]=3,e[f+1584>>2]=0,a=0;e:if(!((0|(r=e[f+6800>>2]))<=0)){for(;;){if(b[(f+5184|0)+(a<<1)>>1]>0)break e;if((0|r)==(0|(a=a+1|0)))break}a=r}if(r=M[(f+5184|0)+(a<<1)>>1],b[f+1592>>1]=r,r)for(;A=!!(65535&~r)+A|0,r=M[(f+5184|0)+((a=a+1|0)<<1)>>1];);for(g[f+1594|0]=A,i=3,MA=1,a=0;;){Ve=e[f+6808>>2],Ga(f+6808|0,(rA=(f+784|0)+i|0)-1|0),!l[Z+170|0]|e[f+6808>>2]-48>>>0>=10||rr(Ve)&&(e[f+6808>>2]=97),he?e[f+6812>>2]=he:w&&Ga(f+6812|0,w+189423|0),r=w;e:{A:if(a||(r=Gt(f+6816|0,w+189424|0)+w|0,a=e[f+6816>>2])){if(ce=Gt(f+6804|0,A=r+189424|0),(0|a)==1){if(s=r-1|0,he=32,Ke=0,e[f+6812>>2]!=32){r=s,A=32;break A}w=0,a=r;r:{s:switch(l[0|A]-43|0){case 0:a=r+1|0,w=64;break r;case 2:break s;default:break r}a=r+1|0,w=96}if(g[0|(A=a+189424|0)]-48>>>0>=10)c=a+1|0,ce=-1;else{for(ce=js(A);a=(A=a)+1|0,g[A+189424|0]-48>>>0<10;);c=a,a=A}if((0|(he=e[47350]))>247)A=0;else if(A=0,!((0|(a=g[a+189424|0]))<0)&&(a=ai(84868,255&a,14))){r=1+(A=a-84868|0)|0,(0|ce)==-1&&(ce=e[105536+(r<<2)>>2],w=0);r:{s:switch(A-8|0){case 0:e[49574]=0,e[49573]=ce;break r;case 4:break s;default:break r}g[199304]=(0|ce)>=3?1:0}A=1,e[47350]=he+1,e[198304+(he<<2)>>2]=(r+w|0)+(ce<<8),r=c}he=e[f+6812>>2],jA(s+189424|0,32,r-s|0),qr=A+qr|0,a=0;break e}he=0,(0|a)==32|e[49573]!=36?(Ke=0,A=a):(e[f+6812>>2]!=32|e[f+6804>>2]!=32||(e[49573]=20),Ke=0,A=Mi(a,Z))}else e[f+6804>>2]=32,Ke=1,he=0,ce=0,A=32;A:if(hr){if(hr=1,MA=8,a=0,(0|A)!=93|e[f+6804>>2]!=93)break A;r=r+1|0,A=32,hr=0}else if((240&(a=e[49573]))!=64)if(hr=0,16&a)a=0;else{r:{s:{i:{c:{if(!((0|(c=(0|A)==8242||(0|A)==8217||(0|A)==146||(0|A)==180?39:A))!=8216&(0|c)!=63))if(rr(e[f+6808>>2])){if(c=A,rr(e[f+6804>>2])){c=39;break c}}else c=A;o:{if((0|c)!=1367){if((0|c)==1328){P|=1024,c=32;break c}if((A=c-44032|0)>>>0>11183)break c;if(s=((a=((m=65535&A)>>>0)/28|0)>>>0)%21|0,A=A-z(a,28)&65535,c-50500>>>0>587)break o;a=A?A+4519|0:0,s=s+4449|0;break s}P|=131072,Er=e[f+6804>>2],A=e[f+6812>>2],c=32;break i}a=50500+(A+z(s,28)|0)|0,s=(m>>>0)/588|4352;break s}if(Er=e[f+6804>>2],A=e[f+6812>>2],!((a=c-12592|0)>>>0>51)){s=4352|l[a+103296|0],a=0;break s}}o=r+189424|0;i:if(!((0|(a=e[Z+212>>2]))!=28268&(0|a)!=24934|(0|c)!=39)&&!ns(A)&&(Gt(f+6820|0,o+1|0),li(e[f+6820>>2]))){s=601,a=0;c:switch(Er-110|0){case 6:break s;case 0:break c;default:break i}if(e[Z+212>>2]!=24934)break s;g[0|o]=32;break s}if(e[f+6824>>2]=32,(0|(A=e[49897]))>0)e[49897]=A-1,a=0;else{if(!c){a=0,s=0;break r}i:{c:{o:{u:if((zA=e[Z+180>>2])&&(m=c,(Qe=ms(c))&&(m=Mi(c,Z)),!Vn(zA)))for(;;){e[f+16>>2]=0,e[f+624>>2]=m,A=Gt(f+16|0,zA)+zA|0;l:if(e[f+624>>2]==e[f+16>>2]){if(l[0|A]){for(s=1,er=0,a=o;pr=Gt(f+16|0,A),yr=Gt(f+624|0,a),Wr=Mi(e[f+624>>2],Z),e[f+624>>2]=Wr,a=a+yr|0,er=(yr=(0|Wr)==e[f+16>>2])+er|0,s&=yr,l[0|(A=A+pr|0)];);if(!s)break l;e[49897]=er}if(!(A=A+1|0))break u;if(8&l[188788]&&(e[f>>2]=zA,e[f+4>>2]=A,fr(e[47195],85187,f)),A=Gt(f+6828|0,A)+A|0,l[0|A])break o;a=0;break c}for(;a=A,A=A+1|0,l[0|a];);for(;l[0|(a=(A=a)+1|0)];);if(Vn(zA=A+2|0))break}a=0,s=c;break i}Gt(f+6824|0,A),Qe&&ms(Er)&&(e[f+6824>>2]=En(e[f+6824>>2])),a=e[f+6824>>2]}s=e[f+6828>>2],P|=2097152,Qe&&(s=En(s))}if((0|s)!=8)break s}s=r;break e}a?e[f+6804>>2]=a:a=0}rr(s)||li(s)||Lr(e[Z+336>>2],s)||!rr(e[f+6808>>2])|!(!l[Z+170|0]|s-48>>>0>=10)&e[f+6804>>2]-48>>>0>=10||(s=32,cA=1);r:{s:{i:{c:{o:{if(e[f+6808>>2]-48>>>0<10){if(s-48>>>0<10){A=E;break o}if(1<<(A=s-32|0)&20481&&A>>>0<=14)break c;cA=1}else if(A=0,e[f+6812>>2]!=44||(A=E,(0|s)!=44))break o;s=32;break c}if((0|s)==91&&((0|(c=e[f+6804>>2]))==2||(s=91,(0|c)==91&&e[47204])))break i;E=A}if(rr(s)){c:{o:{u:{if(rr(e[f+6808>>2])){if(!l[Z+171|0]||(A=e[f+6808>>2],!((0|s)>12352)&&(0|A)<12353))break u}else A=e[f+6808>>2];if(Sr=Lr(e[Z+336>>2],A)?Sr:0,(0|(A=e[f+6808>>2]))!=32&&!Lr(e[Z+336>>2],A)){A=32,ee=ci(e[f+6808>>2])?ee:256|ee;break o}P=ms(s)?2|P:P,e[f+6808>>2]!=32|g[rA-2|0]-48>>>0>=10|e[f+6812>>2]-48>>>0<10||(g[(f+784|0)+i|0]=32,A=1588+(z(et,12)+f|0)|0,b[A>>1]=M[A>>1]+1,i=i+1|0)}if(A=32,(0|s)==32)break c;if(Sr=Sr+1|0,(0|(c=e[Z+600>>2]))<=0){A=s;break c}if(!((0|s)<=591&(0|(m=e[f+6808>>2]))>=(0|c))){if((0|s)<(0|c)){A=s;break c}if((0|Sr)<2){A=s;break c}if(!((0|m)<=591)){A=s;break c}}if(!rr(m)){A=s;break c}P|=16384,ee|=128}cA=1}if(As=As+1|0,ms(A)){if(c=Mi(A,Z),e[Z- -64>>2]){A=os?c:712,a=os?a:c,os=1;break A}if(Cs(e[f+6812>>2])){if(e[f+6808>>2]==32){A=c;break A}if(A=32,e[Z+212>>2]!=26465)break r;for(s=85240,m=(f+784|0)+i|0,ce=0;;){if(o=HA(s),l[0|(Ve=m-o|0)]==32&&!va(Ve+1|0,s,o=o-1|0)){if((0|(s=g[s+o|0]))==(0|c)){A=c;break A}if((0|s)==65&&p0(Z,c)){A=c;break A}}if(s=e[131184+((ce=ce+1|0)<<2)>>2],(0|ce)==11)break}break r}if(A=32,(0|c)==32)break A;if(!ms(e[f+6812>>2])){A=c;break A}if(!Cs(e[f+6804>>2])){A=c;break A}if(Gt(f+16|0,189424+(r+ce|0)|0),!(e[Z+212>>2]!=28268|(0|Sr)!=2|(0|c)!=106|e[f+6812>>2]!=73)){A=c;break A}if(e[f+6808>>2]==32){A=c;break A}if(!rr(e[f+16>>2])){A=c;break A}ee|=256,he=32,cA=1;break A}if(!MA){MA=0;break A}if((0|Sr)<3){MA=0;break A}if((0|A)!=115){MA=0;break A}if(e[Z+212>>2]!=25966){MA=0;break A}if(e[f+6804>>2]!=32){MA=0;break A}if(MA|=4,A=32,l[783+(s=i+f|0)|0]!=39)break A;g[s+783|0]=32;break A}A=32;c:{o:{u:{l:{switch(s-39|0){default:if((0|s)==95)break A;case 1:case 2:case 3:case 4:case 5:if(s-48>>>0>=10||l[Z+170|0]&&rr(e[f+6808>>2])&&!((c=e[f+6804>>2])-48>>>0<10|c-2406>>>0<10))break c;if((0|(m=e[f+6808>>2]))==32)break o;if(c=e[f+6808>>2],m-48>>>0<10)break u;if((0|(m=c))==(0|(c=e[Z+128>>2])))break l;cA=1;break A;case 6:if(!li(e[f+6812>>2])&&rr(e[f+6804>>2])){if(e[f+6808>>2]!=32){cA=1;break A}if(P|=128,(0|et)<=0)break A;s=1572+(z(et,12)+f|0)|0,e[s>>2]=16384|e[s>>2];break A}if(s=e[f+6804>>2],!(e[f+6812>>2]!=32|(0|s)!=32)){Zt=4;break A}if((0|s)==45){r=r+1|0,Zt=4;break A}if(A=45,e[f+6808>>2]!=32||!rr(Ve)||rr(e[f+6812>>2]))break A;g[(f+784|0)+i|0]=32,s=1588+(z(et,12)+f|0)|0,b[s>>1]=M[s>>1]+1,i=i+1|0;break A;case 7:if(e[f+6808>>2]==46){cA=1;break A}if(A=46,(0|et)<=0||(s=1572+(z(et,12)+f|0)|0,1&g[s+1|0])||!rr(e[f+6812>>2]))break A;e[s>>2]=65536|e[s>>2],A=(A=li(e[f+6804>>2]))||e[f+6804>>2]==45?32:46;break A;case 0:}n:{if((0|(c=e[f+6812>>2]))!=46||(s=115,e[f+6804>>2]!=115)){if(!Ui(c))break n;s=e[f+6804>>2]}if(rr(s))break s}if(1&(s=e[Z+88>>2])){if(rr(e[f+6804>>2]))break s;s=e[Z+88>>2]}if(2&s&&rr(e[f+6812>>2]))break s;if(!(!Lr(e[Z+332>>2],e[f+6812>>2])|(0|Ve)!=32)){r=(e[f+6804>>2]==32)+r|0;break s}if(c=(0|(s=e[f+6808>>2]))!=115|ls,ls=0,!(1&c))break A;ls=!!(0|li(s)),Zt=4;break A}if((0|c)==44&E){cA=1;break A}E=1;break c}if((0|c)!=32)break c}rr(Ve)&&(rr(e[f+6812>>2])||(g[(f+784|0)+i|0]=32,A=1588+(z(et,12)+f|0)|0,b[A>>1]=M[A>>1]+1,i=i+1|0))}A=s;break A}hr=1,s=r+1|0,E=A;break e}A=39,ls=0;break A}cA=1,he=32}else{if(A-48>>>0<10){a=0,s=(0|(c=e[49574]+1|0))>(15&e[49573]),e[49574]=s?0:c,A=s?32:A,cA|=s,hr=0;break A}a=0,e[49574]=0,A=(s=e[f+6808>>2]-48>>>0<10)?32:A,cA|=s,hr=0}if(li(A)){if(e[f+6808>>2]==32){P|=262144,s=r;break e}if(s=e[f+6816>>2]-9>>>0<2,m=1&cA){ce=0;A:if(!((0|p)>(0|(A=r-1|0))))for(;;){if(!(c=b[(f+5184|0)+(A<<1)>>1]))break A;if(ce=((0|c)>0)+ce|0,!((0|p)<=(0|(A=A-1|0))))break}g[1594+(z(et,12)+f|0)|0]=ce}if(ee=s?262144|ee:ee,g[(f+784|0)+i|0]=32,A=i+1|0,!((0|et)>298||(s=(f+1584|0)+z(et,12)|0,(0|(c=M[s+4>>1]))>=(0|A)))){if((0|qr)<=0?p=e[s>>2]:(p=198300+(e[47350]<<2)|0,e[p>>2]=128|e[p>>2],qr=0,p=64|e[s>>2]),o=e[47352],g[s+6|0]=o,e[s>>2]=p|(As?MA:-2&MA)|(l[199304]?2048:0)|P,(0|o)>0){for(;P=(p=f+784|0)+A|0,p=p+(A=A-1|0)|0,g[0|P]=l[0|p],(0|A)>(0|c););g[0|p]=32,b[s+4>>1]=c+1,A=i+2|0}c=(f+1584|0)+z(et=et+1|0,12)|0,e[c>>2]=0,b[c+4>>1]=A,i=r;A:if(!((0|(s=e[f+6800>>2]))<=(0|r))){for(;;){if(b[(f+5184|0)+(i<<1)>>1]>0)break A;if((0|s)==(0|(i=i+1|0)))break}i=s}if(ce=M[(f+5184|0)+(i<<1)>>1],b[c+8>>1]=ce,As=0,s=0,ce)for(;s=!!(65535&~ce)+s|0,ce=M[(f+5184|0)+((i=i+1|0)<<1)>>1];);g[c+10|0]=s,e[47352]=0,MA=1,P=ee,ee=0,os=0}cA=0,a=m?0:a,s=m?w:r}else(0|i)>795?(s=r,r=p,A=i):(A=zr(A,(f+784|0)+i|0)+i|0,s=r,r=p);e[47352]<(0|Zt)&&(e[47352]=Zt),Zt=0,p=r,i=A}if(Ke||(w=s,!((0|i)<799)))break}(0|qr)<=0|et||(A=198300+(e[47350]<<2)|0,e[A>>2]=128|e[A>>2],e[f+1584>>2]=64|e[f+1584>>2],et=1),A=(f+784|0)+i|0,e[Z+8204>>2]=A-1,r=0,g[0|A]=0,g[f+1590|0]=0,g[1590+(z(et,12)+f|0)|0]=8;e:if((0|et)<=0)e[f+1584>>2]=512|e[f+1584>>2],i=e[49572];else{A=et-1|0;A:if((0|et)!=1)for(a=A;;){if(!ci(g[M[1588+(z(a,12)+f|0)>>1]+(f+784|0)|0])){r=a;break A}if(c=(0|a)>1,a=a-1|0,!c)break}if(r=(f+1584|0)+z(r,12)|0,e[r>>2]=16|e[r>>2],4194304&at&&(A=(f+1584|0)+z(A,12)|0,256&(r=e[A>>2])||(e[A>>2]=65536|r)),e[f+1584>>2]=512|e[f+1584>>2],!((0|et)<=0|(0|(i=e[49572]))>990))for(c=3|(A=f+624|0),m=2|A,he=f+754|0,Ke=!(4194304&at),w=0,p=0;;){e[47354]=e[47354]+1;A:{if((0|(A=e[49827]))<=0||(A=A-1|0,e[49827]=A,A)){if(l[190280])break A}else g[190280]=0;A=M[1588+(z(w,12)+f|0)>>1]+(f+784|0)|0;r:if(!(g[0|A]-48>>>0>=10)&&(r=f+624|0,a=A,e[Z+112>>2]!=1227133512)){for(;;){s:{if(g[0|a]-48>>>0<10)g[0|r]=l[0|a],r=r+1|0,a=a+1|0;else{if(e[Z+124>>2]!=g[0|a]|l[a+1|0]!=32||(i=a+2|0,l[a+3|0]==32|g[0|i]-48>>>0>=10|l[a+4|0]==32))break s;w=w+1|0,a=i}if(r>>>0<he>>>0)continue;break r}break}jA(A+(r=r-(E=f+624|0)|0)|0,32,(a=(i=a-A|0)-r|0)>>>0<=i>>>0?a:0),wt(A,E,r)}for(r=0;a=r,r=r+1|0,g[A+a|0]-48>>>0<10;);r:if(a-5>>>0<=27){for(g[f+626|0]=32,b[f+624>>1]=8224,l[0|A]!=48&e[Z+132>>2]>=(0|a)||(r=(f+1584|0)+z(w,12)|0,e[r>>2]=524288|e[r>>2]),ee=(f+1584|0)+z(w,12)|0,ce=0,i=c;r=A,!((A=g[0|A])-48>>>0>=10&(0|A)!=e[Z+128>>2])&&(g[0|i]=A,A=i+1|0,E=a,(0|(a=a-1|0))<=0?i=A:e[Z+112>>2]>>>a&1?(o=e[ee+4>>2],P=(f+16|0)+z(ce,12)|0,e[P>>2]=e[ee>>2],e[P+4>>2]=o,e[P+8>>2]=e[ee+8>>2],ce=ce+1|0,(0|(P=e[Z+124>>2]))!=32&&(g[i+1|0]=P,A=i+2|0),g[0|A]=32,i=A+1|0,8&l[ee+2|0]||((Zt=e[Z+112>>2])>>>E-2&1&&(g[A+1|0]=48,g[A+2|0]=48,Zt=e[Z+112>>2],i=A+3|0),Zt>>>E-3&1&&(g[0|i]=48,i=i+1|0))):i=A,A=r+1|0,i>>>0<he>>>0););if(a=e[ee+4>>2],A=(f+16|0)+z(ce,12)|0,e[A>>2]=e[ee>>2],e[A+4>>2]=a,a=e[ee+20>>2],e[A+16>>2]=e[ee+16>>2],e[A+20>>2]=a,a=e[ee+12>>2],e[A+8>>2]=e[ee+8>>2],e[A+12>>2]=a,a=1,(0|ce)>0)for(;A=(f+16|0)+z(a,12)|0,e[A>>2]=-262209&e[A>>2],(0|ce)>=(0|(a=a+1|0)););if(A=l[r+4|0]|l[r+5|0]<<8|l[r+6|0]<<16|l[r+7|0]<<24,a=l[0|r]|l[r+1|0]<<8|l[r+2|0]<<16|l[r+3|0]<<24,g[0|i]=a,g[i+1|0]=a>>>8,g[i+2|0]=a>>>16,g[i+3|0]=a>>>24,g[i+4|0]=A,g[i+5|0]=A>>>8,g[i+6|0]=A>>>16,g[i+7|0]=A>>>24,A=l[r+12|0]|l[r+13|0]<<8|l[r+14|0]<<16|l[r+15|0]<<24,r=l[r+8|0]|l[r+9|0]<<8|l[r+10|0]<<16|l[r+11|0]<<24,g[i+8|0]=r,g[i+9|0]=r>>>8,g[i+10|0]=r>>>16,g[i+11|0]=r>>>24,g[i+12|0]=A,g[i+13|0]=A>>>8,g[i+14|0]=A>>>16,g[i+15|0]=A>>>24,g[i+16|0]=0,i>>>0<=c>>>0)break r;for(A=l[ee+6|0],ce=0,a=c;;){for(p=bt(Z,a,(f+16|0)+z(ce,12)|0,255&A);A=l[0|a],a=a+1|0,(0|A)!=32;);if(A=0,g[ee+6|0]=0,ce=ce+1|0,!(a>>>0<i>>>0))break}}else{if(e[47352]=0,p=bt(Z,A,r=(f+1584|0)+z(w,12)|0,l[r+6|0]),(0|(a=e[47352]))>l[r+18|0]&&(g[r+18|0]=a,e[47352]=0),!(!(4096&p)|l[0|A]==32))for(;jA(f+624|0,0,150),e[f+624>>2]=538976288,e[f+628>>2]=538976288,g[f+632|0]=32,bt(Z,wt(m,A,a=Gt(f+16|0,A)),r,0),l[0|(A=A+a|0)]!=32;);50331648&p&&(Y=(A=Ke|(~e[33264]+et|0)!=(0|w))?Y:10,A|!oa||(e[oa>>2]=4,Y=10))}if(128&p&&!((0|(r=e[33264]))<=0)){if(A=0,a=r,i=3&r)for(;E=(f+1584|0)+z(a+w|0,12)|0,e[E>>2]=1048576|e[E>>2],a=a-1|0,(0|i)!=(0|(A=A+1|0)););if(r>>>0>=4)for(;A=(f+1584|0)+z(a+w|0,12)|0,e[A>>2]=1048576|e[A>>2],e[(r=A-12|0)>>2]=1048576|e[r>>2],e[(r=A-24|0)>>2]=1048576|e[r>>2],e[(A=A-36|0)>>2]=1048576|e[A>>2],a=a-4|0;);e[33264]=a}}if(i=e[49572],(0|et)<=(0|(w=w+1|0)))break e;if(!((0|i)<991))break}}if((0|(a=e[47351]))<(0|(c=e[47350]))){for(he=e[47202],Ke=e[49846],ce=e[47352];;){A=(r=e[198304+(a<<2)>>2])>>8;e:{A:switch((31&r)-9|0){case 0:he=A;break e;case 4:Ke=A;break e;case 3:break A;default:break e}ce=r>>>0>=256?A+ce|0:0}if(!(!(128&r)&(0|c)>(0|(a=a+1|0))))break}e[47352]=ce,e[47351]=a,e[49846]=Ke,e[47202]=he}e[49572]=i+2,e[(A=190288+(i<<3)|0)>>2]=589824,b[A+4>>1]=s,e[A+8>>2]=589824,b[A+12>>1]=s,r=et&&e[47199]?Y:10,e[33285]?A=0:(A=e[33283],A=e[A>>2]==e[A+4>>2]),Y=A?r:Y,w=dt,c=0,et=0,J=m=J-32192|0,e[m+24>>2]=0,e[m+28>>2]=0,e[m+16>>2]=0,e[m+20>>2]=0,e[m+8>>2]=0,e[m+12>>2]=0,e[m>>2]=0,e[m+4>>2]=0,s=e[49572],o=M[190284+(s<<3)>>1];e:{if((0|(a=s-3|0))<0)A=a;else{for(;;){if(c=(0|(r=127&l[3+(A=190288+(a<<3)|0)|0]))<(0|c)?c:r,M[A+4>>1])A=a;else if(A=-1,r=(0|a)>0,a=a-1|0,r)continue;break}if(c>>>0>3)break e}for(;;){if((0|(A=A-1|0))<0)break e;if(64&l[0|(r=190288+(A<<3)|0)]){g[r+3|0]=4;break e}if(!(l[r+3|0]<4))break}}if(A=e[Z+292>>2],a=0,(0|s)<=0)c=0;else for(E=-1,c=0;;){r=A,e[Z+292>>2]!=(0|A)&&(b[(A=190288+(a<<3)|0)>>1]=32|M[A>>1]),(0|c)>0&&(ee=e[4+(p=190288+(a<<3)|0)>>2],e[(i=190288+(A=a-c<<3)|0)>>2]=e[p>>2],e[i+4>>2]=ee,(0|E)!=-1&&(b[4+(A+190288|0)>>1]=E),E=-1);e:{if(l[2+(190288+(i=a<<3)|0)|0]==21){if(A=l[7+(p=i+190288|0)|0],2&l[0|p])break e;A:if((0|A)!=(0|r)){if(p=l[10+(i+190288|0)|0]-9|0){if((0|p)==12)break A;break e}if(l[18+(i+190288|0)|0]!=21)break e}(0|E)==-1&&(E=(A=M[4+(i+190288|0)>>1])||-1),c=c+1|0}A=r}if((0|s)==(0|(a=a+1|0)))break}if(e[49572]=s-c,ma(A),(r=e[Z+36>>2])&&!((0|(A=(c=e[49572])-1|0))<0))for(he=256&r,P=4&r,Ke=8&r,ee=15&r,cA=16&r,dt=2&r,r=r>>>8&1,a=0;;){if(i=c,s=a,c=A,(0|(A=l[2+(p=190288+(MA=A<<3)|0)|0]))==21){e:{A:{if((0|(a=i-2|0))>=0)for(;;){if(l[2+(190288+(A=a<<3)|0)|0]==21)break A;if(A=(0|a)>0,a=a-1|0,!A)break}A=e[Z+292>>2];break e}A=l[7+(A+190288|0)|0]}ma(A),A=l[p+2|0]}if(a=s,(A=e[144464+((255&A)<<2)>>2])&&(a=r,!(32&l[0|p]))){a=l[A+11|0],E=0,dt&&((0|(i=l[0|A]))!=118&(0|i)!=82||(s=cA?0:s,E=1));e:{A:{r:{s:switch((i=253&a)-4|0){case 1:break r;case 0:break s;default:break A}if(ee&&(a=1,!s)||(0|(a=s))!=2||(a=2,!(A=l[A+13|0])))break e;g[p+2|0]=A;break e}if(ee&&(a=2,!s)||(0|(a=s))!=1||(a=1,!(A=l[A+13|0])))break e;g[p+2|0]=A;break e}a=0,Ke&&(a=i?s:0)}a=A=E?0:a,M[4+(MA+190288|0)>>1]&&(a=A=P?0:A,he&&(a=A||1))}if(!((0|(A=c-1|0))>=0))break}if(ma(e[Z+292>>2]),e[49572]<=0)cA=-2,a=0;else{for(a=-1,s=0,p=0,Ke=0;;){A=p<<3,(0|a)!=-1&&(b[4+(A+190288|0)>>1]=a),l[2+(E=A+190288|0)|0]==21&&ma(l[7+(A+190288|0)|0]),ee=e[49572];e:{if(!(32&l[0|(i=A+190288|0)])){s=(0|(r=ee-1|0))>(0|p)?e[144464+(l[10+(A+190288|0)|0]<<2)>>2]:s,!(M[i+12>>1]|(0|r)==(0|p))&&(ce=0,l[s+11|0]|!s)||(ce=1),c=l[E+2|0];A:if(!((0|(cA=e[49848]))<=0))for(r=A+190288|0,a=0;;){if(he=z(a,3),l[he+199408|0]==(255&c)&&!((P=l[2+(he+199408|0)|0])&(1^ce)|(4&l[r+3|0]?2&P:0)|(M[r+4>>1]?0:4&P))){if(c=l[1+(he+199408|0)|0],g[E+2|0]=c,!(2&l[e[144464+(c<<2)>>2]+4|0])|l[r+3|0]<2)break A;g[r+3|0]=0;break A}if((0|cA)==(0|(a=a+1|0)))break}if(!(255&c)){a=M[4+(A+190288|0)>>1];break e}}a=e[i+4>>2],A=(m+32|0)+(Ke<<5)|0,r=e[i>>2],e[A>>2]=r,e[A+4>>2]=a,r=e[144464+(r>>>14&1020)>>2],e[A+8>>2]=r,g[A+17|0]=l[r+11|0],Ke=Ke+1|0,a=-1}if(!((0|Ke)<1e3&(0|ee)>(0|(p=p+1|0))))break}if(c=0,a=0,!((0|(cA=Ke-2|0))<=0))for(;;){e:if(M[4+((m+32|0)+(c<<5)|0)>>1]){for(r=(0|c)>(0|cA)?c:cA,a=0,A=c;;){if((0|A)!=(0|r)){if(a=(0|a)>(0|(i=l[3+((s=m+32|0)+(A<<5)|0)|0]))?a:i,!M[4+(s+((A=A+1|0)<<5)|0)>>1])continue}else A=r;break}if((0|A)<=(0|c))break e;if(r=~c+A|0,s=0,i=A-c&7)for(;g[6+((m+32|0)+(c<<5)|0)|0]=a,c=c+1|0,(0|i)!=(0|(s=s+1|0)););if(r>>>0<7)break e;for(;g[6+(r=(m+32|0)+(c<<5)|0)|0]=a,g[r+38|0]=a,g[r+70|0]=a,g[r+102|0]=a,g[r+134|0]=a,g[r+166|0]=a,g[r+198|0]=a,g[r+230|0]=a,(0|(c=c+8|0))!=(0|A););}else A=c+1|0;if(c=A,!((0|cA)>(0|A)))break}}for(e[m+40>>2]=e[36125],ma(e[Z+292>>2]),Ve=(0|a)<4,p=1,he=1,ee=0,r=0,a=0,dt=0;;){e:{A:{r:{s:{if(r){if(s=(A=m+32|0)+((E=a-1|0)<<5)|0,ee=l[2+(A+(a<<5)|0)|0],(0|E)>0){if(A=p-(a=(0|p)>0)|0,E>>>0>=(c=a?p:2)>>>0)for(;i=(a=(m+32|0)+(c<<5)|0)-32|0,p=e[a+12>>2],e[i+8>>2]=e[a+8>>2],e[i+12>>2]=p,p=e[a+4>>2],e[i>>2]=e[a>>2],e[i+4>>2]=p,p=e[a+28>>2],e[i+24>>2]=e[a+24>>2],e[i+28>>2]=p,p=e[a+20>>2],e[i+16>>2]=e[a+16>>2],e[i+20>>2]=p,(0|E)>=(0|(c=c+1|0)););p=A}ce=e[144464+(ee<<2)>>2],e[s>>2]=0,e[s+4>>2]=0,e[s+24>>2]=0,e[s+28>>2]=0,e[s+16>>2]=0,e[s+20>>2]=0,e[s+8>>2]=0,e[s+12>>2]=0,g[s+2|0]=r,A=e[144464+(r<<2)>>2],e[s+8>>2]=A,ee=s}else{if((0|a)>=(0|cA)|(0|dt)>=997)break s;i=l[2+(s=(c=a<<5)+(m+32|0)|0)|0],A=e[144464+(i<<2)>>2],e[s+8>>2]=A,E=M[s+4>>1],(0|i)==21&&ma(l[7+(c+(m+32|0)|0)|0]),p=E?a:p,ce=e[144464+(l[s+34|0]<<2)>>2],e[s+40>>2]=ce,E=a}if(!A){r=0,a=E+1|0;continue}if(tr(Z,256,s,m+32040|0,m),(0|(a=e[m+32052>>2]))>0&&(c=(m+32|0)+(E<<5)|0,ce=e[144464+(a<<2)>>2],e[c+40>>2]=ce,g[c+34|0]=a,g[c+49|0]=l[ce+11|0]),a=0,r)r=A;else if((0|(c=e[m+32056>>2]))<=0)r=A;else{r=e[144464+(c<<2)>>2],e[s+8>>2]=r,a=l[s+2|0],g[s+2|0]=c,c=M[s>>1];i:if(l[r+11|0]!=2)b[s>>1]=65531&c;else{if(b[s>>1]=4|c,l[A+11|0]==2)break i;g[s+3|0]=0}tr(Z,256,s,m+32040|0,m)}if((0|(i=e[m+32048>>2]))<=0)c=r;else{if(c=e[144464+(i<<2)>>2],g[s+2|0]=i,e[s+8>>2]=c,A=l[c+11|0],Ke=1,(0|i)==1){MA=(0|A)==2;break A}i=M[s>>1];i:if((0|A)!=2)b[s>>1]=65531&i;else{if(b[s>>1]=4|i,l[r+11|0]==2)break i;g[s+3|0]=0}tr(Z,256,s,m+32040|0,m)}if(MA=0,(0|(A=l[c+11|0]))!=2){Ke=0;break A}if(MA=1,Ke=0,A=2,l[s+3|0]>1){et=0;break A}i=s+3|0,et=et+1|0,r=s;i:{if(8&(P=e[Z+12>>2])){for(;;){c:switch(P=r,r=r+32|0,l[P+49|0]){case 0:break A;case 2:break c;default:continue}break}if(l[0|(r=P+35|0)]>1)break A;if(l[s+6|0]<=3&&(g[0|i]=0),l[P+38|0]<4)break i;break A}if(1&et|(0|et)<2)break A;if(2&P)break r;if(Ve)r=i;else if(r=i,M[s+36>>1])break r}g[0|r]=0;break A}e[36423]=dt+2,b[(A=145840+(dt<<5)|0)>>1]=0,g[A+2|0]=9,g[A+20|0]=2,e[A+12>>2]=Y,b[A+4>>1]=o,g[A+17|0]=0,g[A+18|0]=0,e[A+8>>2]=e[36125],b[A+32>>1]=0,g[A+34|0]=9,g[A+52|0]=0,e[A+44>>2]=0,b[A+36>>1]=0,g[A+49|0]=0,g[A+50|0]=0,e[A+40>>2]=e[36126],ma(e[Z+292>>2]),J=m+32192|0;break e}et=1}if(!(8&(r=M[s+32>>1]))|(0|E)<=0||(i=l[ce+11|0])>>>0>15|!(1<<i&457)||(a=l[ce+10|0],b[s+32>>1]=8^r),Qe=M[s+36>>1]){A:if(r=e[Z+4>>2]){switch(0|A){default:a=512&r?11:a;break;case 0:break A;case 2:}if(l[ce+11|0]==2){(i=12&r)&&(a=(0|i)!=12?23:11);r:if(MA){switch(3&r){case 2:a=10;break r;case 0:break r}a=23}l[s+35|0]<4||(a=256&r?10:a)}}if(!((0|s)==(0|ee)|(0|dt)<=0)){A:{r:{s:switch(0|(r=7&e[Z>>2])){case 0:break A;case 1:break s;default:break r}if(a-12>>>0>4294967293)break A}a=l[r+101916|0]}a=e[47205]>0?24:a}}if(e[s+72>>2]=e[144464+(l[s+66|0]<<2)>>2],r=e[m+32060>>2],r=a||r||a,!Ke){g[17+(i=145840+(P=dt<<5)|0)|0]=A,e[i+8>>2]=c,g[i+16|0]=0,b[i>>1]=M[s>>1],g[i+3|0]=15&l[s+3|0],g[i+6|0]=l[s+6|0],a=l[s+7|0],b[i+4>>1]=0,g[i+7|0]=a,Ke=l[c+10|0],g[i+2|0]=Ke;A:if(a=M[s+4>>1]){if(b[i+4>>1]=a,w=1&w?5:1,g[20+(s=P+145840|0)|0]=w,a=he,he=0,!a){w=0;break A}g[s+20|0]=8|w,w=0}else g[20+(P+145840|0)|0]=0;e[12+(a=P+145840|0)>>2]=e[m+32084>>2]<<1,!Qe|(0|Ke)!=24||(0|(s=e[47205]))<=0||(e[i+8>>2]=e[36126],e[a+12>>2]=z(s,14)),(1<<A&428?A>>>0<=8:0)|2&l[c+7|0]&&(e[a+12>>2]=128,g[i+16|0]=0),g[21+(A=P+145840|0)|0]=255,g[A+22|0]=255,b[A+18>>1]=5120,dt=dt+1|0}a=E+1|0;continue}break}b[88922]=1,e[44462]=0,qr&&(b[145776+(e[36423]<<5)>>1]=2,A=198304+(e[47350]<<2)|0,e[A>>2]=128,e[(A=A-4|0)>>2]=128|e[A>>2]),g[190268]=at>>>19&1,Ps&&(e[Ps>>2]=at<<14>>31&189360)}J=f+6832|0,cA=e[47192],MA=e[t+12>>2],r=0,i=0,p=0,P=0,ee=0,Zt=0,Y=0,J=o=J-6e3|0;e:if(!((0|(s=(dt=e[36423])-1|0))<=0)){for(;g[2+(o+z(r,6)|0)|0]=0,4&l[145840+(A=r<<5)|0]?(a=o+z(P,6)|0,g[a+1|0]=0,A=A+145840|0,g[a+3|0]=l[A+49|0],A=l[A+3|0],g[0|a]=A,P=P+1|0,Zt=(A>>>0>3)+Zt|0):l[e[8+(A+145840|0)>>2]+10|0]!=27|(0|P)<=0||(A=(o+z(P,6)|0)-4|0,g[0|A]=4|l[0|A]),(0|s)!=(0|(r=r+1|0)););if(g[o+z(P,6)|0]=0,P)if(e[cA+148>>2]==1){if(!((0|dt)<=0)){for(A=-2&dt,a=1&dt,r=145840;p=l[r+17|0]==2&&l[r+3|0]>3?i:p,p=l[r+49|0]==2&&l[r+35|0]>3?1|i:p,r=r- -64|0,i=i+2|0,(0|A)!=(0|(ee=ee+2|0)););!a|l[r+17|0]!=2||(p=l[r+3|0]>3?i:p)}if(g[3+(c=145840+(A=p<<5)|0)|0]=7,e[cA+212>>2]==30313&&(l[7+(A=A+145840|0)|0]||(g[A+7|0]=aa(55),dt=e[36423])),!((0|dt)<=0)){for(ee=0,r=145840,A=145840,i=E=e[36125],s=0,he=1;;){if(l[r+17|0]?w=e[36125]:(w=e[36125],E=(a=l[e[r+8>>2]+14|0]>50)?w:E,he|=a),a=l[r+20|0]?w:i,4&l[0|r]){w=l[r+7|0],i=e[144464+(w<<2)>>2];A:{if((0|(P=e[cA+212>>2]))==6840683){if(e[a>>2]!=49||(P=e[i>>2]-49|0)>>>0>5|!(1<<P&41))break A;g[A+7|0]=aa(50),P=e[cA+212>>2]}if(!((0|P)!=6516078&(0|P)!=31336)){P=0,w||(s=aa(1&(P=s|he)?13621:12593),g[r+7|0]=s,i=e[144464+(s<<2)>>2]),(0|p)!=(0|ee)|(1024|e[i>>2])!=13621||(g[c+3|0]=6),e[E>>2]==3420466&&(g[A+7|0]=aa(e[i>>2]==3420466?13619:12594));r:{if(e[a>>2]==12597){if((0|(w=e[i>>2]))!=12597)break r;g[A+7|0]=aa(13109)}w=e[i>>2]}s=P,(0|w)==12593&&((0|(w=e[E>>2]))==13621&&(g[r+7|0]=aa(12850),w=e[E>>2]),(0|w)==13619&&(g[r+7|0]=aa(13107),w=e[E>>2]),(0|w)==3420466&&(g[r+7|0]=aa(13364)),g[r+3|0]=0)}}he=0,E=i,A=r}else i=a;if(r=r+32|0,!((0|(ee=ee+1|0))<(0|(a=e[36423]))))break}if(i=0,r=145840,!((0|a)<=0))for(;4&l[0|r]&&((A=l[r+7|0])||(g[r+7|0]=17,A=17),A=e[144464+(A<<2)>>2],g[r+21|0]=l[A+12|0],g[r+22|0]=l[A+13|0]),r=r+32|0,(0|a)!=(0|(i=i+1|0)););}}else{if(A=e[cA+152>>2],A=cA+z(Ve=(0|A)>7?1:A,6)|0,Z=l[0|(Ve?A+637:cA+157)],at=l[0|(Ve?636+(A+MA|0):156+(cA+MA|0))],g[133068]=(0|MA)==4,!((0|P)<=0)){for(Ke=P-1|0,ce=MA-1>>>0>1,a=0,s=0;;){f=o+z(s,6)|0,Y=((A=l[0|f])<<24>>24>3)+Y|0;A:if((0|A)==6){A=s-3|0,r=s;r:{for(;;){if((0|r)<=(0|a)|(0|A)>=(0|r))break r;s:switch(c=o+z(r=r-1|0,6)|0,l[0|c]-4|0){case 2:break r;case 0:break s;default:continue}break}g[0|c]=3}r=s;r:{for(;;){if((0|P)<=(0|(r=r+1|0)))break r;s:switch(l[o+z(r,6)|0]-4|0){case 0:break r;case 2:break s;default:continue}break}g[f+2|0]=2,g[0|f]=5,A=a;break A}if(l[0|f]==6){g[f+2|0]=2,m=0;r:if((0|P)<=(0|(A=s+1|0)))c=s,hr=0;else if(hr=1,(0|(i=g[o+z(A,6)|0]))>4)c=s;else{for(p=(Zt-Y|0)>1,c=s;;){if(r=A,(255&i)==4&&(A=p+1|0,p=1,!((0|A)<=1))){A=r;break r}if(hr=(0|P)>(0|(A=r+1|0)),(0|A)==(0|P))break;if(c=r,(0|(i=g[o+z(A,6)|0]))>4)break r}c=Ke,A=P}i=-1,w=0,p=0,he=-1,ee=0,E=-1;r:{if((0|(r=a))<(0|A)){for(;i=(Qe=(0|(E=g[o+z(r,6)|0]))>3)&&(0|i)<0?r-a|0:i,m=(ee=(0|p)>(0|E))?m:(0|p)<(0|E)?r:w,he=Qe?r:he,w=ee?w:r,Qe=(0|r)!=(0|c),p=ee?p:E,r=r+1|0,Qe;);if(ee=w,E=he,(0|i)>=0)break r}i=A,w=ee,he=E}e[33269]=c-w,e[33268]=i,e[33270]=w,e[33271]=m;r:if(l[133068])e[33270]=A,e[33271]=A;else if((0|he)>=0){if((0|A)!=(0|P))break r;g[o+z(he,6)|0]=7}else g[o+z(w,6)|0]=7;Za(o,Ve,a,A,at),!hr&!!(0|MA)||(at=ce?l[cA+156|0]:l[cA+157|0])}else A=a}else A=a;if((0|A)>=(0|s))a=A;else if(4&l[f+2|0]){for(a=s+1|0,i=-1,he=0,w=0,p=0,r=A,m=-1;i=(ee=(0|(c=g[o+z(r,6)|0]))>3)&&(0|i)<0?r-A|0:i,he=(E=(0|c)<(0|p))?he:(0|c)>(0|p)?r:w,m=ee?r:m,w=E?w:r,ee=(0|r)!=(0|s),p=E?p:c,r=r+1|0,ee;);e[33269]=s-w,e[33270]=w,e[33271]=he,e[33268]=(0|i)<0?a:i,l[133068]?(e[33270]=a,e[33271]=a):(0|m)>=0?g[o+z(m,6)|0]=7:g[o+z(w,6)|0]=7,Za(o,Ve,A,a,Z)}else a=A;if((0|P)==(0|(s=s+1|0)))break}if(!((0|a)>=(0|P))){for(i=-1,he=0,w=0,p=0,r=a,m=-1;i=(c=(0|(A=g[o+z(r,6)|0]))>3)&&(0|i)<0?r-a|0:i,he=(s=(0|A)<(0|p))?he:(0|A)>(0|p)?r:w,m=c?r:m,w=s?w:r,p=s?p:A,(0|P)!=(0|(r=r+1|0)););e[33270]=w,e[33271]=he,e[33269]=~w+P,e[33268]=(0|i)<0?P:i,l[133068]?(e[33270]=P,e[33271]=P):(0|m)>=0?g[o+z(m,6)|0]=7:g[o+z(w,6)|0]=7,Za(o,Ve,a,P,at)}}if((0|dt)<=0)break e;for(r=0,ee=0;;){if(E=a=145840+(c=r<<5)|0,A=o+z(ee,6)|0,i=l[0|A],g[a+3|0]=i,4&l[0|a]){s=c+145840|0,a=l[A+4|0],g[s+21|0]=a,p=l[A+5|0],g[s+16|0]=0,g[s+22|0]=p;A:{if(1&(w=l[A+2|0]))A=2;else{if(i>>>0<6)break A;A=l[A+1|0]}g[s+16|0]=A}a>>>0<=(255&p)>>>0?(A=p,p=a):(g[s+21|0]=p,g[s+22|0]=a,A=a),(a=l[7+(c+145840|0)|0])&&(A=(255&A)+(255&p)>>>1|0,a=e[144464+(a<<2)>>2],g[s+22|0]=A+l[a+13|0],g[s+21|0]=A+l[a+12|0]),2&w&&(g[E+3|0]=8|i),ee=ee+1|0}if((0|dt)==(0|(r=r+1|0)))break}}}if(J=o+6e3|0,ee=e[47192],r=0,ce=0,m=0,Y=0,J=o=J-160|0,e[36423]>=2)for(MA=e[30450],i=1;;){if(i=(A=i)+1|0,P=l[3+(s=145840+(p=A<<5)|0)|0],2&(w=M[s>>1])){for(;(31&(c=e[198304+(Y<<2)>>2]))==2&&(Ns(127&c,c>>>8|0),e[36432]=110,e[36433]=100,e[36434]=450,e[36430]=5,w=e[50786],E=e[32972],(0|(a=e[E+84>>2]))>0&&(w=(0|z(a,w))/100|0),he=l[((0|(a=(0|w)>=359?359:w))<=80?80:a)+101856|0],a=(0|(a=(0|w)>=450?450:w))>399?6:(0|a)>379?7:he,e[32526]=(0|z(a,e[E+72>>2]))/256,e[32527]=(0|z(a,e[E+76>>2]))/256,e[32528]=(0|z(a,e[E+80>>2]))/256,a>>>0>7||(E=a-1|0,e[32528]=E,e[32526]=a,e[32527]=E)),Y=Y+1|0,!(128&c););w=M[s>>1]}E=i<<5,he=A-1|0,a=7&P;e:{A:{r:{s:{i:{c:{o:{u:{l:{n:switch(at=l[17+(p+145840|0)|0],0|(c=4&w?2:at)){case 2:break i;case 3:case 8:break c;case 5:break o;case 6:case 7:break u;case 4:break l;case 0:break n;default:break e}r=0;break e}if((0|(A=l[17+(145840+(he<<5)|0)|0]))!=6?(a=(0|A)==4?60:e[34063]>0||a>>>0<4?48:60,g[18+(p+145840|0)|0]=a):(a=25,g[18+(p+145840|0)|0]=25),!(16&l[0|ee])|!l[20+(p+145840|0)|0]||(g[18+(p+145840|0)|0]=60,a=60),64&l[e[8+(p+145840|0)>>2]+6|0]&&(a=a+30|0,g[18+(p+145840|0)|0]=a),r=0,!(8&w))break e;g[18+(p+145840|0)|0]=l[ee+164|0]+a;break e}!(s=l[20+(A=p+145840|0)|0])|1&g[e[A+8>>2]+7|0]&l[17+(145840+(he<<5)|0)|0]==2||(g[18+(p+145840|0)|0]=15),a=l[17+(E+145840|0)|0],8&l[e[8+(p+145840|0)>>2]+4|0]|a|l[17+(145840+(he<<5)|0)|0]!=8||(g[18+(p+145840|0)|0]=25),64&l[e[8+(145840+(A=he<<5)|0)>>2]+5|0]&&(g[18+(p+145840|0)|0]=30),!s|!(16&e[ee>>2])||(g[18+(p+145840|0)|0]=30);u:if(l[20+(E+145840|0)|0]|!(32&l[e[8+(p+145840|0)>>2]+4|0])|(0|a)!=4)e[12+(p+145840|0)>>2]=256;else{if(s=p+145840|0,l[17+(A+145840|0)|0]==2){e[s+12>>2]=200;break u}e[s+12>>2]=150}if((0|c)!=7||(ce|=(0|a)==2,(254&l[17+(A+145840|0)|0])!=2))break e;e[12+(p+145840|0)>>2]=e[12+(A+145840|0)>>2]+255>>>1;break e}(254&(a=l[17+(145840+(A=he<<5)|0)|0]))==6|(0|a)==3|32&e[e[8+(A+145840|0)>>2]+4>>2]&&(g[18+(p+145840|0)|0]=30);o:if((254&(s=l[17+(E+145840|0)|0]))==2){ce=l[20+(E+145840|0)|0]&&(0|s)!=2?ce:1,g[18+(s=p+145840|0)|0]=40,P=0;u:{switch(0|a){case 0:if((A=e[12+(A+145840|0)>>2])>>>0>39)break u;P=40-A|0;break u;case 2:break u}if(l[20+(p+145840|0)|0])break o;P=20;l:switch(a-3|0){case 1:if(P=0,!(8&l[e[8+(A+145840|0)>>2]+4|0]))break u;break o;case 0:break u;case 5:break l;default:break o}P=12}g[s+18|0]=P}if(!(16&l[0|ee])|!l[20+(p+145840|0)|0]||l[18+(A=p+145840|0)|0]>19)break e;g[A+18|0]=20;break e}s=l[ee+296|0],c=a=p+145840|0,e[a+12>>2]=256,g[a+19|0]=s;c:if(l[a+20|0]){w=25;o:switch(l[17+(145840+(he<<5)|0)|0]-2|0){case 0:if(w=12,1&g[e[8+(p+145840|0)>>2]+7|0])break c;break;case 1:break o;default:break c}g[18+(p+145840|0)|0]=w}if((0|(E=l[17+(E+145840|0)|0]))==2){m=1;break e}if(g[22+(s=p+145840|0)|0]=r,(254&l[17+(145840+(a=he<<5)|0)|0])==2)break s;if(a=r,(0|(c=e[36423]))<=(0|A))break A;for(;;){if(l[17+(145840+(a=A<<5)|0)|0]==2){a=l[22+(a+145840|0)|0],g[s+22|0]=a;break A}if((0|c)==(0|(A=A+1|0)))break}break r}if(cA=p+145840|0,Ke=a^a>>>0<2,a=(dt=8&P)?25:l[296+(Ke+ee|0)|0]-m|0,g[cA+19|0]=a,(e[36423]-3|0)>(0|A)||(0|(c=255&a))<=(0|(a=e[ee+52>>2]))||(g[cA+19|0]=a),a=0,P=0,!(w=l[s+52|0]))for(;c=e[s+40>>2],P=l[s+49|0]==2?(~e[c+4>>2]>>>20&1)+P|0:P,a=l[c+10|0]==27?2:a,c=s,s=s+32|0,!(w=l[c+84|0]););c=cA+96|0,A=145840+(Ve=A+2<<5)|0,e[34063]=P,f=l[e[s+40>>2]+10|0],E=E+145840|0,l[17+(Ve+145840|0)|0]|l[e[E+8>>2]+10|0]!=23?(s=c,c=A,A=E):s=p+145968|0,E=l[e[c+8>>2]+15|0];i:if(P)E=l[e[ee+96>>2]+(l[e[A+8>>2]+15|0]+z(E,10)|0)|0],l[A+17|0]!=8|(254&l[c+17|0])!=4||(E=8&l[e[s+8>>2]+4|0]?E-15|0:E);else{if(Z=e[ee+100>>2],Ve=l[e[A+8>>2]+15|0],s=l[A+20|0],E=l[Z+(Ve+z(s|l[c+20|0]?(0|E)==1:E,10)|0)|0],!s|!(32&l[0|ee]))break i;E=l[1+(Z+z(Ve,10)|0)|0]+E>>>1|0}s=w>>>1|0,Ve=!P,w=(0|(E=(0|z(e[130104+(P?(0|P)==1?4:8:0)>>2],E))/128|0))<=8?8:E;i:if((0|Ke)!=7)dt&&(w=e[ee+200>>2]+w|0);else{if(w=(E=e[ee+200>>2])+w|0,!dt)break i;w=((0|E)/2|0)+w|0}E=s&Ve|(0|f)==27,(s=M[304+(ee+(Ke<<1)|0)>>1])||(s=M[ee+316>>1]),w=z(s<<16>>16,w),(P=l[7+(s=p+145840|0)|0])&&(Ke=l[e[144464+(P<<2)>>2]+14|0])&&(w=(0|z(w,Ke))/100|0),(E|(0|a)==2)==1&&(2097152&(a=e[ee+12>>2])||(w=(0|z(262144&a?282:256+((280-(l[e[8+(p+145840|0)>>2]+14|0]<<1)|0)/3|0)&65535,w))/256|0)),Ke=p+145840|0,a=z(e[32526],e[ee+196>>2]),dt=(0|at)!=2?256:(0|((0|a)>(0|w)?w:a))/128|0,e[Ke+12>>2]=dt,(a=l[Ke+16|0])>>>0>=19&&(Hn(84371,28,MA),g[Ke+16|0]=0,P=l[s+7|0],a=0),w=a+1|0,(a=255&P)?(Vi(a,o+8|0),a=Yn(e[o+132>>2])):a=e[129280+((255&w)<<2)>>2],E=p+145840|0,1&(m|ce)&&(s=145840+(p=he<<5)|0,m=l[0|a],a=l[E+21|0],a=((0|z(m,l[E+22|0]-a|0))/256|0)+a|0,g[s+22|0]=a,r=(a-(r=(0|a)==255?255:r)|0)>16?a-16|0:r,g[s+21|0]=r,s=0,(0|r)<(0|a)&&(g[Ke+16|0]=w,s=2),e[12+(r=p+145840|0)>>2]=dt,g[r+16|0]=s,a=l[cA+19|0],g[r+19|0]=l[r+17|0]!=3&&a>>>0>18?18:a),r=(0|at)!=2,s=-2&(a=M[A>>1]),b[A>>1]=s;i:{c:{o:switch(l[A+17|0]-3|0){case 5:if(l[c+17|0]==2)break i;s=1|a;break c;case 0:break o;default:break i}if(b[A>>1]=1|a,l[c+17|0]!=2&&e[e[A+8>>2]>>2]!=12146)break i}b[A>>1]=s}r?(0|(A=r<<4))<=((a=l[E+22|0])-(s=l[E+21|0])|0)||(s=(0|(A=a-A|0))>0?A:0,g[E+21|0]=s):(a=l[E+22|0],s=l[E+21|0]),A=255&s,r=((0|z(l[e[129280+(l[Ke+16|0]<<2)>>2]+127|0],a-A|0))/256|0)+A|0,m=0,ce=0;break e}s=e[12+(a+145840|0)>>2],e[c+12>>2]=s,(0|at)==3&&(s=e[32526],e[c+12>>2]=s),a=r;s:switch(E-5|0){case 0:e[c+12>>2]=(z(s,160)>>>0)/100;break r;case 2:break s;default:break A}e[c+12>>2]=(z(s,120)>>>0)/100}a=r}ce=0,g[16+(A=p+145840|0)|0]=0,s=A,a=(A=255&a)-16|0,g[s+21|0]=A>>>0>=a>>>0?a:0}if(!(e[36423]>(0|i)))break}if(J=o+160|0,15&(s=e[47197])|e[36456]){A=0,c=0,J=a=J-80|0;e:if((r=e[33222])||(e[33223]=500,r=Ct(500),e[33222]=r,r)){if(!((e[36423]-2|0)<2)){for(A=s>>8,ee=128&s?0:A,P=A&s<<24>>31,E=2&s,s=a+32|1,p=1;;){if(as(a,e[8+(i=145840+(he=p<<5)|0)>>2],i,E,a+72|0),A=a+32|0,(13&(r=l[i+20|0]))==1&&(g[a+32|0]=32,A=s),!ee|(0|ee)!=32&!!(0|r)|p>>>0<2||(Gt(a+76|0,a),e[a+76>>2]-880>>>0>4294967103||(A=zr(ee,A)+A|0)),4&l[0|i]&&((r=l[3+(he+145840|0)|0])>>>0<2||(r=r>>>0>=5?5:r,r=E?r>>>0>3?712:716:g[r+94144|0],e[a+76>>2]=r,A=zr(r,A)+A|0)),w=0,e[a+72>>2]=0,l[0|(r=a)])for(;r=Gt(a+76|0,r)+r|0,e[a+72>>2]>>>w-1&1|!P|(0|w)<=0||(m=e[a+76>>2])-880>>>0>4294967103||Ei(m)&&(A=zr(P,A)+A|0),w=w+1|0,A=zr(e[a+76>>2],A)+A|0,l[0|r];);if(l[e[i+8>>2]+10|0]!=21&&(8&(r=M[i>>1])&&(A=as(A,e[36128],i,E,0),r=M[i>>1]),!(4&r)|l[17+(he+145840|0)|0]==2||(A=as(A,e[36136],i,E,0)),(r=l[7+(he+145840|0)|0])&&(A=as(A,e[144464+(r<<2)>>2],i,E,0))),(A=(i=A-(a+32|0)|0)+c|0)>>>0<ue[33223])r=e[33222];else{if(r=A+500|0,e[33223]=r,!(r=Kr(e[33222],r))){e[33223]=0,r=86135;break e}e[33222]=r}if(g[(w=i)+(i=a+32|0)|0]=0,qA(r+c|0,i),c=A,!((0|(p=p+1|0))<(e[36423]-2|0)))break}if(!r){r=86135;break e}}g[A+r|0]=0}else e[33223]=0,r=86135;J=a+80|0,15&l[188788]&&(e[t>>2]=r,fr(e[47195],84367,t)),(A=e[36456])&&ct[0|A](r)}l[190280]?(e[36423]=0,A=1):(oA(0),(A=e[t+8>>2])?(J=r=J+-64|0,ar(r,A,60),Li(r,1),a=0,(A=Tt(r,0))&&(a=A,l[202976]&&(a=Tt(202976,2))),J=r- -64|0,e[44468]=a):a=e[44468],A=1,a&&(r=e[32972],(a=Ct(1344))&&(r=wt(a,r,1344),a=216192+(e[50758]<<4)|0,e[a>>2]=11,e[a+8>>2]=r,r=e[50758]+1|0,e[50758]=(0|r)<=169?r:0),e[44468]=0))}else A=0,g[190280]=0;else A=0,e[36423]=0,e[50758]=0,e[50757]=0;return J=t+16|0,A}function Fe(A,t){var r=0,a=0,s=0,i=0;r=1073741825;e:{A:{r:{s:{i:{c:{o:{u:{l:{n:{p:{C:{m:{b:{h:{E:{w:{y:{L:{V:{W:{M:{v:{D:{S:{q:{Y:{Z:{F:{se:{H:{ye:{U:{d:{f:{$:{k:{ee:{I:{a:{Ve:{J:{t:{fe:{R:{pe:{he:{We:{le:{N:{Ee:{B:{Me:{_:{me:{Ge:{je:{De:{Qe:{Te:{Pe:{ze:{Se:{Ce:{Ue:{Ae:{Fe:{Ke:{Ne:{Oe:{G:{be:{Ze:{hA:{mA:{CA:{bA:{IA:{wA:{kA:{xA:{vA:{BA:{yA:{EA:{MA:{GA:{DA:{QA:{TA:{PA:{zA:{SA:{FA:{NA:{OA:{LA:{YA:{HA:{RA:{VA:{WA:{jA:switch(0|t){case 0:t=A-9>>>0<5?1073741825:0,t=(A=(0|A)==133)?1073741825:t;break S;case 1:g:{Q:{T:{P:{z:{O:{X:{j:{te:{ie:{re:{ne:{ce:{ge:{if((0|(t=-256&A))<=2047){if(!t)break ge;if((0|t)==1536)break ce;if((0|t)!=1792||(r=0,a=1,(0|A)!=1807))break g;break t}if((0|t)<=69631){if((0|t)==2048)break ne;if((0|t)!=8192)break g;switch(r=131076,A-8204|0){case 1:break re;case 0:break t;default:break ie}}if((0|t)==69632)break te;if((0|t)!=917504)break g;switch(r=8388608,A-917505|0){case 62:break T;case 58:break P;case 57:break z;case 45:break O;case 43:break X;case 32:break j;case 0:break t;default:break Q}}if(r=16,(0|A)!=173)break g;break t}if(r=0,a=1,A-1536>>>0<6)break t;a=(0|A)==1757,t=(A=(0|A)==1564)?2:0;break D}if(r=0,a=1,(0|A)!=2274)break g;break t}return $=64,4}if(r=1073741826,(-2&A)==8206)break t;if(A-8234>>>0<5)return $=0,2;if(r=128,A-8289>>>0<4||(r=2,A-8294>>>0<4))break t;if(r=8388608,A-8298>>>0>=6)break g;break t}t=!(A-69821&-17),A=0;break v}$=536870976;break M}$=268435520;break M}$=-2147483584;break M}$=134217792;break M}$=67108928;break M}$=1073741888;break M}if(r=131072,a=64,A-917536>>>0<96)break t}break a;case 2:g:{Q:{T:{P:{z:{O:{X:{if((0|(t=-256&A))<=130303){if((0|t)<=127743){if((0|t)<=64767){if((0|t)<=11007){if((0|t)==8192)break X;if((0|t)!=9216)break g;if(A-9255>>>0>=25)break O;break I}if((0|t)==11008)break z;if((0|t)!=11776||(r=-2147483648,A-11845>>>0>=59))break g;break t}if((0|t)<=126975){if((0|t)==64768)break P;if((0|t)!=65280||(r=4194304,A-65520>>>0>=9))break g;break t}if((0|t)==126976|(0|t)==127232|(0|t)==127488)break J;break g}if((0|t)<=129023){if((0|t)<=128255){if((0|t)==127744|(0|t)==128e3)break J;break g}if((0|t)==128256|(0|t)==128512|(0|t)==128768)break J;break g}if((0|t)<=129535){if((0|t)==129024|(0|t)==129280)break J;break g}if((0|t)==129536|(0|t)==129792|(0|t)==130048)break J;break g}if((0|t)<=919039){if((0|t)<=917759){if((0|t)<=130815){if((0|t)==130304)break J;if((0|t)!=130560)break g;break J}if((0|t)==130816)break J;if((0|t)!=917504)break g;if((-128&A)!=917632)break T;break ee}if((0|t)<=918271){if((0|t)==917760)break Q;if(r=4194304,(0|t)!=918016)break g;break t}if((0|t)==918272|(0|t)==918528)break ee;if(r=4194304,(0|t)!=918784)break g;break t}if((0|t)<=920319){if((0|t)<=919551){if((0|t)==919040)break ee;if(r=4194304,(0|t)!=919296)break g;break t}if((0|t)==919552|(0|t)==919808)break ee;if(r=4194304,(0|t)!=920064)break g;break t}if((0|t)<=920831){if((0|t)==920320)break ee;if(r=4194304,(0|t)!=920576)break g;break t}if((0|t)==920832|(0|t)==921088)break ee;if(r=4194304,(0|t)!=921344)break g;break t}if(r=4194304,(0|A)!=8293)break g;break t}if(r=-2147483648,A-9291>>>0>=21)break g;break t}if((-16&A)==11248|A-11219>>>0<25|(0|A)==11209|A-11194>>>0<3||(0|(t=-2&A))==11124)break I;if(r=-2147483648,(0|t)!=11158)break g;break t}if(r=65536,A-64976>>>0>=32)break g;break t}if((0|A)==917504)break ee;if(r=4194304,A-917506>>>0>=30)break g;break t}if(r=4194304,A>>>0>917999)break t}t=(A=!(65534&~A))>>>16|0,A<<=16;break v;case 6:g:{Q:{T:{P:{z:{O:{X:{j:{te:{ie:{re:{ne:{if((0|(t=-256&A))<=7679){if((0|t)<=767){if(!t)break ne;if((0|t)==256)break re;if((0|t)!=512)break a;if((0|A)!=585)break ie;break W}if((0|t)==768)break te;if((0|t)==1024)break j;if((0|t)!=7424||(r=16777216,(0|A)!=7574))break a;break t}if((0|t)<=119807){if((0|t)==7680)break X;if((0|t)==8448)break O;if((0|t)!=65280||(r=256,A-65345>>>0>=6))break a;break t}if((0|t)<=120319){if((0|t)==119808)break z;if((0|t)!=120064)break a;if(A>>>0>=120070)break P;break k}if((0|t)==120320)break T;if((0|t)!=120576)break a;if(A>>>0>=120597)break Q;break k}if(r=768,A-97>>>0<6)break t;if(r=16777216,A-105>>>0>=2)break a;break t}r=(t=(0|A)==329)>>>9|0,t=(A=(0|A)==303)?16777216:t<<23;break V}if((0|A)==616)break W;if(r=16777216,(0|A)!=669)break a;break t}switch(r=128,A-976|0){case 35:break g;case 0:case 1:case 2:case 5:case 32:case 33:break t}if((-2&A)!=1012)break a;break t}a=(A=!(A-1110&-3))>>>8|0,A<<=24;break L}a=(t=(0|A)==7883)>>>8|0,t=(A=(0|A)==7725)?16777216:t<<24;break D}if(A-8458>>>0<10)break k;if((t=A-8495|0)>>>0<11)break WA;break fe}if((0|(t=-2&A))==119842)break $;if(A-119808>>>0<85)break k;if(A-119894>>>0<2|A-119946>>>0<2)break $;if((0|A)==119995|A-119896>>>0<69|A-119982>>>0<12)break k;if((0|t)==119998)break $;if(A-119997>>>0<7)break k;if(r=16777344,(0|t)==120050)break t;if(r=128,A>>>0<=120004)break a;break t}if((-2&A)==120102)break $;if(A-120094>>>0<28)break k;P:{if((0|A)<=120257){if(A-120154>>>0<2)break $;if(r=16777344,A-120206>>>0>=2)break P;break t}if(A-120258>>>0<2)break $;if(r=16777344,A-120310>>>0<2)break t}if(r=128,A>>>0<=120145)break a;break t}if(A-120362>>>0<2|A-120414>>>0<2)break $;if(r=16777344,A-120466>>>0<2)break t;if(A-120540>>>0<31|A>>>0>120571|A>>>0<120486)break k;if(r=128,A-120514>>>0>=25)break a;break t}if(A-120772>>>0<8|A-120746>>>0<25|A-120714>>>0<31|A-120688>>>0<25||(0|A)!=120597&A>>>0<120629|A-120656>>>0<31)break k;if(r=128,A-120630>>>0<25)break t;break a}break W;case 7:g:{Q:{T:{P:{z:{O:{X:{j:{te:{ie:{re:{ne:{ce:{ge:{x:{oe:{ae:{K:{ue:{de:{Ie:{we:{if((0|(t=-256&A))<=11263){if((0|t)<=3583){if((0|t)<=1535){if((0|t)==512)break we;if((0|t)==768)break Ie;if((0|t)!=1280||(r=4096,(0|A)!=1369))break a;break t}if((0|t)==1536)break de;if((0|t)==1792)break ue;if((0|t)!=2304||(r=4096,(0|A)!=2417))break a;break t}if((0|t)<=7167){if((0|t)==3584)break K;if((0|t)==6144)break ae;if((0|t)!=6656||(r=8192,(0|A)!=6823))break a;break t}if((0|t)==7168)break oe;if((0|t)==7424)break x;if((0|t)!=8192)break a;if(r=16793600,!(t=A-8305|0))break t;if((0|t)==14)break ge;break ce}if((0|t)<=43263){if((0|t)<=40959){if((0|t)==11264)break ne;if((0|t)==11776)break re;if((0|t)!=12288)break a;switch(r=8192,A-12293|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:break te;case 0:case 44:case 45:case 46:case 47:case 48:break t;default:break ie}}if((0|t)==40960)break j;if((0|t)==42496)break X;if((0|t)!=42752)break a;if(A-42775>>>0>=9)break O;break f}if((0|t)<=65279){if((0|t)==43264)break z;if((0|t)==43520)break P;if((0|t)!=43776||(r=20480,(-4&A)!=43868))break a;break t}if((0|t)==65280)break T;if((0|t)==92928)break Q;if((0|t)!=93952)break a;if(r=4096,A-94099>>>0<13)break t;if(r=8192,(-2&A)!=94176)break a;break t}if(r=16797696,(0|A)==690)break t;if(A-688>>>0<9)return $=0,20480;if(A-697>>>0<7)break f;if((0|(t=-2&A))==704)return $=0,20480;if(r=4096,A-710>>>0<10||(r=12288,(0|t)==720)||(r=20480,A-736>>>0<5))break t;r=(A=(-3&A)==748)>>>20|0,A<<=12;break y}t=(0|A)==890?20480:0,t=(A=(0|A)==884)?4096:t;break S}if(r=8192,(0|A)==1600)break t;if(r=4096,A-1765>>>0>=2)break a;break t}if(r=4096,(-2&A)==2036)break t;if(r=8192,(0|A)!=2042)break a;break t}t=(A=!(A-3654&-129))>>>19|0,A<<=13;break v}if(r=8192,(0|A)!=6211)break a;break t}if(r=12288,(0|A)==7291)break t;if(r=4096,A-7288>>>0>=6)break a;break t}if(r=16797696,(0|A)==7522||(r=20480,A-7468>>>0<63))break t;switch(r=16384,A-7588|0){default:if((0|A)==7544)break t;case 1:case 2:case 3:if(A-7579>>>0>=37)break a;break t;case 0:case 4:}return $=0,16793600}return $=0,16384}if(r=16384,A-8336>>>0>=13)break a;break t}t=(r=(0|A)==11389)>>>18|0,r=(A=(0|A)==11388)?16793600:r<<14;break w}if(r=-2147479552,(0|A)!=11823)break a;break t}if(A-12445>>>0<2)break t;if((0|A)==12540)break g}if(A-12541>>>0>=2)break a;break t}if(r=8192,(0|A)!=40981)break a;break t}if((0|A)==42508)break E;if((0|A)==42623)break f;if(r=20480,(-2&A)!=42652)break a;break t}if((0|A)==42864)return $=0,16384;if((0|A)==42888)break f;if(r=20480,(-2&A)!=43e3)break a;break t}r=(t=(0|A)==43494)>>>19|0,t=(A=(0|A)==43471)?8192:t<<13;break V}if((0|A)==43632||(0|A)==43741)break E;if(r=8192,A-43763>>>0>=2)break a;break t}if(r=12288,(0|A)==65392)break t;if(r=135168,(-2&A)!=65438)break a;break t}if(r=8192,(-2&A)==92994)break t;break a}return $=0,12288;case 8:r=128;g:{Q:{T:{P:{z:{O:{X:{j:{te:{if((0|(t=-256&A))<=12543){if((0|t)<=5887){if((0|t)<=3583){if(!t)break te;if((0|t)!=1536||(t=8388608,(0|A)!=1651))break B;break le}if((0|t)==3584)break j;if((0|t)!=4352||(r=4194304,A-4447>>>0>=2))break B;break N}if((0|t)<=8447){if((0|t)==5888)break X;if((0|t)!=6400||(t=A-6581|0)>>>0>=6)break B;r=e[(t=81432+(t<<3)|0)>>2],a=e[t+4>>2];break N}if((0|t)==8448)break O;if((0|t)!=12288||(t=2048,(0|A)!=12294))break B;break le}if((0|t)<=68863){if((0|t)<=63999){if((0|t)==12544)break z;if((0|t)!=43520)break B;if((t=A-43701|0)>>>0<8)break Q;break Ee}if((0|t)==64e3)break g;if((0|t)!=65280||(t=4194304,(0|A)!=65440))break B;break le}if((0|t)<=100095){if((0|t)==68864)break P;if((0|t)!=70400||(r=8192,(0|A)!=70493))break B;break he}if((0|t)==100096)break T;if((0|t)!=126464)break B;break N}a=(t=!(A-170&-17))>>>18|0,r=t<<14;break N}if(r=33554432,A-3648>>>0<5)break N;if(t=0,i=33554432,(0|A)==3759)break le;if(A-3776>>>0>=5)break B;break N}if(r=8388608,A-6051>>>0>=2)break B;break N}if(A-8501>>>0>=4)break B;break N}if(t=4194304,(0|A)!=12644)break B;break le}if(r=4096,(-2&A)!=68898)break B;break N}if(r=2048,A-100333>>>0<5)break N;break B}if(r=33554432,!(211>>>t&1))break Ee;break N}if((t=A-64014|0)>>>0>=28)break B;r=e[(t=81480+(t<<3)|0)>>2],a=e[t+4>>2];break N;case 10:g:{Q:{T:{P:{z:{O:{if((0|(t=-256&A))<=119807){if((0|t)<=8447){if(!t)break O;if((0|t)!=768)break a;switch(r=128,A-976|0){case 0:case 1:case 2:case 36:case 37:break t;default:break a}}if((0|t)==8448)break z;if((0|t)!=65280||(r=256,A-65313>>>0>=6))break a;break t}if((0|t)<=120319){if((0|t)==119808)break P;if((0|t)!=120064)break a;if(A>>>0>=120070)break T;break k}if((0|t)==120320)break Q;if((0|t)!=120576)break a;if(A-120772>>>0>=8)break g;break k}if(r=768,A-65>>>0>=6)break a;break t}switch(r=128,A-8450|0){case 0:case 5:break t}if(A-8458>>>0<10)break k;if((t=A-8469|0)>>>0<20)break VA;if((-4&A)==8508)break t;break Me}if(A-119982>>>0<12|A>>>0>120004|A-119977>>>0<4|A-119973>>>0<2||(0|A)==119970|(-2&A)==119966|A-119808>>>0<85)break k;if(r=128,A-119894>>>0>=71)break a;break t}if(A-120138>>>0<7|A>>>0>120145|(0|A)==120134|A-120128>>>0<5||A-120123>>>0<4|A-120094>>>0<28|(0|A)!=120070&A>>>0<120075|A-120086>>>0<7)break k;if(r=128,A-120077>>>0>=8)break a;break t}if(A-120540>>>0<31|A>>>0<120486)break k;if(r=128,A-120488>>>0>=25)break a;break t}if(A-120714>>>0<31|A-120598>>>0<31)break k;if(r=128,A-120656>>>0<31)break t;break a;case 11:g:{Q:{T:{P:{z:{O:{X:{j:{te:{ie:{re:{ne:{ce:{ge:{x:{oe:{ae:{if((0|(t=-256&A))<=43263){if((0|t)<=3839){if((0|t)<=3071){if((0|t)==2304)break ae;if((0|t)!=2816)break d;if((0|A)>3005)break x;if((0|A)!=2878)break oe;return $=0,132096}if((0|t)==3072)break ge;if((0|t)!=3328)break d;switch(r=132096,A-3535|0){case 0:case 16:break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break d;default:break ce}}if((0|t)<=6911){if((0|t)==3840)break ne;if((0|t)!=4096)break d;if(r=1024,A-4139>>>0<2)break t;switch(A-4145|0){case 0:case 7:case 10:case 11:case 37:case 38:case 49:case 54:case 55:case 82:case 83:break t;case 86:case 87:case 88:case 89:case 90:case 91:case 94:case 105:case 106:break g;default:break re}}if((0|t)==6912)break ie;if((0|t)==7168)break te;if((0|t)!=12288||(r=135168,(-2&A)!=12334))break d;break t}if((0|t)<=70399){if((0|t)<=43775){if((0|t)==43264)break j;if((0|t)!=43520)break d;return $=0,A-43643&-3?1024:4096}if((0|t)==43776)break X;if((0|t)==69888)break O;if((0|t)!=70144||(r=4096,(0|A)!=70197))break d;break t}if((0|t)<=70911){if((0|t)==70400)break z;if((0|t)!=70656)break d;t=(0|A)==70845?132096:1024,t=(A=(0|A)==70832)?132096:t;break S}if((0|t)==70912)break P;if((0|t)==71168)break T;if((0|t)!=119040)break d;switch(r=131072,A-119141|0){case 8:break f;case 1:break a;case 0:break t;default:break Q}}t=(0|A)==2519?132096:1024,t=(A=(0|A)==2494)?132096:t;break S}if(r=132096,(0|A)!=2903)break d;break t}if((0|A)==3006)return $=0,132096;if(r=132096,(0|A)!=3031)break d;break t}if((A=A-3266|0)>>>0>20||(r=132096,!(1<<A&1572865)))break d;break t}if((0|A)==3390)break t;if((0|A)!=3415)break d;break t}if(r=4096,(-2&A)!=3902)break d;break t}r=(A=(0|A)==4252)>>>22|0,A<<=10;break y}switch(r=1024,A-6965|0){default:if((0|A)==6916)break t;break;case 0:case 6:break t;case 1:case 2:case 3:case 4:case 5:}if(A-6973>>>0<5)break t;switch(A-6979|0){case 1:break f;case 0:break t}if((0|A)==7042|(0|A)==7073|(-2&A)==7078)break t;if((0|A)==7082)break f;if((0|A)==7143|A-7146>>>0<3)break t;r=(A=(0|A)==7150)>>>22|0,A<<=10;break y}t=(0|A)==7415?4096:1024,t=(A=(0|A)==7393)?4096:t;break S}t=(0|A)==43456?4096:1024,t=(A=(0|A)==43347)?4096:t;break S}if(r=4096,(0|A)!=44012)break d;break t}if(r=4096,(0|A)!=70080)break d;break t}r=132096;z:switch(A-70462|0){case 0:case 25:break t;case 15:break z;default:break d}break f}if(r=132096,(0|A)!=71087)break d;break t}if(r=4096,(0|A)!=71350)break d;break t}if(r=135168,A-119150>>>0<5)break t;break d}break f;case 12:t=((0|A)==8419)<<6,A=0;break v;case 13:g:{Q:{T:{P:{z:{O:{X:{j:{te:{ie:{re:{ne:{ce:{ge:{x:{oe:{ae:{K:{ue:{de:{Ie:{we:{Le:{ke:{Ye:{Xe:{qe:{Je:{_e:{$e:{eA:{AA:{tA:{rA:{aA:{xe:{sA:{iA:{nA:{oA:{lA:{He:{ve:{Re:{cA:{gA:{uA:{Be:{dA:{fA:{pA:{if((0|(t=-256&A))<=43775){if((0|t)<=5887){if((0|t)<=2559){if((0|t)<=1535){if((0|t)==768)break pA;if((0|t)==1024)break fA;if((0|t)!=1280)break a;if(A-1425>>>0>=17)break dA;break f}if((0|t)<=2047){if((0|t)==1536)break Be;if((0|t)!=1792)break a;if(r=1024,(0|A)==1809)break t;if((-16&A)!=1840)break uA;return $=0,5120}if((0|t)==2048)break gA;if((0|t)!=2304)break a;if(A>>>0>=2307)break cA;break d}if((0|t)<=3583){if((0|t)<=3071){if((0|t)==2560)break Re;if((0|t)!=2816)break a;switch(r=1024,A-2876|0){case 0:break f;case 3:break t;case 1:case 2:break He;default:break ve}}if((0|t)==3072)break lA;if((0|t)!=3328)break a;if((0|(t=-2&A))!=3328)break oA;break d}if((0|t)<=4095){if((0|t)==3584)break nA;if((0|t)!=3840)break a;if((0|(t=-2&A))!=3864)break iA;break f}if((0|t)==4096)break sA;if((0|t)!=4864||(r=1024,(0|A)!=4959))break a;break t}if((0|t)<=8191){if((0|t)<=6655){if((0|t)==5888)break xe;if((0|t)==6144)break aA;if((0|t)!=6400)break a;if((t=A-6432|0)>>>0<=18&&(r=1024,1<<t&262535))break t;if(r=4096,A-6457>>>0>=3)break a;break t}if((0|t)<=7167){if((0|t)==6656)break rA;if((0|t)!=6912)break a;if(r=1024,(-4&A)==6912)break t;if((0|A)!=6964)break tA;break f}if((0|t)==7168)break AA;if((0|t)!=7424)break a;if(r=4096,A-7620>>>0<12||(r=1024,A-7655>>>0<14))break t;if((A=A-7669|0)>>>0>=11)break a;t=e[(A=82104+(A<<3)|0)>>2];break h}if((0|t)<=42495){if((0|t)<=11519){if((0|t)==8192)break eA;if((0|t)!=11264||(r=4096,A-11503>>>0>=3))break a;break t}if((0|t)==11520)break $e;if((0|t)!=12288)break a;if(A-12330>>>0>=4)break _e;break f}if((0|t)<=43263){if((0|t)==42496)break Je;if((0|t)!=43008)break a;if(A-43045>>>0>=2)break qe;break d}if((0|t)==43264)break Xe;if((0|t)!=43520)break a;switch(r=1024,A-43561|0){case 83:case 150:case 152:break f;case 0:case 1:case 2:case 3:case 4:case 5:case 8:case 9:case 12:case 13:case 26:case 35:case 135:case 137:case 138:case 139:case 142:case 143:case 149:break t;default:break Ye}}if((0|t)<=71423){if((0|t)<=69375){if((0|t)<=66047){if((0|t)==43776)break ke;if((0|t)==64256)break Le;if((0|t)!=65024)break a;if(r=536870912,A-65024>>>0<15||(a=64,(0|A)==65039))break t;if(r=4096,a=0,(-16&A)!=65056)break a;break t}if((0|t)<=68095){if((0|t)==66048)break we;if((0|t)!=66304||(r=1024,A-66422>>>0>=5))break a;break t}if((0|t)==68096)break Ie;if((0|t)!=68864||(r=5120,(-4&A)!=68900))break a;break t}if((0|t)<=70399){if((0|t)<=69887){if((0|t)==69376)break de;if((0|t)!=69632)break a;if(A-69688>>>0>=14)break ue;break d}if((0|t)==69888)break K;if((0|t)!=70144)break a;if(r=1024,A-70191>>>0<3)break t;switch(A-70196|0){case 2:break f;case 0:case 3:case 10:break t;case 1:case 4:case 5:case 6:case 7:case 8:case 9:break oe;default:break ae}}if((0|t)<=70911){if((0|t)==70400)break x;if((0|t)!=70656)break a;if((-8&A)!=70712)break ge;break d}if((0|t)==70912)break ce;if((0|t)!=71168)break a;if(r=1024,A-71219>>>0<8)break t;switch(A-71229|0){case 2:break f;case 0:case 3:break t;case 1:break re;default:break ne}}if((0|t)<=92927){if((0|t)<=72703){if((0|t)==71424)break NA;if((0|t)==71680)break ie;if((0|t)!=72192)break a;if(A-72193>>>0>=10)break te;break d}if((0|t)<=73215){if((0|t)==72704)break j;if((0|t)!=72960)break a;if((t=A-73009|0)>>>0<19)break SA;break _}if((0|t)==73216)break X;if((0|t)!=92672||(r=4096,A-92912>>>0>=5))break a;break t}if((0|t)<=122879){if((0|t)<=113663){if((0|t)==92928)break O;if((0|t)!=93952||(r=4096,A-94095>>>0>=4))break a;break t}if((0|t)==113664)break z;if((0|t)!=119040)break a;switch(r=4096,A-119143|0){case 0:case 1:case 2:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 67:case 68:case 69:case 70:break t;default:break a}}if((0|t)<=125183){if((0|t)==122880)break P;if((0|t)!=124928||(r=4096,A-125136>>>0>=7))break a;break t}if((0|t)==125184)break T;if((0|t)!=917760||(r=536870912,A-917760>>>0>=240))break a;break t}if(A-768>>>0<69)break f;if(r=21504,(0|A)==837)break t;if(A-838>>>0<9)break f;if(r=4194304,(0|A)==847)break t;if((-8&A)==848)break f;if(r=4096,A-861>>>0>=6)break a;break t}if(r=4096,A-1155>>>0>=5)break a;break t}if(r=4096,A-1443>>>0<13||(r=5120,A-1456>>>0<14))break t;if((A=A-1471|0)>>>0>=9)break a;t=e[(A=81944+(A<<3)|0)>>2];break h}if(A-1552>>>0<11)break d;if(r=5120,A-1611>>>0<8)break t;if(A-1619>>>0<4)break d;switch(A-1623|0){case 1:break f;case 0:break t;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 25:case 127:case 128:case 129:case 130:case 131:case 132:case 133:break d}if(r=4096,A-1759>>>0<2)break t;if((t=A-1761|0)>>>0<8)break RA;break me}if(A-1856>>>0<11)break f;if(r=5120,A-1958>>>0<11)break t;if(r=4096,A-2027>>>0>=9)break a;break t}switch(r=1024,(-2&A)-2070|0){case 2:break f;case 0:break t}if(A-2260>>>0<12|A-2089>>>0<4|A-2075>>>0<9|A-2085>>>0<3)break d;if(A-2275>>>0<7)return $=0,5120;if(r=4096,A-2282>>>0<6||(r=5120,A-2288>>>0<15))break t;if(r=1024,(0|A)!=2303)break a;break t}switch(r=1024,A-2362|0){case 2:break f;case 0:break t}if(A-2369>>>0<8)break d;switch(r=4096,A-2381|0){case 0:case 4:case 5:case 6:case 7:case 111:break t;case 8:case 9:case 10:case 21:case 22:case 52:break d}if(A-2497>>>0<4)break d;if((0|A)==2509)break t;if(r=1024,(-2&A)!=2530)break a;break t}if(A-2561>>>0<2)break d;switch(r=4096,A-2620|0){case 0:case 17:case 128:case 145:break t;case 5:case 6:case 11:case 12:case 15:case 16:case 21:case 52:case 53:case 57:case 69:case 70:case 133:case 134:case 135:case 136:case 137:case 139:case 140:case 166:case 167:case 190:case 191:case 192:break d}if(A-2813>>>0>=3)break a;break t}if((0|A)==2817)break d}if(A-2881>>>0<4)break d;switch(r=4096,A-2893|0){case 0:break t;case 9:break d}if((-2&A)==2914)break d;switch(r=1024,A-3008|0){default:if((0|A)!=2946)break a;break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:break a;case 0:break t;case 13:}break f}switch(r=1024,A-3072|0){case 77:case 188:case 205:break f;case 0:case 62:case 63:case 64:case 70:case 71:case 72:case 74:case 75:case 76:case 85:case 86:case 98:case 99:case 129:case 191:case 198:case 204:break t}if((-2&A)!=3298)break a;break t}if(r=4096,A-3387>>>0<2)break t;if(A-3393>>>0<4)break d;if((0|A)==3405)break t;if((0|t)==3426)break d;switch(A-3530|0){case 0:break t;case 8:case 9:case 10:case 12:break d;default:break a}}if((t=A-3633|0)>>>0<10)break HA;break Ge}if((r=A-3893|0)>>>0>4|!(1<<r&21))break je;break f}switch(r=1024,A-4141|0){case 10:case 12:case 13:break f;case 0:case 1:case 2:case 3:case 5:case 6:case 7:case 8:case 9:case 16:case 17:case 43:case 44:case 49:case 50:case 51:case 68:case 69:case 70:case 71:case 85:case 88:case 89:break t}t=(r=(0|A)==4253)>>>22|0,r=(A=(0|A)==4237)?4096:r<<10;break w}r=1024;xe:{switch(A-5906|0){case 0:case 1:case 32:case 33:break t;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:break xe}switch(A-5970|0){case 0:case 1:case 32:case 33:break t;default:break xe}}if(r=4194304,(-2&A)==6068)break t;if((t=A-6071|0)>>>0<16)break YA;break De}if(r=536870912,A-6155>>>0<3||(r=67109888,A-6277>>>0<2))break t;if(r=1024,(0|A)!=6313)break a;break t}if(A-6679>>>0<2)break d;switch(r=1024,A-6683|0){case 0:case 59:case 61:case 62:case 63:case 64:case 65:case 66:case 67:case 71:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 88:case 89:break t}if(r=4096,A-6832>>>0<14)break t;if((A=A-6773|0)>>>0>=11)break a;t=e[(A=82016+(A<<3)|0)>>2];break h}if(A-6966>>>0<5)break t;switch(A-6972|0){case 0:case 6:break t}if(A-7019>>>0<9)break f;switch(A-7040|0){case 43:break f;case 0:case 1:case 34:case 35:case 36:case 37:case 40:case 41:case 44:case 45:case 104:case 105:case 109:case 111:case 112:case 113:break t;default:break a}}if(r=1024,A-7212>>>0<8)break t;switch(r=12288,A-7222|0){case 1:break f;case 0:break t}if(A-7380>>>0<13)break f;switch(r=4096,A-7376|0){case 0:case 1:case 2:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 29:case 36:break t}if((-2&A)!=7416)break a;break t}if(r=128,A-8400>>>0<13)break t;if((A=A-8417|0)>>>0>=15)break a;t=e[(A=82192+(A<<3)|0)>>2];break h}if(r=1024,(-32&A)!=11744)break a;break t}if(r=4096,A-12441>>>0>=2)break a;break t}if((0|A)==42607)break f;if(A-42612>>>0<8)break d;if((0|(A&=-2))==42620)break f;if((0|A)==42654)break g;if(r=4096,(0|A)!=42736)break a;break t}switch(r=4096,A-43204|0){case 0:break t;case 1:break d}if(A-43232>>>0>=18)break a;break t}if(A-43302>>>0<5)break d;if(A-43307>>>0<3)break f;if(A-43335>>>0<11|A-43392>>>0<3)break d;if(r=4096,(0|A)==43443||(r=1024,A-43446>>>0<4))break t;a=(t=(0|A)==43493)>>>20|0,t=(A=(0|A)==43452)?1024:t<<12;break D}if((-2&A)==43756)break t;if(r=4096,(0|A)!=43766)break a;break t}r=1024;ke:switch(A-44005|0){case 0:case 3:break t;case 8:break ke;default:break a}break f}if(r=5120,(0|A)!=64286)break a;break t}if(r=4096,(0|A)!=66272)break a;break t}if((-4&A)==68108)break d;if((t=A-68097|0)>>>0<6)break LA;break Qe}if(r=4096,A-69446>>>0>=11)break a;break t}if(A-69811>>>0<4)break d;if(r=1024,(0|A)==69633)break t;if(r=4096,A-69817>>>0>=2)break a;break t}switch(r=1024,A-69888|0){case 51:case 52:case 115:break f;case 0:case 1:case 2:case 39:case 40:case 41:case 42:case 43:case 45:case 46:case 47:case 48:case 49:case 50:break t}if((-2&A)==70016|A-70070>>>0<9)break t;if(r=4096,A-70090>>>0>=3)break a;break t}if((0|A)==70367)break t}if(A-70371>>>0<6)break t;if(r=4096,A-70377>>>0>=2)break a;break t}if((-2&A)==70400)break d;r=4096;x:switch(A-70460|0){case 0:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 52:case 53:case 54:case 55:case 56:break t;case 4:break x;default:break a}break d}if((0|A)==70722)break f;if(A-70723>>>0<2)break d;if((t=A-70835|0)>>>0<=13)break Q;break Te}if((t=A-71090|0)>>>0<12)break OA;break Pe}switch(A-71339|0){case 0:case 2:break t;default:break re}}if(A-71344>>>0<6)break t;if(r=4096,(0|A)!=71351)break a;break t}if(r=1024,A-71727>>>0<10)break t;if(r=4096,A-71737>>>0>=2)break a;break t}if((0|A)==72244)break f;if(A-72245>>>0<10)break d;if(r=4096,(0|A)==72263)break t;if(A-72273>>>0<11)break d;if(r=1024,A-72330>>>0<13)break t;r=(t=(0|A)==72345)>>>20|0,t=(A=(0|A)==72344)?8192:t<<12;break V}if((t=A-72752|0)>>>0<16)break FA;break ze}if(r=1024,A-73459>>>0>=2)break a;break t}if(r=1024,A-92976>>>0>=7)break a;break t}if(r=1024,(0|A)!=113822)break a;break t}if(r=1024,A-122888>>>0<17)break t;if((A=A-122880|0)>>>0>=43)break a;t=e[(A=82816+(A<<3)|0)>>2];break h}if(r=12288,A-125252>>>0<3||(r=1024,(0|A)==125255)||(r=4096,A-125256>>>0<3))break t;break a}if(!(1<<t&12479))break Te;break d}break d;case 14:g:{if((0|(t=-256&A))!=120576){if((0|t)!=65280){if(t||(r=768,a=66,A-48>>>0>=10))break g;break t}if(r=256,A-65296>>>0>=10)break g;break t}if(r=128,A-120782>>>0<50)break t}break a;case 15:g:{if((0|(t=-256&A))!=12288){if((0|t)!=8448)break g;t=(A=(0|(r=-16&A))==8560)>>>18|0,a=A<<14,r=(A=(0|r)==8544)?32768:a;break w}if(A-12321>>>0<9||A-12344>>>0<3)return $=0,2048;if(r=2048,(0|A)==12295)break t}break a;case 16:g:{Q:{T:{if((0|(t=-256&A))<=9215){if((0|t)==4864)break T;if((0|t)!=6400||(r=134217728,(0|A)!=6618))break g;break t}if((0|t)==9216)break Q;if((0|t)!=127232)break g;if(r=0,a=-2147483648,(0|A)==127232)break t;if(a=268435456,A-127233>>>0>=10)break g;break t}if(r=134217728,A-4969>>>0>=9)break g;break t}if(r=0,a=-2147483648,A-9352>>>0<20)break t}break a;case 17:a=(A=(0|A)==8256)>>>25|0,A<<=7;break L;case 18:g:{Q:{T:{P:{if((0|(t=-256&A))<=11775){if((0|t)<=6143){if(r=-2147483624,!t)break t;if((0|t)!=1280||(r=24,(0|A)!=1418))break g;break t}if((0|t)==6144)break P;if((0|t)!=8192)break g;if(r=-2147483624,(-2&A)==8208)break t;A=A-8211>>>0<2,t=-2147483640;break b}if((0|t)<=65023){if((0|t)==11776)break T;if((0|t)!=12288)break g;t=(0|A)==12336,r=(A=(0|A)==12316)||t?-2147483640:8,$=A?0:t?130:0;break m}if((0|t)==65024)break Q;if((0|t)!=65280||(r=24,(0|A)!=65293))break g;break t}if(r=24,(0|A)!=6150)break g;break t}if(r=-2147483624,(0|A)==11799)break t;A=(-2&A)==11834,t=-2147483640;break b}if(r=8,a=8388608,A-65073>>>0<2||(r=152,a=0,(0|A)==65123))break t}return $=0,8;case 19:g:{Q:{T:{P:{z:{O:{if((0|(t=-256&A))<=11775){if((0|t)<=8959){if(t)break O;break I}if((0|t)==8960)break z;if((0|t)==9984)break P;if((0|t)!=10496)break a;break U}if((0|t)<=64767){if(r=-2147483648,(0|t)==11776)break t;if((0|t)!=12288)break a;switch(r=-2147483616,A-12301|0){case 0:case 2:break t;default:break T}}if((0|t)==64768)break Q;if((0|t)==65024)break g;if((0|t)!=65280)break a;if(r=32,(0|A)==65379)break t;break a}if((0|t)!=8192)break a;switch(A-8318|0){default:if(r=-2147483648,(0|A)!=8262)break a;break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break a;case 0:case 16:}break k}switch(r=-2147483520,A-8969|0){case 1:break a;case 0:case 2:break t}if((0|A)!=9002)break a;return $=0,-2139095040}if(r=-2147483520,(0|A)==10182)break t;break ye}return $=0,(-2&A)==12318?-2147483616:-2147483648}if(r=-2147483648,(0|A)!=64830)break a;break t}a=(A=!(A-65090&-3))>>>27|0,A<<=5;break L;case 20:case 21:if(!(A&=-256))break C;if(r=-2147483616,(0|A)==8192)break t;break Ve;case 22:g:{Q:{T:{P:{z:{O:{X:{j:{te:{ie:{re:{ne:{ce:{ge:{x:{oe:{ae:{K:{ue:{de:{Ie:{we:{Le:{ke:{Ye:{Xe:{qe:{Je:{_e:{$e:{eA:{AA:{tA:{rA:{aA:{xe:{sA:{iA:{nA:{oA:{lA:{He:{ve:{Re:{cA:{gA:{uA:{Be:{if((0|(t=-256&A))<=43519){if((0|t)<=5887){if((0|t)<=2303){if((0|t)<=1535){if(!t)break Be;if((0|t)==768)break uA;if((0|t)!=1280)break a;if(r=0,a=538968064,A-1371>>>0<2)break t;switch(a=268435456,A-1373|0){case 0:break t;case 1:break cA;default:break gA}}if((0|t)==1536)break ve;if((0|t)==1792)break He;if((0|t)!=2048)break a;if((t=A-2103|0)>>>0<8)break PA;break Se}if((0|t)<=3839){if((0|t)==2304)break lA;if((0|t)==3328)break oA;if((0|t)!=3584||(r=64,(-2&A)!=3674))break a;break t}if((0|t)<=4863){if((0|t)==3840)break nA;if((0|t)!=4096)break a;if(r=268435520,(-2&A)==4170)break t;if(r=0,a=16777216,(0|A)!=4347)break a;break t}if((0|t)==4864)break iA;if((0|t)!=5632)break a;switch(r=64,A-5741|0){case 1:break i;case 0:break t;default:break sA}}if((0|t)<=11263){if((0|t)<=6655){if((0|t)==5888)break xe;if((0|t)==6144)break QA;if((0|t)!=6400)break a;t=(0|A)==6469,r=(A=(0|A)==6468)||t?268435520:0,$=A?536870912:t?1073741824:0;break m}if((0|t)<=7167){if((0|t)==6656)break aA;if((0|t)!=6912)break a;if((0|(t=-2&A))!=7002)break rA;break H}if((0|t)==7168)break tA;if((0|t)!=8192)break a;switch(r=-2147483520,A-8214|0){case 1:break I;case 0:break t;case 16:break AA;default:break eA}}if((0|t)<=41983){if((0|t)==11264)break $e;if((0|t)==11776)break _e;if((0|t)!=12288)break a;switch(r=-2147483584,a=272629760,A-12289|0){case 2:break I;case 0:break t;case 1:break qe;default:break Je}}if((0|t)<=43007){if((0|t)==41984)break Xe;if((0|t)!=42496)break a;switch(r=64,a=268435456,A-42739|0){case 4:break c;case 0:break i;case 3:break r;case 2:break t;case 1:break ke;default:break Ye}}if((0|t)==43008)break Le;if((0|t)!=43264)break a;switch(r=4096,A-43310|0){case 0:break t;case 1:break H;default:break we}}if((0|t)<=70655){if((0|t)<=67839){if((0|t)<=65279){if((0|t)==43520)break Ie;if((0|t)==43776)break de;if((0|t)!=65024)break a;if(r=0,a=268435456,(0|(i=-2&A))==65040)break t;if((t=A-65042|0)>>>0<8)break GA;break Ce}if((0|t)==65280)break ue;if((0|t)==66304)break K;if((0|t)!=67584||(r=64,(0|A)!=67671))break a;break t}if((0|t)<=69375){if((0|t)==67840)break ae;if((0|t)==68096)break oe;if((0|t)!=68352)break a;switch(r=64,A-68410|0){case 0:case 1:case 2:case 3:case 4:case 5:case 95:case 96:case 97:case 98:break t;default:break a}}if((0|t)<=69887){if((0|t)==69376)break x;if((0|t)!=69632)break a;if(A-69703>>>0>=2)break ge;break H}if((0|t)==69888)break ce;if((0|t)!=70144)break a;if((t=A-70200|0)>>>0<=4)break ne;if((0|A)!=70313)break a;break H}if((0|t)<=74751){if((0|t)<=71423){if((0|t)==70656)break re;if((0|t)==70912)break ie;if((0|t)!=71168||(r=268435520,A-71233>>>0>=2))break a;break t}if((0|t)<=72703){if((0|t)==71424)break te;if((0|t)!=72192)break a;if(A-72258>>>0>=2)break j;break H}if((0|t)==72704)break X;if((0|t)!=73216||(r=268435520,A-73463>>>0>=2))break a;break t}if((0|t)<=93695){if((0|t)==74752)break O;if((0|t)==92672)break P;if((0|t)!=92928)break a;if(r=268435520,A-92983>>>0<2)break t;t=(0|A)==92996?268435520:0,t=(A=(0|A)==92985)?64:t;break S}if((0|t)<=121343){if((0|t)==93696)break z;if((0|t)!=113664||(r=268435520,a=-2147483648,(0|A)!=113823))break a;break t}if((0|t)==121344)break MA;if((0|t)!=125184)break a;r=((0|A)==125279)<<30,t=0,$=(A=(0|A)==125278)?536870912:r;break n}r=-1879048128,a=536870912;Be:{dA:{fA:{pA:{switch(A-33|0){default:switch(A-183|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:break Be;case 8:break fA;case 0:break pA;default:break dA}case 2:case 9:$=66;break u;case 11:return $=268435456,-2147483584;case 13:return $=-2147483648,-1879048128;case 25:return $=134217728,-2147483584;case 26:return $=67108864,-2147483584;case 1:case 6:break C;case 0:break t;case 3:case 4:case 5:case 7:case 8:case 10:case 12:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 27:case 28:case 29:break Be;case 30:}return $=1073741824,-1879048128}return $=0,134230016}$=1078984704;break u}if((0|A)==161)break Ue}break I}t=(0|A)==903,r=(A=(0|A)==894)?64:t?134217792:0,$=A?1073741824:t?67108864:0;break m}if((0|A)==1417)break Re;if((0|A)!=1475)break a;break se}$=1075838976;break o}$=-2143289344;break s}r=64,a=268435456;ve:switch(A-1548|0){case 15:break r;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 16:case 17:break a;case 0:break t;case 19:break ve;case 18:break H;default:break T}break c}if((t=A-1792|0)>>>0<6)break zA;if(r=64,a=134217728,(-2&A)==1798)break t;a=67108864;He:{ve:{Re:switch(A-1800|0){default:switch(A-2040|0){case 1:break He;case 0:break ve;default:break a}case 3:break a;case 0:break t;case 1:break Re;case 2:case 4:break se}$=1073741824;break A}$=268435456;break A}$=536870912;break s}t=(0|A)==2405,r=(A=(0|A)==2404)||t?268435520:0,$=A?-2143289344:t?16777216:0;break m}if(r=0,a=-2143289344,(0|A)!=3572)break a;break t}switch(r=64,A-3848|0){case 5:$=-2143289344;break A;case 6:$=16777216;break A;case 0:break t}if(A-3854>>>0<5)break t;if(r=0,a=268435456,(0|A)!=3860)break a;break t}if((t=A-4961|0)>>>0<4)break TA;if(r=64,a=134217728,A-4965>>>0<2)break t;t=(0|A)==4968,r=(A=(0|A)==4967)||t?268435520:0,$=A?1073741824:t?16777216:0;break m}if(A-5867>>>0>=3)break a;break t}if(r=268435520,A-5941>>>0<2)break t;if((A=A-6100|0)>>>0>=7)break a;t=e[(A=83240+(A<<3)|0)>>2];break h}if(r=268435520,(-4&A)!=6824)break a;break t}if(r=64,(0|A)==7005)break t;if(r=268435520,(0|t)!=7006)break a;break t}if(A-7227>>>0<2)break H;if(r=64,A-7229>>>0<3||(r=268435520,(-2&A)==7294))break t;if(r=4096,(0|A)!=7379)break a;break t}$=33554432;break u}if((-8&A)==8224)break I;if(A-8242>>>0<3)break t;if(A-8240>>>0<9)break I;if((t=A-8251|0)>>>0<21)break DA;break Ae}if((0|A)==11513){$=-2147483648;break o}if(r=0,a=1073741824,(-2&A)==11514)break t;if(a=-2147483648,(0|A)!=11518)break a;break t}switch(r=-1879048128,A-11822|0){case 4:case 6:$=268435456;break u;case 5:$=-2147483648;break u;case 7:$=67108864;break u;case 14:return $=-2147483648,-1879048128;case 19:return $=268435456,-2147483584;case 30:case 32:return $=0,-2147483584;case 0:break t}break I}if((0|A)==12349)break F;if((0|A)!=12539)break a;return $=0,16}return $=-2143289344,-1879048128}t=(0|A)==42239,r=(A=(0|A)==42238)?64:t?268435520:0,$=A?268435456:t?-2147483648:0;break m}Ye:switch(A-42509|0){case 1:break i;case 0:break t;case 2:break Ye;default:break a}break c}$=134217728;break A}if(A-43126>>>0<2)break H;if(r=268435520,A-43214>>>0>=2)break a;break t}if((0|A)==43463)break se;if(r=268435520,(-2&A)!=43464)break a;break t}if(A-43613>>>0<3)break H;if(r=64,(0|A)==43743)break t;if(r=268435520,(-2&A)!=43760)break a;break t}if(r=268435520,(0|A)!=44011)break a;break t}r=268435520,a=541065216;ue:switch(A-65281|0){case 1:case 6:return $=0,32;case 11:$=272629760;break A;case 13:$=-2143289344;break s;case 100:return $=0,16;case 25:$=138412032;break A;case 26:$=71303168;break A;case 30:$=1077936128;break s;case 96:break i;case 59:break k;case 0:break t;case 99:break ue;default:break a}$=268435456;break A}r=(t=(0|A)==66512)>>>26|0,t=(A=(0|A)==66463)?64:t<<6;break V}if(r=64,(0|A)!=67871)break a;break t}if(r=268435520,(-2&A)==68182)break t;if(r=64,A-68336>>>0>=6)break a;break t}if(r=268435520,A-69461>>>0>=5)break a;break t}if(r=64,A-69705>>>0<5)break t;if(r=268435520,A-69822>>>0>=4)break a;break t}if(A-69953>>>0<2)break H;if((t=A-70085|0)>>>0<=26)break Q;break Fe}if((0|t)!=2)break H;break se}if(r=268435520,A-70731>>>0<2)break t;a=(t=(0|A)==70747)>>>26|0,t=(A=(0|A)==70733)?64:t<<6,$=A?268435456:a;break n}switch(r=268435520,(-2&A)-71106|0){case 0:break t;case 2:break g}if(r=8192,A-71110>>>0<3)break t;if(r=268435520,A-71113>>>0>=15)break a;break t}if(r=268435520,A-71484>>>0>=3)break a;break t}if(r=268435520,A-72347>>>0<2)break t;if(r=64,A-72353>>>0>=2)break a;break t}if(r=268435520,A-72769>>>0<2)break t;r=(t=(0|A)==72817)>>>26|0,t=(A=(0|A)==72771)?64:t<<6;break V}if(r=64,a=134217728,A-74865>>>0<2)break t;if(a=0,A-74864>>>0>=5)break a;break t}t=(0|A)==93848?268435520:0,t=(A=(0|A)==93847)?64:t;break S}if(r=268435520,(-2&A)==92782)break t;if(a=-2147483648,(0|A)!=92917)break a;break t}if((0|A)==1748)break i;break a}if(!(1<<t&100663555))break Fe;break H}break se;case 23:g:{Q:{T:{P:{z:{O:{if((0|(t=-256&A))<=11775){if((0|t)<=8959){if(t)break O;break I}if((0|t)==8960)break z;if((0|t)==9984)break P;if((0|t)!=10496)break a;break U}if((0|t)<=64767){if((0|t)==11776)break T;if((0|t)!=12288)break a;if((A=A-12300|0)>>>0<=17&&(r=-2147483616,1<<A&131077))break t;break I}if((0|t)==64768)break Q;if((0|t)==65024)break g;if((0|t)!=65280)break a;if(r=32,(0|A)==65378)break t;break a}if((0|t)!=8192)break a;switch(r=-2147483616,A-8218|0){case 1:case 2:case 3:break a;case 0:case 4:break t}switch(A-8317|0){default:if((0|A)!=8261)break a;break I;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break a;case 0:case 16:}break k}switch(r=-2147483520,A-8968|0){case 1:break a;case 0:case 2:break t}if((0|A)!=9001)break a;return $=0,-2139095040}if(r=-2147483520,(0|A)==10181)break t;break ye}return $=0,(0|A)==11842?-2147483616:-2147483648}if(r=-2147483648,(0|A)!=64831)break a;break t}r=(A=!(A-65089&-3))>>>27|0,A<<=5;break y;case 24:r=(A=A>>>0<256)>>>1|0,A<<=31;break y;case 25:g:{Q:{T:{P:{z:{O:{X:{j:{if((0|(t=-256&A))<=12287){if((0|t)<=767){if(!t)break j;if((0|t)!=512)break g;if(A-751>>>0>=17)break X;break f}if((0|t)==768)break O;if((0|t)!=7936)break g;switch(r=4096,A-8125|0){case 0:case 2:case 3:case 4:case 16:case 17:case 18:case 32:case 33:case 34:case 48:case 49:case 50:case 64:case 65:break t;default:break g}}if((0|t)<=43775){if((0|t)==12288)break z;if((0|t)!=42752||(r=4096,(-2&A)!=42784))break g;break t}if((0|t)==43776)break P;if((0|t)==65280)break T;if(r=0,a=78,(0|t)!=127744)break g;break t}switch(A-168|0){default:r=-2147479424;j:switch(A-94|0){case 0:break t;case 2:break j;default:break g}return $=0,-2147479552;case 0:case 7:break f;case 1:case 2:case 3:case 4:case 5:case 6:case 8:case 9:case 10:case 11:case 13:case 14:case 15:break g;case 12:case 16:}break f}if((0|A)==749|A-741>>>0<7)break f;if(A-706>>>0>=4)break Q;break f}if((A=A-885|0)>>>0>16||(r=4096,!(1<<A&98305)))break g;break t}if(r=67112960,A-12443>>>0>=2)break g;break t}if(r=4096,(0|A)!=43867)break g;break t}switch(r=4224,A-65342|0){default:if((0|A)!=65507)break g;break;case 0:break t;case 1:break g;case 2:}break f}if(r=4096,A-722>>>0<14)break t}break a;case 26:g:{Q:{T:{P:{z:{O:{if((0|(t=-256&A))<=9471){if((0|t)<=8447){if(t)break g;break I}if((0|t)==8448)break O;if((0|t)==8704)break z;if(r=-2147483648,(0|t)!=8960)break a;break t}if((0|t)<=10495){if((0|t)==9472)break P;if((0|t)==9728)break T;if((0|t)==9984)break I;break a}if((0|t)==10496)break Q;if((0|t)==10752)break I;if(r=-2147483648,(0|t)!=11008)break a;break t}if((0|A)==8472)return $=0,67108864;if((0|A)==8596)break Z;if(r=-2147483648,A>>>0<=8591)break a;break t}if(r=-2147483640,(0|A)==8722)break t;t=-2147483648,$=(A=A-8942>>>0<4)?33554432:0;break n}if(r=-2147483648,a=130,A-9723>>>0<2)break t;t=-2147483648,$=(A=A-9725>>>0<2)?134:0;break n}if(r=-2147483648,a=128,(0|A)==9839)break t;break I}if(r=-2147483648,a=130,(-2&A)==10548)break t;t=-2147483648,$=(A=(0|A)==10626)?134217728:0;break n}if((0|t)==8192)break Ke;break a;case 27:g:{Q:{T:{P:{z:{O:{X:{j:{te:{ie:{re:{ne:{ce:{ge:{x:{oe:{ae:{K:{ue:{de:{Ie:{we:{Le:{ke:{if((0|(t=-256&A))<=12287){if((0|t)<=9727){if((0|t)<=8959){if(!t)break ke;if((0|t)!=8448)break a;switch(r=0,a=130,A-8482|0){case 7:break k;case 0:break t;case 1:case 2:case 3:case 4:case 5:case 6:case 8:case 9:case 10:case 11:break de;case 12:break we;default:break Le}}if((0|t)==8960)break ue;if((0|t)==9216)break K;if((0|t)!=9472)break a;switch(r=-2147483520,(-2&A)-9632|0){case 0:break t;case 10:break Z;default:break ae}}if((0|t)<=11007){if((0|t)==9728)break oe;if((0|t)==9984)break x;if(r=-2147483648,(0|t)!=10240)break a;break t}if((0|t)==11008)break ge;if((0|t)==11776)break ce;if((0|t)!=12032)break a;if(r=1048576,A>>>0<12246)break t;switch(r=262144,(-2&A)-12272|0){case 0:break t;case 2:break g;default:break ne}}if((0|t)<=127999){if((0|t)<=127231){if((0|t)==12288)break re;if((0|t)==12800)break ie;if((0|t)!=126976)break a;t=(0|A)==127183,r=0,$=(A=(0|A)==126980)||t?134:128;break m}if((0|t)==127232)break te;if((0|t)==127488)break j;if((0|t)!=127744)break a;if(A>>>0>=127777)break X;break Y}if((0|t)<=128767){if((0|t)==128e3)break O;if((0|t)==128256)break z;if((0|t)!=128512)break a;if((t=A-128581|0)>>>0<11)break CA;break Ne}if((0|t)==128768)break P;if((0|t)==129280)break T;if((0|t)!=129536)break a;$=128;break o}t=(0|A)==174,r=-2147483648,$=(A=(0|A)==169)||t?130:0;break m}switch(A-8616|0){case 0:break I;case 1:case 2:break Ie;default:break de}}return $=0,67108864}return $=130,-2147483520}if(r=-2147483520,A-8597>>>0<5)break t;if(A-8604>>>0<18)break U;if((t=A-8624|0)>>>0<8)break EA;break Oe}if(A>>>0<8968)break I;if((0|(t=-2&A))==8986)break l;if(A-8972>>>0<20|A-8994>>>0<6)break I;if((0|A)==9e3)break Z;if(A-9003>>>0<81)break I;if(r=-2147483648,a=128,(0|A)==9096)break t;if(A-9085>>>0<30)break I;if(r=-2147483520,a=0,(0|t)==9140)break t;switch(A-9143|0){case 0:case 25:break t;case 24:break Z}if(A-9140>>>0<40)break I;if((0|A)==9186)break t;if((t=A-9193|0)>>>0<4)break l;switch(r=-2147483648,a=134,A-9200|0){case 0:case 3:break t}if(t>>>0<11)break Z;if(a=130,A-9208>>>0<3)break t;if(a=0,A>>>0<=9186)break a;break t}if(r=-2147483648,A-9216>>>0<75||(r=33792,a=130,(0|A)==9410)||(a=0,A-9398>>>0<26))break t;if(r=17408,A-9424>>>0>=26)break a;break t}if(A-9646>>>0<8)break U;if(a=130,(0|A)==9654)break t;if((-4&A)==9660)break U;switch(A-9664|0){case 0:break t;case 6:case 7:case 10:case 11:case 15:case 16:case 17:case 18:case 19:case 34:case 36:break U}return $=0,A-9703>>>0<6?-2147483520:-2147483648}oe:switch((-16&A)-9728>>>4|0){case 0:if(A>>>0<9733)break Z;r=-2147483520,a=128;ae:switch(A-9733|0){case 0:break t;case 9:break ae;case 1:break U;default:break G}break Z;case 2:if((t=A-9760|0)>>>0<11)break BA;if(r=-2147483648,a=130,A>>>0<=9773)break G;break t;case 3:if(r=-2147483648,a=130,A-9784>>>0>=3)break G;break t;case 4:switch(r=-2147483520,a=130,A-9792|0){case 0:case 2:break t}if(r=-2147483648,a=134,A>>>0<=9799)break G;break t;case 5:if(r=-2147483648,a=134,A>>>0<9812)break t;if(a=130,(0|A)!=9823)break G;break t;case 6:if((0|A)==9734)break U;if((0|A)==9824)return $=130,-2147483520;if(r=-2147483520,a=128,A-9825>>>0<2)break t;if((t=A-9827|0)>>>0<6)break vA;break be;case 8:if(r=-2147483648,A>>>0<=9861)break G;break t;case 10:switch(r=-2147483648,a=130,A-9888|0){case 1:break l;case 0:break t}if(a=134,(-2&A)!=9898)break G;break t;case 11:if(r=-2147483648,a=130,(-2&A)==9904)break t;if(a=134,A-9917>>>0>=2)break G;break t;case 12:if((-2&A)==9924)break l;r=-2147483648,a=130;ae:switch(A-9928|0){case 0:case 7:break t;case 6:break ae;default:break G}break l;case 14:t=(0|A)==9962,r=-2147483648,$=(A=(0|A)==9961)?130:t?134:128;break m;case 13:break wA;case 9:break kA;case 15:break oe;case 7:break xA;case 1:break yA;default:break G}if((0|A)==9972|A>>>0<9970)break Z;if(r=-2147483648,a=134,A>>>0<9974||(0|A)!=9974&&(a=130,A>>>0<9977))break t;if((A=A-9977|0)>>>0<5)break IA;break G}x:{oe:{ae:{K:{ue:switch((-16&A)-9984>>>4|0){case 0:if(r=0,a=130,(0|A)==9986||(a=128,A>>>0<9989)||(a=134,(0|A)==9989))break x;switch(a=150,(-2&A)-9994|0){case 0:break x;case 2:break ae}if(a=130,A-9992>>>0<6)break x;t=(0|A)==9999,r=0,a=(A=(0|A)==9998)?128:t?130:0;break x;case 1:if(r=0,a=128,A>>>0<10002)break x;if((A=A-10002|0)>>>0>11||(a=130,!(1<<A&2069)))break K;break x;case 2:t=(0|A)==10024,r=0,a=(A=(0|A)==10017)?130:t?134:0;break x;case 4:r=0,a=130;de:switch(A-10052|0){case 0:case 3:break x;case 8:case 10:break de;default:break K}a=134;break x;case 5:if(r=0,a=1073741958,A-10067>>>0<2)break x;a=(A=A-10069&-3)?0:536871046;break x;case 6:if((t=A-10082|0)>>>0<3)break oe;if(r=0,a=128,A>>>0<=10084)break K;break x;case 9:if(r=0,a=134,A-10133>>>0>=3)break K;break x;case 10:if(r=0,a=130,(0|A)!=10145)break K;break x;case 11:t=(0|A)==10175,r=0,a=(A=(0|A)==10160)||t?134:0;break x;case 3:break ue;default:break K}if(r=0,a=130,A-10035>>>0<2)break x}r=0,a=0;break x}a=146;break x}r=e[(A=83992+(t<<3)|0)>>2],a=e[A+4>>2]}return $=a,-2147483648|r}if(r=-2147483648,a=130,A-11013>>>0<3||(a=134,A-11035>>>0<2))break t;t=(0|A)==11093,r=-2147483648,$=(A=(0|A)==11088)||t?134:0;break m}if(A-11904>>>0>=26)break Q;return $=0,1048576}if(A-12276>>>0>=8)break a;break t}if((A=A-12306|0)>>>0>14||(r=-2147483648,!(1<<A&16387)))break a;break t}t=0,$=(A=A-12951&-3)?0:130;break n}if(r=0,a=128,(0|A)==127279)break t;if(A-127280>>>0<26||A-127312>>>0<26)return $=0,33792;if((t=A-127344|0)>>>0<=15&&(r=33792,a=130,1<<t&49155)||(r=33792,a=0,t>>>0<26))break t;if((0|A)==127374)break Y;if(r=0,a=134,A-127377>>>0<10)break t;if(a=102,A>>>0<=127461)break a;break t}r=0,a=134;j:{switch(A-127489|0){case 0:case 25:break t;case 1:break F;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:break j}switch(A-127535|0){case 0:break t;case 8:break F;default:break j}}if((-2&A)==127568|A-127538>>>0<9)break t;if(a=128,A>>>0<=127583)break a;break t}if((0|A)==127777)break F;if(A-127789>>>0<9|A-127799>>>0<70)break Y;if((0|A)==127877)break q;if(A-127870>>>0<22)break Y;if(A-127780>>>0<112)break F;switch(r=0,a=130,A-127894|0){case 44:case 45:case 46:case 49:break q;case 0:case 1:case 3:case 4:case 5:break t}if(A-127904>>>0<42)break Y;if(a=150,(0|A)==127946||(a=146,A-127947>>>0<2))break t;if(A-127951>>>0<5)break Y;if(a=134,A-127968>>>0<17||(a=130,A-127902>>>0<83))break t;if((t=A-127987|0)>>>0<5)break bA;break Ze}switch(r=0,a=130,A-128063|0){case 0:case 2:break t}if((0|A)==128124|(-5&A)-128129>>>0<3|(0|A)==128110|A-128112>>>0<9||(-2&A)==128066|A-128102>>>0<4|A-128070>>>0<11)break q;switch(A-128253|0){case 1:$=128;break o;case 0:break F}if(a=150,(0|A)==128170)break t;break Y}if(A>>>0<128318)break Y;if(r=0,A>>>0<128326)break t;if(A-128329>>>0<2)break F;if(A-128331>>>0<4|A-128336>>>0<24)break Y;if(A-128367>>>0<2)break F;if((-2&A)==128372){$=146;break o}if(A-128371>>>0<7)break F;if(a=150,!(t=A-128378|0))break t;if((0|t)==13|A-128394>>>0<4)break F;if(a=146,(0|A)==128400||(a=150,A-128405>>>0<2))break t;switch(a=134,A-128420|0){case 0:break t;case 1:case 4:case 13:case 14:case 24:case 30:case 31:case 32:case 45:case 46:case 47:case 56:case 57:case 58:case 61:case 63:case 68:case 75:case 79:case 86:break F}A=A>>>0>128506,t=0;break p}if(r=0,a=128,A-128981>>>0>=4)break a;break t}if(A>>>0<129292)break a;if(A-129328>>>0<10)break q;switch(r=0,a=150,A-129304|0){case 35:break a;case 0:case 1:case 2:case 3:case 4:case 6:case 7:case 14:break t}if(A-129341>>>0<2)break q;if(a=0,(0|A)==129350||(a=198,(-4&A)==129456))break t;if((t=A-129461|0)>>>0<5)break mA;break hA}if(r=1048576,A-11931>>>0<89)break t;break a}return $=0,524288;case 29:return $=16777216,1073741825;case 28:break t;case 30:break jA;default:break a}return $=0,(0|A)==32?1073741825:1}if(!(1079>>>t&1))break fe;t=e[(A=81344+(t<<3)|0)>>2];break h}if(557553>>>t&1)break k;if((-4&A)!=8508)break Me;break t}if(!(207>>>t&1))break me;break d}if(r=1024,!(1017>>>t&1))break Ge;break t}if(r=1024,!(32895>>>t&1))break De;break t}if(r=1024,!(55>>>t&1))break Qe;break t}if(r=1024,!(3087>>>t&1))break Pe;break t}if((A=A-71453|0)>>>0>=15)break a;t=e[(A=82312+(A<<3)|0)>>2];break h}if(!(49023>>>t&1))break ze;t=e[(A=82432+(t<<3)|0)>>2];break h}if(!(514623>>>t&1))break _;t=e[(A=82664+(t<<3)|0)>>2];break h}t=e[(A=83160+(t<<3)|0)>>2];break h}if(r=268435520,!(197>>>t&1))break Se;break t}t=e[(A=83208+(t<<3)|0)>>2];break h}if((A=A-6145|0)>>>0>=10)break a;t=e[(A=83296+(A<<3)|0)>>2];break h}if(!(1077711>>>t&1))break Ae;t=e[(A=83376+(t<<3)|0)>>2];break h}if(!(159>>>t&1))break Ce;t=e[(A=83544+(t<<3)|0)>>2];break h}if((A=A-121479|0)>>>0>=4)break a;t=e[(A=83608+(A<<3)|0)>>2];break h}if(!(195>>>t&1))break Oe;break U}if((A=A-9745|0)>>>0>=13)break G;t=e[(A=83640+(A<<3)|0)>>2];break h}if(1101>>>t&1)break Z;if(r=-2147483648,a=130,A>>>0<=9773)break G;break t}if(!(45>>>t&1))break be;t=e[(A=83744+(t<<3)|0)>>2];break h}if((A=A-9851|0)>>>0>=5)break G;t=e[(A=83792+(A<<3)|0)>>2];break h}if((A=A-9874|0)>>>0>=11)break G;t=e[(A=83832+(A<<3)|0)>>2];break h}if((A=A-9937|0)>>>0>=4)break G;t=e[(A=83920+(A<<3)|0)>>2];break h}t=e[(A=83952+(A<<3)|0)>>2];break h}if(!(23>>>t&1))break Ze;t=e[(A=84016+(t<<3)|0)>>2];break h}if(r=0,a=150,!(1991>>>t&1))break Ne;break t}if(a=150,27>>>t&1)break t}t=0,$=(A=A-129489>>>0<13)?150:134;break n}A=A-127992>>>0<3,t=0;break p}if(A-9837>>>0<2)break t}$=128;break u}if(A-8623>>>0<13)break I;if(A-8636>>>0<18)break U;if((t=A-8656|0)>>>0<22&&(a=0,3157995>>>t&1)||(r=-2147483648,a=0,A-8661>>>0<31))break t;break a}if(A>>>0<128592)break Y;if(r=0,a=0,A>>>0<128640)break t;if(!((t=A-128675|0)>>>0>29|!(1<<t&537788417)))break q;if(A>>>0<128710)break Y;if(a=150,(0|A)==128716)break t;if(A-128715>>>0<5)break F;if(A-128720>>>0<3)break Y;if(!((t=A-128736|0)>>>0>=10|!(575>>>t&1)))break F;if(a=134,A-128747>>>0<2)break t;switch(a=130,A-128752|0){case 0:case 3:break t}A=A-128756>>>0<6,t=0;break p}switch(r=-2147483648,A-8260|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:break a;case 0:case 14:break t}if((0|(A=A-8315|0))!=16&&A)break a;return $=0,8}if(r=268435520,a=1073741824,(0|A)!=69955)break a;break t}if(A-8266>>>0<8)break I;if(r=-2147483640,(0|A)==8275)break t;if(r=-2147483648,A-8277>>>0>=10)break a;break t}$=542113792;break u}if(r=-2147483648,a=0,A-65093>>>0<2||(r=64,a=268435456,(0|i)==65104))break t;r=268435520,a=-2147483648;Ce:switch(A-65106|0){case 3:$=134217728;break A;case 5:$=536870912;break s;case 4:break c;case 2:break r;case 0:break t;case 15:case 22:break Ce;default:break a}break k}if((0|A)==2142)break se;if(r=64,A-2096>>>0<15)break t;break a}if(r=1024,A-72850>>>0<22)break t;if((A=A-72874|0)>>>0>=13)break a;t=e[(A=82560+(A<<3)|0)>>2];break h}if(r=4096,A-71103>>>0<2)break t;if(r=1024,(-2&A)!=71132)break a;break t}if((0|A)==70726)break f;if(r=4096,(-2&A)!=70850)break a;break t}if(r=4096,A-68325>>>0>=2)break a;break t}if((0|A)==6109)break f;if(r=4096,A-6089>>>0>=11)break a;break t}switch(A-3959|0){case 0:case 2:return $=0,8389632}if((0|t)==3968|A-3953>>>0<14)break d;if(!((t=A-3970|0)>>>0>=6|!(55>>>t&1)))break f;if(A-3981>>>0<11)break d;if(r=1024,A-3993>>>0<36)break t;if(r=4096,(0|A)!=4038)break a;break t}if(A-3655>>>0<6)break f;if(!((t=A-3761|0)>>>0>11|!(1<<t&3577)))break d;switch(r=1024,A-3661|0){case 1:break f;case 0:break t}if(r=4096,A-3784>>>0<5)break t;if(r=1024,(0|A)!=3789)break a;break t}if(A-1770>>>0<3)break t;if(r=1024,(0|A)!=1773)break a;break t}if((-2&A)==73028)break f;switch(r=1024,A-73104|0){default:if((0|A)!=73031)break a;break t;case 2:case 3:case 4:case 6:break a;case 0:case 1:case 5:break t;case 7:}break f}if((A=A-8492|0)>>>0>=30)break a;t=e[(A=81704+(A<<3)|0)>>2];break h}r=0;break N}a=(t=(-3&A)==43712)>>>20|0,r=t<<12}if((0|(s=-65536&A))==131072)break We;if((0|s)==65536)break he;if(t=r,i=a,s)break pe}if(A-13312>>>0<6582||A-19968>>>0<20976)break e;if(s=2048,A-63744>>>0<366)return $=i,2048|t;if(r=t,a=i,A-64112>>>0>=106)break pe;break R}if(s=2099200,A-183984>>>0<7473|A-178208>>>0<5762|A-177984>>>0<222|A-131072>>>0<42711||A-173824>>>0<4149||(s=2048,A-194560>>>0<542))break R;break pe}if(s=2048,A-110960>>>0<396|A-94208>>>0<6125|A-100352>>>0<755)break R}s=0}return $=a,r|s}if((-4&A)==8508)break k;if(r=128,!(A-8517>>>0<3)&&(r=16777344,(-2&A)!=8520))break a}$=a;break m}t=(A=A>>>0>131069)?65536:0,$=A?0:128;break n}if((0|A)==11776)break I}$=0;break o}$=0;break u}return $=0,4194304}return $=0,128}return $=0,16777344}return $=0,4096}return $=0,1024}return $=0,-2147483520}return $=0,A-10214>>>0<10?-2147483520:-2147483648}$=0;break s}$=0;break A}$=130;break o}$=130;break u}$=134;break o}return $=150,0}$=0;break n}$=A?0:a;break n}return $=t,A}return 131072}return $=0,16777216}$=A?0:r;break n}return $=a,A}return $=r,A}$=A?0:t;break m}return $=0,8192}$=e[A+4>>2];break n}$=A?8388608:0;break n}return r}return $=0,-2147483616}$=A?134:128}return t}$=134}return-2147483648}return 0}$=1073741824;break s}$=-2147483648}return 268435520}$=67108864}return 64}return $=i,2099200|t}function qe(A){var t,r=0,a=0,s=0,i=0,o=0;(t=Ct(8244))&&(e[t+328>>2]=2,g[132848]=0,e[t+684>>2]=0,e[t+688>>2]=0,e[t+320>>2]=0,e[t+324>>2]=0,g[t+268|0]=0,g[t+228|0]=0,e[t+8216>>2]=0,e[t+8220>>2]=0,e[t+224>>2]=104944,e[t+216>>2]=383,e[t+220>>2]=96,jA(t+344|0,0,292),e[t+8196>>2]=0,e[(r=t+8188|0)>>2]=0,e[r+4>>2]=0,e[t+8180>>2]=0,e[t+8184>>2]=0,g[t+460|0]=22,g[t+461|0]=129,g[t+466|0]=38,g[t+462|0]=38,g[t+463|0]=36,g[t+464|0]=22,g[t+465|0]=224,g[t+456|0]=22,g[t+457|0]=22,g[t+458|0]=44,g[t+459|0]=22,g[t+454|0]=46,g[t+455|0]=129,g[t+446|0]=22,g[t+447|0]=38,g[t+448|0]=28,g[t+449|0]=193,g[t+450|0]=38,g[t+451|0]=22,g[t+452|0]=46,g[t+453|0]=46,g[t+441|0]=129,g[t+442|0]=38,g[t+443|0]=22,g[t+444|0]=38,g[t+445|0]=193,e[t+332>>2]=104912,e[t+336>>2]=104916,e[t+340>>2]=105232,g[t+296|0]=18,g[t+297|0]=18,b[t+304>>1]=182,b[t+306>>1]=140,g[t+298|0]=20,b[t+308>>1]=220,b[t+310>>1]=220,b[t+312>>1]=220,g[t+299|0]=20,g[t+300|0]=20,b[t+314>>1]=240,g[t+301|0]=22,b[t+316>>1]=260,b[t+318>>1]=280,g[t+302|0]=22,g[t+303|0]=20,r=jA(t,0,212),e[r+200>>2]=20,e[r+192>>2]=25966,e[r+196>>2]=500,e[r+80>>2]=95,e[r+16>>2]=1,e[r+20>>2]=3,e[r+8>>2]=2,e[r+52>>2]=19,g[r+168|0]=3,e[r+92>>2]=2,e[r+72>>2]=4,e[r+40>>2]=115,e[r+44>>2]=95,e[r+140>>2]=105244,Pn(r,201),e[r+120>>2]=2,e[r+124>>2]=44,e[r+164>>2]=100,e[r+128>>2]=46,e[r+132>>2]=14,e[r+112>>2]=1227133512,e[r+116>>2]=49,e[r+104>>2]=1,a=e[26313],e[r+636>>2]=e[26312],e[r+640>>2]=a,a=e[26315],e[r+644>>2]=e[26314],e[r+648>>2]=a,a=e[26317],e[r+652>>2]=e[26316],e[r+656>>2]=a,a=e[26319],e[r+660>>2]=e[26318],e[r+664>>2]=a,a=e[26321],e[r+668>>2]=e[26320],e[r+672>>2]=a,a=e[26323],e[r+676>>2]=e[26322],e[r+680>>2]=a,a=l[104928]|l[104929]<<8,g[r+160|0]=a,g[r+161|0]=a>>>8,a=l[104924]|l[104925]<<8|l[104926]<<16|l[104927]<<24,g[r+156|0]=a,g[r+157|0]=a>>>8,g[r+158|0]=a>>>16,g[r+159|0]=a>>>24),s=qA(t+228|0,A),r=0;e:{A:if(a=l[0|A]){for(;r=(a<<24>>24)+(r<<8)|0,a=l[0|(A=A+1|0)];);r:{s:{i:{c:{o:{u:{l:{n:{p:{C:{m:{b:{h:{E:{w:{y:{L:{V:{W:{M:{v:{D:{S:{q:{Y:{Z:{F:{se:{H:{ye:{U:{d:{f:{$:{k:{ee:{I:{a:{Ve:{J:{t:{fe:{R:{pe:{he:{We:{le:{N:{Ee:{B:{Me:{_:{me:{Ge:{je:{De:{Qe:{Te:{Pe:{ze:{Se:{Ce:{Ue:{Ae:{Fe:{Ke:{Ne:{Oe:{G:{be:{if((0|r)<=28008){if((0|r)<=26464){if((0|r)<=25696){switch(r-24934|0){case 20:break n;case 1:case 2:case 3:case 4:case 5:case 6:case 9:case 10:case 11:case 14:case 15:case 16:case 17:case 18:case 19:break A;case 8:break _;case 12:break Se;case 7:break Ce;case 0:break Ue;case 13:break be}switch(r-25189|0){case 1:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 11:case 12:case 13:break A;case 14:break fe;case 2:break Pe;case 0:break ze;case 9:break be}switch(r-25441|0){case 18:break y;case 0:break _;case 24:break Qe;default:break A}}switch(r-25964|0){case 1:case 4:case 5:case 6:break A;case 8:break Ee;case 9:break Me;case 7:break _;case 3:break me;case 2:break Ge;case 0:break Oe}switch(r-26209|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:break A;case 17:break le;case 8:break N;case 0:break B}switch(r-25697|0){case 4:break je;case 0:break De;default:break A}}if((0|r)<=27488){switch(r-26729|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 13:case 14:case 15:break A;case 16:break Ve;case 12:break J;case 11:break t;case 9:break fe;case 0:break R}switch(r-26977|0){case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 15:case 16:case 17:break A;case 19:break k;case 18:break ee;case 3:break I;case 14:break a;case 0:break _}switch(r-26465|0){case 20:break R;case 13:break pe;case 0:case 3:break he;default:break A}}switch(r-27489|0){case 13:break p;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 12:case 15:case 16:case 17:case 18:case 19:case 21:case 22:case 23:break A;case 24:break se;case 20:break H;case 14:break ye;case 11:break U;case 10:break d;case 0:break f}switch(r-27745|0){case 19:break Z;case 0:break F;case 21:break Ke;default:break A}}if((0|r)<=29792){if((0|r)<=28768){switch(r-28009|0){case 3:break p;case 11:break q;case 2:break Y;case 1:case 4:case 5:case 6:case 7:case 8:case 12:case 13:case 14:case 15:break A;case 10:break I;case 9:break R;case 0:case 16:break Ae}switch(r-28258|0){case 0:break D;case 10:break S;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 9:break A;case 3:break R}switch(r-28525|0){case 0:break v;case 5:break R;default:break A}}if((0|r)<=29539){switch(r-28769|0){case 19:break W;case 11:break M;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 20:case 21:case 22:case 23:break A;case 0:break R;case 24:break Ae}switch(r-29295|0){case 6:break L;case 0:break V;case 1:case 2:case 3:case 4:case 5:break A}if((0|r)==29045)break Ae;break A}switch(r-29540|0){case 19:break C;case 18:break m;case 13:break b;case 8:break E;case 5:break w;case 7:break y;case 14:break fe;case 0:break o;default:break A}}if((0|r)>6514801)break G;if((0|r)<=30058)switch(r-29793|0){case 19:break l;case 17:break n;case 0:case 4:break p;case 13:break C;case 7:break Ae;default:break A}if((0|r)<=30312)switch(r-30059|0){case 0:break u;case 15:break Ae;case 7:break o;default:break A}if((0|r)==30313)break c;if((0|r)==31336)break i;if((0|r)!=6451321)break A}if(e[t+296>>2]=303174162,e[t+300>>2]=370545684,e[t+600>>2]=2432,e[t+8>>2]=0,e[t+12>>2]=65540,e[t+100>>2]=e[t+96>>2],A=e[25889],e[t+304>>2]=e[25888],e[t+308>>2]=A,A=e[25891],e[t+312>>2]=e[25890],e[t+316>>2]=A,ds(t),g[t+345|0]=2|l[t+345|0],g[t+406|0]=16|l[t+406|0],g[t+407|0]=16|l[t+407|0],g[t+408|0]=16|l[t+408|0],g[t+409|0]=16|l[t+409|0],g[t+410|0]=16|l[t+410|0],g[t+411|0]=16|l[t+411|0],g[t+412|0]=16|l[t+412|0],g[t+413|0]=16|l[t+413|0],g[t+414|0]=16|l[t+414|0],g[t+415|0]=16|l[t+415|0],g[t+416|0]=16|l[t+416|0],g[t+417|0]=16|l[t+417|0],g[t+418|0]=16|l[t+418|0],g[t+419|0]=16|l[t+419|0],g[t+420|0]=16|l[t+420|0],g[t+456|0]=4|l[t+456|0],g[t+457|0]=4|l[t+457|0],e[t+112>>2]=613567144,e[t+104>>2]=16,(0|r)!=6451321)break e;e[t+104>>2]=1,e[t+108>>2]=512,r=6451321;break e}if((0|r)>7364975)break Fe;if((0|r)>6840682)break Ne;if((0|r)==6514802)break Te;if((0|r)==6516078)break i;if((0|r)!=6779491)break A}if(e[t+600>>2]=896,e[t+328>>2]=8,e[t+296>>2]=336858127,e[t+300>>2]=353768980,e[t+332>>2]=103632,A=e[25905],e[t+304>>2]=e[25904],e[t+308>>2]=A,A=e[25907],e[t+312>>2]=e[25906],e[t+316>>2]=A,jA(t+344|0,0,256),g[t+388|0]=129,g[t+389|0]=129,g[t+390|0]=129,g[t+391|0]=129,g[t+420|0]=129,g[t+421|0]=129,g[t+422|0]=129,g[t+423|0]=129,g[t+360|0]=129,g[t+392|0]=129,g[t+393|0]=129,g[t+417|0]=129,g[t+418|0]=129,g[t+419|0]=129,g[t+420|0]=129,g[t+408|0]=6,g[t+409|0]=4,g[t+410|0]=6,g[t+411|0]=6,g[t+412|0]=6,g[t+413|0]=193,g[t+414|0]=6,g[t+415|0]=6,g[t+406|0]=6,g[t+407|0]=129,g[t+398|0]=4,g[t+399|0]=193,g[t+400|0]=6,g[t+401|0]=193,g[t+402|0]=6,g[t+403|0]=4,g[t+404|0]=4,g[t+405|0]=4,g[t+394|0]=4,g[t+395|0]=4,g[t+396|0]=4,g[t+397|0]=193,e[t+44>>2]=130,e[t+8>>2]=2,e[t+12>>2]=6,e[t+16>>2]=0,e[t+20>>2]=2,e[t+104>>2]=264,e[t+108>>2]=6146,g[t+391|0]=193,g[t+389|0]=193,g[t+390|0]=193,g[t+421|0]=193,e[t+100>>2]=e[t+96>>2],g[t+416|0]=4|l[t+416|0],(0|r)!=6779491)break e;e[t+40>>2]=1,r=6779491;break e}if((0|r)==6840683)break We;if((0|r)==6972015)break $;if((0|r)!=7107687)break A}e[t+296>>2]=134875662,e[t+300>>2]=252968960,e[t+328>>2]=5,g[t+169|0]=1,e[t+132>>2]=33,e[t+104>>2]=99336,e[t+8>>2]=0,e[t+12>>2]=262182,A=e[26069],e[t+304>>2]=e[26068],e[t+308>>2]=A,A=e[26071],e[t+312>>2]=e[26070],e[t+316>>2]=A;break e}if((0|r)<=7564649){if((0|r)==7364976)break _;if((0|r)==7435619)break Ae;if((0|r)!=7563374)break A;e[t+148>>2]=1,e[t+112>>2]=24,e[t+104>>2]=1,e[t+100>>2]=e[t+96>>2],r=7563374;break e}if((0|r)==7564650)break h;if((0|r)==7959909)break i;if((0|r)!=1885958500)break A}e[t+104>>2]=0;break e}e[t+4>>2]=48,e[t+8>>2]=0,e[t+144>>2]=1,e[t+104>>2]=16779472,e[t+32>>2]=1,e[t+24>>2]=1,A=e[25881],e[t+304>>2]=e[25880],e[t+308>>2]=A,A=e[25883],e[t+312>>2]=e[25882],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=24934;break e}e[t+600>>2]=4608,e[t+296>>2]=303173650,e[t+300>>2]=303174162,e[t+8>>2]=0,e[t+12>>2]=36,e[t+104>>2]=1024,e[t+100>>2]=e[t+96>>2],e[t+40>>2]=1,A=e[25865],e[t+304>>2]=e[25864],e[t+308>>2]=A,A=e[25867],e[t+312>>2]=e[25866],e[t+316>>2]=A,r=24941;break e}for(e[t+600>>2]=1536,e[t+224>>2]=0,e[t+216>>2]=1631,e[t+220>>2]=1536,e[t+104>>2]=2884720,e[t+328>>2]=7,e[t+40>>2]=1,J=r=J-16|0,e[r+12>>2]=-1,A=89684;s=Gt(r+12|0,A),(0|(a=e[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=1|l[0|i]),A=A+s|0,a;);for(e[r+12>>2]=-1,A=89743;s=Gt(r+12|0,A),(0|(a=e[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=2|l[0|i]),A=A+s|0,a;);for(e[r+12>>2]=-1,A=89795;s=Gt(r+12|0,A),(0|(a=e[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=4|l[0|i]),A=A+s|0,a;);for(e[r+12>>2]=-1,A=89941;s=Gt(r+12|0,A),(0|(a=e[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=16|l[0|i]),A=A+s|0,a;);for(e[r+12>>2]=-1,A=90045;s=Gt(r+12|0,A),(0|(a=e[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=32|l[0|i]),A=A+s|0,a;);for(e[r+12>>2]=-1,A=90045;s=Gt(r+12|0,A),(0|(a=e[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=8|l[0|i]),A=A+s|0,a;);for(e[r+12>>2]=-1,A=90045;s=Gt(r+12|0,A),(0|(a=e[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=64|l[0|i]),A=A+s|0,a;);J=r+16|0,r=24946;break e}e[t+600>>2]=1056,e[t+12>>2]=34,e[t+216>>2]=1118,e[t+220>>2]=1072,jA(t+344|0,0,256),g[t+406|0]=4,g[t+366|0]=4,g[t+367|0]=4,g[t+369|0]=4,g[t+370|0]=4,g[t+371|0]=4,g[t+372|0]=4,g[t+361|0]=4,g[t+362|0]=4,g[t+363|0]=4,g[t+364|0]=4,g[t+373|0]=4,g[t+380|0]=4,g[t+381|0]=4,g[t+382|0]=4,g[t+383|0]=4,g[t+375|0]=4,g[t+376|0]=4,g[t+377|0]=4,g[t+378|0]=4,g[t+384|0]=4,g[t+360|0]=129,e[t+328>>2]=6,e[t+296>>2]=134744588,e[t+300>>2]=286261248,e[t+40>>2]=1,e[t+8>>2]=0,e[t+104>>2]=1032,e[t+108>>2]=66,A=e[25885],e[t+304>>2]=e[25884],e[t+308>>2]=A,A=e[25887],e[t+312>>2]=e[25886],e[t+316>>2]=A,r=25189;break e}vs(t),e[t+328>>2]=6,e[t+56>>2]=2,e[t+36>>2]=263,e[t+40>>2]=1074,e[t+124>>2]=32,e[t+104>>2]=184554728,e[t+8>>2]=2,g[t+386|0]=64&l[t+386|0]|129,r=25191;break e}e[t+12>>2]=262182,e[t+40>>2]=1,r=6514802;break e}e[t+328>>2]=14,e[t+296>>2]=303173393,e[t+300>>2]=336986112,e[t+104>>2]=1024,e[t+16>>2]=0,e[t+20>>2]=2,e[t+8>>2]=2,e[t+12>>2]=22,e[t+44>>2]=120,A=e[25893],e[t+304>>2]=e[25892],e[t+308>>2]=A,A=e[25895],e[t+312>>2]=e[25894],e[t+316>>2]=A,g[t+463|0]=64&l[t+463|0]|129,g[t+465|0]=64&l[t+465|0]|129,r=25465;break e}e[t+8>>2]=0,e[t+104>>2]=184618072,e[t+32>>2]=1,A=e[26101],e[t+304>>2]=e[26100],e[t+308>>2]=A,A=e[26103],e[t+312>>2]=e[26102],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=25697;break e}e[t+296>>2]=336860180,e[t+300>>2]=336991764,e[t+8>>2]=0,e[t+104>>2]=16846872,e[t>>2]=8,e[t+4>>2]=48,e[t+80>>2]=87,e[t+32>>2]=1,e[t+36>>2]=256,e[t+40>>2]=2,A=e[25897],e[t+304>>2]=e[25896],e[t+308>>2]=A,A=e[25899],e[t+312>>2]=e[25898],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=25701;break e}e[t+132>>2]=33,e[t+104>>2]=16779328,e[t+8>>2]=0,e[t+12>>2]=8,e[t+204>>2]=101,e[t+60>>2]=2,e[t+40>>2]=2,A=e[25901],e[t+304>>2]=e[25900],e[t+308>>2]=A,A=e[25903],e[t+312>>2]=e[25902],e[t+316>>2]=A,g[t+441|0]=64|l[t+441|0],g[t+445|0]=64|l[t+445|0],g[t+449|0]=64|l[t+449|0],g[t+455|0]=64|l[t+455|0],g[t+461|0]=64|l[t+461|0],g[t+465|0]=64|l[t+465|0],r=25966;break e}e[t+328>>2]=4,e[t+296>>2]=336858640,e[t+300>>2]=353768980,e[t+104>>2]=16782344,e[t+20>>2]=2,e[t+12>>2]=22,e[t+4>>2]=2,e[t+8>>2]=2,e[t+332>>2]=103640,A=e[25997],e[t+304>>2]=e[25996],e[t+308>>2]=A,A=e[25999],e[t+312>>2]=e[25998],e[t+316>>2]=A,r=25967;break e}e[t+296>>2]=269422096,e[t+300>>2]=370545684,e[t+104>>2]=86017320,e[t+108>>2]=6144,e[t+16>>2]=0,e[t+20>>2]=2,e[t+8>>2]=2,e[t+12>>2]=534,e[t+100>>2]=e[t+96>>2],e[t+44>>2]=120,A=e[25913],e[t+304>>2]=e[25912],e[t+308>>2]=A,A=e[25915],e[t+312>>2]=e[25914],e[t+316>>2]=A;_:{me:{if((0|r)<=26976){if((0|r)==24942)break me;if((0|r)!=25441)break _;e[t+12>>2]=566,e[t+336>>2]=103664,r=25441;break e}if((0|r)!=26977){if((0|r)!=7364976)break _;e[t+8>>2]=3,e[t+12>>2]=310,r=7364976;break e}e[t+104>>2]=85984264,r=26977;break e}e[t+104>>2]=153093416,e[t+108>>2]=2048,e[t+140>>2]=103676,r=24942;break e}e[t+40>>2]=2;break e}e[t+296>>2]=303173648,e[t+300>>2]=303174162,e[t+104>>2]=3147080,e[t+12>>2]=65792,e[t+84>>2]=1,A=e[25921],e[t+304>>2]=e[25920],e[t+308>>2]=A,A=e[25923],e[t+312>>2]=e[25922],e[t+316>>2]=A,r=25973;break e}e[t+600>>2]=1536,e[t+216>>2]=1740,e[t+220>>2]=1568,e[t+104>>2]=96,e[t+224>>2]=103696,e[t+340>>2]=103872,e[t+40>>2]=1,r=26209;break e}e[t+328>>2]=5}e[t+104>>2]=86024,e[t+164>>2]=130,g[t+465|0]=64&l[t+465|0]|129;break e}e[t+296>>2]=303173650,e[t+300>>2]=303174162,e[t+8>>2]=3,e[t+12>>2]=36,e[t+144>>2]=2,e[t+104>>2]=118658312,e[t+28>>2]=1,e[t+100>>2]=e[t+96>>2],A=e[25865],e[t+304>>2]=e[25864],e[t+308>>2]=A,A=e[25867],e[t+312>>2]=e[25866],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=26226;break e}b[t+170>>1]=257,e[t+148>>2]=1,e[t+12>>2]=2,r=6840683;break e}e[t+144>>2]=2,e[t+104>>2]=2098176,e[t+8>>2]=0,e[t+12>>2]=32,e[t+40>>2]=3,e[t+28>>2]=1;break e}e[t+8>>2]=3,e[t+100>>2]=e[t+96>>2],r=26478;break e}e[t+328>>2]=18,e[t+296>>2]=320081425,e[t+300>>2]=353768980,e[t+600>>2]=2304,e[t+112>>2]=84648,e[t+104>>2]=16,e[t+8>>2]=6,e[t+12>>2]=65540,e[t+100>>2]=e[t+96>>2],A=e[25973],e[t+304>>2]=e[25972],e[t+308>>2]=A,A=e[25975],e[t+312>>2]=e[25974],e[t+316>>2]=A;R:{pe:{he:{if((0|r)<=28529){if((0|r)==26485)break he;if((0|r)!=28261)break R;A=e[25861],e[t+304>>2]=e[25860],e[t+308>>2]=A,A=e[25863],e[t+312>>2]=e[25862],e[t+316>>2]=A,e[t+296>>2]=320017171,e[t+300>>2]=320017171,e[t+132>>2]=22,e[t+112>>2]=-1431655768,e[t+108>>2]=32768|e[t+108>>2],ds(t);break e}if((0|r)==28530)break pe;if((0|r)!=28769)break R;e[t+600>>2]=2560,ds(t);break e}A=e[25861],e[t+304>>2]=e[25860],e[t+308>>2]=A,A=e[25863],e[t+312>>2]=e[25862],e[t+316>>2]=A,e[t+600>>2]=2688,e[t+296>>2]=320017171,e[t+300>>2]=320017171,e[t+8>>2]=2,ds(t);break e}e[t+600>>2]=2816}ds(t);break e}g[0|s]=104,g[s+1|0]=98,g[s+2|0]=115,g[s+3|0]=0,(0|r)!=29554?(A=e[26093],e[t+304>>2]=e[26092],e[t+308>>2]=A,A=e[26095],e[t+312>>2]=e[26094],e[t+316>>2]=A):(A=e[25977],e[t+304>>2]=e[25976],e[t+308>>2]=A,A=e[25979],e[t+312>>2]=e[25978],e[t+316>>2]=A),e[t+328>>2]=3,e[t+296>>2]=336859409,e[t+300>>2]=353768980,b[t+168>>1]=261,e[t+8>>2]=0,e[t+12>>2]=16,e[t+144>>2]=1,e[t+184>>2]=1056,e[t+104>>2]=33572172,e[t+108>>2]=330,e[t+36>>2]=3,g[t+465|0]=64&l[t+465|0]|129,g[t+458|0]=64&l[t+458|0]|129;break e}e[t+104>>2]=17990912,e[t+8>>2]=3,e[t+12>>2]=36,r=26740;break e}e[t+328>>2]=3,e[t+296>>2]=320016657,e[t+300>>2]=353768980,e[t+124>>2]=32,e[t+128>>2]=44,e[t+104>>2]=186758144,e[t+12>>2]=1081398,e[t+16>>2]=2,e[t+4>>2]=32,e[t+8>>2]=0,e[t+116>>2]=899,e[t+120>>2]=1,g[t+169|0]=1,e[t+76>>2]=2,A=e[25981],e[t+304>>2]=e[25980],e[t+308>>2]=A,A=e[25983],e[t+312>>2]=e[25982],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,Pn(t,3),r=26741;break e}for(e[t+600>>2]=1328,e[t+8>>2]=3,A=e[25985],e[t+304>>2]=e[25984],e[t+308>>2]=A,A=e[25987],e[t+312>>2]=e[25986],e[t+316>>2]=A,s=jA(t+344|0,0,256),g[t+429|0]=129,g[t+416|0]=129,g[t+403|0]=129,g[t+399|0]=129,g[t+400|0]=129,g[t+397|0]=129,g[t+393|0]=129,a=103952,i=50,o=50;g[0|(A=s+o|0)]=2|l[0|A],A=s+l[a+1|0]|0,g[0|A]=2|l[0|A],A=s+l[a+2|0]|0,g[0|A]=2|l[0|A],o=l[0|(a=a+3|0)],A=103952,(0|a)!=103982;);for(a=t+344|0;g[0|(s=a+i|0)]=4|l[0|s],s=a+l[A+1|0]|0,g[0|s]=4|l[0|s],s=a+l[A+2|0]|0,g[0|s]=4|l[0|s],i=l[0|(A=A+3|0)],(0|A)!=103982;);g[t+168|0]=6,e[t+104>>2]=5128,g[t+413|0]=4|l[t+413|0];break e}e[t+328>>2]=4,e[t+296>>2]=336858640,e[t+300>>2]=353768980,e[t+104>>2]=16782440,e[t+20>>2]=2,e[t+12>>2]=22,e[t+4>>2]=2,e[t+8>>2]=2,e[t+332>>2]=104e3,A=e[25997],e[t+304>>2]=e[25996],e[t+308>>2]=A,A=e[25999],e[t+312>>2]=e[25998],e[t+316>>2]=A,r=26991;break e}e[t+296>>2]=303174160,e[t+300>>2]=353768980,e[t+104>>2]=16781320,e[t+144>>2]=2,e[t+8>>2]=2,e[t+12>>2]=22,A=e[26005],e[t+304>>2]=e[26004],e[t+308>>2]=A,A=e[26007],e[t+312>>2]=e[26006],e[t+316>>2]=A;break e}for(e[t+8>>2]=0,e[t+12>>2]=16,e[t+56>>2]=2,e[t+28>>2]=17,A=e[26009],e[t+304>>2]=e[26008],e[t+308>>2]=A,A=e[26011],e[t+312>>2]=e[26010],e[t+316>>2]=A,A=0,a=t+344|0;g[0|(s=A+a|0)]=231&l[0|s],g[0|(s=a+(1|A)|0)]=231&l[0|s],g[0|(s=a+(2|A)|0)]=231&l[0|s],g[0|(s=a+(3|A)|0)]=231&l[0|s],(0|(A=A+4|0))!=256;);e[t+104>>2]=2280,e[t+108>>2]=2,e[t+608>>2]=104048,g[t+451|0]=16|l[t+451|0],g[t+456|0]=16|l[t+456|0],g[t+459|0]=16|l[t+459|0],g[t+460|0]=16|l[t+460|0],g[t+450|0]=8|l[t+450|0],g[t+462|0]=8|l[t+462|0],g[t+458|0]=8|l[t+458|0],g[t+465|0]=64&l[t+465|0]|129;break e}e[t+296>>2]=269618961,e[t+300>>2]=370546196,e[t+12>>2]=131110,e[t+144>>2]=2,e[t+104>>2]=184559112,e[t+108>>2]=8192,e[t+16>>2]=0,e[t+20>>2]=2,e[t+4>>2]=1,e[t+8>>2]=2,e[t+100>>2]=e[t+96>>2],e[t+140>>2]=103676,e[t+68>>2]=2,e[t+56>>2]=1,e[t+44>>2]=130,e[t+28>>2]=2,A=e[26025],e[t+304>>2]=e[26024],e[t+308>>2]=A,A=e[26027],e[t+312>>2]=e[26026],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=26996;break e}e[t+4>>2]=524,e[t+8>>2]=2,e[t+196>>2]=368,e[t+104>>2]=0,e[t+336>>2]=104128,e[t- -64>>2]=1,A=e[26029],e[t+304>>2]=e[26028],e[t+308>>2]=A,A=e[26031],e[t+312>>2]=e[26030],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=6972015;break e}for(e[t+296>>2]=303174162,e[t+300>>2]=370545684,A=e[25873],e[t+304>>2]=e[25872],e[t+308>>2]=A,A=e[25875],e[t+312>>2]=e[25874],e[t+316>>2]=A,s=jA(t+344|0,0,256),g[t+431|0]=1,g[t+429|0]=1,g[t+411|0]=1,g[t+405|0]=1,g[t+400|0]=1,g[t+396|0]=1,g[t+392|0]=1,A=104160,a=49;g[0|(a=a+s|0)]=4|l[0|a],a=s+l[A+1|0]|0,g[0|a]=4|l[0|a],a=s+l[A+2|0]|0,g[0|a]=4|l[0|a],a=l[0|(A=A+3|0)],(0|A)!=104193;);e[t+600>>2]=4256,e[t+8>>2]=0,e[t+12>>2]=16,g[t+168|0]=7,e[t+132>>2]=32,g[t+392|0]=128|l[t+392|0],g[t+396|0]=128|l[t+396|0],g[t+400|0]=128|l[t+400|0],g[t+405|0]=128|l[t+405|0],g[t+411|0]=128|l[t+411|0],g[t+429|0]=128|l[t+429|0],g[t+431|0]=128|l[t+431|0],e[t+188>>2]=1056,e[t+192>>2]=29301,e[t+104>>2]=19964960;break e}for(e[t+600>>2]=1056,s=jA(t+344|0,0,256),g[t+393|0]=1,g[t+365|0]=1,g[t+360|0]=1,g[t+545|0]=1,g[t+529|0]=1,g[t+391|0]=1,g[t+389|0]=1,g[t+390|0]=1,g[t+387|0]=1,g[t+379|0]=1,g[t+374|0]=1,g[t+368|0]=1,g[t+489|0]=1,g[t+487|0]=1,g[t+398|0]=1,A=104224,a=17;g[0|(a=a+s|0)]=4|l[0|a],a=s+l[A+1|0]|0,g[0|a]=4|l[0|a],a=s+l[A+2|0]|0,g[0|a]=4|l[0|a],a=l[0|(A=A+3|0)],(0|A)!=104251;);g[t+360|0]=128|l[t+360|0],g[t+365|0]=128|l[t+365|0],g[t+393|0]=128|l[t+393|0],g[t+368|0]=128|l[t+368|0],g[t+374|0]=128|l[t+374|0],g[t+379|0]=128|l[t+379|0],g[t+387|0]=128|l[t+387|0],g[t+389|0]=128|l[t+389|0],g[t+390|0]=128|l[t+390|0],g[t+391|0]=128|l[t+391|0],g[t+529|0]=128|l[t+529|0],g[t+545|0]=128|l[t+545|0],g[t+489|0]=128|l[t+489|0],g[t+487|0]=128|l[t+487|0],g[t+398|0]=128|l[t+398|0],A=e[26055],e[t+312>>2]=e[26054],e[t+316>>2]=A,A=e[26053],e[t+304>>2]=e[26052],e[t+308>>2]=A,e[t+296>>2]=353636370,e[t+300>>2]=336925972,e[t+200>>2]=0,e[t+8>>2]=7,e[t+12>>2]=2097184,g[t+168|0]=2,e[t+104>>2]=50176,e[t+84>>2]=1,Pn(t,3);break e}e[t+296>>2]=320017171,e[t+300>>2]=320017171,e[t+104>>2]=184618072,e[t+8>>2]=12,e[t+12>>2]=32,A=e[25861],e[t+304>>2]=e[25860],e[t+308>>2]=A,A=e[25863],e[t+312>>2]=e[25862],e[t+316>>2]=A,r=27500;break e}e[t+184>>2]=42752,e[t+600>>2]=4352,jA(t+344|0,0,256),g[t+456|0]=1,g[t+457|0]=1,g[t+458|0]=1,g[t+459|0]=1,g[t+449|0]=1,g[t+450|0]=1,g[t+451|0]=1,g[t+452|0]=1,g[t+453|0]=1,g[t+454|0]=1,g[t+455|0]=1,g[t+456|0]=1,g[t+441|0]=1,g[t+442|0]=1,g[t+443|0]=1,g[t+444|0]=1,g[t+445|0]=1,g[t+446|0]=1,g[t+447|0]=1,g[t+448|0]=1,g[t+460|0]=65,g[t+461|0]=65,g[t+532|0]=32,g[t+527|0]=32,g[t+519|0]=32,g[t+515|0]=32,g[t+349|0]=32,g[t+350|0]=32,g[t+346|0]=32,e[t+132>>2]=20,e[t+112>>2]=286331152,e[t+104>>2]=1024,e[t+108>>2]=16384,e[t+40>>2]=1,e[t+8>>2]=8,g[t+458|0]=65,g[t+453|0]=65,g[t+447|0]=65,g[t+448|0]=65,g[t+443|0]=65,g[t+444|0]=65,r=27503;break e}e[t+328>>2]=10,e[t+296>>2]=336859666,e[t+300>>2]=353768980,g[t+168|0]=2,e[t+104>>2]=263264,e[t+8>>2]=7,A=e[26065],e[t+304>>2]=e[26064],e[t+308>>2]=A,A=e[26067],e[t+312>>2]=e[26066],e[t+316>>2]=A,r=27509;break e}e[t+104>>2]=1,r=27513;break e}e[t+116>>2]=5e3,e[t+104>>2]=16777216,e[t+24>>2]=1,e[t+16>>2]=0,e[t+20>>2]=2,e[t+8>>2]=2,e[t+12>>2]=32,e[t+328>>2]=5,r=27745;break e}e[t+116>>2]=5e3,e[t+104>>2]=99336,e[t+108>>2]=256,e[t+24>>2]=1,e[t+16>>2]=0,e[t+20>>2]=2,e[t+8>>2]=2,e[t+12>>2]=32,e[t+328>>2]=5,r=27764;break e}e[t+328>>2]=6,e[t+296>>2]=336859409,e[t+300>>2]=353768980,e[t+600>>2]=1056,e[t+104>>2]=2114600,e[t+108>>2]=138,e[t+8>>2]=4,e[t+632>>2]=104288,e[t+604>>2]=104288,A=e[26093],e[t+304>>2]=e[26092],e[t+308>>2]=A,A=e[26095],e[t+312>>2]=e[26094],e[t+316>>2]=A,r=28011;break e}e[t+328>>2]=4,e[t+104>>2]=1,e[t+8>>2]=2,e[t+36>>2]=256,r=28020;break e}e[t+4>>2]=48,e[t+8>>2]=0,e[t+12>>2]=128,e[t+104>>2]=2169880,e[t+32>>2]=1,e[t+36>>2]=256,e[t+24>>2]=1,e[t+136>>2]=85767,A=e[26097],e[t+304>>2]=e[26096],e[t+308>>2]=A,A=e[26099],e[t+312>>2]=e[26098],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=28268;break e}e[t+8>>2]=0,e[t+104>>2]=71752,A=e[26101],e[t+304>>2]=e[26100],e[t+308>>2]=A,A=e[26103],e[t+312>>2]=e[26102],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=28258;break e}e[t+296>>2]=336858898,e[t+300>>2]=370546196,e[t+104>>2]=1088,e[t+108>>2]=512,e[t+8>>2]=2,e[t+12>>2]=524310,A=e[26105],e[t+304>>2]=e[26104],e[t+308>>2]=A,A=e[26107],e[t+312>>2]=e[26106],e[t+316>>2]=A,r=28525;break e}e[t+328>>2]=3,e[t+296>>2]=320015633,e[t+300>>2]=353768980,g[t+168|0]=7,e[t+8>>2]=2,e[t+12>>2]=6,e[t+104>>2]=20488,e[t+108>>2]=192,e[t+36>>2]=9,e[t+60>>2]=260,A=e[26109],e[t+304>>2]=e[26108],e[t+308>>2]=A,A=e[26111],e[t+312>>2]=e[26110],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=28780;break e}for(e[t+296>>2]=353569552,e[t+300>>2]=353768980,e[t+116>>2]=5e3,e[t+104>>2]=33570920,e[t+108>>2]=14336,e[t+8>>2]=3,e[t+12>>2]=139286,e[t+100>>2]=e[t+96>>2],A=e[26113],e[t+304>>2]=e[26112],e[t+308>>2]=A,A=e[26115],e[t+312>>2]=e[26114],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,A=0,a=t+344|0;g[0|(s=A+a|0)]=253&l[0|s],g[0|(s=a+(1|A)|0)]=253&l[0|s],g[0|(s=a+(2|A)|0)]=253&l[0|s],g[0|(s=a+(3|A)|0)]=253&l[0|s],(0|(A=A+4|0))!=256;);g[t+442|0]=2|l[t+442|0],g[t+443|0]=2|l[t+443|0],g[t+444|0]=2|l[t+444|0],g[t+446|0]=2|l[t+446|0],g[t+447|0]=2|l[t+447|0],g[t+450|0]=2|l[t+450|0],g[t+451|0]=2|l[t+451|0],g[t+453|0]=2|l[t+453|0],g[t+454|0]=2|l[t+454|0],g[t+456|0]=2|l[t+456|0],g[t+457|0]=2|l[t+457|0],g[t+459|0]=2|l[t+459|0],g[t+460|0]=2|l[t+460|0],g[t+462|0]=2|l[t+462|0],g[t+464|0]=2|l[t+464|0],g[t+466|0]=2|l[t+466|0],e[t+144>>2]=2,e[t+68>>2]=2;break e}e[t+296>>2]=303172879,e[t+300>>2]=353768980,e[t+328>>2]=3,e[t+8>>2]=3,e[t+12>>2]=262,e[t+104>>2]=16805928,e[t+108>>2]=30,A=e[26117],e[t+304>>2]=e[26116],e[t+308>>2]=A,A=e[26119],e[t+312>>2]=e[26118],e[t+316>>2]=A,r=29295;break e}hn(t),r=29301;break e}for(e[t+328>>2]=3,e[t+296>>2]=336859153,e[t+300>>2]=353768980,b[t+168>>1]=261,e[t+8>>2]=0,e[t+12>>2]=22,e[t+124>>2]=0,e[t+128>>2]=44,e[t+104>>2]=16794624,e[t+108>>2]=128,e[t+36>>2]=3,e[t+60>>2]=4,A=e[25869],e[t+304>>2]=e[25868],e[t+308>>2]=A,A=e[25871],e[t+312>>2]=e[25870],e[t+316>>2]=A,(0|r)==25459&&(e[t+108>>2]=136),g[t+465|0]=64&l[t+465|0]|129,g[t+458|0]=64&l[t+458|0]|129,A=0,a=t+344|0;g[0|(s=A+a|0)]=223&l[0|s],g[0|(s=a+(1|A)|0)]=223&l[0|s],g[0|(s=a+(2|A)|0)]=223&l[0|s],g[0|(s=a+(3|A)|0)]=223&l[0|s],(0|(A=A+4|0))!=256;);g[t+442|0]=32|l[t+442|0],g[t+444|0]=32|l[t+444|0],g[t+447|0]=32|l[t+447|0],g[t+450|0]=32|l[t+450|0],g[t+452|0]=32|l[t+452|0],g[t+453|0]=32|l[t+453|0],g[t+454|0]=32|l[t+454|0],g[t+458|0]=32|l[t+458|0],g[t+462|0]=32|l[t+462|0],g[t+463|0]=32|l[t+463|0],g[t+466|0]=32|l[t+466|0],g[t+441|0]=32|l[t+441|0],g[t+445|0]=32|l[t+445|0],g[t+449|0]=32|l[t+449|0],g[t+455|0]=32|l[t+455|0],g[t+461|0]=32|l[t+461|0],g[t+465|0]=32|l[t+465|0];break e}for(e[t+296>>2]=303174162,e[t+300>>2]=370545684,e[t+600>>2]=3456,g[t+169|0]=1,e[t+8>>2]=0,e[t+12>>2]=22,e[t+100>>2]=e[t+96>>2],A=e[25873],e[t+304>>2]=e[25872],e[t+308>>2]=A,A=e[25875],e[t+312>>2]=e[25874],e[t+316>>2]=A,jA(t+344|0,0,256),g[t+365|0]=1,g[t+366|0]=1,g[t+357|0]=1,g[t+358|0]=1,g[t+359|0]=1,g[t+360|0]=1,g[t+361|0]=1,g[t+362|0]=1,g[t+363|0]=1,g[t+364|0]=1,g[t+349|0]=1,g[t+350|0]=1,g[t+351|0]=1,g[t+352|0]=1,g[t+353|0]=1,g[t+354|0]=1,g[t+355|0]=1,g[t+356|0]=1,A=74,a=74;g[344+(s=t+a|0)|0]=1|l[s+344|0],g[s+345|0]=1|l[s+345|0],g[s+346|0]=1|l[s+346|0],(0|(a=a+3|0))!=116;);for(;g[344+(a=A+t|0)|0]=2|l[a+344|0],g[a+345|0]=2|l[a+345|0],g[a+346|0]=2|l[a+346|0],(0|(A=A+3|0))!=116;);for(a=26;g[344+(A=t+a|0)|0]=4|l[A+344|0],g[A+345|0]=4|l[A+345|0],g[A+346|0]=4|l[A+346|0],g[A+347|0]=4|l[A+347|0],g[A+348|0]=4|l[A+348|0],(0|(a=a+5|0))!=71;);e[t+112>>2]=84648,e[t+104>>2]=270589952,e[t+108>>2]=65536,e[t+40>>2]=1,e[t+204>>2]=e[t+600>>2]+74;break e}e[t+8>>2]=2,e[t+12>>2]=32,e[t+328>>2]=3,e[t+124>>2]=32,e[t+104>>2]=16864280,e[t+108>>2]=256,e[t+68>>2]=2,e[t+36>>2]=259,e[t+40>>2]=118,e[t+28>>2]=1,g[t+458|0]=128|l[t+458|0],r=29548;break e}e[t+296>>2]=370544658,e[t+300>>2]=370546196,e[t+164>>2]=130,e[t+8>>2]=0,e[t+12>>2]=86,e[t+104>>2]=87064,g[t+169|0]=1,e[t+152>>2]=3,A=e[26121],e[t+304>>2]=e[26120],e[t+308>>2]=A,A=e[26123],e[t+312>>2]=e[26122],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=7564650;break e}e[t+296>>2]=269487120,e[t+300>>2]=320148500,e[t+8>>2]=3,e[t+12>>2]=278,e[t+144>>2]=2,e[t+104>>2]=32872,A=e[26125],e[t+304>>2]=e[26124],e[t+308>>2]=A,A=e[26127],e[t+312>>2]=e[26126],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=29553;break e}e[t+296>>2]=336859152,e[t+300>>2]=353768980,e[t+8>>2]=0,e[t+144>>2]=1,e[t+104>>2]=6408,A=e[26129],e[t+304>>2]=e[26128],e[t+308>>2]=A,A=e[26131],e[t+312>>2]=e[26130],e[t+316>>2]=A,g[t+465|0]=64&l[t+465|0]|129,r=29558;break e}e[t+296>>2]=320015376,e[t+300>>2]=353768980,g[t+168|0]=4,e[t+12>>2]=22,e[t+4>>2]=1,e[t+8>>2]=2,e[t+104>>2]=1248,e[t+100>>2]=e[t+96>>2],A=e[26133],e[t+304>>2]=e[26132],e[t+308>>2]=A,A=e[26135],e[t+312>>2]=e[26134],e[t+316>>2]=A;break e}e[t+296>>2]=303174162,e[t+300>>2]=370545684,g[t+169|0]=1,e[t+8>>2]=0,e[t+12>>2]=22,e[t+112>>2]=5288,e[t+100>>2]=e[t+96>>2],A=e[25877],e[t+304>>2]=e[25876],e[t+308>>2]=A,A=e[25879],e[t+312>>2]=e[25878],e[t+316>>2]=A;p:switch(r-29793|0){default:if((0|r)!=27502){if((0|r)!=28012)break r;A=e[26137],e[t+304>>2]=e[26136],e[t+308>>2]=A,A=e[26139],e[t+312>>2]=e[26138],e[t+316>>2]=A,e[t+600>>2]=3328,e[t+296>>2]=320017171,e[t+300>>2]=320017171,e[t+104>>2]=2098176,e[t+108>>2]=131072,e[t+8>>2]=13;break r}e[t+104>>2]=1,e[t+600>>2]=3200;break r;case 4:break p;case 1:case 2:case 3:break r;case 0:break s}e[t+104>>2]=1,e[t+108>>2]=524288,e[t+600>>2]=3072;break r}e[t+328>>2]=10,e[t+296>>2]=353636370,e[t+300>>2]=336925972,g[t+173|0]=1,e[t+8>>2]=7,e[t+12>>2]=32,g[t+168|0]=2,e[t+84>>2]=1,A=e[26141],e[t+304>>2]=e[26140],e[t+308>>2]=A,e[t+104>>2]=(0|r)==24954?2118920:2114824,A=e[26143],e[t+312>>2]=e[26142],e[t+316>>2]=A;break e}vs(t),e[t+296>>2]=303173650,e[t+300>>2]=303174162,e[t+104>>2]=2131208,e[t+8>>2]=3,e[t+12>>2]=32,A=e[25865],e[t+304>>2]=e[25864],e[t+308>>2]=A,A=e[25867],e[t+312>>2]=e[25866],e[t+316>>2]=A,r=29812;break e}hn(t),r=30059;break e}e[t+112>>2]=21160,e[t+104>>2]=16,e[t+600>>2]=1536,e[t+40>>2]=1;break e}e[t+296>>2]=269488144,e[t+300>>2]=370546198,e[t+8>>2]=0,e[t>>2]=33,e[t+148>>2]=1,e[t+104>>2]=12615688,e[t+16>>2]=2,e[t+100>>2]=e[t+96>>2],e[t+632>>2]=104592,e[t+604>>2]=104592,A=e[26145],e[t+304>>2]=e[26144],e[t+308>>2]=A,A=e[26147],e[t+312>>2]=e[26146],e[t+316>>2]=A,r=30313;break e}if(e[t+296>>2]=370544662,e[t+300>>2]=370546198,e[t+8>>2]=3,e[t+12>>2]=2,e[t+148>>2]=1,e[t+184>>2]=12544,b[t+170>>1]=257,e[t+176>>2]=1,g[t+172|0]=1,e[t>>2]=33,e[t+4>>2]=0,e[t+100>>2]=e[t+96>>2],A=e[26225],e[t+304>>2]=e[26224],e[t+308>>2]=A,A=e[26227],e[t+312>>2]=e[26226],e[t+316>>2]=A,(0|r)!=7959909)break e;e[t+112>>2]=24,e[t+104>>2]=1,e[t+108>>2]=1048576,r=7959909;break e}A=e[25873],e[t+304>>2]=e[25872],e[t+308>>2]=A,A=e[25875],e[t+312>>2]=e[25874],e[t+316>>2]=A,e[t+600>>2]=2944,e[t+104>>2]=2097152,e[t+108>>2]=262144,e[t+48>>2]=1}ds(t),g[t+422|0]=2|l[t+422|0];break e}e[t+40>>2]=1}return e[t+212>>2]=r,8&(A=e[t+104>>2])&&(e[t+124>>2]=46,e[t+128>>2]=44),4&A&&(e[t+124>>2]=0),t}function dA(A){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0;e:{r=e[32538],e[47354]=0,e[47568]=0,e[49828]=0,e[47569]=0,g[199328]=0,e[49827]=0,e[49845]=0,g[190280]=0,g[190268]=1,e[47202]=0,e[49573]=0,e[49846]=0,g[199304]=0,g[199388]=0,e[33691]=0,e[33285]=0,e[33708]=1,e[33709]=1,e[33288]=0,t=e[33730],e[33712]=e[33729],e[33713]=t,t=e[33732],e[33714]=e[33731],e[33715]=t,t=e[33734],e[33716]=e[33733],e[33717]=t,t=e[33736],e[33718]=e[33735],e[33719]=t,t=e[33738],e[33720]=e[33737],e[33721]=t,t=e[33740],e[33722]=e[33739],e[33723]=t,t=e[33742],e[33724]=e[33741],e[33725]=t,e[33726]=e[33743],g[134784]=0,g[134824]=0,g[134772]=0,g[134760]=0,e[33284]=-1,e[33692]=0,e[32525]=0,e[47201]=e[33717],e[47200]=e[33718],ja(),e[34438]=0,e[34437]=0,t=e[33730],e[34048]=e[33729],e[34049]=t,t=e[33732],e[34050]=e[33731],e[34051]=t,t=e[33734],e[34052]=e[33733],e[34053]=t,t=e[33736],e[34054]=e[33735],e[34055]=t,t=e[33738],e[34056]=e[33737],e[34057]=t,t=e[33740],e[34058]=e[33739],e[34059]=t,t=e[33742],e[34060]=e[33741],e[34061]=t,e[34062]=e[33743];A:{r:{if(1&r){if(e[e[32539]>>2]=0,e[47569]|e[49845]|e[49827])break r;break A}if(e[e[32539]>>2]=0,!(e[49845]|e[49827]||e[47569]))break A}g[190280]=1}e[49828]=0,t=268436735;A:if(!(!e[34391]|!e[34388])&&(e[47204]=0,e[47203]=0,e[47199]=0,e[34439]=0,(e[47192]||!(t=o0(86228)))&&((t=e[33283])||((t=Ct(16))&&(e[t>>2]=0,e[t+4>>2]=0,e[t+8>>2]=0,e[t+12>>2]=0),e[33283]=t),i=268439807,(r=e[e[47192]+328>>2])>>>0>20|!e[129104+(r<<3)>>2]?t=i:(A?(i=4,s=HA(A)+1|0):(i=2,s=0),e[t+8>>2]=i,e[t>>2]=A,e[t+12>>2]=e[129108+(r<<3)>>2],e[t+4>>2]=A?A+s|0:0,t=0),!t))){me(0);r:{for(;;){e[34436]=0,A=e[34391],e[51290]=A,e[54046]=A+e[34390],e[50767]<=102399&&(e[50767]=102400);s:if(!((o=e[51290])>>>0>=ue[54046]))for(;;){if((((0|(A=(s=e[50757])-(c=e[50758])|0))<=0?A+170|0:A)-171|0)>=-1){if((0|(A=e[54731]))<=0)break s;i=0,e[50763]=0,e[50762]=0,e[50765]=2147483647,A=l[218920]?e[54732]:A;i:{for(;;){if(r=A-1|0,e[54732]=r,(0|A)<=0)break i;if(e[51290]=o+1,t=(A=e[51293])+1|0,e[51293]=(0|t)<=5499?t:0,t=(A=z(e[50755],b[205184+(A<<1)>>1]))>>8,g[0|o]=t,s=e[51290],e[51290]=s+1,g[0|s]=A>>>16,(s=e[50756])?(A=r,(r=e[s+4>>2])&&(ct[0|r](t<<16>>16),A=e[54732])):A=r,s=(r=e[51292])+1|0,e[51292]=s,b[205184+(r<<1)>>1]=t,(0|s)>=5500&&(e[51292]=0),o=e[51290],!(ue[54046]>=o+2>>>0))break}i=1}g[218920]=i;break s}A=e[4+(r=216192+(s<<4)|0)>>2];i:{c:{o:{u:{l:{n:{p:{C:{m:{b:{h:{E:{w:{y:{L:{V:switch((255&(t=e[r>>2]))-1|0){case 9:break o;case 7:break u;case 10:break l;case 11:break n;case 13:break p;case 0:break C;case 1:break m;case 2:break b;case 3:break h;case 6:break E;case 5:break w;case 4:break y;case 15:break L;case 8:break V;default:break c}if(!e[50759])break c;t=e[r+12>>2],r=e[r+8>>2],e[50768]=0,o=r||99232,e[50766]=o,e[50769]=A?2097152/(0|A)|0:0,A=e[50971],s=(0|z(A,e[50788]))/50|0,r=z(s-A|0,-18),A=((0|(A=e[50785]))>=101?101:A)-e[50790]|0,t=(i=r+((0|z(e[50970],l[((0|A)>0?A:0)+105680|0]))/128|0)|0)+((0|z(s,(0|(A=t>>16))<(0|(r=65535&t))?A:r))/2|0)|0,e[50770]=t,A=(i+((0|z(s,(0|A)>(0|r)?A:r))/2|0)|0)-t|0,e[50771]=A,r=l[0|o],e[33072]=e[50976],e[50767]=t+(z(A,r)>>8);break c}ct[e[e[50756]>>2]](A,e[r+8>>2]),xt(A);break c}if(l[218920]||(e[54731]=e[54731]-A),e[50781]=100,e[50773]=0,_(),e[50763]=0,e[50762]=0,e[50765]=2147483647,!A)break c;for(A=l[218920]?e[54732]:A;;){if(r=A-1|0,e[54732]=r,(0|A)<=0)break c;if(A=e[51290],e[51290]=A+1,s=(t=e[51293])+1|0,e[51293]=(0|s)<=5499?s:0,s=A,t=(A=z(e[50755],b[205184+(t<<1)>>1]))>>8,g[0|s]=t,s=e[51290],e[51290]=s+1,g[0|s]=A>>>16,(s=e[50756])?(A=r,(r=e[s+4>>2])&&(ct[0|r](t<<16>>16),A=e[54732])):A=r,s=(r=e[51292])+1|0,e[51292]=s,b[205184+(r<<1)>>1]=t,(0|s)>=5500&&(e[51292]=0),s=1,!(ue[54046]>=e[51290]+2>>>0))break}break i}for(e[50773]=0,e[54731]=e[54729],_(),t=e[r+12>>2],s=e[r+8>>2],l[218920]?A=e[54733]:e[54734]=0,c=t>>8,i=255&t,e[50762]=0,e[50763]=0;;){if(r=A-1|0,e[54733]=r,(0|A)<=0)break c;if(t=(A=e[54734])+1|0,i?o=z(i,g[A+s|0]):(o=l[A+s|0]|g[t+s|0]<<8,t=A+2|0),e[54734]=t,f=(A=e[51293])+1|0,e[51293]=f,t=(0|(A=(0|(A=((0|z(c,z(e[33037],z(e[33038],o))>>10))/32|0)+(z(e[50755],b[205184+(A<<1)>>1])>>8)|0))<=-32768?-32768:A))>=32767?32767:A,(0|f)>=5500&&(e[51293]=0),g[e[51290]]=t,g[e[51290]+1|0]=t>>>8,(o=e[50756])?(A=r,(r=e[o+12>>2])&&(ct[0|r](t<<16>>16),A=e[54733])):A=r,r=e[51290],e[51290]=r+2,f=(o=e[51292])+1|0,e[51292]=f,b[205184+(o<<1)>>1]=(0|z(t,3))/4,(0|f)>=5500&&(e[51292]=0),!(ue[54046]>=r+4>>>0))break}s=1;break i}t=e[r+12>>2],s=A>>>16|0,e[50777]=s,A&=65535,e[50773]=A,i=255&t,e[50774]=i,e[50775]=t>>8,i||(e[50777]=s<<1,e[50773]=A<<1),e[50778]=0,e[50776]=0,e[50772]=e[r+8>>2];break c}e[50773]=0}if(e[54731]=e[54729],t=e[50759],l[218920]){if(!t)break c}else{if(!t)break c;for(i=e[r+12>>2],o=e[r+8>>2],r=A>>16,e[55912]=255&r,g[218960]=1,e[55908]=0,67108864&A&&(e[55908]=3,e[55909]=e[110496+(r>>>6&12)>>2]),134217728&A&&(e[55908]=4,e[55909]=e[110512+(r>>>6&12)>>2]),A&=65504;;){if((0|c)!=(0|(s=(0|(r=s+1|0))<=169?r:0)))if((0|(r=e[216192+(s<<4)>>2]))!=3){if(r-5>>>0>1)continue}else g[218960]=0;break}for(e[55913]=e[50762],A=(A=A+32&131008)||64,e[50763]=A+e[50763],e[55684]=z(b[101997],7800)+(M[102024]<<8)<<8,e[55704]=z(b[101998],9e3)+(M[102025]<<8)<<8,P=e[50980],a=+(0|A),w=+(A>>>2|0),A=0;(0|A)!=7&&(s=b[218+(f=(r=A<<1)+t|0)>>1]<<8,c=z(A,80)+222176|0,f=b[f+164>>1],E=s+z(f,b[2+(r+o|0)>>1])<<8,e[c>>2]=E,p=+(0|E),D[c+16>>3]=p,D[c+48>>3]=16*(+(s+z(f,b[2+(r+i|0)>>1])<<8)-p)/w),s=(r=z(A,80))+222176|0,f=b[182+(E=t+(A<<1)|0)>>1],Z=z(f,l[18+(c=A+o|0)|0])<<6,e[s+4>>2]=Z,p=+(0|Z),D[s+24>>3]=p,Y=s,s=A+i|0,D[Y+56>>3]=64*(+(z(f,l[s+18|0])<<6)-p)/a,(0|A)>(0|P)|A>>>0>5||(f=r+222176|0,Z=b[E+200>>1],E=z(Z,l[c+26|0])<<10,e[f+8>>2]=E,p=+(0|E),D[f+32>>3]=p,Y=f- -64|0,f=Z<<10,D[Y>>3]=64*(+(0|z(f,l[s+26|0]))-p)/a,A>>>0<=2?(r=r+222176|0,c=z(f,l[c+32|0]),e[r+12>>2]=c,p=+(0|c),D[r+40>>3]=p,D[r+72>>3]=64*(+(0|z(f,l[s+32|0]))-p)/a):e[r+222188>>2]=E),(0|(A=A+1|0))!=8;);}for(;;){if(A=e[50762],!l[218960]&(0|A)==e[50763])break c;b:{h:{if(63&A){if(7&A)break b;E:if(!((0|(r=e[54736]))<=0||(0|(t=e[54735]))<=0))for(s=e[50826],A=1;;){if(e[(o=(i=A<<2)+s|0)>>2]=e[o>>2]+e[i+203312>>2],A>>>0>28|(0|A)>=(0|r))break E;if(i=(0|A)<(0|t),A=A+1|0,!i)break}if((0|(A=e[33073]))>255)break b;e[33073]=A+1;break b}if(A)if(e[50759]){if(r=e[50768]+e[50769]|0,e[50768]=r,r=(t=e[50766])?z(l[t+((0|(r>>=8))>=127?127:r)|0],e[50771])>>8:0,e[55911]=e[55911]+e[55915],t=(0|(t=e[55914]))<=23551?t:0,e[55914]=t+e[50761],t=(r+e[50770]|0)+z(e[33072],l[110528+(t>>6)|0]-128|0)|0,e[50767]=t,!(s=e[51291])&(0|(r=s?s<<12:t))>102399||(t=(0|r)<=102400?102400:r,e[50767]=t),(0|A)!=e[55913]){if(A=0,!((0|(c=e[50980]))<0)){for(;o=z(A,80),a=D[48+(r=o+222176|0)>>3]+D[r+16>>3],D[r+16>>3]=a,w=D[r+56>>3]+D[r+24>>3],D[r+24>>3]=w,p=D[r- -64>>3]+D[r+32>>3],D[r+32>>3]=p,s=Ne(a)<2147483648?~~a:-2147483648,e[r>>2]=s,s=Ne(p)<2147483648?~~p:-2147483648,e[r+8>>2]=s,i=Ne(w)<2147483648?~~w:-2147483648,e[r+4>>2]=(0|i)>0?i:0,(0|A)>2||(a=D[72+(r=o+222176|0)>>3]+D[r+40>>3],D[r+40>>3]=a,s=Ne(a)<2147483648?~~a:-2147483648),e[o+222188>>2]=s,(0|c)>=(0|(A=A+1|0)););if((0|A)>=8)break h}for(;(0|A)!=7&&(r=z(A,80)+222176|0,a=D[r+48>>3]+D[r+16>>3],D[r+16>>3]=a,s=Ne(a)<2147483648?~~a:-2147483648,e[r>>2]=s),r=z(A,80)+222176|0,a=D[r+56>>3]+D[r+24>>3],D[r+24>>3]=a,s=Ne(a)<2147483648?~~a:-2147483648,e[r+4>>2]=(0|s)>0?s:0,(0|(A=A+1|0))!=8;);}}else t=e[50767];else e[50826]=218976,e[54742]=0,e[54736]=fs(e[50767]<<4,218976,0),t=e[50767],e[54737]=890/(t>>12),e[54739]=(0|z(e[50781],z(e[50779],t>>8)))/8e4}if(e[55906]=t>>11,e[54735]=e[54736],e[55904]=z(e[50760],t>>7),e[55905]=e[50754]/(t>>12),r=1^(A=e[54742]),e[54742]=r,e[50826]=z(A,1600)+218976,e[54736]=fs(t<<4,z(r,1600)+218976|0,1),!(!(t=e[50759])|!e[51022]))for(w=D[25430],p=D[25429],A=1;e[272+(r=t+(A<<2)|0)>>2]&&(s=e[r+308>>2],r=z(A,40)+203456|0,m=Da(w*+b[2+(z(A,80)+222176|0)>>1]),m*=a=Pt(p*+(0|s)),m+=m,D[r+8>>3]=m,a*=-a,D[r+16>>3]=a,D[r>>3]=1-m-a),(0|(A=A+1|0))!=9;);}if(i=e[50762]+1|0,e[50762]=i,o=(A=e[50765])+e[55904]|0,e[50765]=o,(0|o)<0&(0|A)>0){if(f=e[55905],t=e[50800]+((0|f)/-2|0)|0,e[55907]=t,(0|(E=e[50763]))<(0|i))break c;if(P=e[54738]+1|0,e[54738]=P,c=e[50767],!((0|(A=(r=e[50980])+1|0))>8)&&(s=c<<3,1&r&&(e[203264+(A<<2)>>2]=(1+(e[z(A,80)+222176>>2]/(0|s)|0)|0)/2,A=r+2|0),(0|r)!=7))for(;r=203264+(A<<2)|0,Z=z(A,80)+222176|0,e[r>>2]=(1+(e[Z>>2]/(0|s)|0)|0)/2,e[r+4>>2]=(1+(e[Z+80>>2]/(0|s)|0)|0)/2,(0|(A=A+2|0))!=9;);A=(0|z(e[50781],z(e[50779],c>>8)))/8e4|0,e[54739]=A;b:if(!((0|(r=e[55908]))<=0)){switch(r-3|0){case 0:if((E-i|0)>=f<<1)break b;e[55908]=2,A=(0|z(e[55909],A))/256|0,e[54739]=A;break b;case 1:e[55908]=2,A=(0|z(e[55909],A))/256|0,e[54739]=A;break b}e[55908]=r-1}(r=e[55910])&&(s=A,A=e[55911]>>8,A=(0|z(s,l[r+((0|A)>=127?127:A)|0]))/128|0,e[54739]=A),(0|(r=e[e[32972]+92>>2]))>7||(r=15&(s=l[e[55912]+(106336+(r<<3)|0)|0]),(s=s>>>4|0)&&((0|s)!=15?(0|P)%(0|s)|0||(e[54739]=(0|z(A,r))/16):(e[55912]=0,e[54739]=(0|z(A,r))/16)))}else t=e[55907];if(i=t+1|0,e[55907]=i,r=o>>>16|0,s=0,!((0|i)<0|(0|i)>=e[50799])){if(!((0|(A=(t=e[50980])+1|0))>8)){if(c=1&(o=8-t|0),(0|t)!=7)for(f=-2&o,t=0;s=z(e[203216+(E=4+(o=A<<2)|0)>>2],b[106400+(z(r,e[E+203264>>2])>>>4&4094)>>1])+(z(e[o+203216>>2],b[106400+(z(r,e[o+203264>>2])>>>4&4094)>>1])+s|0)|0,A=A+2|0,(0|f)!=(0|(t=t+2|0)););c&&(s=z(e[203216+(A<<=2)>>2],b[106400+(z(r,e[A+203264>>2])>>>4&4094)>>1])+s|0)}s=z(l[i+132160|0],(0|s)/e[55906]|0)}if(A=1,(0|(i=e[54737]))<=0)t=r;else for(o=e[50826],t=r;s=z(e[o+(A<<2)>>2],b[106400+((65504&t)>>>4|0)>>1])+s|0,t=t+r|0,(0|i)>=(0|(A=A+1|0)););if((0|(i=e[54735]))>=(0|A))for(o=e[50826];s=s-z(e[o+(A<<2)>>2],b[106400+((65504&t)>>>4|0)>>1])|0,t=t+r|0,(0|i)>=(0|(A=A+1|0)););if(i=(0|(A=e[54728]))==64?s:z(A,s>>6),e[51022]){if(e[50759])for(r=It(e[33209],0,1103515245,0),A=$,A=Wn(r=r+12345|0,A=r>>>0<12345?A+1|0:A),e[33209]=A,w=+((16383&A)- -8192|0),t=e[50759],o=0,A=1;(s=e[272+(t+(A<<2)|0)>>2])&&(c=e[z(A,80)+222180>>2],r=z(A,40)+203456|0,a=D[r+32>>3],p=D[r+24>>3],D[r+32>>3]=p,a=a*D[r+16>>3]+(D[r>>3]*w+p*D[r+8>>3]),D[r+24>>3]=a,r=Ne(a)<2147483648?~~a:-2147483648,o=z(r,z(s,c>>14))+o|0),(0|(A=A+1|0))!=9;);else o=0;i=i+o|0}t=0,(0|(A=e[50776]))>=e[50773]||(r=e[50778],t=e[50772],(o=e[50774])?(s=A+1|0,e[50776]=s,A=z(o,g[t+(A+r|0)|0])):(o=l[0|(t=t+(A+r|0)|0)],t=g[t+1|0],s=A+2|0,e[50776]=s,A=o|t<<8),t=(0|z(z(A,e[50780])>>10,e[50775]))/32|0,(0|(A=e[50777]))>(r+s|0)||(e[50778]=r+((0|z(A,3))/-4|0))),r=(A=e[51293])+1|0,e[51293]=r,A=((z(e[54739],i>>8)>>13)+t|0)+(z(e[50755],b[205184+(A<<1)>>1])>>8)|0,(0|r)>=5500&&(e[51293]=0),r=e[33073];b:{h:{if((0|(t=z(r,A)))>=8388608){if((0|r)>=(0|(o=8388608/(0|A)|0)))break h;break b}if((0|t)>-8388353||(0|r)<(0|(o=-8388608/(0|A)|0)))break b}r=o-1|0,e[33073]=r,t=z(A,r)}if(A=e[51290],e[51290]=A+1,r=A,A=t>>8,g[0|r]=A,r=e[51290],e[51290]=r+1,g[0|r]=t>>>16,(r=e[50756])&&(r=e[r+8>>2])&&ct[0|r](A<<16>>16),t=(r=e[51292])+1|0,e[51292]=t,b[205184+(r<<1)>>1]=A,(0|t)>=5500&&(e[51292]=0),!(ue[54046]>=e[51290]+2>>>0))break}s=1;break i}e[50773]=0}e[54731]=e[54729],s=1,c=65535&A,t=l[218920],o=e[r+8>>2],i=e[r+12>>2],a=0,p=0,J=r=J+-64|0,f=e[50759];C:if((0|(A=e[f+132>>2]))!=6){if(!t){for(A-1>>>0<=4&&(e[55921]=A,e[55964]=e[110896+(A<<2)>>2]),A=e[f+88>>2],e[54741]=1,e[55922]=(0|A)/32,t=e[50758],A=e[50757];;){m:if((0|t)!=(0|(A=(0|(A=A+1|0))<=169?A:0)))if((0|(E=e[216192+(A<<4)>>2]))!=1){if(E-5>>>0>1)continue}else{if(e[54741]=0,A=e[8+(216192+(A<<4)|0)>>2],!(M[i+4>>1]!=M[A+4>>1]|M[A+6>>1]!=M[i+6>>1]|M[A+8>>1]!=M[i+8>>1]|M[A+10>>1]!=M[i+10>>1])&&M[A+12>>1]==M[i+12>>1])break m;e[54741]=2}break}for((M[o+4>>1]!=M[113564]|M[o+6>>1]!=M[113565]|M[o+8>>1]!=M[113566]|M[o+10>>1]!=M[113567]||M[o+12>>1]!=M[113568])&&(Ki(),e[55974]=0,e[55975]=0,e[55972]=0,e[55973]=0,e[55988]=0,e[55989]=0,e[55990]=0,e[55991]=0,e[56004]=0,e[56005]=0,e[56006]=0,e[56007]=0,e[56020]=0,e[56021]=0,e[56022]=0,e[56023]=0,e[56036]=0,e[56037]=0,e[56038]=0,e[56039]=0,e[56052]=0,e[56053]=0,e[56054]=0,e[56055]=0,e[56068]=0,e[56069]=0,e[56070]=0,e[56071]=0,e[56086]=0,e[56087]=0,e[56084]=0,e[56085]=0,e[56102]=0,e[56103]=0,e[56100]=0,e[56101]=0,e[56118]=0,e[56119]=0,e[56116]=0,e[56117]=0,e[56134]=0,e[56135]=0,e[56132]=0,e[56133]=0,e[56150]=0,e[56151]=0,e[56148]=0,e[56149]=0,e[56166]=0,e[56167]=0,e[56164]=0,e[56165]=0,e[56182]=0,e[56183]=0,e[56180]=0,e[56181]=0,e[56198]=0,e[56199]=0,e[56196]=0,e[56197]=0,e[56214]=0,e[56215]=0,e[56212]=0,e[56213]=0,e[56230]=0,e[56231]=0,e[56228]=0,e[56229]=0),A=M[i+4>>1]|M[i+6>>1]<<16,t=M[i>>1]|M[i+2>>1]<<16,b[113562]=t,b[113563]=t>>>16,b[113564]=A,b[113565]=A>>>16,A=M[i+60>>1]|M[i+62>>1]<<16,t=M[i+56>>1]|M[i+58>>1]<<16,b[113590]=t,b[113591]=t>>>16,b[113592]=A,b[113593]=A>>>16,A=M[i+52>>1]|M[i+54>>1]<<16,t=M[i+48>>1]|M[i+50>>1]<<16,b[113586]=t,b[113587]=t>>>16,b[113588]=A,b[113589]=A>>>16,A=M[i+44>>1]|M[i+46>>1]<<16,t=M[i+40>>1]|M[i+42>>1]<<16,b[113582]=t,b[113583]=t>>>16,b[113584]=A,b[113585]=A>>>16,A=M[i+36>>1]|M[i+38>>1]<<16,t=M[i+32>>1]|M[i+34>>1]<<16,b[113578]=t,b[113579]=t>>>16,b[113580]=A,b[113581]=A>>>16,A=M[i+28>>1]|M[i+30>>1]<<16,t=M[i+24>>1]|M[i+26>>1]<<16,b[113574]=t,b[113575]=t>>>16,b[113576]=A,b[113577]=A>>>16,A=M[i+20>>1]|M[i+22>>1]<<16,t=M[i+16>>1]|M[i+18>>1]<<16,b[113570]=t,b[113571]=t>>>16,b[113572]=A,b[113573]=A>>>16,A=M[i+12>>1]|M[i+14>>1]<<16,t=M[i+8>>1]|M[i+10>>1]<<16,b[113566]=t,b[113567]=t>>>16,b[113568]=A,b[113569]=A>>>16,w=+(0|c),(Y=1&b[o>>1])?(A=l[o+39|0],e[56680]=A,D[28364]=A>>>0,D[28354]=+(l[i+39|0]-A<<6)/w,A=l[o+40|0],D[28366]=A>>>0,D[28356]=+(l[i+40|0]-A<<6)/w,A=l[o+41|0],e[56682]=A,D[28368]=A>>>0,D[28358]=+(l[i+41|0]-A<<6)/w,t=l[o+42|0],e[56684]=t,D[28370]=t>>>0,A=l[o+43|0],a=+(l[i+43|0]-A<<6)/w,p=+(l[i+42|0]-t<<6)/w,m=+(A>>>0)):(e[56728]=0,e[56729]=0,A=0,e[56680]=0,e[56708]=0,e[56709]=0,e[56732]=0,e[56733]=0,e[56712]=0,e[56713]=0,e[56682]=0,e[56736]=0,e[56737]=0,e[56716]=0,e[56717]=0,e[56684]=0,e[56740]=0,e[56741]=0,m=0),e[56688]=A,D[28360]=p,D[28372]=m,D[28362]=a,e[56692]=0,e[56748]=0,e[56749]=0,e[56694]=0,e[56752]=0,e[56753]=0,e[56696]=0,e[56756]=0,e[56757]=0,e[56700]=0,e[56760]=0,e[56761]=0,e[56704]=0,e[56764]=0,e[56765]=0,e[50764]=c,A=1;P=b[164+(E=(c=A<<1)+f|0)>>1],t=(Qe=z(A,80))+222896|0,p=+b[E+218>>1],a=.00390625*+(0|z(P,b[2+(o+c|0)>>1]))+p,D[t+16>>3]=a,Z=Ne(a)<2147483648?~~a:-2147483648,e[t>>2]=Z,D[t+48>>3]=64*(.00390625*+(0|z(P,b[2+(i+c|0)>>1]))+p-a)/w,A>>>0<=3&&(t=Qe+222896|0,a=.00390625*+b[E+200>>1]*+(l[35+(A+o|0)|0]<<1),D[t+24>>3]=a,c=Ne(a)<2147483648?~~a:-2147483648,e[t+4>>2]=c,D[t+56>>3]=64*(+(l[35+(A+i|0)|0]<<1)-a)/w),(0|(A=A+1|0))!=6;);if(a=+((A=l[o+40|0])<<1),D[27864]=a,t=e[56618],A||(a=+(0|t),D[27864]=a),A=Ne(a)<2147483648?~~a:-2147483648,e[55724]=A,c=l[i+40|0],e[55730]=0,e[55731]=1079394304,e[55738]=0,e[55739]=0,e[55725]=89,A=1,D[27868]=64*(+(0|(c?c<<1:t))-a)/w,Y)for(;t=z(A,80)+222896|0,f=l[56+(c=A+o|0)|0]<<2,e[t+12>>2]=f,a=+(0|f),D[t+40>>3]=a,f=A+i|0,D[t+72>>3]=64*(+(l[f+56|0]<<2)-a)/w,c=l[c+49|0],e[t+8>>2]=c,a=+(c>>>0),D[t+32>>3]=a,D[t- -64>>3]=64*(+l[f+49|0]-a)/w,(0|(A=A+1|0))!=7;);e[56606]=0}for(;;){if((0|(Z=e[50764]))>(0|(i=e[56606]))){for(A=e[50767],e[56609]=e[55724],e[56619]=e[55725],e[56610]=e[55744],e[56611]=e[55764],e[56612]=e[55784],e[56613]=e[55804],Y=z(A,10),e[56607]=(0|Y)/4096,e[56620]=e[55745],e[56621]=e[55765],e[56622]=e[55785],e[56614]=e[55824],e[56630]=e[55746],e[56631]=e[55766],e[56632]=e[55786],e[56633]=e[55806],e[56634]=e[55826],e[56635]=e[55846],Qe=e[56680],e[56608]=Qe,o=e[56694],e[56656]=o,c=e[56696],e[56653]=c,f=e[56700],e[56655]=f,E=e[56684],e[56649]=E,e[56651]=e[56704],e[56654]=e[56688],e[56652]=e[56682],e[56650]=e[56692],A=0;t=z(A,80)+222896|0,a=D[t+48>>3]+D[t+16>>3],D[t+16>>3]=a,w=D[t+56>>3]+D[t+24>>3],D[t+24>>3]=w,p=D[t+72>>3]+D[t+40>>3],D[t+40>>3]=p,m=D[t- -64>>3]+D[t+32>>3],D[t+32>>3]=m,P=Ne(a)<2147483648?~~a:-2147483648,e[t>>2]=P,P=Ne(w)<2147483648?~~w:-2147483648,e[t+4>>2]=P,P=Ne(p)<2147483648?~~p:-2147483648,e[t+12>>2]=P,P=Ne(m)<2147483648?~~m:-2147483648,e[t+8>>2]=P,(0|(A=A+1|0))!=9;);for(a=D[28354]+D[28364],D[28364]=a,D[28366]=D[28356]+D[28366],w=D[28358]+D[28368],D[28368]=w,p=D[28360]+D[28370],D[28370]=p,m=D[28362]+D[28372],D[28372]=m,A=Ne(a)<2147483648?~~a:-2147483648,e[56680]=A,A=Ne(w)<2147483648?~~w:-2147483648,e[56682]=A,A=Ne(p)<2147483648?~~p:-2147483648,e[56684]=A,A=Ne(m)<2147483648?~~m:-2147483648,e[56688]=A,a=D[28374]+0,D[28374]=a,A=Ne(a)<2147483648?~~a:-2147483648,e[56692]=A,a=D[28376]+0,D[28376]=a,A=Ne(a)<2147483648?~~a:-2147483648,e[56694]=A,a=D[28378]+0,D[28378]=a,A=Ne(a)<2147483648?~~a:-2147483648,e[56696]=A,a=D[28380]+0,D[28380]=a,A=Ne(a)<2147483648?~~a:-2147483648,e[56700]=A,a=D[28382]+0,D[28382]=a,A=Ne(a)<2147483648?~~a:-2147483648,e[56704]=A,e[56659]=e[55724],e[56669]=e[55725],e[56660]=e[55744],e[56670]=e[55745],e[56661]=e[55764],e[56671]=e[55765],e[56662]=e[55784],e[56672]=e[55785],e[56663]=e[55804],e[56664]=e[55824],e[56665]=e[55844],A=e[50768]+e[50769]|0,e[50768]=A,A>>=8,e[50767]=e[50770]+(z(e[50771],l[e[50766]+((0|A)>=127?127:A)|0])>>8),A=Z-i|0,e[55923]=(0|A)>=64?64:A,e[55961]=(0|Y)/40960,A=Qe-7|0,e[56658]=(0|A)>0?A:0,D[27974]=E>>>0<=87?.001*+b[111136+(E<<1)>>1]*.05:0,D[27975]=c>>>0<=87?.001*+b[111136+(c<<1)>>1]*.25:0,D[27973]=o>>>0<=87?.001*+b[111136+(o<<1)>>1]:0,D[27971]=f>>>0<=87?.001*+b[111136+(f<<1)>>1]*.05:0,a=(A=e[56629])>>>0<=87?.001*+b[111136+(A<<1)>>1]*.6:0,D[r>>3]=a,a=(A=e[56630])>>>0<=87?.001*+b[111136+(A<<1)>>1]*.4:0,D[r+8>>3]=a,a=(A=e[56631])>>>0<=87?.001*+b[111136+(A<<1)>>1]*.15:0,D[r+16>>3]=a,a=(A=e[56632])>>>0<=87?.001*+b[111136+(A<<1)>>1]*.06:0,D[r+24>>3]=a,a=(A=e[56633])>>>0<=87?.001*+b[111136+(A<<1)>>1]*.04:0,D[r+32>>3]=a,a=(A=e[56634])>>>0<=87?.001*+b[111136+(A<<1)>>1]*.022:0,D[r+40>>3]=a,a=(A=e[56635])>>>0<=87?.001*+b[111136+(A<<1)>>1]*.03:0,D[r+48>>3]=a,a=(A=(0|(A=e[56657]-3|0))<=0?57:A)>>>0<=87?.001*+b[111136+(A<<1)>>1]:0,D[27977]=a/+e[55964],w=D[27968],p=D[27967],A=1;t=223664+(i=A<<6)|0,m=(a=Pt(p*+e[48+(c=226428+(o=A<<2)|0)>>2]))*-a,D[t+216>>3]=m,a*=Da(w*+e[c+8>>2]),a+=a,D[t+208>>3]=a,he=1-a-m,D[t+200>>3]=he,A>>>0<=5&&(c=e[208+(o=o+226428|0)>>2],t=i+223664|0,ce=(ee=Pt(p*+e[o+248>>2]))*Da(w*+(0|c)),ce+=ce,D[t+1488>>3]=ce,ee*=-ee,D[t+1496>>3]=ee,Be=1-ce-ee,D[t+1480>>3]=Be,D[t+256>>3]=.015625*(ee-m),D[t+248>>3]=.015625*(ce-a),D[t+240>>3]=.015625*(Be-he)),(0|(A=A+1|0))!=10;);for(ee=(a=Pt(p*+e[56619]))*-a,D[27985]=ee,ce=(a*=Da(w*+(0-e[56609]|0)))+a,D[27984]=ce,a=1-ce-ee,D[27983]=a,a!=0&&(a=1/a,D[27983]=a,ee*=m=-a,D[27985]=ee,ce*=m,D[27984]=ce),he=(m=Pt(p*+e[56669]))*-m,D[28145]=he,Be=(m*=Da(w*+(0-e[56659]|0)))+m,D[28144]=Be,m=1-Be-he,D[28143]=m,m!=0&&(m=1/m,D[28143]=m,he*=rA=-m,D[28145]=he,Be*=rA,D[28144]=Be),D[27990]=.015625*(he-ee),D[27989]=.015625*(Be-ce),D[27988]=.015625*(m-a),A=0;o=e[8+(i=226428+(A<<2)|0)>>2],t=223664+(A<<6)|0,m=(a=Pt(p*+e[i+128>>2]))*Da(w*+(0|o)),m+=m,D[t+848>>3]=m,a*=-a,D[t+856>>3]=a,D[t+840>>3]=D[r+(A<<3)>>3]*(1-m-a),(0|(A=A+1|0))!=7;);if(p=(a=Pt(p*+(e[55918]/2|0)))*-a,D[28137]=p,a*=Da(0*w),a+=a,D[28136]=a,D[28135]=1-a-p,A=1,(0|ZA())!=1)continue;break C}break}A=1,e[54741]>0&&(e[54741]=0,e[55963]=64,e[56606]=i+-64,e[55923]=64,(0|ZA())==1)||(A=0)}else{if(J=E=J-752|0,!t){jA(A=E+376|0,0,376),Bs(f,o,A),Bs(f,i,A=jA(E,0,376)),t=e[50768]+z(e[50769],c>>>6|0)|0,e[50768]=t,t>>=8,t=e[50770]+(z(e[50771],l[e[50766]+((0|t)>=127?127:t)|0])>>8)|0,e[50767]=t,D[A+368>>3]=(0|t)/4096|0,e[50773]&&(D[A+736>>3]=D[A+736>>3]/5,D[A+360>>3]=D[A+360>>3]/5),t=e[e[56797]+4>>2],ct[e[e[t>>2]>>2]](t,A+376|0,110,110,-1,0),i=c-110|0,f=e[50758],t=e[50757];m:{for(;;){if((0|f)!=(0|(t=(t+1|0)%170|0))&&!((P=e[216192+(t<<4)>>2])-5>>>0<2)){if(o=1,(0|P)!=1)continue;break m}break}i=c-220|0,o=0}(0|i)>0&&(t=e[e[56797]+4>>2],ct[e[e[t>>2]>>2]](t,A,i,i||1,-1,0)),o||(e[A+352>>2]=0,e[A+356>>2]=0,D[A>>3]=D[A+368>>3],t=e[e[56797]+4>>2],ct[e[e[t>>2]>>2]](t,A,55,55,-1,0),e[A+360>>2]=0,e[A+364>>2]=0,t=e[e[56797]+4>>2],ct[e[e[t>>2]>>2]](t,A,55,55,-1,0))}A=e[e[56797]+8>>2],t=e[51290],c=0|ct[e[e[A>>2]>>2]](A,e[54046]-t>>>1|0,t),f=e[51290];m:if(c&&!((0|(t=e[50776]))>=(0|(Qe=e[50773]))))for(Ve=e[50777],cA=(0|z(Ve,3))/-4|0,a=.0009765625*+e[50780],P=e[50772],i=e[50778],MA=e[50775],Z=e[50774],A=0;;){if(Y=l[P+(o=t+i|0)|0],Z?Y=z(Z,Y<<24>>24):(t=t+1|0,e[50776]=t,Y|=g[P+(o=t+i|0)|0]<<8),Y=Ne(w=a*+(0|Y))<2147483648?~~w:-2147483648,b[(Ke=f+(A<<1)|0)>>1]=M[Ke>>1]+((0|z(Y,MA))/40|0),(0|o)>=(0|Ve)&&(i=i+cA|0,e[50778]=i),t=t+1|0,e[50776]=t,(0|t)>=(0|Qe))break m;if(!(c>>>0>(A=A+1|0)>>>0))break}A=f+(c<<1)|0,e[51290]=A,J=E+752|0,A=ue[54046]<=A>>>0}if(J=r- -64|0,A)break i;break c}e[50781]=A||100;break c}Ns(A,e[r+8>>2]);break c}A=e[r+8>>2],e[50759]=wt(203816,A,1344),e[50801]=e[A+108>>2]?105792:106064,A=(0|z(e[A+120>>2],26))/100|0,e[33038]=A,(0|(s=e[50754]))<=11e3&&(g[203300]=1,e[33038]=A<<1),e[54728]=e[50982],A=e[50979],t=e[50978],jA(205184,0,11e3),e[51293]=0,A=(t=(o=(0|(i=e[50789]))>0)?130:(0|t)>=5499?5499:t)?o?i:(0|A)>=100?100:A:0,e[50755]=A,t=(0|z(t,s))/1e3|0,e[51292]=t,e[54729]=(0|A)>20?t<<1:A?t:0,e[33037]=(0|z(500-A|0,(0|z(l[e[50797]+105596|0],(0|z(e[50787],55))/100|0))/16|0))/500,A=256,(0|(t=(0|(t=e[50785]))>=101?101:t))>=51&&(A=256+(((z(t,25)-1250&65535)>>>0)/50|0)|0),b[101990]=(0|z(b[102026],A))/256,b[101991]=(0|z(b[102027],A))/256,b[101992]=(0|z(b[102028],A))/256,b[101993]=(0|z(b[102029],A))/256,b[101994]=(0|z(b[102030],A))/256,b[101995]=(0|z(b[102031],A))/256,A=e[50790],b[101999]=(0|z(b[102035],z(A,-6)+256|0))/256,b[102e3]=(0|z(b[102036],z(A,-3)+256|0))/256,ri(8,0,e[50986],0,e[51290]),xt(e[r+8>>2]);break c}if(!e[50759])break c;t=e[r+12>>2],r=e[r+8>>2],e[55911]=0,e[55915]=A?2097152/(0|A)|0:0,e[55910]=r,A=(0|z(t,e[33037]))/16|0,e[50779]=A,e[50780]=(0|z(z(A,e[50985]),15))/100;break c}ri(t>>8,A,e[r+8>>2],e[r+12>>2],o)}s=0,A=e[50757]+1|0,e[50757]=(0|A)<=169?A:0}if(g[218920]=s,!((o=e[51290])>>>0<ue[54046]))break}i=e[34391],r=(e[51290]-i|0)/2|0,e[34439]=r+e[34439],t=e[34436],A=e[34388]+z(t,36)|0,e[A+4>>2]=0,e[A>>2]=0,e[A+24>>2]=e[34438];s:if(2&(A=e[32538])){if(o=e[34388],(-2&A)==2&&(!(r=t?o:0)|e[r>>2]!=8||(0|(r=e[r+28>>2]))!=e[34389]&&(e[34389]=r)),s=1,(0|t)<2)break s;for(;;){r=t?o+z(s,36)|0:0;i:{c:switch(0|A){case 2:case 3:if(!r|e[r>>2]!=8||(0|(r=e[r+28>>2]))==e[34389])break i;e[34389]=r;break i;case 0:break c;default:break i}(A=e[34440])?(ct[0|A](i,0,r),t=e[34436],A=e[32538]):A=0}if(!((0|(s=s+1|0))<(0|t)))break}}else if((A=e[34440])&&0|ct[0|A](i,r,e[34388]))break r;if(!oA(1)&&!(170-((0|(A=e[50757]-e[50758]|0))<=0?A+170|0:A)|0||(A=e[34388],e[A>>2]=0,e[A+4>>2]=e[34437],e[A+24>>2]=e[34438],me(1))))break}if(t=0,2&l[130152]||!(A=e[34440])||!(0|ct[0|A](0,0,e[34388])))break A}me(2),t=268439295}if((0|t)<=268437502){if(!t|(0|t)==268436479|(0|t)!=268437247)break e;return}}}function oA(A){var t,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0;J=t=J-720|0,r=e[47198],A||(e[36443]=0,e[36442]=1,e[36444]=0,e[36440]=0,e[36441]=0,A=e[50758],e[36454]=A,e[36427]=-1,e[36424]=-1,e[36446]=0,e[36447]=0,e[36439]=-1,e[36426]=0,e[36455]=A,e[36448]=0,e[36449]=0,e[36450]=0,e[36451]=0,e[36452]=0,e[36453]=0,La(),e[36427]=-1,A=216192+(e[50758]<<4)|0,e[A>>2]=5,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,e[36426]=0,e[36438]&&(e[36438]=0,A=216192+(e[50758]<<4)|0,e[A>>2]=14,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0));e:{A:if(!((0|(A=e[36442]))>997|e[36423]<=(0|A)))for(Y=r>>>1&1,Z=t+48|4,ee=t+348|0,ce=t+652|0,he=e[32322],w=e[32320],Be=t+60|0,Qe=t+648|0,Ve=t+56|0,Ke=t+620|0,E=t- -64|0;;){if(a=145840+(A<<5)|0,!(A=e[50756])|!e[A>>2]||(e[t+12>>2]=0,as(A=t+16|0,e[a+8>>2],a,0,t+12|0),r=Ji(A),s=l[a+17|0],A=216192+(e[50758]<<4)|0,e[A>>2]=16,e[A+8>>2]=s,e[A+4>>2]=r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),A=1,(0|(s=(0|(r=e[50757]-e[50758]|0))<=0?r+170|0:r))<=(0|((r=l[a+17|0])?(0|r)==2?25:15:10)))break e;if(m=e[36442],2&l[0|a])for(p=2047&M[a+4>>1];;){if(s=e[36443],c=127&(r=e[198304+(s<<2)>>2])){A=r>>>8|0,e[36443]=s+1;r:{s:{switch((31&r)-2|0){case 0:Ns(96&r|8,A),Ls(2);break r;case 5:if((0|A)>=e[34064]||!e[4+(c=136272+(s=A<<4)|0)>>2])break r;dr(10,0),A=216192+(e[50758]<<4)|0,e[A>>2]=6,c=e[c+4>>2],e[A+8>>2]=e[8+(s+136272|0)>>2]+44,e[A+12>>2]=5376,e[A+4>>2]=c;break s;case 8:if((0|((0|(s=e[50757]-e[50758]|0))<=0?s+170:s))<6)break r;c=e[47353],s=216192+(e[50758]<<4)|0,e[s>>2]=778,e[s+8>>2]=A,e[s+4>>2]=c+p&16777215;break s;case 9:if((0|((0|(s=e[50757]-e[50758]|0))<=0?s+170:s))<6)break r;c=e[33284],s=216192+(e[50758]<<4)|0,e[s>>2]=1034,e[s+8>>2]=A,e[s+4>>2]=c+1&16777215;break s}dr(10,0),s=216192+(e[50758]<<4)|0,e[s>>2]=12,e[s+8>>2]=A,e[s+4>>2]=c}A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0}if(!(128&r))continue}break}(A=l[a+20|0])&&(1&g[e[47192]+48|0]&l[a+17|0]==2|1&g[e[a+8>>2]+7|0]||(e[36426]=0),r=e[47353]+(2047&M[a+4>>1])|0,e[36445]=r,4&A&&((0|((0|(A=e[50757]-e[50758]|0))<=0?A+170:A))<6||(s=e[47568],A=216192+(e[50758]<<4)|0,e[A>>2]=522,e[A+8>>2]=s,e[A+4>>2]=16777215&r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)),1&g[a+20|0]&&(r=M[a+4>>1],s=e[36444],e[36444]=s+1,(0|((0|(A=e[50757]-e[50758]|0))<=0?A+170:A))<6||(p=e[36445],c=e[47355],A=216192+(e[50758]<<4)|0,e[A>>2]=266,e[A+8>>2]=s+c,e[A+4>>2]=16777215&p|(63488&r)<<13,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0))),(0|(A=e[36441]))>0&&(r=216192+(e[36425]<<4)|0,e[r+4>>2]||(e[r+4>>2]=A),e[36441]=0),A=m+1<<5,r=m-1<<5,!(s=l[a+18|0])|2&l[e[a+8>>2]+7|0]||dr(s,1),c=A+145840|0,i=r+145840|0,p=1;r:{s:{if(e[47198]&&(f=e[a+8>>2],l[f+10|0]!=15)){i:if(l[a+17|0]==2)switch(l[i+17|0]-3|0){case 0:case 5:break s;default:break i}p=0,as(t+704|0,f,a,Y,0),(0|((0|(A=e[50757]-e[50758]|0))<=0?A+170:A))<6||(r=e[36445],A=216192+(e[50758]<<4)|0,e[A>>2]=1802,e[A+4>>2]=16777215&r,r=e[t+708>>2],e[A+8>>2]=e[t+704>>2],e[A+12>>2]=r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)}i:switch(l[a+17|0]){case 0:dr(e[a+12>>2],0),g[a+23|0]=l[e[a+8>>2]+14|0];break r;case 4:r=e[a+8>>2],(0|(A=l[c+17|0]))==2|!l[c+20|0]&(0|A)==3||(b[a>>1]=8192|M[a>>1]),2&l[r+7|0]&&(e[t+88>>2]=0,e[t+92>>2]=0,e[t+80>>2]=0,e[t+84>>2]=0,e[t+72>>2]=0,e[t+76>>2]=0,e[E>>2]=0,e[E+4>>2]=0,e[t+56>>2]=0,e[t+60>>2]=0,e[t+48>>2]=0,e[t+52>>2]=0,tr(0,1,a,t+552|0,145784),e[t+56>>2]=e[t+620>>2],e[E>>2]=e[t+640>>2],e[36424]<0&&(s=l[c+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[12+(A=216192+(A<<4)|0)>>2]=s,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,p=l[c+22|0],s=l[c+21|0],c=e[129280+(l[a+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(f=e[36440]))<=0||e[4+(A=216192+(A<<4)|0)>>2]||(e[A+4>>2]=f),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,p|=s<<16,s=(0|s)==255,e[A+12>>2]=s?3604556:p,e[A+8>>2]=s?w:c,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),QA(r,0,t+48|0,a,0)),tr(0,0,a,t+552|0,145784),e[t+552>>2]=4|e[t+552>>2],(0|(A=e[36440]))<=0||(0|(r=e[36424]))<0||(e[4+(r=216192+(r<<4)|0)>>2]||(e[r+4>>2]=A),e[36440]=0),e[36426]=0,e[36439]=-1,e[36455]=e[50758],La(),e[36427]=-1,e[36422]=0,(A=e[t+624>>2])&&(s=A,A=e[t+644>>2],ys(s,2,e[t+596>>2]<<1,e[t+552>>2],0,A?(A<<5)/100|0:32)),e[36426]=0;break r;case 6:tr(0,0,a,t+552|0,145784),8&l[0|a]&&(A=e[a+12>>2],(0|(r=e[36440]))<=0||(0|(s=e[36424]))<0||(e[4+(s=216192+(s<<4)|0)>>2]||(e[s+4>>2]=r),e[36440]=0),e[36426]=0,e[36439]=-1,e[36455]=e[50758],La(),e[36427]=-1,e[36422]=0,(r=e[t+624>>2])&&(s=A,A=e[t+644>>2],ys(r,2,e[t+596>>2]<<1,e[t+552>>2],s,A?(A<<5)/100|0:32))),A=e[a+12>>2],(0|(r=e[36440]))<=0||(0|(s=e[36424]))<0||(e[4+(s=216192+(s<<4)|0)>>2]||(e[s+4>>2]=r),e[36440]=0),e[36426]=0,e[36439]=-1,e[36455]=e[50758],La(),e[36427]=-1,e[36422]=0,(r=e[t+624>>2])&&(s=A,A=e[t+644>>2],ys(r,2,e[t+596>>2]<<1,e[t+552>>2],s,A?(A<<5)/100|0:32)),e[36426]=0;break r;case 5:s=e[a+8>>2],e[Z+40>>2]=0,e[(A=Z)+32>>2]=0,e[A+36>>2]=0,e[A+24>>2]=0,e[A+28>>2]=0,e[A+16>>2]=0,e[A+20>>2]=0,e[A+8>>2]=0,e[A+12>>2]=0,e[A>>2]=0,e[A+4>>2]=0,e[t+48>>2]=4;c:{o:{u:{l:switch(l[c+17|0]-2|0){case 0:r=l[a+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[12+(A=216192+(A<<4)|0)>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,r=l[a+22|0],f=l[a+21|0],p=e[129280+(l[a+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(o=e[36440]))<=0||e[4+(A=216192+(A<<4)|0)>>2]||(e[A+4>>2]=o),A=(o=!(255&~f))?w:p,p=1;break o;case 1:break l;default:break u}if(!l[c+20|0]){r=l[c+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[12+(A=216192+(A<<4)|0)>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,r=l[c+22|0],f=l[c+21|0],p=e[129280+(l[c+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(o=e[36440]))<=0||e[4+(A=216192+(A<<4)|0)>>2]||(e[A+4>>2]=o),A=(o=!(255&~f))?w:p,p=1;break o}}if(p=0,e[36424]>=0)break c;r=l[c+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[12+(A=216192+(A<<4)|0)>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,r=l[a+22|0],f=l[a+21|0],p=e[129280+(l[a+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(o=e[36440]))<=0||e[4+(A=216192+(A<<4)|0)>>2]||(e[A+4>>2]=o),A=(o=!(255&~f))?w:p,p=0}P=e[50758],e[36424]=P,e[36440]=0,e[(P=216192+(P<<4)|0)>>2]=9,e[P+4>>2]=0,e[P+12>>2]=o?3604556:255&r|(255&f)<<16,e[P+8>>2]=A,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0}c:if(!(2&l[s+7|0])&l[i+17|0]!=2)8&l[0|a]&&dr(50,0);else{if(tr(0,1,a,t+552|0,145784),e[t+56>>2]=e[t+620>>2],e[t+64>>2]=e[t+640>>2],QA(s,0,t+48|0,a,0),!(8&l[0|a]))break c;dr(25,1),QA(s,0,t+48|0,a,0)}c:if(p){if(e[36455]!=e[36454])break c;e[36455]=e[50758]}else b[a>>1]=8192|M[a>>1];if(tr(0,0,a,t+552|0,145784),e[t+56>>2]=e[t+620>>2],e[t+64>>2]=e[t+640>>2],e[t+76>>2]=e[t+636>>2],e[t+80>>2]=e[t+656>>2],QA(s,0,t+48|0,a,0),l[a+20|0]|l[84+(145840+(m<<5)|0)|0]||((0|(A=l[c+17|0]))==7&&(dr(20,0),A=l[c+17|0]),(255&A)!=6))break r;dr(12,0);break r;case 7:c:{o:{u:{l:{n:switch((A=l[c+17|0])-2|0){case 1:break l;case 0:break n;default:break u}r=l[a+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[12+(A=216192+(A<<4)|0)>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,p=l[a+22|0],A=l[a+21|0],s=e[129280+(l[a+16|0]<<2)>>2],(0|(r=e[36424]))<0|(0|(f=e[36440]))<=0||e[4+(r=216192+(r<<4)|0)>>2]||(e[r+4>>2]=f),r=(f=!(255&~A))?w:s;break o}r=l[c+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[12+(A=216192+(A<<4)|0)>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,p=l[c+22|0],A=l[c+21|0],s=e[129280+(l[c+16|0]<<2)>>2],(0|(r=e[36424]))<0|(0|(f=e[36440]))<=0||e[4+(r=216192+(r<<4)|0)>>2]||(e[r+4>>2]=f),r=(f=!(255&~A))?w:s;break o}if(e[36424]>=0)break c;r=l[a+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[12+(A=216192+(A<<4)|0)>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,p=l[a+22|0],A=l[a+21|0],s=e[129280+(l[a+16|0]<<2)>>2],(0|(r=e[36424]))<0|(0|(f=e[36440]))<=0||e[4+(r=216192+(r<<4)|0)>>2]||(e[r+4>>2]=f),r=(f=!(255&~A))?w:s}s=e[50758],e[36424]=s,e[36440]=0,e[(s=216192+(s<<4)|0)>>2]=9,e[s+4>>2]=0,e[s+12>>2]=f?3604556:(255&A)<<16|p,e[s+8>>2]=r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,A=l[c+17|0]}c:{o:{u:switch((255&A)-2|0){case 1:if(l[c+20|0])break o;break;case 0:break u;default:break o}if(e[36455]!=e[36454])break c;e[36455]=e[50758];break c}b[a>>1]=8192|M[a>>1]}tr(0,0,a,t+552|0,145784),e[t+56>>2]=0,e[t+60>>2]=0,e[E>>2]=0,e[E+4>>2]=0,e[t+80>>2]=0,e[t+84>>2]=0,e[t+72>>2]=0,e[t+76>>2]=0,e[t+88>>2]=0,e[t+56>>2]=e[t+620>>2],e[E>>2]=e[t+640>>2],e[t+80>>2]=e[t+656>>2],e[t+48>>2]=0,e[t+52>>2]=0,e[t+76>>2]=e[t+636>>2],e[t+92>>2]=e[t+596>>2]<<1,8&l[0|a]&&QA(e[a+8>>2],0,t+48|0,a,0),QA(e[a+8>>2],0,t+48|0,a,0);break r;case 8:if(e[t+88>>2]=0,e[t+92>>2]=0,e[t+80>>2]=0,e[t+84>>2]=0,e[t+72>>2]=0,e[t+76>>2]=0,e[E>>2]=0,e[E+4>>2]=0,e[t+56>>2]=0,e[t+60>>2]=0,e[t+48>>2]=0,e[t+52>>2]=0,1&g[0|a]||(r=l[a+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[12+(A=216192+(A<<4)|0)>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,s=l[a+22|0],r=l[a+21|0],p=e[129280+(l[a+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(f=e[36440]))<=0||e[4+(A=216192+(A<<4)|0)>>2]||(e[A+4>>2]=f),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,s|=r<<16,r=(0|r)==255,e[A+12>>2]=r?3604556:s,e[A+8>>2]=r?w:p,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),l[i+17|0]==8&&(e[36426]=0),tr(0,0,a,t+552|0,145784),e[t+56>>2]=e[t+620>>2],e[t+64>>2]=e[t+640>>2],e[t+92>>2]=e[t+596>>2]<<1,l[c+17|0]==2){e[36455]==e[36454]&&(e[36455]=e[50758]),QA(e[a+8>>2],0,t+48|0,a,0);break r}if(!(!(1&g[0|a])|l[i+17|0]!=2)){QA(e[a+8>>2],0,t+48|0,a,0);break r}e[36426]=0,QA(e[a+8>>2],0,t+48|0,a,0),e[36426]=0;break r;case 3:e[t+88>>2]=0,e[t+92>>2]=0,e[t+80>>2]=0,e[t+84>>2]=0,e[t+72>>2]=0,e[t+76>>2]=0,e[E>>2]=0,e[E+4>>2]=0,e[t+56>>2]=0,e[t+60>>2]=0,e[t+48>>2]=0,e[t+52>>2]=0,s=e[e[a+8>>2]+4>>2],1&g[0|a]||(r=l[a+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[12+(A=216192+(A<<4)|0)>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,p=l[a+22|0],r=l[a+21|0],f=e[129280+(l[a+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(o=e[36440]))<=0||e[4+(A=216192+(A<<4)|0)>>2]||(e[A+4>>2]=o),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,p|=r<<16,r=(0|r)==255,e[A+12>>2]=r?3604556:p,e[A+8>>2]=r?w:f,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),l[i+17|0]==8&&(e[36426]=0),l[c+17|0]!=2|e[36455]!=e[36454]||(e[36455]=e[50758]),tr(0,0,a,t+552|0,145784),(0|(A=e[t+584>>2]-l[a+18|0]|0))>0&&dr(A,1),e[t+56>>2]=e[t+620>>2],e[t+64>>2]=e[t+640>>2],e[t+76>>2]=e[t+636>>2],e[t+80>>2]=e[t+656>>2],e[t+92>>2]=e[t+596>>2]<<1,QA(e[a+8>>2],0,t+48|0,a,s<<24>>31&5);break r;case 2:break i;default:break r}f=e[a+8>>2]}m=l[a+3|0],e[t+88>>2]=0,e[t+92>>2]=0,e[t+80>>2]=0,e[t+84>>2]=0,e[t+72>>2]=0,e[t+76>>2]=0,e[E>>2]=0,e[E+4>>2]=0,e[t+56>>2]=0,e[t+60>>2]=0,e[t+48>>2]=0,e[t+52>>2]=0,tr(0,0,a,t+552|0,145784),A=e[t+628>>2],e[t+56>>2]=A,e[t+92>>2]=e[t+596>>2]<<1;s:{if(!A||(o=0,s=Qe,r=Be,2&l[t+552|0])){if(l[i+17|0]?(o=0,tr(0,0,i,t+400|0,0),A=e[t+476>>2],e[t+56>>2]=A,!A|!(2&l[t+400|0])||(e[t+72>>2]=e[t+496>>2],o=1),r=e[t+512>>2],e[t+84>>2]=e[t+508>>2],e[t+88>>2]=r):o=0,A)break s;e[t+48>>2]=1,e[t+52>>2]=1,s=Ke,r=Ve}e[r>>2]=e[s>>2]}e[t+64>>2]=e[t+640>>2],r=l[a+16|0],A=0,(s=l[a+7|0])?(Vi(s,t+96|0),r=Yn(e[t+220>>2]),(0|(s=e[t+224>>2]))<=0||(A=Yn(s))):r=e[129280+(r<<2)>>2],e[36455]==e[36454]&&(e[36455]=e[50758]),s=(s=15&m)>>>0<2?1:s>>>0>6?3:2;s:{switch(l[i+17|0]-3|0){case 2:case 4:o=l[a+19|0],i=e[50758],e[36425]=i,e[36441]=0,e[12+(i=216192+(i<<4)|0)>>2]=o,e[i+8>>2]=A,e[i>>2]=8,e[i+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,o=l[a+22|0],i=l[a+21|0],(0|(A=e[36440]))<=0||(0|(m=e[36424]))<0||e[4+(m=216192+(m<<4)|0)>>2]||(e[m+4>>2]=A),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,o|=i<<16,i=(0|i)==255,e[A+12>>2]=i?3604556:o,e[A+8>>2]=i?w:r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,QA(f,1,t+48|0,a,s);break s;case 0:case 5:o=l[a+19|0],i=e[50758],e[36425]=i,e[36441]=0,e[12+(i=216192+(i<<4)|0)>>2]=o,e[i+8>>2]=A,e[i>>2]=8,e[i+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,QA(f,1,t+48|0,a,s),o=l[a+22|0],i=l[a+21|0],(0|(A=e[36440]))<=0||(0|(m=e[36424]))<0||e[4+(m=216192+(m<<4)|0)>>2]||(e[m+4>>2]=A),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,o|=i<<16,i=(0|i)==255,e[A+12>>2]=i?3604556:o,e[A+8>>2]=i?w:r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0;break s}o?(o=l[a+22|0],(0|(i=e[36440]))<=0||(0|(m=e[36424]))<0||e[4+(m=216192+(m<<4)|0)>>2]||(e[m+4>>2]=i),i=e[50758],e[36424]=i,e[36440]=0,e[(i=216192+(i<<4)|0)>>2]=9,e[i+4>>2]=0,e[i+12>>2]=(o|o<<16)-983040,e[i+8>>2]=he,i=e[50758]+1|0,e[50758]=(0|i)<=169?i:0,o=l[a+19|0],i=e[50758],e[36425]=i,e[36441]=0,e[(i=216192+(i<<4)|0)>>2]=8,e[i+4>>2]=0,e[i+12>>2]=o-1,e[i+8>>2]=A,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,QA(f,1,t+48|0,a,s),i=l[a+21|0],o=l[a+22|0],(0|(A=e[36440]))<=0||(0|(m=e[36424]))<0||e[4+(m=216192+(m<<4)|0)>>2]||(e[m+4>>2]=A),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,o|=i<<16,i=(0|i)==255,e[A+12>>2]=i?3604556:o,e[A+8>>2]=i?w:r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0):(1&g[0|a]||(o=l[a+19|0],i=e[50758],e[36425]=i,e[36441]=0,e[12+(i=216192+(i<<4)|0)>>2]=o,e[i+8>>2]=A,e[i>>2]=8,e[i+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,o=l[a+22|0],i=l[a+21|0],(0|(A=e[36440]))<=0||(0|(m=e[36424]))<0||e[4+(m=216192+(m<<4)|0)>>2]||(e[m+4>>2]=A),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,o|=i<<16,i=(0|i)==255,e[A+12>>2]=i?3604556:o,e[A+8>>2]=i?w:r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),QA(f,1,t+48|0,a,s))}!e[47198]|1^p||(as(t+704|0,e[a+8>>2],a,Y,0),(0|((0|(A=e[50757]-e[50758]|0))<=0?A+170:A))<6||(r=e[36445],A=216192+(e[50758]<<4)|0,e[A>>2]=1802,e[A+4>>2]=16777215&r,r=e[t+708>>2],e[A+8>>2]=e[t+704>>2],e[A+12>>2]=r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)),e[t+56>>2]=e[t+620>>2],e[t+84>>2]=0,e[t+88>>2]=0,e[t+64>>2]=e[t+640>>2],r=e[t+632>>2],e[t+68>>2]=r,A=ce;s:{if(!r&&(!l[c+17|0]||(e[t+72>>2]=0,tr(0,0,c,t+248|0,0),e[t+52>>2]=1,A=e[t+368>>2],e[t+84>>2]=e[t+364>>2],e[t+88>>2]=A,r=e[t+328>>2],e[t+68>>2]=r,A=ee,!r)))break s;e[t+72>>2]=e[A>>2]}QA(f,2,t+48|0,a,s)}if(A=e[36442]+1|0,e[36442]=A,(0|A)>997)break A;if(!(e[36423]>(0|A)))break}(0|(A=e[36440]))<=0||(0|(r=e[36424]))<0||(e[4+(r=216192+(r<<4)|0)>>2]||(e[r+4>>2]=A),e[36440]=0),e[36426]=0,e[36439]=-1,e[36455]=e[50758],La(),e[36427]=-1,A=0,e[36423]<=0||(r=e[47568],s=e[33284],(0|((0|(A=e[50757]-e[50758]|0))<=0?A+170:A))>=6&&(A=216192+(e[50758]<<4)|0,e[A>>2]=1290,e[A+8>>2]=r,e[A+4>>2]=16777215&s,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),e[36423]=0,A=0)}return J=t+720|0,A}function vA(A,t,r,a){var s,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0,et=0,at=0,dt=0;J=s=J-48|0;e:{if(r>>>0<=2){for(MA=e[124732+(r<<=2)>>2],zA=e[r+124720>>2];(0|(r=e[t+4>>2]))==e[t+104>>2]?r=bA(t):(e[t+4>>2]=r+1,r=l[0|r]),(0|r)==32|r-9>>>0<5;);P=1;A:{r:switch(r-43|0){case 0:case 2:break r;default:break A}P=(0|r)==45?-1:1,(0|(r=e[t+4>>2]))==e[t+104>>2]?r=bA(t):(e[t+4>>2]=r+1,r=l[0|r])}A:{r:{for(;;){if(g[c+84056|0]==(32|r)){if(c>>>0>6||((0|(r=e[t+4>>2]))==e[t+104>>2]?r=bA(t):(e[t+4>>2]=r+1,r=l[0|r])),(0|(c=c+1|0))!=8)continue;break r}break}if((0|c)!=3){if((0|c)==8)break r;if(!a|c>>>0<4)break A;if((0|c)==8)break r}if((0|(r=e[t+116>>2]))>0|(0|r)>=0&&(e[t+4>>2]=e[t+4>>2]-1),!(!a|c>>>0<4))for(r=(0|r)<0;r||(e[t+4>>2]=e[t+4>>2]-1),(c=c-1|0)>>>0>3;);}J=w=J-16|0,ye(Re(Re(0|P)*Re(1/0))),(t=2147483647&(f=X(2)))-8388608>>>0<=2130706431?(r=t,r<<=25,a=1065353216+(t=t>>>7|0)|0):(r=f<<25,a=f>>>7|2147418112,t>>>0>=2139095040||(r=0,a=0,t&&(Aa(w,r=t,0,0,0,(t=Ye(t))+81|0),p=e[w>>2],m=e[w+4>>2],r=e[w+8>>2],a=65536^e[w+12>>2]|16265-t<<16))),e[s>>2]=p,e[s+4>>2]=m,e[s+8>>2]=r,e[s+12>>2]=-2147483648&f|a,J=w+16|0,p=e[s+8>>2],m=e[s+12>>2],f=e[s>>2],E=e[s+4>>2];break e}A:{r:{s:if(!c){for(c=0;;){if(g[c+84473|0]!=(32|r))break s;if(c>>>0>1||((0|(r=e[t+4>>2]))==e[t+104>>2]?r=bA(t):(e[t+4>>2]=r+1,r=l[0|r])),(0|(c=c+1|0))==3)break}break r}switch(0|c){case 0:if((0|r)==48){if((0|(c=e[t+4>>2]))==e[t+104>>2]?c=bA(t):(e[t+4>>2]=c+1,c=l[0|c]),(-33&c)==88){J=o=J-432|0,(0|(r=e[t+4>>2]))==e[t+104>>2]?c=bA(t):(e[t+4>>2]=r+1,c=l[0|r]);s:{i:{for(;;){if((0|c)!=48){if((0|c)!=46)break s;if((0|(r=e[t+4>>2]))!=e[t+104>>2]){e[t+4>>2]=r+1,c=l[0|r];break i}break}(0|(r=e[t+4>>2]))!=e[t+104>>2]?(cA=1,e[t+4>>2]=r+1,c=l[0|r]):(cA=1,c=bA(t))}c=bA(t)}if(ee=1,(0|c)==48){for(;ce=(r=ce)-1|0,he=he-!r|0,(0|(r=e[t+4>>2]))==e[t+104>>2]?c=bA(t):(e[t+4>>2]=r+1,c=l[0|r]),(0|c)==48;);cA=1}}for(E=1073676288;;){s:{r=32|c;i:{if(!((et=c-48|0)>>>0<10)){if((0|c)!=46&r-97>>>0>=6)break s;if((0|c)==46){if(ee)break s;ee=1,ce=p,he=m;break i}}r=(0|c)>57?r-87|0:et,(0|m)<=0&p>>>0<=7|(0|m)<0?i=r+(i<<4)|0:!m&p>>>0<=28?(za(o+48|0,r),PA(o+32|0,Ke,rA,f,E,0,0,0,1073414144),Ke=e[o+32>>2],rA=e[o+36>>2],f=e[o+40>>2],E=e[o+44>>2],PA(o+16|0,e[o+48>>2],e[o+52>>2],e[o+56>>2],e[o+60>>2],Ke,rA,f,E),ea(o,e[o+16>>2],e[o+20>>2],e[o+24>>2],e[o+28>>2],w,Z,Qe,Ve),Qe=e[o+8>>2],Ve=e[o+12>>2],w=e[o>>2],Z=e[o+4>>2]):Y|!r||(PA(o+80|0,Ke,rA,f,E,0,0,0,1073610752),ea(o- -64|0,e[o+80>>2],e[o+84>>2],e[o+88>>2],e[o+92>>2],w,Z,Qe,Ve),Qe=e[o+72>>2],Ve=e[o+76>>2],Y=1,w=e[o+64>>2],Z=e[o+68>>2]),m=(p=p+1|0)?m:m+1|0,cA=1}(0|(r=e[t+4>>2]))!=e[t+104>>2]?(e[t+4>>2]=r+1,c=l[0|r]):c=bA(t);continue}break}s:if(cA){if((0|m)<=0&p>>>0<=7|(0|m)<0)for(f=p,E=m;i<<=4,(0|(f=f+1|0))!=8|(E=f?E:E+1|0););i:{c:{o:{if((-33&c)==80){if(f=Ii(t,a),E=r=$,f|(0|r)!=-2147483648)break i;if(a){if((0|(r=e[t+116>>2]))>0|(0|r)>=0)break o;break c}w=0,Z=0,_a(t,0,0),r=0,t=0;break s}if(f=0,E=0,e[t+116>>2]<0)break i}e[t+4>>2]=e[t+4>>2]-1}f=0,E=0}if(i)if(r=f+((t=ee?ce:p)<<2)|0,t=(m=(ee?he:m)<<2|t>>>30)+E|0,(p=r-32|0)>>>0>0-MA>>>0&(0|(t=m=(r>>>0<f>>>0?t+1|0:t)-(r>>>0<32)|0))>=0|(0|t)>0)e[56798]=68,za(o+160|0,P),PA(o+144|0,e[o+160>>2],e[o+164>>2],e[o+168>>2],e[o+172>>2],-1,-1,-1,2147418111),PA(o+128|0,e[o+144>>2],e[o+148>>2],e[o+152>>2],e[o+156>>2],-1,-1,-1,2147418111),w=e[o+128>>2],Z=e[o+132>>2],r=e[o+140>>2],t=e[o+136>>2];else if((0|m)>=(0|(r=(t=MA-226|0)>>31))&t>>>0<=p>>>0|(0|r)<(0|m)){if((0|i)>=0)for(;ea(o+416|0,w,Z,Qe,Ve,0,0,0,-1073807360),ea(o+400|0,w,Z,Qe,Ve,(t=r=(0|(t=g0(w,Z,Qe,Ve,1073610752)))>=0)?e[o+416>>2]:w,t?e[o+420>>2]:Z,t?e[o+424>>2]:Qe,t?e[o+428>>2]:Ve),p=(t=p)-1|0,m=m-!t|0,Qe=e[o+408>>2],Ve=e[o+412>>2],w=e[o+400>>2],Z=e[o+404>>2],(0|(i=r|i<<1))>=0;);t=m-((MA>>31)+(p>>>0<MA>>>0)|0)|0,(0|(r=(r=32+(p-MA|0)|0)>>>0<zA>>>0&(0|(t=r>>>0<32?t+1|0:t))<=0|(0|t)<0?(0|r)>0?r:0:zA))>=113?(za(o+384|0,P),ce=e[o+392>>2],he=e[o+396>>2],Ke=e[o+384>>2],rA=e[o+388>>2],f=0,t=0):(Nr(o+352|0,Ws(1,144-r|0)),za(o+336|0,P),Ke=e[o+336>>2],rA=e[o+340>>2],ce=e[o+344>>2],he=e[o+348>>2],Fn(o+368|0,e[o+352>>2],e[o+356>>2],e[o+360>>2],e[o+364>>2],Ke,rA,ce,he),Be=e[o+376>>2],at=e[o+380>>2],f=e[o+372>>2],t=e[o+368>>2]),ii(o+320|0,(a=!(1&i)&!!(0|gA(w,Z,Qe,Ve,0,0,0,0))&(0|r)<32)+i|0),PA(o+304|0,Ke,rA,ce,he,e[o+320>>2],e[o+324>>2],e[o+328>>2],e[o+332>>2]),r=t,ea(o+272|0,e[o+304>>2],e[o+308>>2],e[o+312>>2],e[o+316>>2],t,f,Be,at),PA(o+288|0,Ke,rA,ce,he,(t=a)?0:w,t?0:Z,t?0:Qe,t?0:Ve),ea(o+256|0,e[o+288>>2],e[o+292>>2],e[o+296>>2],e[o+300>>2],e[o+272>>2],e[o+276>>2],e[o+280>>2],e[o+284>>2]),ji(o+240|0,e[o+256>>2],e[o+260>>2],e[o+264>>2],e[o+268>>2],r,f,Be,at),gA(t=e[o+240>>2],a=e[o+244>>2],r=e[o+248>>2],f=e[o+252>>2],0,0,0,0)||(e[56798]=68),cr(o+224|0,t,a,r,f,p),w=e[o+224>>2],Z=e[o+228>>2],r=e[o+236>>2],t=e[o+232>>2]}else e[56798]=68,za(o+208|0,P),PA(o+192|0,e[o+208>>2],e[o+212>>2],e[o+216>>2],e[o+220>>2],0,0,0,65536),PA(o+176|0,e[o+192>>2],e[o+196>>2],e[o+200>>2],e[o+204>>2],0,0,0,65536),w=e[o+176>>2],Z=e[o+180>>2],r=e[o+188>>2],t=e[o+184>>2];else Nr(o+112|0,0*+(0|P)),w=e[o+112>>2],Z=e[o+116>>2],r=e[o+124>>2],t=e[o+120>>2]}else{i:{c:{if((0|(r=e[t+116>>2]))>0|(0|r)>=0){if(r=e[t+4>>2],e[t+4>>2]=r-1,!a)break c;if(e[t+4>>2]=r-2,!ee)break i;e[t+4>>2]=r-3;break i}if(a)break i}_a(t,0,0)}Nr(o+96|0,0*+(0|P)),w=e[o+96>>2],Z=e[o+100>>2],r=e[o+108>>2],t=e[o+104>>2]}e[s+16>>2]=w,e[s+20>>2]=Z,e[s+24>>2]=t,e[s+28>>2]=r,J=o+432|0,p=e[s+24>>2],m=e[s+28>>2],f=e[s+16>>2],E=e[s+20>>2];break e}e[t+116>>2]<0||(e[t+4>>2]=e[t+4>>2]-1)}c=t,Be=P,o=a,t=0,P=0,J=i=J-8976|0,at=(et=0-MA|0)-zA|0;s:{i:{for(;;){if((0|r)!=48){if((0|r)!=46)break s;if((0|(r=e[c+4>>2]))!=e[c+104>>2]){e[c+4>>2]=r+1,r=l[0|r];break i}break}(0|(t=e[c+4>>2]))!=e[c+104>>2]?(e[c+4>>2]=t+1,r=l[0|t]):r=bA(c),t=1}r=bA(c)}if(Y=1,(0|r)==48){for(;p=(t=p)-1|0,m=m-!t|0,(0|(t=e[c+4>>2]))==e[c+104>>2]?r=bA(c):(e[c+4>>2]=t+1,r=l[0|t]),(0|r)==48;);t=1}}e[i+784>>2]=0;s:{i:{c:{o:{u:{if((a=(0|r)==46)|(w=r-48|0)>>>0<=9)for(;;){l:{if(1&a){if(!Y){p=f,m=E,Y=1;break l}a=!t;break u}E=(f=f+1|0)?E:E+1|0,(0|P)<=2044?(cA=(0|r)==48?cA:f,t=(i+784|0)+(P<<2)|0,ee&&(w=(z(e[t>>2],10)+r|0)-48|0),e[t>>2]=w,t=1,ee=(r=(0|(a=ee+1|0))==9)?0:a,P=r+P|0):(0|r)!=48&&(e[i+8960>>2]=1|e[i+8960>>2],cA=18396)}if((0|(r=e[c+4>>2]))==e[c+104>>2]?r=bA(c):(e[c+4>>2]=r+1,r=l[0|r]),!((a=(0|r)==46)|(w=r-48|0)>>>0<10))break}if(p=Y?p:f,m=Y?m:E,!(!t|(-33&r)!=69)){if(w=Ii(c,o),Z=t=$,!(w|(0|t)!=-2147483648)){if(!o)break c;w=0,Z=0,e[c+116>>2]<0||(e[c+4>>2]=e[c+4>>2]-1)}m=m+Z|0,m=(p=p+w|0)>>>0<w>>>0?m+1|0:m;break i}if(a=!t,(0|r)<0)break o}e[c+116>>2]<0||(e[c+4>>2]=e[c+4>>2]-1)}if(!a)break i;e[56798]=28}f=0,E=0,_a(c,0,0),r=0,t=0;break s}if(t=e[i+784>>2])if(f>>>0>9&(0|E)>=0|(0|E)>0|(0|f)!=(0|p)|(0|m)!=(0|E)|(t>>>zA|0?(0|zA)<=30:0))if(p>>>0>et>>>1>>>0&(0|m)>=0|(0|m)>0)e[56798]=68,za(i+96|0,Be),PA(i+80|0,e[i+96>>2],e[i+100>>2],e[i+104>>2],e[i+108>>2],-1,-1,-1,2147418111),PA(i- -64|0,e[i+80>>2],e[i+84>>2],e[i+88>>2],e[i+92>>2],-1,-1,-1,2147418111),f=e[i+64>>2],E=e[i+68>>2],r=e[i+76>>2],t=e[i+72>>2];else if((r=p>>>0<(t=MA-226|0)>>>0)&(0|m)<=(0|(t>>=31))|(0|t)>(0|m))e[56798]=68,za(i+144|0,Be),PA(i+128|0,e[i+144>>2],e[i+148>>2],e[i+152>>2],e[i+156>>2],0,0,0,65536),PA(i+112|0,e[i+128>>2],e[i+132>>2],e[i+136>>2],e[i+140>>2],0,0,0,65536),f=e[i+112>>2],E=e[i+116>>2],r=e[i+124>>2],t=e[i+120>>2];else{if(ee){if((0|ee)<=8){for(c=e[(t=(i+784|0)+(P<<2)|0)>>2];c=z(c,10),(0|(ee=ee+1|0))!=9;);e[t>>2]=c}P=P+1|0}if(Y=p,!((0|cA)>(0|p)|(0|cA)>=9|(0|p)>17)){if((0|Y)==9){za(i+192|0,Be),ii(i+176|0,e[i+784>>2]),PA(i+160|0,e[i+192>>2],e[i+196>>2],e[i+200>>2],e[i+204>>2],e[i+176>>2],e[i+180>>2],e[i+184>>2],e[i+188>>2]),f=e[i+160>>2],E=e[i+164>>2],r=e[i+172>>2],t=e[i+168>>2];break s}if((0|Y)<=8){za(i+272|0,Be),ii(i+256|0,e[i+784>>2]),PA(i+240|0,e[i+272>>2],e[i+276>>2],e[i+280>>2],e[i+284>>2],e[i+256>>2],e[i+260>>2],e[i+264>>2],e[i+268>>2]),za(i+224|0,e[124720+(0-Y<<2)>>2]),Qr(i+208|0,e[i+240>>2],e[i+244>>2],e[i+248>>2],e[i+252>>2],e[i+224>>2],e[i+228>>2],e[i+232>>2],e[i+236>>2]),f=e[i+208>>2],E=e[i+212>>2],r=e[i+220>>2],t=e[i+216>>2];break s}if(t=27+(z(Y,-3)+zA|0)|0,!((r=e[i+784>>2])>>>t|0&&(0|t)<=30)){za(i+352|0,Be),ii(i+336|0,r),PA(i+320|0,e[i+352>>2],e[i+356>>2],e[i+360>>2],e[i+364>>2],e[i+336>>2],e[i+340>>2],e[i+344>>2],e[i+348>>2]),za(i+304|0,e[124648+(Y<<2)>>2]),PA(i+288|0,e[i+320>>2],e[i+324>>2],e[i+328>>2],e[i+332>>2],e[i+304>>2],e[i+308>>2],e[i+312>>2],e[i+316>>2]),f=e[i+288>>2],E=e[i+292>>2],r=e[i+300>>2],t=e[i+296>>2];break s}}for(;!e[(i+784|0)+((P=(r=P)-1|0)<<2)>>2];);if(ee=0,t=(0|Y)%9|0){if(a=0,t=(0|Y)<0?t+9|0:t,r){for(m=1e9/(0|(p=e[124720+(0-t<<2)>>2]))|0,w=0,c=0;f=(f=w)+(P=((E=e[(w=(i+784|0)+(c<<2)|0)>>2])>>>0)/(p>>>0)|0)|0,e[w>>2]=f,a=(f=!f&(0|a)==(0|c))?a+1&2047:a,Y=f?Y-9|0:Y,w=z(m,E-z(p,P)|0),(0|(c=c+1|0))!=(0|r););w&&(e[(i+784|0)+(r<<2)>>2]=w,r=r+1|0)}else r=0;Y=9+(Y-t|0)|0}else a=0;for(;;){c=(i+784|0)+(a<<2)|0;i:{for(;;){if(((0|Y)!=36|ue[c>>2]>=10384593)&(0|Y)>=36)break i;for(P=r+2047|0,w=0,t=r;r=t,p=w,w=(t=e[(P=(i+784|0)+((f=2047&P)<<2)|0)>>2])<<29,t=E=t>>>3|0,!(m=(p=p+w|0)>>>0<w>>>0?t+1|0:t)&p>>>0<1000000001?w=0:p=(t=p)-It(w=ui(t,m,1e9),$,1e9,0)|0,e[P>>2]=p,t=(0|f)!=(r-1&2047)||(0|a)==(0|f)||p?r:f,P=f-1|0,(0|a)!=(0|f););if(ee=ee-29|0,w)break}(0|(a=a-1&2047))==(0|t)&&(c=r=(p=i+784|0)+((t+2046&2047)<<2)|0,m=e[r>>2],r=t-1&2047,e[c>>2]=m|e[p+(r<<2)>>2]),Y=Y+9|0,e[(i+784|0)+(a<<2)>>2]=w;continue}break}i:{c:for(;;){for(p=r+1&2047,w=(i+784|0)+((r-1&2047)<<2)|0;;){f=(0|Y)>45?9:1;o:{for(;;){t=a,c=0;u:{for(;;){if((0|(a=t+c&2047))!=(0|r)&&!((a=e[(i+784|0)+(a<<2)>>2])>>>0<(m=e[124672+(c<<2)>>2])>>>0)){if(a>>>0>m>>>0)break u;if((0|(c=c+1|0))!=4)continue}break}if((0|Y)==36){for(p=0,m=0,c=0,f=0,E=0;(0|(a=t+c&2047))==(0|r)&&(e[780+(i+((r=r+1&2047)<<2)|0)>>2]=0),ii(i+768|0,e[(i+784|0)+(a<<2)>>2]),PA(i+752|0,p,m,f,E,0,0,1342177280,1075633366),ea(i+736|0,e[i+752>>2],e[i+756>>2],e[i+760>>2],e[i+764>>2],e[i+768>>2],e[i+772>>2],e[i+776>>2],e[i+780>>2]),f=e[i+744>>2],E=e[i+748>>2],p=e[i+736>>2],m=e[i+740>>2],(0|(c=c+1|0))!=4;);if(za(i+720|0,Be),PA(i+704|0,p,m,f,E,e[i+720>>2],e[i+724>>2],e[i+728>>2],e[i+732>>2]),f=e[i+712>>2],E=e[i+716>>2],p=0,m=0,w=e[i+704>>2],Z=e[i+708>>2],(0|(a=(P=(0|(c=(o=ee+113|0)-MA|0))<(0|zA))?(0|c)>0?c:0:zA))<=112)break o;break i}}if(ee=f+ee|0,a=r,(0|t)!=(0|r))break}for(E=1e9>>>f|0,P=~(-1<<f),c=0,a=t;m=(m=c)+((o=e[(c=(i+784|0)+(t<<2)|0)>>2])>>>f|0)|0,e[c>>2]=m,a=(m=!m&(0|t)==(0|a))?a+1&2047:a,Y=m?Y-9|0:Y,c=z(E,o&P),(0|r)!=(0|(t=t+1&2047)););if(!c)continue;if((0|a)!=(0|p)){e[(i+784|0)+(r<<2)>>2]=c,r=p;continue c}e[w>>2]=1|e[w>>2];continue}break}break}Nr(i+656|0,Ws(1,225-a|0)),Fn(i+688|0,e[i+656>>2],e[i+660>>2],e[i+664>>2],e[i+668>>2],w,Z,f,E),Ke=e[i+696>>2],rA=e[i+700>>2],Qe=e[i+688>>2],Ve=e[i+692>>2],Nr(i+640|0,Ws(1,113-a|0)),Ci(i+672|0,w,Z,f,E,e[i+640>>2],e[i+644>>2],e[i+648>>2],e[i+652>>2]),ji(i+624|0,w,Z,f,E,p=e[i+672>>2],m=e[i+676>>2],ce=e[i+680>>2],he=e[i+684>>2]),ea(i+608|0,Qe,Ve,Ke,rA,e[i+624>>2],e[i+628>>2],e[i+632>>2],e[i+636>>2]),f=e[i+616>>2],E=e[i+620>>2],w=e[i+608>>2],Z=e[i+612>>2]}if((0|(Y=t+4&2047))!=(0|r)){i:if((Y=e[(i+784|0)+(Y<<2)>>2])>>>0<=499999999){if(!Y&(t+5&2047)==(0|r))break i;Nr(i+496|0,.25*+(0|Be)),ea(i+480|0,p,m,ce,he,e[i+496>>2],e[i+500>>2],e[i+504>>2],e[i+508>>2]),ce=e[i+488>>2],he=e[i+492>>2],p=e[i+480>>2],m=e[i+484>>2]}else(0|Y)==5e8?(dt=+(0|Be),(t+5&2047)!=(0|r)?(Nr(i+560|0,.75*dt),ea(i+544|0,p,m,ce,he,e[i+560>>2],e[i+564>>2],e[i+568>>2],e[i+572>>2]),ce=e[i+552>>2],he=e[i+556>>2],p=e[i+544>>2],m=e[i+548>>2]):(Nr(i+528|0,.5*dt),ea(i+512|0,p,m,ce,he,e[i+528>>2],e[i+532>>2],e[i+536>>2],e[i+540>>2]),ce=e[i+520>>2],he=e[i+524>>2],p=e[i+512>>2],m=e[i+516>>2])):(Nr(i+592|0,.75*+(0|Be)),ea(i+576|0,p,m,ce,he,e[i+592>>2],e[i+596>>2],e[i+600>>2],e[i+604>>2]),ce=e[i+584>>2],he=e[i+588>>2],p=e[i+576>>2],m=e[i+580>>2]);(0|a)>111||(Ci(i+464|0,p,m,ce,he,0,0,0,1073676288),gA(e[i+464>>2],e[i+468>>2],e[i+472>>2],e[i+476>>2],0,0,0,0)||(ea(i+448|0,p,m,ce,he,0,0,0,1073676288),ce=e[i+456>>2],he=e[i+460>>2],p=e[i+448>>2],m=e[i+452>>2]))}ea(i+432|0,w,Z,f,E,p,m,ce,he),ji(i+416|0,e[i+432>>2],e[i+436>>2],e[i+440>>2],e[i+444>>2],Qe,Ve,Ke,rA),f=e[i+424>>2],E=e[i+428>>2],w=e[i+416>>2],Z=e[i+420>>2],(at-2|0)>=(2147483647&o)||(e[i+408>>2]=f,e[i+412>>2]=2147483647&E,e[i+400>>2]=w,e[i+404>>2]=Z,PA(i+384|0,w,Z,f,E,0,0,0,1073610752),f=(t=(0|(t=g0(e[i+400>>2],e[i+404>>2],e[i+408>>2],e[i+412>>2],1081081856)))>=0)?e[i+392>>2]:f,E=t?e[i+396>>2]:E,w=t?e[i+384>>2]:w,Z=t?e[i+388>>2]:Z,ee=t+ee|0,!(!!(0|gA(p,m,ce,he,0,0,0,0))&(t?P&(0|a)!=(0|c):P))&(ee+110|0)<=(0|at)||(e[56798]=68)),cr(i+368|0,w,Z,f,E,ee),f=e[i+368>>2],E=e[i+372>>2],r=e[i+380>>2],t=e[i+376>>2]}else za(i+48|0,Be),ii(i+32|0,t),PA(i+16|0,e[i+48>>2],e[i+52>>2],e[i+56>>2],e[i+60>>2],e[i+32>>2],e[i+36>>2],e[i+40>>2],e[i+44>>2]),f=e[i+16>>2],E=e[i+20>>2],r=e[i+28>>2],t=e[i+24>>2];else Nr(i,0*+(0|Be)),f=e[i>>2],E=e[i+4>>2],r=e[i+12>>2],t=e[i+8>>2]}e[s+40>>2]=t,e[s+44>>2]=r,e[s+32>>2]=f,e[s+36>>2]=E,J=i+8976|0,p=e[s+40>>2],m=e[s+44>>2],f=e[s+32>>2],E=e[s+36>>2];break e;case 3:break r}(0|(r=e[t+116>>2]))>0|(0|r)>=0&&(e[t+4>>2]=e[t+4>>2]-1);break A}if((0|(r=e[t+4>>2]))==e[t+104>>2]?r=bA(t):(e[t+4>>2]=r+1,r=l[0|r]),(0|r)!=40){if(m=2147450880,e[t+116>>2]<0)break e;e[t+4>>2]=e[t+4>>2]-1;break e}for(c=1;(0|(r=e[t+4>>2]))==e[t+104>>2]?r=bA(t):(e[t+4>>2]=r+1,r=l[0|r]),r-48>>>0<10|r-65>>>0<26|(0|r)==95||!(r-97>>>0>=26);)c=c+1|0;if(m=2147450880,(0|r)==41)break e;(0|(r=e[t+116>>2]))>0|(0|r)>=0&&(e[t+4>>2]=e[t+4>>2]-1);r:{if(a){if(c)break r;break e}break A}for(;c=c-1|0,(0|r)>0|(0|r)>=0&&(e[t+4>>2]=e[t+4>>2]-1),c;);break e}e[56798]=28,_a(t,0,0)}m=0}e[A>>2]=f,e[A+4>>2]=E,e[A+8>>2]=p,e[A+12>>2]=m,J=s+48|0}function QA(A,t,r,a,s){var i,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0;if(J=i=J-112|0,e[r+8>>2]){MA=e[50754]/70|0,Z=(w=e[a+12>>2])||256;e:if((0|t)!=2){if((0|t)==1){A:if(l[A+11|0]!=3)switch(l[a-15|0]-3|0){case 0:case 5:break A;default:break e}Z=(0|(w=e[e[47192]+44>>2]))<(0|Z)?Z:w}}else{if((0|(w=e[e[47192]+80>>2]))<=0|!(8&l[0|a]|w>>>0<=l[A+14|0]|32&l[A+6|0]))break e;MA<<=1}if(e[36436]=0,he=A,zA=t,p=a,J=Y=J-16|0,A=e[34460]+e[r+8>>2]|0,t=(t=l[A+2|0])>>>0>=24?24:t,e[Y+12>>2]=t,c=e[r+12>>2]+e[r+24>>2]|0,e[36422]=c,t){for(w=A+4|0,o=1&b[A+4>>1];A=145488+(m<<3)|0,a=w+(o?m<<6:z(m,44))|0,e[A+4>>2]=a,P=M[a>>1],b[A+2>>1]=P,b[A>>1]=l[a+16|0],f=2&P?m:f,(0|(m=m+1|0))!=(0|t););w=145488,(0|f)<=0||((0|zA)!=1?(t=t-f|0,e[Y+12>>2]=t,w=145488+(f<<3)|0):(t=f+1|0,e[Y+12>>2]=t,w=145488))}else t=0,w=145488;if(!(!e[r+4>>2]|e[r+20>>2]|l[he+11|0]!=2)){if(o=e[r+36>>2],a=e[r+40>>2],A=0,(0|(t=e[Y+12>>2]))>=2){f=o>>>12|0,P=a>>>26&7,Be=a>>>18&248,ee=z(ce=63&a,50),Ve=63&(Ke=o>>>6|0),m=o<<1&126,rA=z(a>>>16&31,50)-750|0,cA=z(a>>>11&31,50)-750|0,Qe=z(a>>>6&31,50)-750|0;e:{A:if((0|zA)!=1){if(!(f|ce))break e;if(8&f?(t=e[4+(w+((c=t-1|0)<<3)|0)>>2],b[t>>1]<0?A=t:(A=(0|(A=e[44469]+1|0))<=169?A:0,e[44469]=A,c=M[t+20>>1]|M[t+22>>1]<<16,A=177888+(A<<6)|0,o=M[t+16>>1]|M[t+18>>1]<<16,b[A+16>>1]=o,b[A+18>>1]=o>>>16,b[A+20>>1]=c,b[A+22>>1]=c>>>16,c=M[t+4>>1]|M[t+6>>1]<<16,o=M[t>>1]|M[t+2>>1]<<16,b[A>>1]=o,b[A+2>>1]=o>>>16,b[A+4>>1]=c,b[A+6>>1]=c>>>16,c=M[t+12>>1]|M[t+14>>1]<<16,o=M[t+8>>1]|M[t+10>>1]<<16,b[A+8>>1]=o,b[A+10>>1]=o>>>16,b[A+12>>1]=c,b[A+14>>1]=c>>>16,c=M[t+28>>1]|M[t+30>>1]<<16,o=M[t+24>>1]|M[t+26>>1]<<16,b[A+24>>1]=o,b[A+26>>1]=o>>>16,b[A+28>>1]=c,b[A+30>>1]=c>>>16,c=M[t+36>>1]|M[t+38>>1]<<16,o=M[t+32>>1]|M[t+34>>1]<<16,b[A+32>>1]=o,b[A+34>>1]=o>>>16,b[A+36>>1]=c,b[A+38>>1]=c>>>16,c=M[t+44>>1]|M[t+46>>1]<<16,o=M[t+40>>1]|M[t+42>>1]<<16,b[A+40>>1]=o,b[A+42>>1]=o>>>16,b[A+44>>1]=c,b[A+46>>1]=c>>>16,c=M[t+52>>1]|M[t+54>>1]<<16,o=M[t+48>>1]|M[t+50>>1]<<16,b[A+48>>1]=o,b[A+50>>1]=o>>>16,b[A+52>>1]=c,b[A+54>>1]=c>>>16,c=M[t+60>>1]|M[t+62>>1]<<16,t=M[t+56>>1]|M[t+58>>1]<<16,b[A+56>>1]=t,b[A+58>>1]=t>>>16,b[A+60>>1]=c,b[A+62>>1]=c>>>16,g[A+16|0]=0,b[A>>1]=32768|M[A>>1],c=e[Y+12>>2]-1|0),e[4+(w+(c<<3)|0)>>2]=A,t=1792,(0|(c=b[A+4>>1]))<300||(t=1536,c>>>0<400||(t=c>>>0<500?1280:1024)),e[36436]=t,o=35):(e[Y+12>>2]=t+1,b[(A=(c=w+(t<<3)|0)-8|0)>>1]=m,t=e[A+4>>2],A=(0|(A=e[44469]+1|0))<=169?A:0,e[44469]=A,(A=177888+(Ke=A<<6)|0)&&(o=M[t+4>>1]|M[t+6>>1]<<16,E=M[t>>1]|M[t+2>>1]<<16,b[A>>1]=E,b[A+2>>1]=E>>>16,b[A+4>>1]=o,b[A+6>>1]=o>>>16,o=M[t+60>>1]|M[t+62>>1]<<16,E=M[t+56>>1]|M[t+58>>1]<<16,b[A+56>>1]=E,b[A+58>>1]=E>>>16,b[A+60>>1]=o,b[A+62>>1]=o>>>16,o=M[t+52>>1]|M[t+54>>1]<<16,E=M[t+48>>1]|M[t+50>>1]<<16,b[A+48>>1]=E,b[A+50>>1]=E>>>16,b[A+52>>1]=o,b[A+54>>1]=o>>>16,o=M[t+44>>1]|M[t+46>>1]<<16,E=M[t+40>>1]|M[t+42>>1]<<16,b[A+40>>1]=E,b[A+42>>1]=E>>>16,b[A+44>>1]=o,b[A+46>>1]=o>>>16,o=M[t+36>>1]|M[t+38>>1]<<16,E=M[t+32>>1]|M[t+34>>1]<<16,b[A+32>>1]=E,b[A+34>>1]=E>>>16,b[A+36>>1]=o,b[A+38>>1]=o>>>16,o=M[t+28>>1]|M[t+30>>1]<<16,E=M[t+24>>1]|M[t+26>>1]<<16,b[A+24>>1]=E,b[A+26>>1]=E>>>16,b[A+28>>1]=o,b[A+30>>1]=o>>>16,o=M[t+20>>1]|M[t+22>>1]<<16,E=M[t+16>>1]|M[t+18>>1]<<16,b[A+16>>1]=E,b[A+18>>1]=E>>>16,b[A+20>>1]=o,b[A+22>>1]=o>>>16,o=M[t+12>>1]|M[t+14>>1]<<16,t=M[t+8>>1]|M[t+10>>1]<<16,b[A+8>>1]=t,b[A+10>>1]=t>>>16,b[A+12>>1]=o,b[A+14>>1]=o>>>16,g[Ke+177904|0]=0,b[A>>1]=32768|M[A>>1]),b[c>>1]=0,e[c+4>>2]=A,m>>>0>=37&&(e[36422]=(m+e[36422]|0)-36),o=Ve<<1,ce&&He(A,ee,Qe,cA,P,rA,Be,f)),e[e[32972]+132>>2]||(t=l[A+17|0])&&(t=b[102896+(((0|(t=(o<<6>>>0)/(t>>>0)|0))>=199?199:t)<<1)>>1],g[A+18|0]=(0|z(t,l[A+18|0]))/512,g[A+19|0]=(0|z(t,l[A+19|0]))/512,g[A+20|0]=(0|z(t,l[A+20|0]))/512,g[A+21|0]=(0|z(t,l[A+21|0]))/512,g[A+22|0]=(0|z(t,l[A+22|0]))/512,g[A+23|0]=(0|z(t,l[A+23|0]))/512,g[A+24|0]=(0|z(t,l[A+24|0]))/512,g[A+25|0]=(0|z(t,l[A+25|0]))/512),a-536870912>>>0<=1073741823){if(P=e[44469],(0|(c=e[Y+12>>2]))>0)for(A=z(a>>>29|0,10)+102854|0,Be=b[A+4>>1],ce=b[A+2>>1],ee=b[A>>1],rA=b[A+6>>1],cA=b[A+8>>1],o=0;t=e[4+(Qe=w+(o<<3)|0)>>2],b[t>>1]<0?A=t:(A=177888+(Ve=(P=(0|(A=P+1|0))<=169?A:0)<<6)|0)?(a=M[t+4>>1]|M[t+6>>1]<<16,c=M[t>>1]|M[t+2>>1]<<16,b[A>>1]=c,b[A+2>>1]=c>>>16,b[A+4>>1]=a,b[A+6>>1]=a>>>16,a=M[t+60>>1]|M[t+62>>1]<<16,c=M[t+56>>1]|M[t+58>>1]<<16,b[A+56>>1]=c,b[A+58>>1]=c>>>16,b[A+60>>1]=a,b[A+62>>1]=a>>>16,a=M[t+52>>1]|M[t+54>>1]<<16,c=M[t+48>>1]|M[t+50>>1]<<16,b[A+48>>1]=c,b[A+50>>1]=c>>>16,b[A+52>>1]=a,b[A+54>>1]=a>>>16,a=M[t+44>>1]|M[t+46>>1]<<16,c=M[t+40>>1]|M[t+42>>1]<<16,b[A+40>>1]=c,b[A+42>>1]=c>>>16,b[A+44>>1]=a,b[A+46>>1]=a>>>16,a=M[t+36>>1]|M[t+38>>1]<<16,c=M[t+32>>1]|M[t+34>>1]<<16,b[A+32>>1]=c,b[A+34>>1]=c>>>16,b[A+36>>1]=a,b[A+38>>1]=a>>>16,a=M[t+28>>1]|M[t+30>>1]<<16,c=M[t+24>>1]|M[t+26>>1]<<16,b[A+24>>1]=c,b[A+26>>1]=c>>>16,b[A+28>>1]=a,b[A+30>>1]=a>>>16,a=M[t+20>>1]|M[t+22>>1]<<16,c=M[t+16>>1]|M[t+18>>1]<<16,b[A+16>>1]=c,b[A+18>>1]=c>>>16,b[A+20>>1]=a,b[A+22>>1]=a>>>16,a=M[t+12>>1]|M[t+14>>1]<<16,t=M[t+8>>1]|M[t+10>>1]<<16,b[A+8>>1]=t,b[A+10>>1]=t>>>16,b[A+12>>1]=a,b[A+14>>1]=a>>>16,g[Ve+177904|0]=0,b[A>>1]=32768|M[A>>1],c=e[Y+12>>2]):A=0,e[Qe+4>>2]=A,b[A+8>>1]=(0|z(Be,b[A+8>>1]))/256,b[A+6>>1]=(0|z(ce,b[A+6>>1]))/256,b[A+4>>1]=(0|z(ee,b[A+4>>1]))/256,b[A+12>>1]=(0|z(cA,b[A+12>>1]))/256,b[A+10>>1]=(0|z(rA,b[A+10>>1]))/256,(0|c)>(0|(o=o+1|0)););e[44469]=P}if(!A)break e}else{t=e[w+4>>2],(0|(c=b[t>>1]))<0?A=t:(a=(0|(a=e[44469]+1|0))<=169?a:0,e[44469]=a,(a=177888+(c=a<<6)|0)&&(A=M[t+4>>1]|M[t+6>>1]<<16,E=M[t>>1]|M[t+2>>1]<<16,b[a>>1]=E,b[a+2>>1]=E>>>16,b[a+4>>1]=A,b[a+6>>1]=A>>>16,A=M[t+60>>1]|M[t+62>>1]<<16,E=M[t+56>>1]|M[t+58>>1]<<16,b[a+56>>1]=E,b[a+58>>1]=E>>>16,b[a+60>>1]=A,b[a+62>>1]=A>>>16,A=M[t+52>>1]|M[t+54>>1]<<16,E=M[t+48>>1]|M[t+50>>1]<<16,b[a+48>>1]=E,b[a+50>>1]=E>>>16,b[a+52>>1]=A,b[a+54>>1]=A>>>16,A=M[t+44>>1]|M[t+46>>1]<<16,E=M[t+40>>1]|M[t+42>>1]<<16,b[a+40>>1]=E,b[a+42>>1]=E>>>16,b[a+44>>1]=A,b[a+46>>1]=A>>>16,A=M[t+36>>1]|M[t+38>>1]<<16,E=M[t+32>>1]|M[t+34>>1]<<16,b[a+32>>1]=E,b[a+34>>1]=E>>>16,b[a+36>>1]=A,b[a+38>>1]=A>>>16,A=M[t+28>>1]|M[t+30>>1]<<16,E=M[t+24>>1]|M[t+26>>1]<<16,b[a+24>>1]=E,b[a+26>>1]=E>>>16,b[a+28>>1]=A,b[a+30>>1]=A>>>16,A=M[t+20>>1]|M[t+22>>1]<<16,E=M[t+16>>1]|M[t+18>>1]<<16,b[a+16>>1]=E,b[a+18>>1]=E>>>16,b[a+20>>1]=A,b[a+22>>1]=A>>>16,A=M[t+12>>1]|M[t+14>>1]<<16,t=M[t+8>>1]|M[t+10>>1]<<16,b[a+8>>1]=t,b[a+10>>1]=t>>>16,b[a+12>>1]=A,b[a+14>>1]=A>>>16,g[c+177904|0]=0,c=-32768|M[a>>1],b[a>>1]=c,A=a)),e[w+4>>2]=A,b[w>>1]=m||50,b[w+2>>1]=16384|M[w+2>>1],b[A>>1]=16384|c,c=e[w+12>>2],t=l[c+17|0],a=e[32972],e[a+132>>2]&&(g[A+39|0]=l[c+39|0]-4);r:if(ce){if(2048&o){t=(z(t,31&Ke)>>>0)/30|0,e[a+132>>2]||(a=l[A+17|0])&&(t=b[102896+(((0|(t=(t<<6>>>0)/(a>>>0)|0))>=199?199:t)<<1)>>1],g[A+18|0]=(0|z(t,l[A+18|0]))/512,g[A+19|0]=(0|z(t,l[A+19|0]))/512,g[A+20|0]=(0|z(t,l[A+20|0]))/512,g[A+21|0]=(0|z(t,l[A+21|0]))/512,g[A+22|0]=(0|z(t,l[A+22|0]))/512,g[A+23|0]=(0|z(t,l[A+23|0]))/512,g[A+24|0]=(0|z(t,l[A+24|0]))/512,g[A+25|0]=(0|z(t,l[A+25|0]))/512),He(A,ee,Qe,cA,P,rA,Be,f);break r}if(He(A,ee,Qe,cA,P,rA,Be,f),e[e[32972]+132>>2]||!(t=l[A+17|0]))break r;t=b[102896+(((0|(t=(Ve<<7>>>0)/(t>>>0)|0))>=199?199:t)<<1)>>1],g[A+18|0]=(0|z(t,l[A+18|0]))/512,g[A+19|0]=(0|z(t,l[A+19|0]))/512,g[A+20|0]=(0|z(t,l[A+20|0]))/512,g[A+21|0]=(0|z(t,l[A+21|0]))/512,g[A+22|0]=(0|z(t,l[A+22|0]))/512,g[A+23|0]=(0|z(t,l[A+23|0]))/512,g[A+24|0]=(0|z(t,l[A+24|0]))/512,g[A+25|0]=(0|z(t,l[A+25|0]))/512}else if(a=e[a+132>>2],8&f){if(a||!(a=l[A+17|0]))break r;t=((16320&z(t,48))>>>0)/(a>>>0)|0,t=b[102896+((t>>>0>=199?199:t)<<1)>>1],g[A+18|0]=(0|z(t,l[A+18|0]))/512,g[A+19|0]=(0|z(t,l[A+19|0]))/512,g[A+20|0]=(0|z(t,l[A+20|0]))/512,g[A+21|0]=(0|z(t,l[A+21|0]))/512,g[A+22|0]=(0|z(t,l[A+22|0]))/512,g[A+23|0]=(0|z(t,l[A+23|0]))/512,g[A+24|0]=(0|z(t,l[A+24|0]))/512,g[A+25|0]=(0|z(t,l[A+25|0]))/512}else a||(t=l[A+17|0])&&(t=b[102896+(((t=1792/(t>>>0)|0)>>>0>=199?199:t)<<1)>>1],g[A+18|0]=(0|z(t,l[A+18|0]))/512,g[A+19|0]=(0|z(t,l[A+19|0]))/512,g[A+20|0]=(0|z(t,l[A+20|0]))/512,g[A+21|0]=(0|z(t,l[A+21|0]))/512,g[A+22|0]=(0|z(t,l[A+22|0]))/512,g[A+23|0]=(0|z(t,l[A+23|0]))/512,g[A+24|0]=(0|z(t,l[A+24|0]))/512,g[A+25|0]=(0|z(t,l[A+25|0]))/512);if(!(8&f))break A;t=2816,(0|(a=b[A+4>>1]))<300||(t=2560,a>>>0<400||(t=a>>>0<500?2304:2048)),e[36436]=t}4&f&&(b[A>>1]=32|M[A>>1]),2&f&&(b[A>>1]=16|M[A>>1])}64&f&&dr(20,0),A=m&f<<27>>31}else A=0;c=A+e[36422]|0,e[36422]=c,t=e[Y+12>>2]}if((0|(a=t-1|0))<=0)o=0;else{if(A=0,m=0,o=0,t-2>>>0>=3)for(Be=-4&a,P=0;o=(((b[(f=m<<3)+w>>1]+o|0)+b[w+(8|f)>>1]|0)+b[w+(16|f)>>1]|0)+b[w+(24|f)>>1]|0,m=m+4|0,(0|Be)!=(0|(P=P+4|0)););if(f=3&a)for(;o=b[w+(m<<3)>>1]+o|0,m=m+1|0,(0|f)!=(0|(A=A+1|0)););}if(A=t,(f=e[r+20>>2])&&(A=a,m=f+e[34460]|0,(P=l[m+2|0])&&(ce=M[m+4>>1],b[w+(a<<3)>>1]=l[m+20|0],f=1,A=t,(0|P)!=1))){if(Be=m+4|0,ce&=1,rA=1&(m=P-1|0),(0|P)!=2)for(cA=-2&m,P=0;Qe=Be+(f<<6)|0,Ve=Be+z(f,44)|0,Ke=l[(ee=ce?Qe:Ve)+16|0],e[4+(m=w+(A<<3)|0)>>2]=ee,b[m>>1]=Ke,b[m+2>>1]=M[ee>>1],Qe=l[16+(ee=ce?Qe- -64|0:Ve+44|0)|0],e[m+12>>2]=ee,b[m+8>>1]=Qe,b[m+10>>1]=M[ee>>1],f=f+2|0,A=A+2|0,(0|cA)!=(0|(P=P+2|0)););rA&&(f=Be+(ce?f<<6:z(f,44))|0,P=l[f+16|0],e[4+(m=w+(A<<3)|0)>>2]=f,b[m>>1]=P,b[m+2>>1]=M[f>>1],A=A+1|0)}e:if(!((0|o)<=0)){A:{switch(zA-1|0){case 1:if(f=(0|(f=(e[r+44>>2]+c|0)-45|0))<=10?10:f,8&l[0|p]&&(f=f+(l[e[36128]+14|0]<<1)|0),(0|a)<=0)break e;if(p=(f<<8)/(0|o)|0,m=0,(0|t)!=2)for(t=-2&a,f=0;b[(o=(c=m<<3)+w|0)>>1]=(0|z(p,b[o>>1]))/256,b[(c=w+(8|c)|0)>>1]=(0|z(p,b[c>>1]))/256,m=m+2|0,(0|t)!=(0|(f=f+2|0)););if(!(1&a))break e;b[(t=w+(m<<3)|0)>>1]=(0|z(p,b[t>>1]))/256;break e;case 0:if(e[r>>2]!=1||(0|(f=e[r+44>>2]))>129)break A;b[w>>1]=(0|z(f,b[w>>1]))/130;break A}(0|(f=e[r+44>>2]))<=0||(c=(f-o|0)+c|0,e[36422]=c)}if(!(!c|(0|a)<=0)){if(p=(o+c<<8)/(0|o)|0,m=0,(0|t)!=2)for(t=-2&a,f=0;b[(o=(c=m<<3)+w|0)>>1]=(0|z(p,b[o>>1]))/256,b[(c=w+(8|c)|0)>>1]=(0|z(p,b[c>>1]))/256,m=m+2|0,(0|t)!=(0|(f=f+2|0)););1&a&&(b[(t=w+(m<<3)|0)>>1]=(0|z(p,b[t>>1]))/256)}}if(e[i+108>>2]=A,J=Y+16|0,w){if((0|(A=e[r+16>>2]))!=e[36438]&&(e[36438]=A,t=216192+(e[50758]<<4)|0,e[t>>2]=14,e[t+4>>2]=A,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),m=(A=e[e[32972]+132>>2])?1:3,t=e[w+4>>2],e[r+28>>2]|!l[145748]||(g[145748]=0,m=A?2:4),(a=e[36426])&&(!((2&(A=M[a>>1]))>>>1|l[a+16|0]<2)|16&A||(c=216192+(e[36439]<<4)|0,e[c+12>>2]=t,8&A&&(A=(0|(A=e[44469]+1|0))<=169?A:0,e[44469]=A,(A=177888+(f=A<<6)|0)&&(p=M[t+4>>1]|M[t+6>>1]<<16,o=M[t>>1]|M[t+2>>1]<<16,b[A>>1]=o,b[A+2>>1]=o>>>16,b[A+4>>1]=p,b[A+6>>1]=p>>>16,p=M[t+60>>1]|M[t+62>>1]<<16,o=M[t+56>>1]|M[t+58>>1]<<16,b[A+56>>1]=o,b[A+58>>1]=o>>>16,b[A+60>>1]=p,b[A+62>>1]=p>>>16,p=M[t+52>>1]|M[t+54>>1]<<16,o=M[t+48>>1]|M[t+50>>1]<<16,b[A+48>>1]=o,b[A+50>>1]=o>>>16,b[A+52>>1]=p,b[A+54>>1]=p>>>16,p=M[t+44>>1]|M[t+46>>1]<<16,o=M[t+40>>1]|M[t+42>>1]<<16,b[A+40>>1]=o,b[A+42>>1]=o>>>16,b[A+44>>1]=p,b[A+46>>1]=p>>>16,p=M[t+36>>1]|M[t+38>>1]<<16,o=M[t+32>>1]|M[t+34>>1]<<16,b[A+32>>1]=o,b[A+34>>1]=o>>>16,b[A+36>>1]=p,b[A+38>>1]=p>>>16,p=M[t+28>>1]|M[t+30>>1]<<16,o=M[t+24>>1]|M[t+26>>1]<<16,b[A+24>>1]=o,b[A+26>>1]=o>>>16,b[A+28>>1]=p,b[A+30>>1]=p>>>16,p=M[t+20>>1]|M[t+22>>1]<<16,o=M[t+16>>1]|M[t+18>>1]<<16,b[A+16>>1]=o,b[A+18>>1]=o>>>16,b[A+20>>1]=p,b[A+22>>1]=p>>>16,p=M[t+12>>1]|M[t+14>>1]<<16,o=M[t+8>>1]|M[t+10>>1]<<16,b[A+8>>1]=o,b[A+10>>1]=o>>>16,b[A+12>>1]=p,b[A+14>>1]=p>>>16,g[f+177904|0]=0,b[A>>1]=32768|M[A>>1]),b[8+(f=f+177888|0)>>1]=M[a+8>>1],g[f+21|0]=l[a+21|0],b[f+10>>1]=M[a+10>>1],g[f+22|0]=l[a+22|0],b[f+12>>1]=M[a+12>>1],g[f+23|0]=l[a+23|0],b[f+14>>1]=M[a+14>>1],g[f+24|0]=l[a+24|0],g[f+25|0]=l[a+25|0],e[c+12>>2]=A))),(0|zA)!=2|l[he+11|0]!=2||(La(),e[36427]=e[50758]),!((0|(he=e[i+108>>2]))<2)){for(A=e[36433],p=(z(256-A|0,Z)+(A<<8)|0)/256|0,A=e[36432],c=(z(256-A|0,Z)+(A<<8)|0)/256|0,o=e[50754],A=0,a=1;f=M[2+(Y=(w+(a<<3)|0)-8|0)>>1],f=(0|z((0|z(o,b[Y>>1]))/1e3|0,4&f?c:16384&f?p:Z))/256|0,e[(a<<2)+i>>2]=f,A=A+f|0,(0|he)!=(0|(a=a+1|0)););if(!((0|A)<=0|(0|A)>=(0|MA)|(0|he)<2)){if(a=1,p=1&(f=he-1|0),(0|he)!=2)for(c=-2&f,Z=0;e[(f=(a<<2)+i|0)>>2]=(0|z(e[f>>2],MA))/(0|A),e[f+4>>2]=(0|z(e[f+4>>2],MA))/(0|A),a=a+2|0,(0|c)!=(0|(Z=Z+2|0)););p&&(e[(a=(a<<2)+i|0)>>2]=(0|z(e[a>>2],MA))/(0|A))}if(Z=0,!((0|he)<2))for(he=zA+256|0,a=1;A=e[4+(w+(a<<3)|0)>>2],!(f=e[r+28>>2])|128&l[0|t]||(e[36422]=0,ys(f,he,0,o=e[r>>2],0,p=(p=e[r+32>>2])?(p<<5)/100|0:32),g[145748]=1,e[r+28>>2]=0),(0|s)<0||(s=64&l[0|t]?6:s,(e[i+108>>2]-1|0)==(0|a)&&(s=(f=s)|(3840&(s=e[36436])?s:0))),f=e[(a<<2)+i>>2],e[36440]=f+e[36440],e[36441]=f+e[36441],f?(p=e[50758],e[36439]=p,(0|s)>=0&&(e[(p=216192+(p<<4)|0)>>2]=m,e[p+12>>2]=A,e[p+8>>2]=t,e[p+4>>2]=f+(s<<16),t=e[50758]+1|0,e[50758]=(0|t)<=169?t:0),e[36426]=A,Z=f+Z|0):e[36426]=0,t=A,(0|(a=a+1|0))<e[i+108>>2];);}!e[36438]|(0|zA)==1||(e[36438]=0,A=216192+(e[50758]<<4)|0,e[A>>2]=14,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)}}J=i+112|0}function TA(A,t,r,a){var s,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0;J=s=J-1856|0,e[s+164>>2]=0,r?E=e[r>>2]:jA(r=s- -64|0,0,96),e[33264]=0,e[s+1824>>2]=0,e[s+1828>>2]=0,e[s+1832>>2]=0,e[s+1836>>2]=0,g[s+1616|0]=0,g[s+992|0]=0,g[s+1200|0]=0,g[s+784|0]=0;e:if(e[A+688>>2]){for(e[s+1840>>2]=t,l[0|(i=t)]==32&&(i=t+1|0,e[s+1840>>2]=i),P=s+416|1,Ke=s+1844|1,cA=s+1848|1,MA=s+1852|1,e[s+1820>>2]=i,Gt(s+168|0,i),i=e[s+1820>>2];(32|l[0|i])!=32;)i=Gt(s+164|0,i)+e[s+1820>>2]|0,e[s+1820>>2]=i,ee=ee+1|0;wt(s+256|0,t,rA=(0|(c=i-t|0))>=159?159:c),!(Qe=4194304&E)|(0|ee)!=1?(he=((0|(i=e[47202]))==36)<<2,(0|ee)==1|(0|i)!=36||(i=e[s+1840>>2]-1|0,e[s+1840>>2]=i,g[0|i]=95,he=0,o=!!(0|kr(A,s+1840|0,s+1616|0,s+1832|0,0,r)),i=e[47202])):(o=1,Gt(s+172|0,i+1|0),rr(e[s+172>>2])&&(0|Rs(e[s+164>>2]))==(0|Rs(e[s+172>>2]))&&(o=0),he=(0|(i=e[47202]))==36?4:o,o=0);A:{r:{s:{i:{c:if(16&i)Y=15&i,he=0;else{if(ce=1,o||(ce=!!(0|kr(A,s+1840|0,s+1616|0,s+1832|0,2,r))),50331648&(i=e[s+1832>>2])&&(c=e[s+1820>>2],l[c+1|0]==46&&(g[c+1|0]=32,i=e[s+1832>>2])),536870912&i){if(!a)break e;qA(a,e[s+1840>>2]);break e}if(8192&i|!(128&i)|ce)a=e[33264];else if(i=e[s+1840>>2],e[s+1820>>2]=i,!((0|(a=e[33264]))<=0))for(o=0;l[0|i]==32&&(g[0|i]=45,o=o+1|0,i=e[s+1820>>2],a=e[33264]),i=i+1|0,e[s+1820>>2]=i,(0|a)>(0|o););o:if(!(a|(0|ee)!=1)&&(c=Gt(s+576|0,w=e[s+1840>>2]),l[c+w|0]==32)){o=s+1408|0,a=w;u:{l:{n:{for(;;){p:if(rr(e[s+576>>2])){C:{if(l[1+(f=a+c|0)|0]==46){Y=0;m:switch(l[(i=c+2|0)+a|0]-32|0){case 0:break C;case 7:break m;default:break p}if(Y=1,c=i,l[f+3|0]==115)break C;break p}if(Y=1,(0|p)<=0)break n}if(!((0|c)<=0)){if(Z=3&c,m=0,c>>>0<4)i=0;else for(Be=-4&c,i=0,f=0;g[0|o]=l[a+i|0],g[o+1|0]=l[(1|i)+a|0],g[o+2|0]=l[(2|i)+a|0],g[o+3|0]=l[(3|i)+a|0],i=i+4|0,o=o+4|0,(0|Be)!=(0|(f=f+4|0)););if(Z)for(;g[0|o]=l[a+i|0],i=i+1|0,o=o+1|0,(0|Z)!=(0|(m=m+1|0)););}if(p=p+1|0,Y)a=a+c|0;else if(c=Gt(s+576|0,a=3+(a+c|0)|0),l[a+c|0]==32)continue}break}if(!((0|p)<2)){(c=(c=o-(i=s+1408|0)|0)+(i=wt(w,i,c))|0)>>>0<a>>>0&&jA(c,32,(s+1408|0)+a-(i+o)|0),e[33264]=(p<<1)-2,e[s+1836>>2]=0;break l}}if(!p)break o;if(e[s+1832>>2]=0,e[s+1836>>2]=0,!e[33264])break u}e[s+1832>>2]=128}he=1}if(l[s+1616|0]==21){qA(189088,s+1616|0),i=0;break e}if(zA=l[s+1833|0],o=1,!ce){if(e[s+168>>2]-48>>>0<10){if(RA(A,84174,189088),i=0,l[189088]==21)break e;if(!(!(128&l[A+109|0])|32&l[r+2|0])){g[189088]=21,g[189089]=0;break e}o=!!(0|fa(A,e[s+1840>>2],s+1616|0,s+1832|0,r,0))}else o=0;if(!(o|(3&E)==2)&&(16777216&(a=e[A+104>>2])||(o=0,!(!(33554432&a)|!(1&E))))&&(16&E||(o=0,!(1&g[r+13|0])))){Be=e[s+1840>>2],i=0,p=0,f=0,J=Z=J-224|0,g[0|(m=s+1616|0)]=0,e[Z+216>>2]=0,e[Z+220>>2]=0;o:if(!(g[Be-2|0]-48>>>0<10|(1&g[0|r]?0:2&l[A+107|0])||(a=l[0|(c=Be+1|0)],(!(2561&M[A+106>>1])|!(1&g[r+2|0]))&(0|a)==32))){if((0|(p=l[0|Be]))!=32){for(Y=32767,a=0;;){if(!(i=ai(101868,p<<24>>24,8))){p=0;break o}if(w=0,(0|(i=e[(i<<2)-305584>>2]))==(0|a)&&!((0|(w=f+1|0))<=2)){p=0;break o}u:{l:{n:{p:{if(!((0|a)<2)){if((0|a)==10|(0|a)==100)break p;if(!((0|a)>(0|i))){p=0;break o}}if(!a)break l;if((0|a)<(0|i))break n;break l}if((0|a)>=(0|i))break l}if(p=0,(0|Ve)%10|(0|z(a,10))<(0|i))break o;i=i-a|0,Y=a;break u}if((0|i)>=(0|Y)){p=0;break o}Ve=a+Ve|0}if(p=l[0|c],c=o=c+1|0,a=i,f=w,(0|p)==32)break}a=l[0|o]}else o=c;if((a<<24>>24)-48>>>0<10)p=0;else if((0|(a=i+Ve|0))<e[A+120>>2])p=0;else if((0|a)>e[A+116>>2])p=0;else if(RA(A,85600,Z+176|0),i=m,4&l[A+107|0]||(i=qA(m,i=Z+176|0)+HA(i)|0),e[Z+4>>2]=e[A+140>>2],e[Z>>2]=a,DA(Z+16|0,85839,Z),p=0,l[0|o]!=46){pa(A,Be,o,r,1)&&(e[r>>2]=32768|e[r>>2]),c=0;u:if(8&l[A+107|0]){if(f=e[r>>2],e[A+212>>2]==26741){if(32768&f)break u;if(!(16384&f))break o;c=1,f=0;l:{n:switch(l[0|o]-97|0){case 0:case 4:break n;default:break l}n:{p:{C:{m:switch((Y=l[o+1|0])-116|0){case 6:break l;case 1:case 2:case 3:case 4:case 5:break p;case 0:break m;default:break C}if(l[o+2|0]!=116)break n;break l}if((0|Y)==32)break l}if(!((0|a)%1e3|0)&&(0|Y)==108)break l}f=1}if(f)break u;break o}e[r>>2]=32768|f}e[(a=A+8232|0)>>2]=0,e[a+4>>2]=0,fa(A,Z+16|2,i,Z+216|0,r,c),p=1,4&l[A+107|0]&&ia(m,Z+176|0)}}J=Z+224|0,p?(e[s+1832>>2]=8192|e[s+1832>>2],o=1):o=0}}if(Y=ce?he:32&zA?1:he,he=0,!(!(1&E)|(0|ee)<2)&&ns(e[s+168>>2])){o:{if(1&g[188785]){if(!(!(a=8192&(i=e[s+1832>>2]))|o))break o;he=a>>>2^2048;break c}if(o)break i;i=e[s+1832>>2]}if(!(128&i|ee>>>0>3)&&!((0|(i=e[A+8220>>2]))<4)&&(a=1,(0|i)>=e[A+8216>>2]))break A}}if(m=0,(0|Y)<=0)break s;a=Y;break A}if((0|(a=Y))>0)break A;m=0,w=0,f=0,p=0;break r}if(o)w=0,f=0,p=0;else{a=e[s+1840>>2],e[s+1820>>2]=a,i=999,p=0,w=0,P=0;s:{i:{c:{for(;;){o:{u:{l:{if(i-1>>>0>=2){if((0|ee)<2||(Gt(s+1408|0,a),(0|(i=e[s+1408>>2]))<577&e[A+600>>2]>0)||(i=Rs(i),(e[i+4>>2]!=e[A+600>>2]?i:0)|e[A+40>>2]==1))break l;switch(i=l[0|a],e[s+1408>>2]=i<<24>>24,i-32|0){default:if(!i)break l;break;case 0:case 7:break l;case 1:case 2:case 3:case 4:case 5:case 6:}m=Gt(s+1408|0,a),ce=9;n:{p:{C:{m:if(-33&(i=e[s+1408>>2])){for(o=0,f=0;;){b:{h:{if((0|i)==39){if((0|w)>0|(0|o)>1)break m;if(f=o?f:39,e[A+40>>2]!=3)break h;break b}f=o?f:i}o=o+1|0}if(!p0(A,i)){if((0|(i=e[s+1408>>2]))!=39&&!ns(i))break l;if(m=Gt(s+1408|0,a+m|0)+m|0,-33&(i=e[s+1408>>2]))continue;break m}break}if((0|o)<=2)break C;ce=o}else f=0;if((0|(i=e[A+40>>2]))!=2)break p;J=i=J-208|0,g[0|i]=0,o=l[0|(c=a-1|0)],g[0|c]=32,a=qt(A,a,i,200,0,-2147483648,0),g[0|c]=o,J=i+208|0,a=!a|(32768&a)>>>15;break n}i=e[A+40>>2],ce=o}a=(g[A+168|0]+1|0)<(ce-((0|i)==(0|f))|0)}if(!a)break l;a=e[s+1820>>2]}if(l[0|a]!=39)break u;p=67108864,he=0}if(m=0,rt(A,s+992|0,0,w),a=e[s+1820>>2],(0|(i=l[0|a]))!=32)break o;w=0,f=0;break r}if(he=0,a=Ss(A,a,s+992|0,1&(P|=(0|w)>0))+e[s+1820>>2]|0,e[s+1820>>2]=a,l[s+992|0]==21)break c;for(w=w+1|0,o=0;o=(i=o)+1|0,l[a+i|0]!=32;);p=67108864;continue}break}if(!l[s+992|0]|(0|i)==39||(g[a-1|0]=32,a=e[s+1820>>2]),c=qt(A,a,s+1616|0,200,s+784|0,E,s+1832|0),(0|(a=l[s+1616|0]))==21){qA(189088,s+1616|0),i=0;break e}if(!(a|l[s+784|0])&&(Gt(s+1408|0,e[s+1820>>2]),(0|ee)==1&&(rr(e[s+1408>>2])||k0(e[s+1408>>2])))){vn(A,e[s+1820>>2],s+1616|0,Y)&&qA(189088,s+1616|0),i=0;break e}e[s+172>>2]=g[e[s+1820>>2]-1|0];o:if(1024&c)for(Be=s+176|1,Y=0,i=1,P=0,w=0;;){if((ce=131072&c)|!(1&i)||(g[s+1408|0]=0,!(a=qt(A,e[s+1820>>2],s+1408|0,200,s+576|0,805306368|E,s+1832|0)))){2048&c&&(e[A+8184>>2]=1),g[e[s+1820>>2]-1|0]=e[s+172>>2];u:{l:{n:{p:if(ce){if(g[s+176|0]=0,i=e[s+1820>>2],a=1,f=63&c){if(Z=1&c,w=f-1|0,o=0,(0|f)!=1)for(Ve=f-Z|0,f=0;m=i,e[s+1820>>2]=i+1,g[0|(Qe=(s+176|0)+a|0)]=(0|o)!=(0|w)?l[0|i]:0,i=i+2|0,e[s+1820>>2]=i,g[Qe+1|0]=(0|w)!=(1|o)?l[m+1|0]:0,o=o+2|0,a=a+2|0,(0|Ve)!=(0|(f=f+2|0)););Z&&(f=i+1|0,e[s+1820>>2]=f,g[(s+176|0)+a|0]=(0|o)!=(0|w)?l[0|i]:0,a=a+1|0,i=f)}g[(s+176|0)+a|0]=0}else{if(i=e[s+1820>>2],!(f=15&c))break n;if(a=0,o=f,m=3&c)for(;i=i+1|0,e[s+1820>>2]=i,(192&l[0|i])==128||(o=o-1|0,(0|m)!=(0|(a=a+1|0))););if(f>>>0<4)break p;for(;;)if(i=i+1|0,e[s+1820>>2]=i,(192&l[0|i])!=128){for(;i=i+1|0,e[s+1820>>2]=i,(192&l[0|i])==128;);for(;i=i+1|0,e[s+1820>>2]=i,(192&l[0|i])==128;);for(;i=i+1|0,e[s+1820>>2]=i,(192&l[0|i])==128;);if(a=(0|o)>4,o=o-4|0,!a)break}}if(a=i-1|0,e[s+172>>2]=g[0|a],g[0|a]=32,a=E|=8388608,!ce)break l;if(ar(s+576|0,s+784|0,12),e[s+1852>>2]=Be,a=qA(s+1200|0,i=s+1616|0),kr(A,s+1852|0,i,s+1832|0,0,r)&&qA(a,s+1616|0),!(32&l[s+1833|0]))break u;g[0|a]=0,vn(A,e[s+1852>>2],a,1);break u}a=i-1|0,e[s+172>>2]=g[0|a],g[0|a]=32,a=8388608|E}E=a,ia(s+1200|0,s+784|0)}if(g[s+784|0]=0,f=1,a=kr(A,s+1820|0,s+1616|0,s+1824|0,1024,r),e[s+1832>>2]||(i=e[s+1828>>2],e[s+1832>>2]=e[s+1824>>2],e[s+1836>>2]=i,f=P),a){m=0,w=c;break s}if(m=qt(A,e[s+1820>>2],s+1616|0,200,s+784|0,8404992&E,s+1832|0),i=1,w=c,P=f,l[s+1616|0]==21){g[e[s+1820>>2]-1|0]=e[s+172>>2],qA(189088,s+1616|0),i=0;break e}}else i=s+416|0,Fs(A,e[s+1820>>2],a,i),m=qt(A,e[s+1820>>2],s+1616|0,200,s+784|0,268435456|E,s+1832|0),wt(e[s+1820>>2],i,HA(i)),1024&m||(qA(s+1616|0,s+1408|0),i=qA(s+784|0,s+576|0),8&l[188788]&&(JA(f=i,i=s+576|0),c=e[47195],e[s+48>>2]=i,fr(c,85205,s+48|0)),m=a),i=0;if(a=(o=1024&m)>>>10|0,Y>>>0>48)break o;if(Y=Y+1|0,c=m,!o)break}else m=c,w=0,P=0,a=0;if(a|!m)break i;for(c=qA(s+1408|0,s+1616|0),o=Fs(A,e[s+1820>>2],m,s+416|0),f=P,i=m;;){o:{if(g[s+1616|0]=0,l[s+1200|0]){if(g[e[s+1820>>2]-1|0]=e[s+172>>2],a=kr(A,s+1840|0,s+1616|0,s+1824|0,o,r),g[e[s+1820>>2]-1|0]=32,l[s+1616|0]==21){A=s+416|0,wt(e[s+1820>>2],A,HA(A)),qA(189088,s+1616|0),i=0;break e}if(e[s+1832>>2]||(P=e[s+1828>>2],e[s+1832>>2]=e[s+1824>>2],e[s+1836>>2]=P),a){g[s+1200|0]=0;break o}f=e[s+1824>>2]?1:f}if(a=kr(A,s+1820|0,s+1616|0,s+1824|0,o,r),l[s+1616|0]==21){A=s+416|0,wt(e[s+1820>>2],A,HA(A)),qA(189088,s+1616|0),i=0;break e}if(e[s+1832>>2]||(P=e[s+1828>>2],e[s+1832>>2]=e[s+1824>>2],e[s+1836>>2]=P),!a)if(16384&i)qA(s+1616|0,c);else{E|=o<<11&8192|i<<9&134217728;u:if(524288&i){if(P=qA(s+576|0,a=s+784|0),i=qt(A,e[s+1820>>2],s+1616|0,200,a,E,s+1832|0),ia(a,P),a=0,!i){i=0;break u}if(1024&i)break u;a=1,o=Fs(A,e[s+1820>>2],i,0)}else i=0,qt(A,e[s+1820>>2],s+1616|0,200,0,E,s+1832|0),a=0;if(l[s+1616|0]==21){qA(189088,s+1616|0),A=s+416|0,wt(e[s+1820>>2],A,HA(A)),g[e[s+1820>>2]-1|0]=e[s+172>>2],i=0;break e}if(a)continue}}break}65536&m||(pn(A,s+1616|0,200,s+784|0),g[s+784|0]=0),a=s+416|0,wt(e[s+1820>>2],a,HA(a));break s}qA(189088,A=s+992|0),i=!va(1|A,84744,3)<<12;break e}m=0,f=P}g[e[s+1820>>2]-1|0]=e[s+172>>2]}}if(a=e[s+164>>2],e[s+1852>>2]=8026656,e[s+1848>>2]=8022304,e[s+1844>>2]=7566112,4&E){r:{if((i=255&a)&&((0|i)==102||(Ke=cA,Rn(a<<24>>24))))break r;Ke=MA}qt(A,Ke,189088,200,0,0,0)}for(a=0,i=s+1200|0,P=l[s+784|0];;){r:{s:{i:switch(0|(c=l[0|i])){case 0:break r;case 6:case 7:break i;default:break s}a=c}i=i+1|0;continue}break}r:if(a|f){if(e[A+32>>2]|65536&w){for(o=0,$t(A,s+1616|0,s+1832|0,3,0),i=s+1200|0;;){switch(l[0|i]){case 6:o&&(g[0|i]=5),o=1;default:i=i+1|0;continue;case 0:}break}e[s+24>>2]=s+1616,e[s+20>>2]=s+1200,e[s+16>>2]=s+992,ss(189088,200,85233,s+16|0),g[189287]=0,$t(A,189088,s+1832|0,-1,0);break r}e[s+8>>2]=s+1616,e[s+4>>2]=s+1200,e[s>>2]=s+992,ss(189088,200,85233,s),g[189287]=0,$t(A,189088,s+1832|0,-1,0)}else $t(A,a=s+1616|0,s+1832|0,-1,!!(0|P)<<1),e[s+40>>2]=a,e[s+36>>2]=s+1200,e[s+32>>2]=s+992,ss(189088,200,85233,s+32|0),g[189287]=0;l[s+784|0]&&(a=HA(189088),g[983+(s-a|0)|0]=0,qA(a+189088|0,s+784|0)),16&(a=E|he)&&(e[s+1832>>2]=-268435457&e[s+1832>>2]);r:if(!(128&a)|!(16&l[A+14|0]))if(3072&a){if($e(A,6),!(2048&a))break r;e[s+1832>>2]=268435456|e[s+1832>>2]}else 16&l[z(e[33264],12)+r|0]&&(1536&(r=e[s+1832>>2])?$e(A,4):2048&r&&$e(A,3));else $e(A,3);8192&m&&(e[A+8192>>2]=2,e[A+8184>>2]=2);r:{if(8&(r=e[s+1836>>2]))e[A+8184>>2]=0,e[A+8188>>2]=3,a=A+8196|0;else if(1&r)e[A+8192>>2]=0,e[A+8184>>2]=2,a=A+8196|0;else if(2&r)e[A+8192>>2]=2,e[A+8184>>2]=0,e[A+8188>>2]=0,a=A+8196|0;else{if(!(4&r))break r;e[A+8184>>2]=0,e[A+8192>>2]=0,e[A+8196>>2]=2,a=A+8188|0}e[a>>2]=0}!l[e[s+1820>>2]]|256&r||((0|(r=e[A+8184>>2]))>0&&(e[A+8184>>2]=r-1),(0|(r=e[A+8192>>2]))>0&&(e[A+8192>>2]=r-1),(0|(r=e[A+8196>>2]))>0&&(e[A+8196>>2]=r-1),(0|(r=e[A+8188>>2]))<=0||(e[A+8188>>2]=r-1)),(0|ee)!=1|e[A+212>>2]!=25966||!ns(e[s+168>>2])|e[s+168>>2]==105||(e[s+1832>>2]=16777216|e[s+1832>>2]);r:if(2&l[A+68|0]&&98304&(a=e[s+1832>>2])&&!((0|(r=HA(189088)-1|0))<=0))for(i=0;;){if(A=i+1|0,l[i+189088|0]==6){r=g[0|(A=A+189088|0)];s:{if(65536&a){if((0|aa(69))==(0|r)?(ee=aa(101),g[0|A]=ee):ee=l[0|A],o=111,(0|aa(79))==ee<<24>>24)break s;break r}if((0|aa(101))==(0|r)?(ee=aa(69),g[0|A]=ee):ee=l[0|A],o=79,(0|aa(111))!=ee<<24>>24)break r}g[0|A]=aa(o);break r}if((0|r)==(0|(i=A)))break}A=e[s+1832>>2],wt(t,s+256|0,rA),i=A|p;break e}if(i=0,g[s+1616|0]=0,vn(A,e[s+1840>>2],s+1616|0,a)){if(c=qA(189088,s+1616|0),!Qe){if(a=e[s+164>>2],e[s+1408>>2]=8026656,e[s+576>>2]=8022304,e[s+416>>2]=7566112,4&E){t=s+576|1,r=s+1408|1;A:{if((i=255&a)&&((0|i)==102||(P=t,Rn(a<<24>>24))))break A;P=r}qt(A,P,c,200,0,0,0)}i=128&e[s+1832>>2]}}else i=((0|ee)>1)<<12}else g[189088]=0;return J=s+1856|0,i}function Mt(A,t,r,a,s,i,o,c){var f,m,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0,et=0,at=0,dt=0,St=0,Zt=0,er=0,pr=0,hr=0,yr=0,Er=0,Sr=0,Wr=0,na=0,qr=0,oa=0,Ba=0,As=0,os=0,ls=0,Ps=0,Qi=0,fi=0,pi=0,Ti=0;J=f=J-384|0,m=e[t>>2];e:{A:{r:{s:{if(s){if(l[0|s]!=7)break s;e[t>>2]=(a||1)+m;break r}e[i>>2]=0,e[t>>2]=m+1;break e}St=86135,Wr=268435456&o,na=134217728&o,qr=8388608&o,oa=16384&o,Ba=8192&o,pr=r-1|0,hr=a-r|0,As=2&o,os=128&o,ls=o>>>31|0,Ps=-2147483648&o,yr=f+96|1;s:for(;;)for(e[f+268>>2]=0,ee=(E=e[t>>2])+a|0,cA=-2,Ke=-6,r=s,MA=Ps,et=0,Zt=0,rA=1,p=0,zA=0,dt=0;;){P=E,ce=p;i:{c:{o:{u:{l:{n:{p:{C:{m:{b:{h:{E:{w:{y:{L:{V:{for(;Be=r,r=r+1|0,!((w=l[0|Be])>>>0>9);)switch(Y=r,0|w){case 0:if(!(r=Er)){Er=0,r=86135;break L}for(;;){w=1;W:{M:switch(0|(p=l[0|r])){case 0:case 3:break V;case 5:break M;default:break W}w=2}r=(r+w|0)+(((0|p)==9)<<1)|0}case 1:if(dt=1,!ls)continue;break l;case 2:dt=2;continue;case 4:Er=r;continue;case 5:r=Be+2|0,p=e[A+320>>2];W:{if((E=l[Be+1|0])>>>0>=32){if(!(p>>>E-32&1))break W;break l}if(!(p>>>E&1))break l}rA=rA+1|0;continue;case 9:r=Be+3|0;continue;case 8:dt=1,Zt=1,MA=0;break;case 3:break y}Y=0,p=ce,E=P;W:switch(0|dt){case 0:M:{v:{if((0|(p=l[0|ee]))!=(0|w)){if((0|p)!=69)break l;if((0|w)==101)break v;break l}if(Y=0,(192&w)==128)break M}Y=21}ee=ee+1|0,et=et+1|0;break i;case 1:break w;case 2:break W;default:break b}if(e[f+264>>2]=e[f+268>>2],!l[ee-1|0])break l;Ke=(0|(p=Ke+6|0))>=19?19:p,Ve=ee+1|0,Qe=Gt(f+268|0,ee),he=l[0|ee],Y=20,p=ce;W:{M:switch(w-11|0){case 6:r=Be+2|0,p=e[f+268>>2],E=g[Be+1|0];v:if(w=e[604+(((E=((0|E)<65?191:-65)+E|0)<<2)+A|0)>>2])p=!!(0|Lr(w,p));else{if((0|E)>7)break l;D:{if((0|(w=e[A+600>>2]))>0){if((p=p-w|0)-1>>>0<255)break D;break l}if((w=p-192|0)>>>0<=413){p=l[344+(l[w+94240|0]+A|0)|0]&1<<E;break v}if(p>>>0>255)break l}p=l[344+(A+p|0)|0]&1<<E}if(!p)break l;ee=ee+Qe|0,Y=((0|E)==2?19:20)-Ke|0;break i;case 7:if(r=Be+2|0,p=g[Be+1|0],!(p=e[4788+((((0|p)<65?191:-65)+p<<2)+A|0)>>2]))break l;v:for(;;){if((0|(Y=l[0|p]))==7)break l;if((0|Y)==126){Y=20-Ke|0;break i}D:if(he){if(Z=ee,w=p,(0|Y)==(0|he))for(;;){if((0|(Y=l[0|(w=w+1|0)]))!=(0|(p=l[0|(Z=Z+1|0)])))break D;if(!p)break}}else w=p,Z=ee;if(Y){for(;;)if(E=l[0|w],w=p=w+1|0,!E)continue v}break}if((0|(p=Z-ee|0))<0)break l;ee=p+ee|0,Y=20-Ke|0;break i;case 14:w=e[f+268>>2];v:{D:if(p=e[A+604>>2])p=!!(0|Lr(p,w));else{S:{if((0|(p=e[A+600>>2]))>0){if((Z=w-p|0)-1>>>0<255)break S;break v}if((p=w-192|0)>>>0<=413){p=1&g[344+(l[p+94240|0]+A|0)|0];break D}if(Z=w,w>>>0>255)break c}p=1&g[344+(A+Z|0)|0]}if(p)break l;w=e[f+268>>2]}if(!na)break c;if((0|w)==32)break l;break c;case 4:if((p=e[f+268>>2])-48>>>0<10|p-2406>>>0<10)break c;if(!l[A+170|0])break l;Y=20-Ke|0;break i;case 5:if(Ei(e[f+268>>2]))break l;break o;case 0:if(e[f+268>>2]==e[f+264>>2])break o;break l;case 17:r=Be+2|0,p=32768,Y=0;v:{D:switch((w=l[Be+1|0])-1|0){case 0:break b;case 1:break D;default:break v}if(Y=1,p=ce,!qr)break b;break l}if((0|(p=240&w))==16){if(Y=23,p=ce,c>>>(15&w)&16384)break b;break l}if((0|w)!=3&(0|p)!=32||(wt(p=f+96|0,pr,E=1+(e[t>>2]+(et+hr|0)|0)|0),g[0|(p=p+E|0)]=32,g[p+1|0]=0,e[33265]=0,e[33266]=0,e[f+16>>2]=yr,kr(A,f+16|0,f+272|0,133060,0,0),Y=23,!((0|w)!=3|(0|(Z=e[33265]))>=0|16384&e[33266])))break i;if(p=ce,E=P,Z>>>(15&w)&16384)break b;break l;case 34:v:{if(p=he-32|0){if((0|p)==13)break v;break l}if(!oa)break l}Z=22-Ke|0;break u;case 10:if(p=1,l[0|r]==21)break W;break n;case 18:if((0|(Z=e[f+268>>2]))!=32)for(w=ee+Qe|0;;){v:{D:if(p=e[A+632>>2])p=!!(0|Lr(p,Z));else{S:{if((0|(p=e[A+600>>2]))>0){if((Z=Z-p|0)-1>>>0<255)break S;break v}if((p=Z-192|0)>>>0<=413){p=128&l[344+(l[p+94240|0]+A|0)|0];break D}if(Z>>>0>255)break v}p=128&l[344+(A+Z|0)|0]}if(p)break l}if(w=Gt(f+268|0,w)+w|0,(0|(Z=e[f+268>>2]))==32)break}Z=19-Ke|0;break u;case 49:break p;case 2:break C;case 3:break m;case 1:break b;case 13:break h;case 12:break M;default:break E}Gt(f+272|0,r),Qe=-1;M:if((0|(p=e[f+272>>2]))!=(0|(w=e[f+268>>2])))if(-33&w)for(;;){he=ee,Qe=-1;v:if((0|p)==18&&(p=g[Be+2|0],Y=e[4788+((((0|p)<65?191:-65)+p<<2)+A|0)>>2])){for(;;){if((0|(E=l[0|Y]))==7)break v;if((0|E)==126){Qe=0;break v}D:if((0|(ee=l[0|he]))==(0|E)){if(p=he,w=Y,ee)for(;;){if((0|(E=l[0|(w=w+1|0)]))!=(0|(Y=l[0|(p=p+1|0)])))break D;if(!Y)break}}else w=Y,p=he;if(!E){p=p-he|0;break}for(;p=l[0|w],w=Y=w+1|0,p;);}Qe=p}if(E=Gt(f+268|0,he),(0|(p=e[f+272>>2]))==(0|(w=e[f+268>>2]))|!(-33&w))break M;if(ee=E+he|0,(0|Qe)!=-1)break}else he=ee;else he=ee;ee=(0|p)==(0|w)||(0|Qe)>=0?he:Ve,Y=0;break i}for(;p=p+1|0,l[0|(r=r+1|0)]==21;);break n}r=r+1|0}Y=Be}if(!(l[P-1|0]!=32&Zt|MA||((0|(w=Zt?rA+4|0:rA))>=(0|er)&&(Qi=zA,fi=ce,er=w,pi=et,St=r),!(8&e[47197])|Wr|(0|w)<=0))){for(JA(r,Be=f+272|0),Ve=e[47195],E=f+16|0,r=0,he=0,MA=0,zA=0,J=ee=J-496|0,g[ee+80|0]=0,(0|a)>0?(wt(ee+288|0,m,a),ce=a):ce=0,g[ce+(p=ee+288|0)|0]=0,P=HA(p)+p|0,Qe=(0|o)<0;;){if(Z=l[0|s],ce=s,s=s+1|0,Z>>>0>9)for(;;){y:{L:{V:{W:{M:{v:switch((p=255&Z)-14|0){case 4:break V;case 3:break W;case 0:break M;case 14:break v;default:break L}if(ce=ce+2|0,Z=32,!Qe&(0|(s=l[0|s]))==1)break y;g[0|P]=36,qA(p=P+1|0,s=Bi(128960,s)),P=HA(s)+p|0;break y}p=l[ce+2|0],Z=l[0|s],e[ee+36>>2]=127&l[ce+3|0],e[ee+32>>2]=4&p?80:83,DA(ee+48|0,85131,ee+32|0),1&p&&(s=HA(s=ee+48|0)+s|0,g[0|s]=101,g[s+1|0]=0),2&(s=127&p)&&(p=HA(p=ee+48|0)+p|0,g[0|p]=105,g[p+1|0]=0),4&s&&(p=HA(p=ee+48|0)+p|0,g[0|p]=112,g[p+1|0]=0),8&s&&(p=HA(p=ee+48|0)+p|0,g[0|p]=118,g[p+1|0]=0),16&s&&(p=HA(p=ee+48|0)+p|0,g[0|p]=100,g[p+1|0]=0),32&s&&(p=HA(p=ee+48|0)+p|0,g[0|p]=102,g[p+1|0]=0),s>>>0>=64&&(s=HA(s=ee+48|0)+s|0,g[0|s]=113,g[s+1|0]=0),1&Z&&(s=HA(s=ee+48|0)+s|0,g[0|s]=116,g[s+1|0]=0),ce=ce+4|0,P=qA(P,s=ee+48|0)+HA(s)|0,Z=32;break y}ce=ce+2|0,Z=l[g[0|s]+93871|0];break y}s=g[0|s],g[0|P]=76,p=((s=s+((0|s)<65?191:-65)|0)>>>0)/10|0,g[P+1|0]=p+48,Z=s-z(p,10)|48,(0|zA)==1&&(g[0|P]=Z,Z=76),ce=ce+2|0,P=P+2|0;break y}Z=p>>>0<=31?l[p+93904|0]:(0|p)==32?95:Z,ce=s}if(g[0|P]=Z,s=ce+1|0,P=P+1|0,!((Z=l[0|ce])>>>0>=10))break}p=1;y:switch(0|Z){case 1:p=r;case 8:g[0|P]=0,P=ee+80|0,r=p,zA=1;continue;case 2:g[0|P]=0,ce=HA(p=ee+288|0)+p|0,P=l[84899]|l[84900]<<8,g[0|ce]=P,g[ce+1|0]=P>>>8,zA=2,g[ce+2|0]=l[84901],P=HA(p)+p|0;continue;case 5:he=g[0|s],s=ce+2|0;continue;case 9:MA=(l[0|s]+z(l[ce+2|0],255)|0)-256|0,s=ce+3|0;continue;case 0:case 3:break y;default:continue}break}if(g[0|P]=0,P=E,(0|MA)>0&&(e[ee+16>>2]=MA,DA(E,85581,ee+16|0),P=E+7|0),(0|he)>0&&(e[ee>>2]=he,DA(P,85694,ee),P=HA(P)+P|0),1&((0|(s=HA(ee+80|0)))>0|r)){1&r&&(g[0|P]=95,P=P+1|0);y:if(!((0|(ce=s-1|0))<0|P>>>0>=E>>>0))for(;;){if(g[0|P]=l[(ee+80|0)+ce|0],P=P+1|0,(0|ce)<=0)break y;if(ce=ce-1|0,!(P>>>0<E>>>0))break}g[0|P]=41,g[P+1|0]=32,P=P+2|0}g[0|P]=0,g[(r=ee+288|0)+((E+3|0)-P|0)|0]=0,ia(P,r),(0|(r=HA(E)))<=7&&(jA(r+E|0,32,8-r|0),r=8),g[r+E|0]=0,J=ee+496|0,e[f+4>>2]=E,e[f>>2]=(0|a)>1?w+35|0:w,e[f+8>>2]=Be,fr(Ve,89088,f)}r=Y;break l}if(!l[0|P])break l;cA=(0|(p=cA+2|0))>=19?19:p,Gt(f+264|0,P),p=Ga(f+268|0,E=P-1|0),he=l[0|E],Ve=E;w:{y:{L:{V:{W:{M:switch(w-10|0){case 13:if(p=(0|(at=l[0|r]))==(0|(w=l[0|P])),Qe=-1,(0|w)==32|(0|w)==(0|at))break V;if(w)break W;break L;case 7:r=Be+2|0,Y=e[f+268>>2],P=g[Be+1|0];v:if(w=e[604+(((P=((0|P)<65?191:-65)+P|0)<<2)+A|0)>>2])w=!!(0|Lr(w,Y));else{if((0|P)>7)break l;D:{if((0|(w=e[A+600>>2]))>0){if((Y=Y-w|0)-1>>>0<255)break D;break l}if((w=Y-192|0)>>>0<=413){w=l[344+(l[w+94240|0]+A|0)|0]&1<<P;break v}if(Y>>>0>255)break l}w=l[344+(A+Y|0)|0]&1<<P}if(!w)break l;E=1+(E-p|0)|0,Y=((0|P)==2?19:20)-cA|0;break w;case 8:if(r=Be+2|0,p=g[Be+1|0],!(p=e[4788+((((0|p)<65?191:-65)+p<<2)+A|0)>>2]))break l;v:{for(;;){if((0|(he=l[0|p]))==7)break l;if((0|he)==126){Qe=0;break v}w=E;D:{S:{if((0|(Be=(Qe=HA(p))-1|0))>0)for(w=P-Qe|0,Y=0,Z=E;;){if(!l[0|(Z=Z-1|0)])break S;if((0|Be)==(0|(Y=Y+1|0)))break}q:if(!((0|(Y=l[0|w]))!=(0|he)|!Y))for(;;){if((0|(he=l[0|(p=p+1|0)]))!=(0|(Y=l[0|(w=w+1|0)])))break q;if(!Y)break}if(!he)break D}for(w=p;Y=l[0|w],w=p=w+1|0,Y;);continue}break}if((0|Qe)<0)break l}Y=20-Ke|0,E=1+(E-Qe|0)|0;break w;case 15:w=e[f+268>>2];v:{D:if(P=e[A+604>>2])P=!!(0|Lr(P,w));else{S:{if((0|(P=e[A+600>>2]))>0){if((w=w-P|0)-1>>>0<255)break S;break v}if((P=w-192|0)>>>0<=413){P=1&g[344+(l[P+94240|0]+A|0)|0];break D}if(w>>>0>255)break v}P=1&g[344+(A+w|0)|0]}if(P)break l}Y=20-cA|0,E=1+(E-p|0)|0;break w;case 1:if(e[f+268>>2]!=e[f+264>>2])break l;Y=21-cA|0,E=1+(E-p|0)|0;break w;case 5:if(!((P=e[f+268>>2])-48>>>0<10|P-2406>>>0<10))break l;Y=21-cA|0,E=1+(E-p|0)|0;break w;case 6:if(Ei(e[f+268>>2]))break l;Y=21-Ke|0,E=1+(E-p|0)|0;break w;case 18:if(r=Be+2|0,!((0|(w=l[Be+1|0]))==3|(240&w)==32)||(wt(p=f+96|0,pr,E=1+(e[t>>2]+(et+hr|0)|0)|0),g[0|(p=p+E|0)]=32,g[p+1|0]=0,e[33265]=0,e[33266]=0,e[f+16>>2]=yr,kr(A,f+16|0,f+272|0,133060,0,0),Y=23,!((0|w)!=3|(0|(Z=e[33265]))>=0|16384&e[33266])))break i;if(p=ce,E=P,Z>>>(15&w)&16384)break b;break l;case 11:if(w=1,l[0|r]==21)for(;w=w+1|0,l[0|(r=r+1|0)]==21;);if(e[A+8208>>2]<(0|w))break l;Y=18+(w-cA|0)|0;break w;case 0:if(Y=19,p=ce,E=P,e[A+8212>>2]>0)break b;break l;case 19:if(Y=3,(0|(Z=e[f+268>>2]))==32)break w;for(w=1+(E-p|0)|0;;){v:{D:if(p=e[A+632>>2])p=!!(0|Lr(p,Z));else{S:{if((0|(p=e[A+600>>2]))>0){if((Z=Z-p|0)-1>>>0<255)break S;break v}if((p=Z-192|0)>>>0<=413){p=128&l[344+(l[p+94240|0]+A|0)|0];break D}if(Z>>>0>255)break v}p=128&l[344+(A+Z|0)|0]}if(p)break l}if(w=w-Ga(f+268|0,w-1|0)|0,(0|(Z=e[f+268>>2]))==32)break}break w;case 16:if(Y=1,p=ce,E=P,e[A+8184>>2])break b;break l;case 9:if(Y=1,p=ce,E=P,As)break b;break l;case 36:for(;;){if(Y=50,p=ce,!(P=(255&he)-32|0))break l;if((0|P)==14)break b;he=l[0|(Ve=Ve-1|0)]}case 35:break M;default:break y}M:{if(p=he-32|0){if((0|p)==13)break M;break l}if(!os)break l}Y=22-Ke|0;break w}W:{for(;;){Qe=-1,Z=P,P=P-1|0;M:if((0|at)==18&&(p=g[Be+2|0],Y=e[4788+((((0|p)<65?191:-65)+p<<2)+A|0)>>2]))for(Ti=Z+1|0;;){if((0|(Ve=l[0|Y]))==7){Qe=-1;break M}if((0|Ve)==126){Qe=0;break M}w=Z;v:{if((0|(Sr=(Qe=HA(Y))-1|0))>0)for(w=Ti-Qe|0,he=0,p=Z;;){if(!l[0|(p=p-1|0)])break v;if((0|Sr)==(0|(he=he+1|0)))break}D:if(!((0|(p=l[0|w]))!=(0|Ve)|!p))for(;;){if((0|(Ve=l[0|(Y=Y+1|0)]))!=(0|(p=l[0|(w=w+1|0)])))break D;if(!p)break}if(!Ve)break M}for(w=Y;p=l[0|w],w=Y=w+1|0,p;);}if(p=(0|(w=l[0|P]))==(0|at),(0|w)==32|(0|w)==(0|at))break W;if(!w){P=Z;break L}if((0|Qe)!=-1)break}P=Z;break L}P=Z}E=p?P:E}Y=0,E=(0|Qe)<0?E:P+1|0;break w}if((0|w)!=(0|he))break l;Y=4,(0|w)!=32&&(Y=(192&w)!=128?21-cA|0:0)}p=ce;break b}if((0|w)!=(0|he))break l;Z=(192&w)!=128?21-Ke|0:0;break u}if(Y=1,Ba)break l}rA=Y+rA|0;continue}if(p=g[Be+1|0],ce=l[Be+3|0],E=l[Be+2|0],1&!(e[A+8208>>2]|4&E)&g[A+84|0])break l;r=Be+4|0,Z=0,ce=127&ce|(127&E)<<8|p<<16;break u}C:if(!(Ve>>>0<=(w=e[t>>2]+a|0)>>>0)){for(;;){if(l[0|w]!=101){if(p=w>>>0<ee>>>0,w=w+1|0,p)continue;break C}break}Z=0,zA=w;break u}Z=0;break u}Y=-20;break i}if(he=0,(0|(w=e[f+268>>2]))!=32)for(Z=ee+Qe|0,Y=0;;){if(!Y){n:{p:if(E=e[A+632>>2])w=!!(0|Lr(E,w));else{C:{if((0|(E=e[A+600>>2]))>0){if((w=w-E|0)-1>>>0<255)break C;break n}if((E=w-192|0)>>>0<=413){w=128&l[344+(l[E+94240|0]+A|0)|0];break p}if(w>>>0>255)break n}w=128&l[344+(A+w|0)|0]}w&&(he=he+1|0)}w=e[f+268>>2]}n:if(E=e[A+632>>2])Y=!!(0|Lr(E,w));else{p:{if((0|(E=e[A+600>>2]))>0){if(Y=0,(w=w-E|0)-1>>>0<255)break p;break n}if((E=w-192|0)>>>0<=413){Y=128&l[344+(l[E+94240|0]+A|0)|0];break n}if(Y=0,w>>>0>255)break n}Y=128&l[344+(A+w|0)|0]}if(Z=Gt(f+268|0,Z)+Z|0,(0|(w=e[f+268>>2]))==32)break}if(!((0|p)>(0|he))){Z=18+(p-Ke|0)|0;break u}}for(;p=l[0|r],r=s=r+1|0,p;);if(l[0|s]!=7)continue s;if(A=a+pi|0,e[t>>2]=e[t>>2]+(A||1),er)break A;break r}p=ce,ee=Ve,E=P,rA=Z+rA|0;continue}ee=ee+Qe|0,Y=21-Ke|0;break i}ee=ee+Qe|0,Y=20-Ke|0}p=ce,E=P,rA=Y+rA|0}}St=86135}e[i+12>>2]=Qi,e[i+8>>2]=fi,e[i+4>>2]=St,e[i>>2]=er}J=f+384|0}function Tt(A,t){var r,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0,et=0,at=0,dt=0,St=0,Zt=0,er=0;J=r=J-1168|0,e[r+928>>2]=0,e[r+932>>2]=0,e[r+920>>2]=0,e[r+924>>2]=0,e[r+912>>2]=0,e[r+916>>2]=0,e[r+904>>2]=0,e[r+908>>2]=0,e[r+896>>2]=0,e[r+900>>2]=0;e:{A:{if(A){if(l[0|A]|8&t)break A;break e}if(!(8&t))break e}if(ar(r+1088|0,A,40),16&t){if((0|is(qA(r+704|0,A)))<=0)break e;Z=8&t}else(Z=8&t)|l[r+1088|0]||(b[r+1088>>1]=l[85055]|l[85056]<<8,g[r+1090|0]=l[85057]),e[r+496>>2]=137584,e[r+500>>2]=47,e[r+504>>2]=47,DA(a=r+512|0,85286,r+496|0),e[r+484>>2]=r+1088,e[r+480>>2]=a,DA(a=r+704|0,85425,r+480|0),(0|is(a))>0||(e[r+468>>2]=47,e[r+472>>2]=47,e[r+464>>2]=137584,DA(a=r+512|0,85648,r+464|0),e[r+452>>2]=r+1088,e[r+448>>2]=a,DA(r+704|0,85425,r+448|0));if(s=Z?86012:85055,!(ee=ka(r+704|0,85712))){if(a=0,3&t)break e;s=(0|xi(a=r+1088|0))<0?s:a}if((Y=2&t)||(a=e[47192])&&(M0(a),e[47192]=0),Be=qA(r+992|0,s),he=qA(r+944|0,s),Y?((a=es(200992,43))&&(g[0|a]=0),e[r+432>>2]=A+3,DA(A=r+704|0,86030,r+432|0),ia(200992,A)):(e[32972]=199592,ar(200992,A,40),g[201088]=0,g[201040]=0,e[50299]=200992,e[50298]=201088,e[50297]=201040),Kt(Y),ee){for(Ve=e[30450],Ke=r+548|0,rA=r+544|0,cA=r+540|0,MA=r+536|0,zA=r+532|0,et=r+528|0,at=12|(A=r+512|0),dt=8|A,St=4|A;Jt(r+704|0,190,ee);){A=r+704|0;A:{if(l[r+704|0]!=35){r:if(!((0|(A=HA(r+704|0)-1|0))<=0))for(;;){if(!((0|(s=g[0|(a=(r+704|0)+A|0)]))==32|s-9>>>0<5))break r;if(g[0|a]=0,!((0|(A=A-1|0))>0))break}if(!(A=Rr(r+704|0)))break A}g[0|A]=0}A=r+704|0;A:if(a=l[r+704|0])for(;;){if((0|(a=a<<24>>24))==32|a-9>>>0<5)break A;if(!(a=l[0|(A=A+1|0)]))break}if(g[0|A]=0,l[r+704|0])if(A=A+1|0,a=bs(129744,r+704|0)){i=0,J=s=J-416|0;A:if(o=e[47192]){switch(a-19|0){case 16:if(e[s+32>>2]=s+412,(0|ut(A,84249,s+32|0))!=1)break A;e[o+324>>2]=e[s+412>>2];break A;case 8:K0(A,o+320|0,27);break A;case 2:if(e[s+48>>2]=188784,ut(A,84249,s+48|0),!(A=l[188784]))break A;e[o+152>>2]=A;break A;case 11:if(l[0|A]){for(c=e[30450];;)if(a=A,A=A+1|0,!((0|(i=g[0|a]))==32|i-9>>>0<5)){for(i=js(a),e[s+412>>2]=i,(0|i)>0&&(i>>>0<=31?e[o+104>>2]=e[o+104>>2]|1<<i:i>>>0<=63?e[o+108>>2]=e[o+108>>2]|1<<i-32:(e[s+64>>2]=i,fr(c,84700,s- -64|0)),a=A);a=(A=a)+1|0,(i=g[0|A])-48>>>0<10|(32|i)-97>>>0<26;);if(!i)break}}8&(A=e[o+104>>2])&&(e[o+124>>2]=46,e[o+128>>2]=44),4&A&&(e[o+124>>2]=0);break A;default:if((65280&a)!=256)break A;e[s+16>>2]=24+(o+((255&a)<<2)|0),ut(A,84249,s+16|0);break A;case 1:e[s+144>>2]=o,e[s+148>>2]=o+4,ut(A,85642,s+144|0);break A;case 3:if(a=0,jA(i=s+160|0,0,240),e[s+132>>2]=s+360,e[s+128>>2]=s+320,e[s+124>>2]=s+280,e[s+120>>2]=s+240,e[s+116>>2]=s+200,e[s+112>>2]=i,i=ut(A,85037,s+112|0),e[s+412>>2]=i,e[o+152>>2]=0,(0|i)<=0)break A;for(p=e[30450];;){r:if(Br(c=(s+160|0)+z(a,40)|0,85301)){s:{if((0|(m=e[34454]))>0)for(P=e[34455],A=0;;){if(!Br(c,P+z(A,68)|0))break s;if((0|m)==(0|(A=A+1|0)))break}e[s+96>>2]=c,fr(p,85562,s+96|0),i=e[s+412>>2];break r}g[156+(a+o|0)|0]=A}if(!((0|i)>(0|(a=a+1|0))))break}break A;case 9:e[s+88>>2]=o+20,e[s+84>>2]=o+16,e[s+80>>2]=o+8,ut(A,84778,s+80|0);break A;case 10:K0(A,o+12|0,29);break A;case 5:if((0|(p=In(A,s+160|0)))<=0)break A;if(a=0,A=0,p>>>0>=4)for(P=-4&p,c=o+304|0;m=s+160|0,b[c+(A<<1)>>1]=e[m+(A<<2)>>2],b[c+((f=1|A)<<1)>>1]=e[m+(f<<2)>>2],b[c+((f=2|A)<<1)>>1]=e[m+(f<<2)>>2],b[c+((f=3|A)<<1)>>1]=e[m+(f<<2)>>2],A=A+4|0,(0|P)!=(0|(i=i+4|0)););if(!(i=3&p))break A;for(;b[304+(o+(A<<1)|0)>>1]=e[(s+160|0)+(A<<2)>>2],A=A+1|0,(0|i)!=(0|(a=a+1|0)););break A;case 6:if((0|(p=In(A,s+160|0)))<=0)break A;if(a=0,A=0,p>>>0>=4)for(P=-4&p,c=o+296|0;m=s+160|0,g[A+c|0]=e[m+(A<<2)>>2],g[(f=1|A)+c|0]=e[m+(f<<2)>>2],g[(f=2|A)+c|0]=e[m+(f<<2)>>2],g[(f=3|A)+c|0]=e[m+(f<<2)>>2],A=A+4|0,(0|P)!=(0|(i=i+4|0)););if(!(i=3&p))break A;for(;g[296+(A+o|0)|0]=e[(s+160|0)+(A<<2)>>2],A=A+1|0,(0|i)!=(0|(a=a+1|0)););break A;case 7:if((0|(p=In(A,s+160|0)))<=0)break A;if(a=0,A=0,p>>>0>=4)for(P=-4&p,c=o+304|0;f=m=c+(A<<1)|0,w=M[m>>1],m=s+160|0,b[f>>1]=w+M[m+(A<<2)>>1],b[(w=c+((f=1|A)<<1)|0)>>1]=M[w>>1]+M[m+(f<<2)>>1],b[(w=c+((f=2|A)<<1)|0)>>1]=M[w>>1]+M[m+(f<<2)>>1],b[(w=c+((f=3|A)<<1)|0)>>1]=M[w>>1]+M[m+(f<<2)>>1],A=A+4|0,(0|P)!=(0|(i=i+4|0)););if(!(i=3&p))break A;for(;b[304+(c=o+(A<<1)|0)>>1]=M[c+304>>1]+M[(s+160|0)+(A<<2)>>1],A=A+1|0,(0|i)!=(0|(a=a+1|0)););break A;case 4:g[o+169|0]=1;break A;case 0:}g[o+208|0]=1}else e[s>>2]=Bi(129568,a),fr(e[30450],89101,s);J=s+416|0}else{switch(bs(131904,r+704|0)-1|0){case 1:if(Y||(g[r+1040|0]=0,e[r+512>>2]=5,e[r+32>>2]=r+1040,e[r+36>>2]=r+512,ut(A,86237,r+32|0),e[r+1040>>2]==1769103734&e[r+1044>>2]==7630433))continue;if((A=HA(r+1040|0)+2|0)>>>0<99-ce>>>0&&(g[0|(a=ce+201088|0)]=e[r+512>>2],qA(a+1|0,r+1040|0),ce=A+ce|0),!Zt){if(A=0,(a=c=r+1040|0)||(a=e[57150])){if(A=86875,e[24+(s=J-32|0)>>2]=0,e[s+28>>2]=0,e[s+16>>2]=0,e[s+20>>2]=0,e[s+8>>2]=0,e[s+12>>2]=0,e[s>>2]=0,e[s+4>>2]=0,o=0,i=l[86875])if(l[86876]){for(;e[(o=s+(i>>>3&28)|0)>>2]=e[o>>2]|1<<i,i=l[A+1|0],A=A+1|0,i;);A:if(i=l[0|(A=a)])for(;;){if(!(e[s+(i>>>3&28)>>2]>>>i&1))break A;if(i=l[A+1|0],A=A+1|0,!i)break}o=A-a|0}else{for(A=a;s=A,A=A+1|0,l[0|s]==(0|i););o=s-a|0}if(l[0|(A=o+a|0)]){a=86875,J=i=J-32|0,s=g[86875];A:if(l[86876]&&s){if(jA(i,0,32),s=l[86875])for(;e[(o=i+(s>>>3&28)|0)>>2]=e[o>>2]|1<<s,s=l[a+1|0],a=a+1|0,s;);if(a=A,s=l[0|A])for(;;){if(e[i+(s>>>3&28)>>2]>>>s&1)break A;if(s=l[a+1|0],a=a+1|0,!s)break}}else a=Vs(A,s);J=i+32|0,l[0|(a=(a-A|0)+A|0)]?(e[57150]=a+1,g[0|a]=0):e[57150]=0}else e[57150]=0,A=0}a=qA(Be,A),qA(he,A),xi(qA(r+896|0,A)),e[47192]=qe(a),ar(e[32972]+40|0,c,20)}Zt=1;continue;case 0:if(Y)continue;for(;a=A,A=A+1|0,(0|(s=g[0|a]))==32|s-9>>>0<5;);ar(201040,a,40);continue;case 2:e[r+1152>>2]=0,a=r+512|0,e[r+48>>2]=a,e[r+52>>2]=r+1152,ut(A,86237,r+48|0),g[201200]=bs(132112,a),g[201201]=e[r+1152>>2];continue;case 4:e[r+64>>2]=he,ut(A,86939,r- -64|0);continue;case 3:e[r+80>>2]=r+896,ut(A,86939,r+80|0);continue;case 8:if(e[r+1152>>2]=100,e[r+1164>>2]=100,e[r+1148>>2]=100,e[r+112>>2]=r+1144,e[r+1144>>2]=0,e[r+96>>2]=r+512,e[r+100>>2]=r+1152,e[r+104>>2]=r+1164,e[r+108>>2]=r+1148,(0|ut(A,91156,r+96|0))<2||(A=e[r+512>>2])>>>0>8||((0|(a=e[r+1152>>2]))>=0&&(s=e[32972]+(A<<1)|0,a=Ne(E=2.56001*+(0|a))<2147483648?~~E:-2147483648,b[s+236>>1]=a,b[s+164>>1]=a),(0|(a=e[r+1164>>2]))>=0&&(s=e[32972]+(A<<1)|0,a=Ne(E=2.56001*+(0|a))<2147483648?~~E:-2147483648,b[s+254>>1]=a,b[s+182>>1]=a),(0|(s=e[r+1148>>2]))<0?a=e[32972]:(c=(a=e[32972])+(A<<1)|0,s=Ne(E=2.56001*+(0|s))<2147483648?~~E:-2147483648,b[c+200>>1]=s),b[218+((A<<1)+a|0)>>1]=e[r+1144>>2],A))continue;b[a+200>>1]=(0|z(b[a+200>>1],105))/100;continue;case 9:if(e[r+132>>2]=r+696,e[r+128>>2]=r+700,(0|ut(A,87106,r+128|0))!=2)continue;if(A=e[32972],a=e[r+700>>2],e[A+64>>2]=(a<<12)-36864,e[A+68>>2]=z(e[r+696>>2]-a|0,108),Ne(E=256*(+(a-82|0)/82*.25+1))<2147483648){e[A+116>>2]=~~E;continue}e[A+116>>2]=-2147483648;continue;case 35:er||xi(r+896|0),e[r+1164>>2]=0,g[r+1156|0]=l[91267],e[r+1152>>2]=l[91263]|l[91264]<<8|l[91265]<<16|l[91266]<<24,e[r+144>>2]=r+1164,e[r+148>>2]=r+512,e[r+152>>2]=r+1152,(0|ut(A,91302,r+144|0))<2|e[49848]>59||(A=wn(r+512|0))&&(g[z(e[49848],3)+199408|0]=A,A=wn(r+1152|0),a=e[49848],s=z(a,3)+199408|0,g[s+1|0]=A,e[49848]=a+1,g[s+2|0]=e[r+1164>>2]),er=1;continue;case 10:e[r+1140>>2]=0,a=e[32972],e[a+100>>2]=0,e[r+164>>2]=a+100,e[r+160>>2]=a+96,ut(A,87106,r+160|0);continue;case 11:if(e[r+176>>2]=r+1140,(0|ut(A,87268,r+176|0))!=1)continue;e[e[32972]+88>>2]=e[r+1140>>2]<<5;continue;case 12:if(e[r+192>>2]=r+1140,(0|ut(A,87268,r+192|0))!=1)continue;e[e[32972]+92>>2]=e[r+1140>>2];continue;case 13:if(e[r+208>>2]=r+1140,(0|ut(A,87268,r+208|0))!=1)continue;a=e[32972],(0|(A=e[r+1140>>2]))>=5&&(e[a+108>>2]=1,e[r+1140>>2]=4,A=4),e[a+104>>2]=A+1;continue;case 14:for(e[r+552>>2]=-1,e[r+556>>2]=-1,e[r+544>>2]=-1,e[r+548>>2]=-1,e[r+536>>2]=-1,e[r+540>>2]=-1,e[r+528>>2]=-1,e[r+532>>2]=-1,e[r+240>>2]=et,e[r+244>>2]=zA,e[r+248>>2]=MA,e[r+252>>2]=cA,e[r+256>>2]=rA,e[r+260>>2]=Ke,e[r+520>>2]=-1,e[r+524>>2]=-1,e[r+512>>2]=-1,e[r+516>>2]=-1,e[r+228>>2]=St,e[r+232>>2]=dt,e[r+236>>2]=at,e[r+224>>2]=r+512,ut(A,84222,r+224|0),P=e[32972],A=0,i=e[r+516>>2],s=0;;){if(a=s,o=i,c=A,(0|(s=e[(i=(A<<=2)+(r+512|0)|0)>>2]))==-1&&(s=8e3,e[i>>2]=8e3,c&&(e[(r+512|0)+(4|A)>>2]=e[508+(A+r|0)>>2])),i=e[(r+512|0)+(4|A)>>2],!((0|a)>=(0|(s=(0|s)/8|0))||(0|(m=s-a|0))<=0||(p=a+1|0,A=a,1&m&&(g[344+(a+P|0)|0]=(0|o)>=255?255:o,A=p),(0|s)==(0|p))))for(p=i-o|0;w=P+344|0,f=o+((0|z(p,A-a|0))/(0|m)|0)|0,g[w+A|0]=(0|f)>=255?255:f,f=o+((0|z(p,(Qe=A+1|0)-a|0))/(0|m)|0)|0,g[w+Qe|0]=(0|f)>=255?255:f,(0|s)!=(0|(A=A+2|0)););if(A=c+2|0,!(c>>>0<10))break}continue;case 15:if(e[r+272>>2]=r+1140,(0|ut(A,87268,r+272|0))!=1)continue;e[e[32972]+112>>2]=(e[r+1140>>2]<<6)/100;continue;case 16:a=e[32972],e[(s=a+300|0)>>2]=0,e[s+4>>2]=0,e[(i=a+292|0)>>2]=0,e[i+4>>2]=0,e[(o=a+284|0)>>2]=0,e[o+4>>2]=0,e[(c=a+276|0)>>2]=0,e[c+4>>2]=0,e[r+316>>2]=a+304,e[r+312>>2]=s,e[r+308>>2]=a+296,e[r+304>>2]=i,e[r+300>>2]=a+288,e[r+296>>2]=o,e[r+292>>2]=a+280,e[r+288>>2]=c,a=ut(A,84553,r+288|0),A=e[32972],e[A+272>>2]=a,e[A+276>>2]=0-e[A+276>>2],e[A+284>>2]=0-e[A+284>>2],e[A+292>>2]=0-e[A+292>>2],e[A+300>>2]=0-e[A+300>>2];continue;case 17:a=e[32972],e[(s=a+336|0)>>2]=0,e[s+4>>2]=0,e[(i=a+328|0)>>2]=0,e[i+4>>2]=0,e[(o=a+320|0)>>2]=0,e[o+4>>2]=0,e[(c=a+312|0)>>2]=0,e[c+4>>2]=0,e[r+348>>2]=a+340,e[r+344>>2]=s,e[r+340>>2]=a+332,e[r+336>>2]=i,e[r+332>>2]=a+324,e[r+328>>2]=o,e[r+324>>2]=a+316,e[r+320>>2]=c,A=ut(A,84553,r+320|0),e[e[32972]+308>>2]=A;continue;case 36:a=e[32972],e[r+352>>2]=a+120,e[r+356>>2]=a+124,e[r+1140>>2]=ut(A,87106,r+352|0);continue;case 33:e[r+368>>2]=e[32972]+84,ut(A,87268,r+368|0),Ls(3);continue;case 31:a=e[32972],e[(s=a+156|0)>>2]=0,e[s+4>>2]=0,e[(i=a+148|0)>>2]=0,e[i+4>>2]=0,e[(o=a+140|0)>>2]=0,e[o+4>>2]=0,e[(c=a+132|0)>>2]=0,e[c+4>>2]=0,e[r+412>>2]=a+160,e[r+408>>2]=s,e[r+404>>2]=a+152,e[r+400>>2]=i,e[r+396>>2]=a+144,e[r+392>>2]=o,e[r+388>>2]=a+136,e[r+384>>2]=c,ut(A,84553,r+384|0),A=e[32972],e[A+152>>2]=e[A+152>>2]-40;continue;case 32:e[r+416>>2]=145740,ut(A,87268,r+416|0),Ls(3);continue;case 6:case 7:continue}e[r+16>>2]=r+704,fr(Ve,87359,r+16|0)}}ra(ee)}A:{if((A=e[47192])|Y){if(Y)break A}else A=qe(Be),e[47192]=A;r:{if(!Z){if((0|(A=xi(r+896|0)))<0&&(e[r>>2]=r+896,fr(e[30450],87567,r),A=0),e[e[32972]+60>>2]=A,a=e[47192],e[a+292>>2]=A,qa(a,he,4&t),l[132848])break r;M0(e[47192]),a=0;break e}e[e[32972]+60>>2]=0,e[A+292>>2]=0}g[ce+201088|0]=0}a=e[32972]}return J=r+1168|0,a}function ut(A,t,r){var a,s,i,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0;J=i=J-16|0,e[i+12>>2]=r,J=o=J-144|0,a=jA(o,0,144),e[a+76>>2]=-1,e[a+44>>2]=A,e[a+32>>2]=18,e[a+84>>2]=A,o=t,Ke=r,A=0,J=s=J-304|0;e:{A:{r:if(e[a+4>>2]||(Ri(a),e[a+4>>2])){if(!(t=l[0|o]))break e;s:{i:{c:{o:{for(;;){u:{l:if((0|(t&=255))==32|t-9>>>0<5){for(;t=o,o=o+1|0,(0|(r=l[t+1|0]))==32|r-9>>>0<5;);for(_a(a,0,0);(0|(r=e[a+4>>2]))==e[a+104>>2]?r=bA(a):(e[a+4>>2]=r+1,r=l[0|r]),(0|r)==32|r-9>>>0<5;);o=e[a+4>>2],(0|(r=e[a+116>>2]))>0|(0|r)>=0&&(o=o-1|0,e[a+4>>2]=o),o=r=o-e[a+44>>2]|0,p=ce+e[a+124>>2]|0,p=(c=r>>31)+((r=Y+e[a+120>>2]|0)>>>0<Y>>>0?p+1|0:p)|0,ce=(Y=r+o|0)>>>0<r>>>0?p+1|0:p}else{n:{p:{C:{if(l[0|o]==37){if((0|(t=l[o+1|0]))==42)break C;if((0|t)!=37)break p}if(_a(a,0,0),l[0|o]!=37)(0|(t=e[a+4>>2]))==e[a+104>>2]?t=bA(a):(e[a+4>>2]=t+1,t=l[0|t]);else{for(;(0|(t=e[a+4>>2]))==e[a+104>>2]?t=bA(a):(e[a+4>>2]=t+1,t=l[0|t]),(0|t)==32|t-9>>>0<5;);o=o+1|0}if(l[0|o]!=(0|t)){if((0|(r=e[a+116>>2]))>0|(0|r)>=0&&(e[a+4>>2]=e[a+4>>2]-1),(0|t)>=0||(f=0,rA))break e;break r}m=(c=t=e[a+4>>2]-e[a+44>>2]|0)>>31,t=ce+e[a+124>>2]|0,f=((r=Y+e[a+120>>2]|0)>>>0<Y>>>0?t+1|0:t)+m|0,ce=(Y=r+c|0)>>>0<r>>>0?f+1|0:f,t=o;break l}w=0,t=o+2|0;break n}l[o+2|0]!=36|t-48>>>0>=10?(w=e[Ke>>2],Ke=Ke+4|0,t=o+1|0):(t=l[o+1|0]-48|0,e[12+(r=J-16|0)>>2]=Ke,t=(t>>>0>1?(t<<2)-4|0:0)+Ke|0,e[r+8>>2]=t+4,w=e[t>>2],t=o+3|0)}if(E=0,o=0,l[0|t]-48>>>0<10)for(;o=(l[0|t]+z(o,10)|0)-48|0,r=l[t+1|0],t=t+1|0,r-48>>>0<10;);(0|(Z=l[0|t]))==109&&(P=0,E=!!(0|w),Z=l[t+1|0],A=0,t=t+1|0),t=(r=t)+1|0,c=3,f=E;n:{p:switch(Z-65|0){case 39:c=r+2|0,t=(r=l[r+1|0]==104)?c:t,c=r?-2:-1;break n;case 43:c=r+2|0,t=(r=l[r+1|0]==108)?c:t,c=r?3:1;break n;case 51:case 57:c=1;break n;case 11:c=2;break n;case 41:break n;case 0:case 2:case 4:case 5:case 6:case 18:case 23:case 26:case 32:case 34:case 35:case 36:case 37:case 38:case 40:case 45:case 46:case 47:case 50:case 52:case 55:break p;default:break s}c=0,t=r}f=c,Qe=(c=(47&(r=l[0|t]))==3)?1:f;n:if((0|(Be=c?32|r:r))!=91){p:{if((0|Be)!=110){if((0|Be)!=99)break p;o=(0|o)<=1?1:o;break n}v0(w,Qe,Y,ce);break l}for(_a(a,0,0);(0|(r=e[a+4>>2]))==e[a+104>>2]?r=bA(a):(e[a+4>>2]=r+1,r=l[0|r]),(0|r)==32|r-9>>>0<5;);r=e[a+4>>2],(0|(c=e[a+116>>2]))>0|(0|c)>=0&&(r=r-1|0,e[a+4>>2]=r),c=r=r-e[a+44>>2]|0,p=ce+e[a+124>>2]|0,ce=(f=r>>31)+((r=Y+e[a+120>>2]|0)>>>0<Y>>>0?p+1|0:p)|0,ce=(Y=r+c|0)>>>0<r>>>0?ce+1|0:ce}if(ee=o,_a(a,o,he=o>>31),(0|(r=e[a+4>>2]))==e[a+104>>2]){if((0|bA(a))<0)break i}else e[a+4>>2]=r+1;(0|(r=e[a+116>>2]))>0|(0|r)>=0&&(e[a+4>>2]=e[a+4>>2]-1),r=16;n:{p:{C:{m:{switch(Be-88|0){default:if((r=Be-65|0)>>>0>6|!(1<<r&113))break n;case 9:case 13:case 14:case 15:if(vA(s+8|0,a,Qe,0),r=e[a+4>>2]-e[a+44>>2]|0,e[a+120>>2]!=(0-r|0)|e[a+124>>2]!=(0-((r>>31)+!!(0|r)|0)|0))break C;break c;case 3:case 11:case 27:if((16|Be)==115){if(jA(s+32|0,-1,257),g[s+32|0]=0,(0|Be)!=115)break p;g[s+65|0]=0,g[s+46|0]=0,b[s+42>>1]=0,b[s+44>>1]=0;break p}jA(s+32|0,m=(0|(c=l[t+1|0]))==94,257),g[s+32|0]=0,r=m?t+2|0:t+1|0;b:{h:{E:{if((0|(t=l[(m?2:1)+t|0]))!=45){if((0|t)==93)break E;c=(0|c)!=94,t=r;break b}c=(0|c)!=94,g[s+78|0]=c;break h}c=(0|c)!=94,g[s+126|0]=c}t=r+1|0}for(;;){if((0|(r=l[0|t]))==45){if(r=45,!(!(m=l[t+1|0])|(0|m)==93)){if(f=t+1|0,m>>>0<=(t=l[t-1|0])>>>0)r=m;else for(;g[(t=t+1|0)+(s+32|0)|0]=c,(r=l[0|f])>>>0>t>>>0;);t=f}}else{if(!r)break i;if((0|r)==93)break p}g[33+(r+s|0)|0]=c,t=t+1|0}case 23:r=8;break m;case 12:case 29:r=10;break m;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 22:case 25:case 26:case 28:case 30:case 31:break n;case 0:case 24:case 32:break m;case 17:}r=0}m=0,p=0,c=0,f=0,Z=0,J=Ve=J-16|0;m:if((0|r)!=1&r>>>0<=36){for(;(0|(o=e[a+4>>2]))==e[a+104>>2]?o=bA(a):(e[a+4>>2]=o+1,o=l[0|o]),(0|o)==32|o-9>>>0<5;);b:{h:switch(o-43|0){case 0:case 2:break h;default:break b}Z=(0|o)==45?-1:0,(0|(o=e[a+4>>2]))==e[a+104>>2]?o=bA(a):(e[a+4>>2]=o+1,o=l[0|o])}b:{h:{E:{w:{if(!(!!(0|r)&(0|r)!=16|(0|o)!=48)){if((0|(o=e[a+4>>2]))==e[a+104>>2]?o=bA(a):(e[a+4>>2]=o+1,o=l[0|o]),(-33&o)==88){if(r=16,(0|(o=e[a+4>>2]))==e[a+104>>2]?o=bA(a):(e[a+4>>2]=o+1,o=l[0|o]),l[o+121329|0]<16)break E;(0|(r=e[a+116>>2]))>0|(0|r)>=0&&(e[a+4>>2]=e[a+4>>2]-1),_a(a,0,0);break m}if(r)break w;r=8;break E}if(!((r=r||10)>>>0>l[o+121329|0])){(0|(r=e[a+116>>2]))>0|(0|r)>=0&&(e[a+4>>2]=e[a+4>>2]-1),_a(a,0,0),e[56798]=28;break m}}if((0|r)==10){if((c=o-48|0)>>>0<=9){for(r=0;f=(r=z(r,10)+c|0)>>>0<429496729,(0|(o=e[a+4>>2]))==e[a+104>>2]?o=bA(a):(e[a+4>>2]=o+1,o=l[0|o]),f&(c=o-48|0)>>>0<=9;);m=r}w:if(!(c>>>0>9)){for(r=It(m,0,10,0),f=$;;){if(p=f,f=(0|(p=(m=r+c|0)>>>0<c>>>0?p+1|0:p))==429496729&m>>>0>=2576980378|p>>>0>429496729,(0|(r=e[a+4>>2]))==e[a+104>>2]?o=bA(a):(e[a+4>>2]=r+1,o=l[0|r]),f|(c=o-48|0)>>>0>9)break w;if(r=It(m,p,10,0),!((0|(f=$))==-1&~c>>>0>=r>>>0|(0|f)!=-1))break}r=10;break h}if(r=10,c>>>0<=9)break h;break b}}if(r-1&r){if((f=l[o+121329|0])>>>0<r>>>0){for(;m=(c=z(r,c)+f|0)>>>0<119304647,(0|(o=e[a+4>>2]))==e[a+104>>2]?o=bA(a):(e[a+4>>2]=o+1,o=l[0|o]),m&(f=l[o+121329|0])>>>0<r>>>0;);m=c}if(r>>>0<=f>>>0)break h;for(;;){if(c=It(m,p,r,0),(0|(ee=$))==-1&~(f&=255)>>>0<c>>>0||(p=ee,p=(m=c+f|0)>>>0<f>>>0?p+1|0:p,(0|(o=e[a+4>>2]))==e[a+104>>2]?o=bA(a):(e[a+4>>2]=o+1,o=l[0|o]),r>>>0<=(f=l[o+121329|0])>>>0))break h;if(Zr(Ve,r,0,0,0,m,p,0,0),e[Ve+8>>2]|e[Ve+12>>2])break}}else{if(ee=g[84400+(z(r,23)>>>5&7)|0],(c=l[o+121329|0])>>>0<r>>>0){for(;m=(f=f<<ee|c)>>>0<134217728,(0|(o=e[a+4>>2]))==e[a+104>>2]?o=bA(a):(e[a+4>>2]=o+1,o=l[0|o]),m&(c=l[o+121329|0])>>>0<r>>>0;);m=f}if(!(r>>>0<=c>>>0||(he=31&ee,(63&ee)>>>0>=32?(f=0,he=-1>>>he|0):he=(f=-1>>>he|0)|(1<<he)-1<<32-he,!f&m>>>0>he>>>0)))for(;;){if(cA=255&c,c=m,o=31&ee,(63&ee)>>>0>=32?(p=c<<o,o=0):(p=(1<<o)-1&c>>>32-o|p<<o,o=c<<o),m=cA|o,(0|(o=e[a+4>>2]))==e[a+104>>2]?o=bA(a):(e[a+4>>2]=o+1,o=l[0|o]),r>>>0<=(c=l[o+121329|0])>>>0)break h;if(!((0|f)==(0|p)&m>>>0<=he>>>0|f>>>0>p>>>0))break}}}if(!(l[o+121329|0]>=r>>>0)){for(;(0|(o=e[a+4>>2]))==e[a+104>>2]?o=bA(a):(e[a+4>>2]=o+1,o=l[0|o]),l[o+121329|0]<r>>>0;);e[56798]=68,Z=0,m=-1,p=-1}}(0|(r=e[a+116>>2]))>0|(0|r)>=0&&(e[a+4>>2]=e[a+4>>2]-1),m=(r=m^Z)-Z|0,p=((o=Z>>31)^p)-((r>>>0<Z>>>0)+o|0)|0}else e[56798]=28;if(J=Ve+16|0,r=e[a+4>>2]-e[a+44>>2]|0,e[a+120>>2]==(0-r|0)&e[a+124>>2]==(0-((r>>31)+!!(0|r)|0)|0))break c;if(!(!w|(0|Be)!=112)){e[w>>2]=m;break n}v0(w,Qe,m,p);break n}if(!w)break n;o=e[s+16>>2],r=e[s+20>>2],c=e[s+8>>2],E=e[s+12>>2];C:switch(0|Qe){case 0:J=p=J-32|0;m:if(0|(f=(m=2147483647&r)-1065418752|0)>>>0<(ee=m-1082064896|0)>>>0){if(m=(33554431&r)<<7|o>>>25,ee=f=0,!(!f&(0|(o&=33554431))==16777216?!(c|E):!f&o>>>0<16777216)){f=m+1073741825|0;break m}if(f=m+1073741824|0,16777216^o|c|E|ee)break m;f=(1&m)+f|0}else(!o&(0|m)==2147418112?!(c|E):m>>>0<2147418112)?(f=2139095040,m>>>0>1082064895||(f=0,(m=m>>>16|0)>>>0<16145||(Aa(p+16|0,c,E,o,f=65535&r|65536,m-16129|0),Ha(p,c,E,o,f,16257-m|0),o=e[p+8>>2],f=(33554431&e[p+12>>2])<<7|o>>>25,m=e[p>>2]|!!(e[p+16>>2]|e[p+24>>2]|e[p+20>>2]|e[p+28>>2]),E=e[p+4>>2],(!(c=0)&(0|(o&=33554431))==16777216?!(m|E):!c&o>>>0<16777216)?16777216^o|m|c|E||(f=(1&f)+f|0):f=f+1|0))):f=4194303&((33554431&r)<<7|o>>>25)|2143289344;J=p+32|0,e[w>>2]=-2147483648&r|f;break n;case 1:D[w>>3]=Es(c,E,o,r);break n;case 2:break C;default:break n}e[w>>2]=c,e[w+4>>2]=E,e[w+8>>2]=o,e[w+12>>2]=r;break n}c=(Ve=(0|Be)!=99)?31:o+1|0;p:if((0|Qe)!=1){if(E){if(o=0,!(r=Ct(c)))break o;for(;;){for(A=r;;){if((0|(r=e[a+4>>2]))==e[a+104>>2]?r=bA(a):(e[a+4>>2]=r+1,r=l[0|r]),!l[33+(r+s|0)|0]){c=0,P=A;break p}if(g[A+o|0]=r,(0|c)==(0|(o=o+1|0)))break}if(f=1,!(r=Kr(A,c=c<<1|1)))break}P=A,A=0;break s}if(o=0,w)for(;;){if((0|(A=e[a+4>>2]))==e[a+104>>2]?A=bA(a):(e[a+4>>2]=A+1,A=l[0|A]),!l[33+(A+s|0)|0]){c=0,P=A=w;break p}g[o+w|0]=A,o=o+1|0}for(;(0|(A=e[a+4>>2]))==e[a+104>>2]?A=bA(a):(e[a+4>>2]=A+1,A=l[0|A]),l[33+(A+s|0)|0];);A=0,P=0,c=0}else{if(r=w,E&&!(r=Ct(c<<2)))break o;for(e[s+296>>2]=0,e[s+300>>2]=0,o=0;;){A=r;C:{for(;;){if((0|(r=e[a+4>>2]))==e[a+104>>2]?r=bA(a):(e[a+4>>2]=r+1,r=l[0|r]),!l[33+(r+s|0)|0])break C;g[s+27|0]=r,m=s+28|0,r=e[(f=(r=s+296|0)||228604)>>2];m:{b:{h:{E:{if(!(P=s+27|0)){if(r)break E;r=0;break m}if(!r){if((0|(p=(r=l[0|P])<<24>>24))>=0){m&&(e[m>>2]=r),r=!!(0|p);break m}if(!e[e[56841]>>2]){if(r=1,!m)break h;e[m>>2]=57343&p,r=1;break m}if((r=r-194|0)>>>0>50)break E;r=e[124752+(r<<2)>>2];break b}if(Z=1,!(((Qe=(p=l[0|P])>>>3|0)-16|(r>>26)+Qe)>>>0>7))for(;;){if(Z=Z-1|0,(0|(r=p-128|r<<6))>=0){e[f>>2]=0,m&&(e[m>>2]=r),r=1-Z|0;break m}if(!Z)break b;if((192&(p=l[0|(P=P+1|0)]))!=128)break}}e[f>>2]=0,e[56798]=25,r=-1}break m}e[f>>2]=r,r=-2}if((0|r)!=-2){if(P=0,(0|r)==-1)break i;if(A&&(e[(o<<2)+A>>2]=e[s+28>>2],o=o+1|0),!(!E|(0|o)!=(0|c)))break}}if(f=1,r=Kr(A,(c=c<<1|1)<<2))continue;break s}break}if(P=0,c=A,s+296|0&&e[s+296>>2])break i}if(r=e[a+4>>2],(0|(m=e[a+116>>2]))>0|(0|m)>=0&&(r=r-1|0,e[a+4>>2]=r),r=(m=r-e[a+44>>2]|0)+e[a+120>>2]|0,p=e[a+124>>2]+(m>>31)|0,!((p=r>>>0<m>>>0?p+1|0:p)|r)|!(Ve|(0|r)==(0|ee)&(0|p)==(0|he)))break u;E&&(e[w>>2]=A),(0|Be)!=99&&(c&&(e[(o<<2)+c>>2]=0),P?g[o+P|0]=0:P=0),A=c}o=r=e[a+4>>2]-e[a+44>>2]|0,f=ce+e[a+124>>2]|0,ce=(c=r>>31)+((r=Y+e[a+120>>2]|0)>>>0<Y>>>0?f+1|0:f)|0,ce=(Y=r+o|0)>>>0<r>>>0?ce+1|0:ce,rA=!!(0|w)+rA|0}if(o=t+1|0,t=l[t+1|0])continue;break e}break}A=c;break c}f=1,P=0,A=0;break s}f=E;break A}f=E}if(rA)break A}rA=-1}f&&(xt(P),xt(A))}return J=s+304|0,J=a+144|0,J=i+16|0,rA}function Ct(A){var t,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0;J=t=J-16|0;e:{A:{r:{s:{i:{c:{o:{u:{l:{if((A|=0)>>>0<=244){if(3&(r=(c=e[57152])>>>(a=(f=A>>>0<11?16:A+11&-8)>>>3|0)|0)){r=228648+(A=(a=a+(1&~r)|0)<<3)|0,s=e[A+228656>>2],(0|r)!=(0|(A=e[s+8>>2]))?(e[A+12>>2]=r,e[r+8>>2]=A):e[57152]=sa(-2,a)&c,A=s+8|0,r=a<<3,e[s+4>>2]=3|r,e[4+(r=r+s|0)>>2]=1|e[r+4>>2];break e}if((w=e[57154])>>>0>=f>>>0)break l;if(r){r=228648+(A=(s=Gi(0-(A=(0-(A=2<<a)|A)&r<<a)&A))<<3)|0,i=e[A+228656>>2],(0|r)!=(0|(A=e[i+8>>2]))?(e[A+12>>2]=r,e[r+8>>2]=A):(c=sa(-2,s)&c,e[57152]=c),e[i+4>>2]=3|f,s=(A=s<<3)-f|0,e[4+(a=i+f|0)>>2]=1|s,e[A+i>>2]=s,w&&(r=228648+(-8&w)|0,o=e[57157],(A=1<<(w>>>3))&c?A=e[r+8>>2]:(e[57152]=A|c,A=r),e[r+8>>2]=o,e[A+12>>2]=o,e[o+12>>2]=r,e[o+8>>2]=A),A=i+8|0,e[57157]=a,e[57154]=s;break e}if(!(p=e[57153]))break l;for(a=e[228912+(Gi(0-p&p)<<2)>>2],o=(-8&e[a+4>>2])-f|0,r=a;(A=e[r+16>>2])||(A=e[r+20>>2]);)o=(s=(r=(-8&e[A+4>>2])-f|0)>>>0<o>>>0)?r:o,a=s?A:a,r=A;if(m=e[a+24>>2],(0|(s=e[a+12>>2]))!=(0|a)){A=e[a+8>>2],e[A+12>>2]=s,e[s+8>>2]=A;break A}if(!(A=e[(r=a+20|0)>>2])){if(!(A=e[a+16>>2]))break u;r=a+16|0}for(;i=r,s=A,(A=e[(r=A+20|0)>>2])||(r=s+16|0,A=e[s+16>>2]););e[i>>2]=0;break A}if(f=-1,!(A>>>0>4294967231)&&(f=-8&(A=A+11|0),p=e[57153])){o=0-f|0,c=0,f>>>0<256||(c=31,f>>>0>16777215||(c=62+((f>>>38-(A=Ye(A>>>8|0))&1)-(A<<1)|0)|0));n:{p:{if(r=e[228912+(c<<2)>>2])for(A=0,a=f<<((0|c)!=31?25-(c>>>1|0):0);;){if(!((i=(-8&e[r+4>>2])-f|0)>>>0>=o>>>0||(s=r,o=i,i))){o=0,A=r;break p}if(i=e[r+20>>2],r=e[16+((a>>>29&4)+r|0)>>2],A=i?(0|i)==(0|r)?A:i:A,a<<=1,!r)break}else A=0;if(!(A|s)){if(s=0,!(A=(0-(A=2<<c)|A)&p))break l;A=e[228912+(Gi(A&0-A)<<2)>>2]}if(!A)break n}for(;o=(a=(r=(-8&e[A+4>>2])-f|0)>>>0<o>>>0)?r:o,s=a?A:s,A=(r=e[A+16>>2])||e[A+20>>2];);}if(!(!s|e[57154]-f>>>0<=o>>>0)){if(c=e[s+24>>2],(0|s)!=(0|(a=e[s+12>>2]))){A=e[s+8>>2],e[A+12>>2]=a,e[a+8>>2]=A;break r}if(!(A=e[(r=s+20|0)>>2])){if(!(A=e[s+16>>2]))break o;r=s+16|0}for(;i=r,a=A,(A=e[(r=A+20|0)>>2])||(r=a+16|0,A=e[a+16>>2]););e[i>>2]=0;break r}}}if((A=e[57154])>>>0>=f>>>0){s=e[57157],(r=A-f|0)>>>0>=16?(e[4+(a=s+f|0)>>2]=1|r,e[A+s>>2]=r,e[s+4>>2]=3|f):(e[s+4>>2]=3|A,e[4+(A=A+s|0)>>2]=1|e[A+4>>2],a=0,r=0),e[57154]=r,e[57157]=a,A=s+8|0;break e}if((m=e[57155])>>>0>f>>>0){r=m-f|0,e[57155]=r,A=(a=e[57158])+f|0,e[57158]=A,e[A+4>>2]=1|r,e[a+4>>2]=3|f,A=a+8|0;break e}if(A=0,p=f+47|0,e[57270]?a=e[57272]:(e[57273]=-1,e[57274]=-1,e[57271]=4096,e[57272]=4096,e[57270]=t+12&-16^1431655768,e[57275]=0,e[57263]=0,a=4096),(r=(i=p+a|0)&(o=0-a|0))>>>0<=f>>>0||(s=e[57262])&&s>>>0<(c=(a=e[57260])+r|0)>>>0|a>>>0>=c>>>0)break e;l:{if(!(4&l[229052])){n:{p:{C:{m:{if(s=e[57158])for(A=229056;;){if((a=e[A>>2])>>>0<=s>>>0&s>>>0<a+e[A+4>>2]>>>0)break m;if(!(A=e[A+8>>2]))break}if((0|(a=oi(0)))==-1||(c=r,(A=(s=e[57271])-1|0)&a&&(c=(r-a|0)+(A+a&0-s)|0),c>>>0<=f>>>0)||(s=e[57262])&&s>>>0<(o=(A=e[57260])+c|0)>>>0|A>>>0>=o>>>0)break n;if((0|a)!=(0|(A=oi(c))))break C;break l}if((0|(a=oi(c=o&i-m)))==(e[A>>2]+e[A+4>>2]|0))break p;A=a}if((0|A)==-1)break n;if(f+48>>>0<=c>>>0){a=A;break l}if((0|oi(a=(a=e[57272])+(p-c|0)&0-a))==-1)break n;c=a+c|0,a=A;break l}if((0|a)!=-1)break l}e[57263]=4|e[57263]}if((0|(a=oi(r)))==-1|(0|(A=oi(0)))==-1|A>>>0<=a>>>0||(c=A-a|0)>>>0<=f+40>>>0)break s}A=e[57260]+c|0,e[57260]=A,A>>>0>ue[57261]&&(e[57261]=A);l:{if(i=e[57158]){for(A=229056;;){if(((s=e[A>>2])+(r=e[A+4>>2])|0)==(0|a))break l;if(!(A=e[A+8>>2]))break}break c}for((A=e[57156])>>>0<=a>>>0&&A||(e[57156]=a),A=0,e[57265]=c,e[57264]=a,e[57160]=-1,e[57161]=e[57270],e[57267]=0;r=228648+(s=A<<3)|0,e[s+228656>>2]=r,e[s+228660>>2]=r,(0|(A=A+1|0))!=32;);r=(s=c-40|0)-(A=a+8&7?-8-a&7:0)|0,e[57155]=r,A=A+a|0,e[57158]=A,e[A+4>>2]=1|r,e[4+(a+s|0)>>2]=40,e[57159]=e[57274];break i}if(8&l[A+12|0]|s>>>0>i>>>0|a>>>0<=i>>>0)break c;e[A+4>>2]=r+c,a=(A=i+8&7?-8-i&7:0)+i|0,e[57158]=a,A=(r=e[57155]+c|0)-A|0,e[57155]=A,e[a+4>>2]=1|A,e[4+(r+i|0)>>2]=40,e[57159]=e[57274];break i}s=0;break A}a=0;break r}ue[57156]>a>>>0&&(e[57156]=a),r=a+c|0,A=229056;c:{o:{u:{l:{n:{p:{for(;;){if((0|r)!=e[A>>2]){if(A=e[A+8>>2])continue;break p}break}if(!(8&l[A+12|0]))break n}for(A=229056;;){if((r=e[A>>2])>>>0<=i>>>0&&(o=r+e[A+4>>2]|0)>>>0>i>>>0)break l;A=e[A+8>>2]}}if(e[A>>2]=a,e[A+4>>2]=e[A+4>>2]+c,e[4+(p=(a+8&7?-8-a&7:0)+a|0)>>2]=3|f,A=(c=r+(r+8&7?-8-r&7:0)|0)-(m=f+p|0)|0,(0|i)==(0|c)){e[57158]=m,A=e[57155]+A|0,e[57155]=A,e[m+4>>2]=1|A;break o}if(e[57157]==(0|c)){e[57157]=m,A=e[57154]+A|0,e[57154]=A,e[m+4>>2]=1|A,e[A+m>>2]=A;break o}if((3&(o=e[c+4>>2]))==1){i=-8&o;n:if(o>>>0<=255){if(s=e[c+8>>2],r=o>>>3|0,(0|(a=e[c+12>>2]))==(0|s)){e[57152]=e[57152]&sa(-2,r);break n}e[s+12>>2]=a,e[a+8>>2]=s}else{if(f=e[c+24>>2],(0|c)==(0|(a=e[c+12>>2])))if((r=e[(o=c+20|0)>>2])||(r=e[(o=c+16|0)>>2])){for(;s=o,(r=e[(o=(a=r)+20|0)>>2])||(o=a+16|0,r=e[a+16>>2]););e[s>>2]=0}else a=0;else r=e[c+8>>2],e[r+12>>2]=a,e[a+8>>2]=r;if(f){s=e[c+28>>2];p:{if(e[(r=228912+(s<<2)|0)>>2]==(0|c)){if(e[r>>2]=a,a)break p;e[57153]=e[57153]&sa(-2,s);break n}if(e[f+(e[f+16>>2]==(0|c)?16:20)>>2]=a,!a)break n}e[a+24>>2]=f,(r=e[c+16>>2])&&(e[a+16>>2]=r,e[r+24>>2]=a),(r=e[c+20>>2])&&(e[a+20>>2]=r,e[r+24>>2]=a)}}o=e[4+(c=i+c|0)>>2],A=A+i|0}if(e[c+4>>2]=-2&o,e[m+4>>2]=1|A,e[A+m>>2]=A,A>>>0<=255){r=228648+(-8&A)|0,(a=e[57152])&(A=1<<(A>>>3))?A=e[r+8>>2]:(e[57152]=A|a,A=r),e[r+8>>2]=m,e[A+12>>2]=m,e[m+12>>2]=r,e[m+8>>2]=A;break o}if(o=31,A>>>0<=16777215&&(o=62+((A>>>38-(r=Ye(A>>>8|0))&1)-(r<<1)|0)|0),e[m+28>>2]=o,e[m+16>>2]=0,e[m+20>>2]=0,r=228912+(o<<2)|0,(s=e[57153])&(a=1<<o)){for(o=A<<((0|o)!=31?25-(o>>>1|0):0),a=e[r>>2];;){if(r=a,(-8&e[a+4>>2])==(0|A))break u;if(a=o>>>29|0,o<<=1,!(a=e[16+(s=(4&a)+r|0)>>2]))break}e[s+16>>2]=m}else e[57153]=a|s,e[r>>2]=m;e[m+24>>2]=r,e[m+12>>2]=m,e[m+8>>2]=m;break o}for(r=(s=c-40|0)-(A=a+8&7?-8-a&7:0)|0,e[57155]=r,A=A+a|0,e[57158]=A,e[A+4>>2]=1|r,e[4+(a+s|0)>>2]=40,e[57159]=e[57274],e[(s=(A=(o+(o-39&7?39-o&7:0)|0)-47|0)>>>0<i+16>>>0?i:A)+4>>2]=27,A=e[57267],e[s+16>>2]=e[57266],e[s+20>>2]=A,A=e[57265],e[s+8>>2]=e[57264],e[s+12>>2]=A,e[57266]=s+8,e[57265]=c,e[57264]=a,e[57267]=0,A=s+24|0;e[A+4>>2]=7,r=A+8|0,A=A+4|0,r>>>0<o>>>0;);if((0|s)==(0|i))break i;if(e[s+4>>2]=-2&e[s+4>>2],o=s-i|0,e[i+4>>2]=1|o,e[s>>2]=o,o>>>0<=255){r=228648+(-8&o)|0,(a=e[57152])&(A=1<<(o>>>3))?A=e[r+8>>2]:(e[57152]=A|a,A=r),e[r+8>>2]=i,e[A+12>>2]=i,e[i+12>>2]=r,e[i+8>>2]=A;break i}if(A=31,o>>>0<=16777215&&(A=62+((o>>>38-(A=Ye(o>>>8|0))&1)-(A<<1)|0)|0),e[i+28>>2]=A,e[i+16>>2]=0,e[i+20>>2]=0,r=228912+(A<<2)|0,(s=e[57153])&(a=1<<A)){for(A=o<<((0|A)!=31?25-(A>>>1|0):0),s=e[r>>2];;){if((0|o)==(-8&e[(r=s)+4>>2]))break c;if(a=A>>>29|0,A<<=1,!(s=e[16+(a=(4&a)+r|0)>>2]))break}e[a+16>>2]=i}else e[57153]=a|s,e[r>>2]=i;e[i+24>>2]=r,e[i+12>>2]=i,e[i+8>>2]=i;break i}A=e[r+8>>2],e[A+12>>2]=m,e[r+8>>2]=m,e[m+24>>2]=0,e[m+12>>2]=r,e[m+8>>2]=A}A=p+8|0;break e}A=e[r+8>>2],e[A+12>>2]=i,e[r+8>>2]=i,e[i+24>>2]=0,e[i+12>>2]=r,e[i+8>>2]=A}if(!((A=e[57155])>>>0<=f>>>0)){r=A-f|0,e[57155]=r,A=(a=e[57158])+f|0,e[57158]=A,e[A+4>>2]=1|r,e[a+4>>2]=3|f,A=a+8|0;break e}}e[56798]=48,A=0;break e}r:if(c){r=e[s+28>>2];s:{if(e[(A=228912+(r<<2)|0)>>2]==(0|s)){if(e[A>>2]=a,a)break s;p=sa(-2,r)&p,e[57153]=p;break r}if(e[c+(e[c+16>>2]==(0|s)?16:20)>>2]=a,!a)break r}e[a+24>>2]=c,(A=e[s+16>>2])&&(e[a+16>>2]=A,e[A+24>>2]=a),(A=e[s+20>>2])&&(e[a+20>>2]=A,e[A+24>>2]=a)}r:if(o>>>0<=15)A=o+f|0,e[s+4>>2]=3|A,e[4+(A=A+s|0)>>2]=1|e[A+4>>2];else if(e[s+4>>2]=3|f,e[4+(i=s+f|0)>>2]=1|o,e[i+o>>2]=o,o>>>0<=255)r=228648+(-8&o)|0,(a=e[57152])&(A=1<<(o>>>3))?A=e[r+8>>2]:(e[57152]=A|a,A=r),e[r+8>>2]=i,e[A+12>>2]=i,e[i+12>>2]=r,e[i+8>>2]=A;else{A=31,o>>>0<=16777215&&(A=62+((o>>>38-(A=Ye(o>>>8|0))&1)-(A<<1)|0)|0),e[i+28>>2]=A,e[i+16>>2]=0,e[i+20>>2]=0,r=228912+(A<<2)|0;s:{if((a=1<<A)&p){for(A=o<<((0|A)!=31?25-(A>>>1|0):0),f=e[r>>2];;){if((-8&e[(r=f)+4>>2])==(0|o))break s;if(a=A>>>29|0,A<<=1,!(f=e[16+(a=(4&a)+r|0)>>2]))break}e[a+16>>2]=i}else e[57153]=a|p,e[r>>2]=i;e[i+24>>2]=r,e[i+12>>2]=i,e[i+8>>2]=i;break r}A=e[r+8>>2],e[A+12>>2]=i,e[r+8>>2]=i,e[i+24>>2]=0,e[i+12>>2]=r,e[i+8>>2]=A}A=s+8|0;break e}A:if(m){r=e[a+28>>2];r:{if(e[(A=228912+(r<<2)|0)>>2]==(0|a)){if(e[A>>2]=s,s)break r;e[57153]=sa(-2,r)&p;break A}if(e[m+(e[m+16>>2]==(0|a)?16:20)>>2]=s,!s)break A}e[s+24>>2]=m,(A=e[a+16>>2])&&(e[s+16>>2]=A,e[A+24>>2]=s),(A=e[a+20>>2])&&(e[s+20>>2]=A,e[A+24>>2]=s)}o>>>0<=15?(A=o+f|0,e[a+4>>2]=3|A,e[4+(A=A+a|0)>>2]=1|e[A+4>>2]):(e[a+4>>2]=3|f,e[4+(s=a+f|0)>>2]=1|o,e[s+o>>2]=o,w&&(r=228648+(-8&w)|0,i=e[57157],(A=1<<(w>>>3))&c?A=e[r+8>>2]:(e[57152]=A|c,A=r),e[r+8>>2]=i,e[A+12>>2]=i,e[i+12>>2]=r,e[i+8>>2]=A),e[57157]=s,e[57154]=o),A=a+8|0}return J=t+16|0,0|A}function $t(A,t,r,a,s){var i,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0;J=i=J-544|0,jA(i+320|0,0,100),jA(i+208|0,0,100),m=r?e[r>>2]:m,Y=e[A+12>>2],p=e[36115];e:{A:{r:{s:{for(;;){if(o=(0|(o=l[t+c|0]))>=(0|p)?13:o,g[i+c|0]=o,!o){o=c;break s}if(f=(0|p)<=(0|(f=l[(o=1|c)+t|0]))?13:f,g[o+i|0]=f,!f)break s;if((0|(c=c+2|0))==200)break}c=198,ee=l[i+199|0];break r}if(!o)break A;ee=l[i+(c=o-1|0)|0],(0|o)!=1&&(c=o-2|0)}if(Qe=8&m,e[i+536>>2]=(Qe>>>3|0?3:7)&m,m=l[i+c|0],p=1,E=(0|(w=bi(A,i,i+432|0,i+540|0,i+536|0,1)))>=0?w:0,he=l[0|i])for(c=i,o=he;o=e[144464+((255&o)<<2)>>2],l[o+11|0]==2&&(1048576&(o=e[o+4>>2])||(f=(2097152&o)>>>21|0,f|=o=l[e[144464+(l[0|(P=c+1|0)]<<2)>>2]+10|0]==12,g[(i+208|0)+p|0]=f,Z=e[144464+(l[(o?2:1)+c|0]<<2)>>2],f=l[Z+11|0]-10>>>0<4294967289|!(32&l[Z+6|0])&l[e[144464+(l[(o?3:2)+c|0]<<2)>>2]+11|0]==2?f:f?2:1,c=o?P:c,g[(i+320|0)+p|0]=f,p=p+1|0)),o=l[0|(c=c+1|0)];);c=r=r?E:w;r:{s:{i:{c:{o:{u:{l:{n:{p:{C:{m:{b:switch(e[A+8>>2]-1|0){case 11:if((0|(r=e[i+540>>2]))<2)break p;if(c=1,E=1&(o=r-1|0),(0|r)!=2)break m;p=0;break C;case 8:if((0|(o=e[i+540>>2]))<2)break s;if(p=3&(f=o-1|0),c=1,o-2>>>0>=3)for(E=-4&f,f=0;m=g[0|(o=(i+432|0)+c|0)],g[0|o]=(0|m)<0?4:m,m=g[o+1|0],g[o+1|0]=(0|m)<0?4:m,m=g[o+2|0],g[o+2|0]=(0|m)<0?4:m,m=o,o=g[o+3|0],g[m+3|0]=(0|o)<0?4:o,c=c+4|0,(0|E)!=(0|(f=f+4|0)););if(!p)break s;for(o=0;f=g[0|(m=(i+432|0)+c|0)],g[0|m]=(0|f)<0?4:f,c=c+1|0,(0|p)!=(0|(o=o+1|0)););break s;case 7:if(!l[i+322|0]|g[i+321|0]>0)break s;case 0:if(e[i+536>>2]|e[i+540>>2]<3)break s;if(e[i+536>>2]=2,c=4,r)break r;g[i+434|0]=4;break r;case 1:if(e[i+536>>2])break r;h:{E:{if((0|(p=e[i+540>>2]))>=3){r=p-2|0,e[i+536>>2]=r,c=r;w:if(512&Y&&(o=e[144464+(ee<<2)>>2],(0|(f=l[o+11|0]))!=2)){c=e[o>>2],o=i;y:{L:{if((0|(E=e[A+212>>2]))!=26977){if((0|E)!=24942)break L;switch(c-110|0){case 0:case 5:if(c=r,l[e[144464+(m<<2)>>2]+11|0]==2)break w}c=p-1|0;break y}if((0|c)==115&&(c=r,l[e[144464+(m<<2)>>2]+11|0]==2))break w;c=p-1|0;break y}L:{V:{if((0|c)==115){if(c=r,(0|(f=l[e[144464+(m<<2)>>2]+11|0]))!=8)break V;break w}if((0|f)!=8)break L;f=l[e[144464+(m<<2)>>2]+11|0]}if(c=r,(255&f)==2)break w}c=p-1|0}e[o+536>>2]=c}if(524288&Y&&(g[(o=p-1|0)+(p=i+208|0)|0]<=g[r+p|0]||(e[i+536>>2]=o,c=o)),l[(i+432|0)+c|0]>1){o=c;break h}if(o=2,r=c-1|0,c>>>0>=2)break E;e[i+536>>2]=c+1;break h}r=1}o=r,e[i+536>>2]=o}if(c=4,g[0|(r=(i+432|0)+o|0)]>=0||g[(o=(i+432|0)+o|0)-1|0]>=4&g[o+1|0]>3)break r;g[0|r]=4;break r;case 2:if(e[i+536>>2])break r;for(r=(c=e[i+540>>2])-1|0,r&=r>>31;;){if((0|(c=c-1|0))<=0)break i;if(!(g[0|(o=(i+432|0)+c|0)]>=0))break}e[i+536>>2]=c,c=4,g[0|o]=4;break r;case 3:if(e[i+536>>2])break s;if(o=(0|(c=e[i+540>>2]-3|0))<=1?1:c,e[i+536>>2]=o,c=4,r)break r;g[o+(i+432|0)|0]=4;break r;case 4:if(e[i+536>>2])break r;if(o=(r=e[i+540>>2])-3|0,e[i+536>>2]=o,(0|r)<=15){h:{switch(l[e[144464+(ee<<2)>>2]+11|0]-2|0){case 0:o=g[r+94176|0];break h;case 2:o=g[r+94192|0];break h}o=g[r+94160|0]}e[i+536>>2]=o}c=4,g[(i+432|0)+o|0]=4;break r;case 5:if(e[i+536>>2])break r;if(p=-1,f=0,!((0|(r=(o=e[i+540>>2])-1|0))<2)){if(c=1,P=1&o,(0|o)!=3)for(Z=(-2&o)-4|0,o=0;g[(i+432|0)+c|0]<0&&(f=(m=(0|(E=g[(i+320|0)+c|0]))<(0|p))?f:c,p=m?p:E),g[(m=c+1|0)+(i+432|0)|0]<0&&(f=(E=(0|(Be=g[m+(i+320|0)|0]))<(0|p))?f:m,p=E?p:Be),c=c+2|0,m=(0|o)!=(0|Z),o=o+2|0,m;);!P|g[(i+432|0)+c|0]>=0||(p=(o=(0|(m=g[(i+320|0)+c|0]))<(0|p))?p:m,f=o?f:c)}e[i+536>>2]=f,l[r+(i+320|0)|0]!=2|(0|p)>1?(0|p)>0||(f=1,e[i+536>>2]=1):(e[i+536>>2]=r,f=r),c=4,g[(i+432|0)+f|0]=4;break r;case 14:break c;case 12:break o;case 6:break b;default:break r}if(e[i+536>>2])break r;p=(r=e[i+540>>2])-1|0,e[i+536>>2]=p;b:if(!((0|r)<2))for(c=1;;){if(l[(i+432|0)+c|0]==1){p=c-1|0,e[i+536>>2]=p;break b}if((0|r)==(0|(c=c+1|0)))break}c=4,g[(i+432|0)+p|0]=4;break r}for(P=-2&o,p=0,f=0;o=l[0|(Z=(m=i+432|0)+c|0)],ce=Z,Be=g[(Z=i+208|0)+c|0]>0,g[0|ce]=Be||(0|o)==4?3:o,Ve=(0|(m=l[0|(ce=(o=c+1|0)+m|0)]))==4?3:m,m=g[o+Z|0]>0,g[0|ce]=m?3:Ve,p=m?o:Be?c:p,c=c+2|0,(0|P)!=(0|(f=f+2|0)););}if(E&&(m=(0|(o=l[0|(f=(i+432|0)+c|0)]))==4?3:o,o=g[(i+208|0)+c|0]>0,g[0|f]=o?3:m,p=o?c:p),o=e[i+536>>2])break u;if((0|p)>0){e[i+536>>2]=p,o=p;break u}if((0|r)<6)break n;o=r-3|0;break l}if(o=e[i+536>>2])break u}o=r-1|0}e[i+536>>2]=o}c=4,g[(i+432|0)+o|0]=4;break r}if(e[i+536>>2])break r;o=1,e[i+536>>2]=1,l[i+209|0]|e[i+540>>2]<3|g[i+210|0]<=0||(o=2,e[i+536>>2]=2),c=4,g[i+432|o]=4;break r}if(e[i+536>>2]||(0|(o=e[i+540>>2]))<3)break s;if(jA(i+432|1,0,o-1|0),e[i+536>>2]=2,r||(g[i+434|0]=4),c=4,o>>>0<4)break r;g[431+(o+i|0)|0]=3;break r}e[i+536>>2]=r,c=4;break r}c=r}!(256&Y)|2&s||(0|(r=e[i+540>>2]))<3|(0|w)>2||l[0|(o=(r=r+(i+432|0)|0)-1|0)]!=4|l[e[144464+(ee<<2)>>2]+11|0]!=2||(g[0|o]=1,g[r-2|0]=4);r:{s:{if(Qe)w=e[i+540>>2];else{if(r=g[i+433|0],!(!(4096&Y)|(0|(w=e[i+540>>2]))!=3)){if((0|r)==4){g[i+434|0]=3;break s}if(l[i+434|0]==4){g[i+433|0]=3;break s}}if(!(!(8192&Y)|(0|r)>=0|(0|w)<4|g[i+434|0]<4)){g[i+433|0]=3;break s}}if(f=0,(0|w)<2)break r}for(p=(0|c)<4?4:3,Z=128&Y,Be=64&Y,ce=32&Y,E=w-1|0,Ve=16&Y,Ke=!(32768&Y),ee=0,m=0,c=1;;){s:{i:if((0|(o=g[0|(P=(i+432|0)+c|0)]))>=0)f=p;else{f=3;c:{o:if(!(!(!Ve|(0|p)>3)&(0|c)==(0|E))){if(!(1&(ee|Ke)))break c;if(!(g[431+(i+c|0)|0]>1)){if((0|(o=g[(r=c+1|0)+(i+432|0)|0]))>=2){if((0|p)!=4||(f=4,o>>>0>=3))break o}else if(!(!ce|(0|p)!=3)){p=3;break s}if(!Be|c>>>0<2||(f=l[(i+320|0)+c|0]))break c;if((0|E)>(0|(o=c))){for(;;){if(g[(i+320|0)+o|0]>0)break s;if((0|E)==(0|(o=o+1|0)))break}if(f)break c}if(g[r+(i+320|0)|0]<=0)break c;break s}f=p}o=l[0|P];break i}g[0|P]=p,ee=1,f=3,o=p}i:{if(o<<24>>24>=4){if(r=m||c,!m|!Z)break i;g[0|P]=3}p=f;break s}p=f,m=r}if(f=1,(0|w)==(0|(c=c+1|0)))break}}if(a=!Qe|(0|a)>=0?a:e[((0|w)<3?16:20)+A>>2],p=0,o=0,f){if(ee=3&(r=w-1|0),f=0,w-2>>>0<3)c=1;else for(Qe=-4&r,c=1,m=0;o=(r=(0|(o=(P=(0|(o=(E=(0|(o=(w=(0|(E=g[(r=i+432|0)+c|0]))<(0|o))?o:E))>(0|(P=g[(Z=c+1|0)+r|0])))?o:P))>(0|(ce=g[(Be=c+2|0)+r|0])))?o:ce))>(0|(Ve=g[(ce=c+3|0)+r|0])))?o:Ve,p=r?P?E?w?p:c:Z:Be:ce,c=c+4|0,(0|Qe)!=(0|(m=m+4|0)););if(ee)for(;o=(r=(0|(m=g[(i+432|0)+c|0]))<(0|o))?o:m,p=r?p:c,c=c+1|0,(0|ee)!=(0|(f=f+1|0)););}if((0|a)<0?a=o:(0|a)<=(0|o)&(0|o)>4||(g[(i+432|0)+p|0]=a),ee=t+197|0,w=1,!(1&s)&&(r=e[144464+(he<<2)>>2])){if(o=i,!((0|(f=l[r+11|0]))!=1&(0|he)!=15))for(;r=l[0|(o=o+1|0)],(0|(f=l[e[144464+(r<<2)>>2]+11|0]))==1|(0|r)==15;);!(48&(r=e[A+4>>2]))|(0|f)!=2||(g[0|t]=(32&r)>>>5|0&&g[i+433|0]>3?11:23,t=t+1|0)}r:if(!(t>>>0>=ee>>>0))for(E=65536&Y,P=2&Y,Qe=4&Y,c=i;;){if(!(o=l[0|c]))break r;if(s=c,c=c+1|0,r=e[144464+(o<<2)>>2]){s:{i:{switch(l[r+11|0]){case 0:e[A+8200>>2]=0;break s;case 2:if(!(16&l[r+6|0]))break i}if(l[0|c]!=20)break s}if((0|(he=e[i+540>>2]))<(0|w))break e;m=g[0|(Y=(i+432|0)+w|0)],e[A+8200>>2]=m;i:{c:{if(!((0|(r=m))>1)){if(f=he-1|0,!(!Qe|(0|w)<2|(0|a)<2)&&(r=0,(0|f)==(0|w)))break c;if(r=1,!((0|w)==1|P|(he-2|0)==(0|w)&g[f+(i+432|0)|0]<2|(0|f)==(0|w)||g[431+(i+w|0)|0]>=0&&(r=m,E))){r=0,g[0|Y]=0;break c}}if(r&&(0|r)<2)break i}g[0|t]=l[r+94151|0],t=t+1|0,m=g[0|Y]}f=(0|a)>(0|m),l[0|c]==12&&1&(he=e[A+28>>2])&&(c=(16&he?(0|p)!=(0|w):(0|r)<4)?s+2|0:c),a=f?a:m,w=w+1|0}if((0|o)!=1&&(g[0|t]=o,t=t+1|0),!(t>>>0<ee>>>0))break}}g[0|t]=0}return void(J=i+544|0)}Pe(86136,86634,1353,94208),xe()}function Qr(A,t,r,a,s,i,o,c,f){var m,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0,et=0,at=0,dt=0,St=0,Zt=0,er=0,pr=0,hr=0,yr=0,Er=0,Sr=0,Wr=0,na=0;J=m=J-336|0,P=c,Z=65535&f,Y=a,E=65535&s,Qe=-2147483648&(s^f);e:{if(!((he=f>>>16&32767)-32767>>>0>4294934529&(ee=s>>>16&32767)-32767>>>0>=4294934530)){if(!(!a&(0|(p=2147483647&s))==2147418112?!(t|r):p>>>0<2147418112)){ce=a,Qe=32768|s;break e}if(!(!c&(0|(s=2147483647&f))==2147418112?!(i|o):s>>>0<2147418112)){ce=c,Qe=32768|f,t=i,r=o;break e}if(!(t|a|2147418112^p|r)){if(!(i|c|2147418112^s|o)){t=0,r=0,Qe=2147450880;break e}Qe|=2147418112,t=0,r=0;break e}if(!(i|c|2147418112^s|o)){t=0,r=0;break e}if(!(t|a|r|p)){ce=(t=!(i|c|s|o))?0:ce,Qe=t?2147450880:Qe,t=0,r=0;break e}if(!(i|c|s|o)){Qe|=2147418112,t=0,r=0;break e}(0|p)==65535|p>>>0<65535&&(f=a=!(E|Y),p=a?t:Y,c=a<<=6,Aa(m+320|0,t,r,Y,E,(a=a+((0|(f=Ye(f?r:E)))==32?Ye(p)+32|0:f)|0)-15|0),Ve=16-a|0,Y=e[m+328>>2],E=e[m+332>>2],r=e[m+324>>2],t=e[m+320>>2]),s>>>0>65535||(c=a=!(P|Z),f=a?i:P,s=a<<=6,Aa(m+304|0,i,o,P,Z,(a=a+((0|(c=Ye(c?o:Z)))==32?Ye(f)+32|0:c)|0)-15|0),Ve=(a+Ve|0)-16|0,P=e[m+312>>2],Z=e[m+316>>2],i=e[m+304>>2],o=e[m+308>>2])}if(zA=s=65536|Z,et=P,p=s<<15|(a=P)>>>17,Zr(m+288|0,a=s=a<<15|o>>>17,c=p,0,0,f=0-a|0,p=1963258675-(p+!!(0|a)|0)|0,0,0),Zr(m+272|0,0-(a=e[m+296>>2])|0,0-(e[m+300>>2]+!!(0|a)|0)|0,0,0,f,p,0,0),Zr(m+256|0,f=(a=e[m+280>>2])<<1|e[m+276>>2]>>>31,a=e[m+284>>2]<<1|a>>>31,0,0,s,c,0,0),Zr(m+240|0,f,a,0,0,0-(p=e[m+264>>2])|0,0-(e[m+268>>2]+!!(0|p)|0)|0,0,0),Zr(m+224|0,p=(f=e[m+248>>2])<<1|e[m+244>>2]>>>31,a=e[m+252>>2]<<1|f>>>31,0,0,s,c,0,0),Zr(m+208|0,p,a,0,0,0-(f=e[m+232>>2])|0,0-(e[m+236>>2]+!!(0|f)|0)|0,0,0),Zr(m+192|0,f=(a=e[m+216>>2])<<1|e[m+212>>2]>>>31,a=e[m+220>>2]<<1|a>>>31,0,0,s,c,0,0),Zr(m+176|0,f,a,0,0,0-(p=e[m+200>>2])|0,0-(e[m+204>>2]+!!(0|p)|0)|0,0,0),Zr(m+160|0,f=s,a=c,0,0,c=(P=(s=e[m+184>>2])<<1|e[m+180>>2]>>>31)-1|0,s=(e[m+188>>2]<<1|s>>>31)-!P|0,0,0),Zr(m+144|0,i<<15,o<<15|i>>>17,0,0,a=c,s,0,0),Be=m+112|0,cA=e[m+168>>2],c=e[m+172>>2],w=(P=e[m+160>>2])+(f=e[m+152>>2])|0,p=(Z=e[m+164>>2])+e[m+156>>2]|0,f=p=f>>>0>w>>>0?p+1|0:p,p=(p=(0|Z)==(0|p)&w>>>0<P>>>0|p>>>0<Z>>>0)>>>0>(Z=p+cA|0)>>>0?c+1|0:c,Zr(Be,a,s,0,0,0-(c=(P=!f&w>>>0>1|!!(0|f))+Z|0)|0,0-(!!(0|c)+(p=P>>>0>c>>>0?p+1|0:p)|0)|0,0,0),Zr(m+128|0,1-w|0,0-((w>>>0>1)+f|0)|0,0,0,a,s,0,0),pr=(ee-he|0)+Ve|0,Be=s=e[m+116>>2],P=(a=e[m+112>>2])<<1,ee=p=s<<1|a>>>31,a=p,MA=c=e[m+140>>2],a=a+(p=c<<1|(s=e[m+136>>2])>>>31)|0,s=a=(c=(f=s<<1|e[m+132>>2]>>>31)+P|0)>>>0<f>>>0?a+1|0:a,rA=a=a-(c>>>0<13927)|0,cA=a,hr=p=65536|E,yr=Y,Sr=(a=Y)<<1,Wr=p=p<<1|a>>>31,dt=p,St=a=It(rA,w=0,p,0),Ke=p=$,Ve=t<<1,he=a=r<<1|t>>>31,Z=p=0,rA=(0|s)==(0|rA)&(f=c-13927|0)>>>0<c>>>0|s>>>0>rA>>>0,s=(0|s)==(0|ee)&c>>>0<P>>>0|s>>>0<ee>>>0,a=e[m+120>>2],p=c=e[m+124>>2]<<1|a>>>31,p=(a=(w=MA>>>31|0)+(a=a<<1|Be>>>31)|0)>>>0<w>>>0?p+1|0:p,w=(c=a)>>>0>(a=a+s|0)>>>0?p+1|0:p,w=(s=a)>>>0>(a=a+rA|0)>>>0?w+1|0:w,s=a-1|0,p=It(he,Z,rA=w-!a|0,ee=0),c=$+Ke|0,Be=(0|Ke)==(0|(c=(a=p+St|0)>>>0<p>>>0?c+1|0:c))&a>>>0<St>>>0|c>>>0<Ke>>>0,MA=s,s=It(s,p=0,at=(Er=r>>>31|0)|Y<<1,Ke=0),p=$+c|0,w=0,P=p=s>>>0>(Y=s+a|0)>>>0?p+1|0:p,w=(s=a=(0|p)==(0|c)&a>>>0>Y>>>0|c>>>0>p>>>0)>>>0>(a=a+Be|0)>>>0?1:w,s=It(dt,Z,rA,ee),p=$+w|0,Be=a=s+a|0,a=a>>>0<s>>>0?p+1|0:p,s=It(dt,Z,MA,Ke),E=$,c=s,s=It(at,Ke,rA,ee),p=$+E|0,s=p=s>>>0>(w=c+s|0)>>>0?p+1|0:p,a=a+(p=(0|E)==(0|p)&c>>>0>w>>>0|p>>>0<E>>>0)|0,Be=E=Be+s|0,E=a=E>>>0<s>>>0?a+1|0:a,p=w+P|0,s=p=(a=(s=0)+Y|0)>>>0<s>>>0?p+1|0:p,c=(0|p)==(0|P)&a>>>0<Y>>>0|p>>>0<P>>>0,p=E,w=c,Zt=c=c+Be|0,w=p=w>>>0>c>>>0?p+1|0:p,Be=a,E=a,Y=s,St=f,a=It(f,0,at,Ke),c=$,s=a,f=It(cA,ce,he,ce),p=$+c|0,f=(0|c)==(0|(p=(a=a+f|0)>>>0<f>>>0?p+1|0:p))&a>>>0<s>>>0|c>>>0>p>>>0,c=p,s=It(MA,Ke,er=-2&Ve,0),p=$+p|0,s=p=s>>>0>(P=s+a|0)>>>0?p+1|0:p,a=(0|p)==(0|c)&a>>>0>P>>>0|c>>>0>p>>>0,c=0,a=((f=a+f|0)>>>0<a>>>0?1:c)+Y|0,p=w,f=a=(E=f+E|0)>>>0<f>>>0?a+1|0:a,c=a=(0|a)==(0|Y)&E>>>0<Be>>>0|a>>>0<Y>>>0,na=a=a+Zt|0,Be=p=c>>>0>a>>>0?p+1|0:p,a=It(dt,Z,St,ce),Zt=$,dt=a,c=It(rA,ee,er,ce),p=$+Zt|0,Y=a=a+c|0,w=a+(Z=It(cA,ce,at,Ke))|0,a=(c=a>>>0<c>>>0?p+1|0:p)+$|0,a=w>>>0<Z>>>0?a+1|0:a,ee=w,Z=w+(p=It(he,ce,MA,Ke))|0,w=$+a|0,at=(0|a)==(0|(w=p>>>0>Z>>>0?w+1|0:w))&Z>>>0<ee>>>0|a>>>0>w>>>0,p=((a=(a=(a=(0|a)==(0|c)&Y>>>0>ee>>>0|a>>>0<c>>>0)+(p=(0|c)==(0|Zt)&Y>>>0<dt>>>0|c>>>0<Zt>>>0)|0)+at|0)|(MA=0))+f|0,Y=p=(c=w)>>>0>(ee=c+E|0)>>>0?p+1|0:p,a=(0|f)==(0|p)&E>>>0>ee>>>0|f>>>0>p>>>0,p=Be,c=a,MA=a=a+na|0,f=p=c>>>0>a>>>0?p+1|0:p,a=It(cA,ce,er,ce),cA=$,E=a,c=It(he,ce,St,ce),p=$+cA|0,c=(0|(p=(a=a+c|0)>>>0<c>>>0?p+1|0:p))==(0|cA)&a>>>0<E>>>0|p>>>0<cA>>>0,E=p,a=p+P|0,p=(c|(Be=0))+s|0,E=(0|s)==(0|(p=a>>>0<E>>>0?p+1|0:p))&a>>>0<P>>>0|s>>>0>p>>>0,w=(c=p)+(p=Z)|0,p=0,p=((s=a=(0|c)==(0|(w=(P=(Z=0)+a|0)>>>0<Z>>>0?w+1|0:w))&a>>>0>P>>>0|c>>>0>w>>>0)>>>0>(a=a+E|0)>>>0?1:p)+Y|0,w=f,s=p=(s=a)>>>0>(a=a+ee|0)>>>0?p+1|0:p,f=w=(f=c=(0|Y)==(0|p)&a>>>0<ee>>>0|p>>>0<Y>>>0)>>>0>(c=c+MA|0)>>>0?w+1|0:w,(0|w)==131071|w>>>0<131071?(yr=Sr|Er,hr=Ke|Wr,Zr(m+80|0,a,s,c,f,i,o,et,zA),Z=w=e[m+84>>2],p=t<<17,Y=(r=(P=0)-(E=e[m+88>>2])|0)-(w=!!(w|(t=e[m+80>>2])))|0,E=(p-(e[m+92>>2]+(E>>>0>P>>>0)|0)|0)-(r>>>0<w>>>0)|0,P=0-t|0,Z=0-(!!(0|t)+Z|0)|0,t=pr+16382|0):(Zr(m+96|0,a=(1&s)<<31|a>>>1,s=c<<31|s>>>1,c=(1&f)<<31|c>>>1,f=f>>>1|0,i,o,et,zA),he=Y=e[m+100>>2],Y=(P=0-(Ve=e[m+104>>2])|0)-(E=!!(Y|(w=e[m+96>>2])))|0,E=((t<<16)-(e[m+108>>2]+(Z>>>0<Ve>>>0)|0)|0)-(E>>>0>P>>>0)|0,P=0-w|0,Z=0-(!!(0|w)+he|0)|0,Ve=t,he=r,t=pr+16383|0),(0|t)>=32767)Qe|=2147418112,t=0,r=0;else{if((0|t)>0)w=E<<1|Y>>>31,Y=Y<<1|Z>>>31,E=w,Ve=c,he=65535&f|t<<16,w=Z<<1|P>>>31,f=P<<1;else{if((0|t)<=-113){t=0,r=0;break e}Ha(m- -64|0,a,s,c,f,1-t|0),Aa(m+48|0,Ve,he,yr,hr,t+112|0),Zr(m+32|0,i,o,et,zA,a=e[m+64>>2],s=e[m+68>>2],Ve=e[m+72>>2],he=e[m+76>>2]),t=e[m+40>>2],P=(r=e[m+56>>2])-(Y=t<<1|(w=e[m+36>>2])>>>31)|0,E=e[m+60>>2]-((e[m+44>>2]<<1|t>>>31)+(r>>>0<Y>>>0)|0)|0,p=(t=e[m+32>>2])<<1,Y=P-(t=(0|(c=w<<1|t>>>31))==(0|(f=e[m+52>>2]))&p>>>0>(r=e[m+48>>2])>>>0|c>>>0>f>>>0)|0,E=E-(t>>>0>P>>>0)|0,w=f-((r>>>0<p>>>0)+c|0)|0,f=r-p|0}t=f,Zr(m+16|0,i,o,et,zA,3,0,0,0),Zr(m,i,o,et,zA,5,0,0,0),c=w+(r=0)|0,c=f>>>0>(t=t+(p=1&a)|0)>>>0?c+1|0:c,f=t,o=(0|o)==(0|c)&t>>>0>i>>>0|o>>>0<c>>>0,w=E,t=(0|r)==(0|c)&t>>>0<p>>>0|r>>>0>c>>>0,p=s,r=p=(r=t=(t=(0|(w=t>>>0>(i=t+Y|0)>>>0?w+1|0:w))==(0|zA))&(0|i)==(0|et)?o:t&i>>>0>et>>>0|w>>>0>zA>>>0)>>>0>(t=t+a|0)>>>0?p+1|0:p,a=(0|s)==(0|p)&t>>>0<a>>>0|s>>>0>p>>>0,p=he,p=(s=a)>>>0>(a=a+Ve|0)>>>0?p+1|0:p,o=a,E=(0|(s=e[m+20>>2]))==(0|c)&ue[m+16>>2]<f>>>0|s>>>0<c>>>0,s=e[m+28>>2],s=p>>>0<2147418112&((0|(a=e[m+24>>2]))==(0|i)&(0|s)==(0|w)?E:(0|s)==(0|w)&a>>>0<i>>>0|s>>>0<w>>>0),a=r,p=(r=t=(0|r)==(0|(a=(E=s)>>>0>(s=t+s|0)>>>0?a+1|0:a))&t>>>0>s>>>0|r>>>0>a>>>0)>>>0>(t=t+o|0)>>>0?p+1|0:p,o=t,c=(0|(r=e[m+4>>2]))==(0|c)&ue[m>>2]<f>>>0|r>>>0<c>>>0,r=e[m+12>>2],r=w=(r=t=p>>>0<2147418112&((0|(t=e[m+8>>2]))==(0|i)&(0|r)==(0|w)?c:(0|r)==(0|w)&t>>>0<i>>>0|r>>>0<w>>>0))>>>0>(t=t+s|0)>>>0?a+1|0:a,s=(0|a)==(0|w)&t>>>0<s>>>0|a>>>0>w>>>0,a=p,i=s,ce|=s=s+o|0,Qe|=a=i>>>0>s>>>0?a+1|0:a}}e[A>>2]=t,e[A+4>>2]=r,e[A+8>>2]=ce,e[A+12>>2]=Qe,J=m+336|0}function tr(A,t,r,a,s){var i,o,c,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0,et=0,at=0;if(J=o=J-80|0,c=e[r+8>>2],!s|!M[r+4>>1]||(e[s+8>>2]=0),i=jA(a,0,152),e[i+44>>2]=l[c+14|0],e[i+40>>2]=l[c+15|0],a=M[c+8>>1]){for(a=e[34459]+(a<<1)|0,ce=256&t,he=r+32|0,Ve=r-32|0,Ke=r- -64|0,rA=r+96|0,cA=r+-64|0,MA=r-28|0,zA=1&t,et=r-24|0,Be=e[30450];;){f=15&(E=(t=M[a>>1])>>>8|0);e:{A:{r:{s:{i:{c:{o:{u:{l:{n:{p:{C:switch(0|(p=t>>>12|0)){case 10:break o;case 9:break u;case 6:break l;case 2:case 3:break n;case 1:break p;case 0:break C;case 11:case 12:case 13:case 14:case 15:break c;default:break i}m=255&t;C:{m:{b:switch(0|f){case 13:if(m)break m;f=a,t=0;break C;case 0:switch(f=a,m-1|0){case 1:break e;case 0:break A}e[o+20>>2]=E0(o+75|0,e[c>>2]),e[o+16>>2]=t,fr(Be,85851,o+16|0);break e;case 5:if(l[e[144464+(l[r+34|0]<<2)>>2]+11|0]!=2)break e;e[i+20>>2]=m;break e;case 12:break b;default:break s}e[i+44>>2]=e[i+44>>2]+(t<<24>>31&-256|m);break e}g[i+132|0]=l[a+3|0],f=a+2|0,g[i+133|0]=l[0|f],t=2,m>>>0<3||(g[i+134|0]=l[a+5|0],f=a+4|0,g[i+135|0]=l[0|f],t=4,m>>>0<5||(g[i+136|0]=l[a+7|0],f=a+6|0,g[i+137|0]=l[0|f],t=6,m>>>0<7||(g[i+138|0]=l[a+9|0],f=a+8|0,g[i+139|0]=l[0|f],t=8,m>>>0<9||(g[i+140|0]=l[a+11|0],f=a+10|0,g[i+141|0]=l[0|f],t=10,m>>>0<11||(g[i+142|0]=l[a+13|0],f=a+12|0,g[i+143|0]=l[0|f],t=12,m>>>0<13||(g[i+144|0]=l[a+15|0],f=a+14|0,g[i+145|0]=l[0|f],t=14,m>>>0<15||(g[i+146|0]=l[a+17|0],f=a+16|0,g[i+147|0]=l[0|f],t=16)))))))}g[132+(t+i|0)|0]=0,m=Y;break A}if(!A|f>>>0>7||(p=r,l[e[144464+(l[r+2|0]<<2)>>2]+11|0]!=2&&(p=he,l[e[144464+(l[r+34|0]<<2)>>2]+11|0]!=2))||!(1&(f=e[A+56>>2]))&&16&l[0|r])break e;m=15&l[p+3|0],m=2&f&&l[p+6|0]<=m>>>0?4:m;p:{C:{m:{b:switch((f=7&E)-3|0){case 1:break C;case 0:break b;default:break m}if(m>>>0>3)break p;break e}if(e[102832+(f<<2)>>2]>(0|m))break p;break e}if(l[p+6|0]>m>>>0)break e}e[i+8>>2]=255&t,m=1;break r}if((57344&t)==8192){for(at=e[32972],E=1,Qe=0;;){w=255&t,f=(P=4095&t)>>>8|0;n:if(P>>>0<=3583){(0|(m=(f>>>0)%7|0))==6&&(m=M[a+2>>1]),ee=0,f=r;p:{C:{m:switch(0|m){case 6:if(p=0,M[r+36>>1]|M[r+68>>1])break n;case 3:f=Ke;break C;case 9:if(p=0,M[r+36>>1]|M[r+68>>1])break n;if(f=rA,!M[r+100>>1])break p;break n;case 7:if(p=0,M[r+36>>1])break n;for(m=1;;){if(l[e[144464+(l[2+(f=(m<<5)+r|0)|0]<<2)>>2]+11|0]==2)break C;if(M[4+(((m=m+1|0)<<5)+r|0)>>1])break}break n;case 5:if(p=0,M[r+4>>1])break n;case 0:ee=1,f=Ve;break C;case 4:if(p=0,M[r+36>>1])break n;case 2:f=he;break C;case 8:if(p=0,!s)break n;if(ee=1,e[(f=s)+8>>2])break p;break n;case 10:break m;default:break C}if(p=0,M[r+4>>1]|M[MA>>1])break n;ee=1,f=cA;break p}C:switch(0|m){case 0:case 5:break C;default:break p}f=(l[f+2|0]==1?-32:0)+f|0}if(ce?(m=e[144464+(l[f+2|0]<<2)>>2],e[f+8>>2]=m):m=e[f+8>>2],P>>>0<=1791){if(p=1,e[e[144464+(w<<2)>>2]>>2]==e[m>>2])break n;if(!(!ee|l[m+11|0]!=2)){p=(0|w)==l[m+13|0];break n}p=(0|w)==l[m+12|0];break n}w=31&P,p=0;p:switch(P>>>5&7){case 0:p=(0|w)==l[m+11|0];break n;case 1:p=(0|w)==(15&M[m+6>>1]);break n;case 2:p=e[m+4>>2]>>>w&1;break n;case 4:break p;default:break n}p:switch(0|w){case 0:case 1:case 2:case 3:case 4:if(l[e[144464+(l[f+2|0]<<2)>>2]+11|0]!=2){if(l[e[144464+(l[f+34|0]<<2)>>2]+11|0]!=2)break n;f=f+32|0}m=15&l[f+3|0],m=!A|!(2&l[A+56|0])?m:l[f+6|0]<=m>>>0?4:m;C:{switch(w-3|0){case 1:p=l[f+6|0]<=m>>>0;break n;case 0:if(p=1,m>>>0<=3)break C;break n}if(p=1,e[102832+(w<<2)>>2]>(0|m))break n}p=0;break n;case 17:if(!l[m+11|0]){p=1;break n}p=(32&l[r+1|0])>>>5|0;break n;case 18:p=M[f+4>>1]!=0;break n;case 19:if(p=1,M[f+36>>1])break n;p=!l[e[f+40>>2]+11|0];break n;case 9:if(M[f+4>>1])break n;for(;;){if(p=!!(0|(m=12&l[f-29|0])),m)break n;if(M[4+(f=f-32|0)>>1])break}break n;case 10:p=l[m+11|0]!=2;break n;case 11:for(;;){if(p=!!(0|(m=M[f+36>>1])),m)break n;if(m=f,f=f+32|0,l[e[m+40>>2]+11|0]==2)break}break n;case 12:if(p=1,(254&l[m+11|0])==2)break n;p=(16&l[m+4|0])>>>4|0;break n;case 13:for(;p=(l[e[f+8>>2]+11|0]==2)+p|0,m=M[f+4>>1],f=f-32|0,!m;);p=(0|p)==1;break n;case 14:for(;p=(l[e[f+8>>2]+11|0]==2)+p|0,m=M[f+4>>1],f=f-32|0,!m;);p=(0|p)==2;break n;case 16:break p;default:break n}p=(16&l[0|f])>>>4|0}else if(p=0,(0|f)==15){p:switch(w-1|0){case 0:p=zA;break n;case 1:break p;default:break n}p=e[at+132>>2]!=0}n:if(1970>>>(f=(m=65535&t)>>>12|0)&1)f=g[f+102848|0];else{switch(0|f){case 0:if(f=1,(3840&m)!=3328)break n;f=1+(1+(255&m)>>>1|0)|0;break n;case 6:f=(m>>>9&7)-5>>>0<2?12:1;break n;case 2:case 3:f=(0|(f=3840&m))==3328||(0|f)==1536?2:1;break n}f=4,(m=M[a+4>>1])>>>0>61439||(f=(0|m)==2?3:2)}if(a=((f=M[(a=(f<<1)+a|0)>>1]==3)<<1)+a|0,f^=p,E=Qe?f|E:f&E,Qe=4096&t,(57344&(t=M[a>>1]))!=8192)break}if(!(1&E))if((63488&t)!=26624){n:if(1970>>>(f=t>>>12|0)&1)f=g[f+102848|0];else{switch(0|f){case 0:if(f=1,(3840&t)!=3328)break n;f=1+(1+(255&t)>>>1|0)|0;break n;case 6:f=(t>>>9&7)-5>>>0<2?12:1;break n;case 2:case 3:f=(0|(t&=3840))==3328||(0|t)==1536?2:1;break n}f=4,(t=M[a+4>>1])>>>0>61439||(f=(0|t)==2?3:2)}a=(((65024&M[(t=(f<<1)+a|0)>>1])==24576)<<1)+t|0}else a=((255&t)<<1)+a|0}f=a-2|0,m=Y;break A}l:switch(f>>>1|0){case 0:a=(((255&t)<<1)+a|0)-2|0;break e;case 5:e[i>>2]=2|e[i>>2],((t=l[e[r+40>>2]+12|0])-28&255)>>>0<=5&&(f=M[4+(t=((t<<2)+a|0)-112|0)>>1],t=M[t+2>>1],e[i+96>>2]=t>>>4<<24>>24,e[i+76>>2]=(15&t)<<18|f<<2),a=a+24|0;break e;case 6:break l;default:break e}((t=l[e[et>>2]+13|0])-28&255)>>>0<=5&&(f=M[4+(t=((t<<2)+a|0)-112|0)>>1],t=M[t+2>>1],e[i+100>>2]=t>>>4<<24>>24,e[i+80>>2]=(15&t)<<18|f<<2),a=a+24|0;break e}t=M[(a=a+2|0)>>1]|t<<16&983040;u:switch(f-1|0){case 0:if((0|Z)>9)break e;e[(o+32|0)+(Z<<2)>>2]=a,a=(e[34459]+(t<<1)|0)-2|0,Z=Z+1|0;break e;case 1:e[i+124>>2]=t;break e;case 2:break u;default:break e}e[i+128>>2]=t;break e}e[108+(f=(((0|f)!=1)<<3)+i|0)>>2]=M[a+2>>1]|(255&t)<<16,t=M[a+4>>1]<<16,a=a+6|0,e[f+112>>2]=t|M[a>>1];break e}if(m=M[(f=a+2|0)>>1],P=t>>>4|0,e[88+(E=((w=p-11|0)<<2)+i|0)>>2]=255&P,e[E+68>>2]=t<<18&3932160|m<<2,(0|(a=M[a+4>>1]))==2){a=f;break e}if(m=t>>>0<=53247?a>>>0>61439?2:1:Y-((0|w)==4)|0,p-13>>>0>1)break A;e[E+88>>2]=P<<24>>24;break A}e[o+4>>2]=E0(o+75|0,e[c>>2]),e[o>>2]=t,fr(Be,85851,o);break e}e[4+((f<<2)+i|0)>>2]=m,m=ce&&(0|f)==1?1:Y}f=a}(0|m)!=1|(0|Z)<=0?(a=f,Y=m):(a=e[(o+32|0)+((Z=Z-1|0)<<2)>>2],Y=0)}if(a=a+2|0,(0|Y)==1)break}!s|l[r+17|0]!=2||(A=e[r+4>>2],e[s>>2]=e[r>>2],e[s+4>>2]=A,A=e[r+28>>2],e[s+24>>2]=e[r+24>>2],e[s+28>>2]=A,A=e[r+20>>2],e[s+16>>2]=e[r+16>>2],e[s+20>>2]=A,A=e[r+12>>2],e[s+8>>2]=e[r+8>>2],e[s+12>>2]=A),g[r+23|0]=e[i+44>>2],(A=e[i+68>>2])?(e[r+24>>2]=A,A=i+88|0):(e[r+24>>2]=e[i+72>>2],A=i+92|0),e[r+28>>2]=e[A>>2]}J=o+80|0}function fa(A,t,r,a,s,i){var o,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0;J=o=J-848|0;e:if(!(!e[A+104>>2]|8&l[s+2|0]|e[47202]==193)){for(e[a>>2]=0,e[33272]=0,e[33274]=i,g[o+192|0]=0,e[33273]=o+192;p=(i=p)+1|0,g[0|(he=t+i|0)]-48>>>0<10;);e[56798]=0,Ke=o+188|0,E=-2147483648,J=ce=J-16|0;A:if(c=l[0|t]){w=t;r:{for(;;){if(!((0|(c=c<<24>>24))==32|c-9>>>0<5))break r;if(c=l[w+1|0],w=w+1|0,!c)break}break A}r:switch((c=l[0|w])-43|0){case 0:case 2:break r;default:break A}Z=(0|c)==45?-1:0,w=w+1|0}else w=t;for(;c=-48,(((P=g[0|w])-48&255)>>>0<10||(c=-87,(P-97&255)>>>0<26||(c=-55,!((P-65&255)>>>0>25))))&&!((0|(P=c+P|0))>=10);)Zr(ce,10,0,0,0,Y,ee,0,0),c=1,e[ce+8>>2]|e[ce+12>>2]||(Qe=It(Y,ee,10,0),(0|(Ve=$))==-1&~P>>>0<Qe>>>0||(c=Ve,ee=(Y=P+Qe|0)>>>0<P>>>0?c+1|0:c,Be=1,c=m)),w=w+1|0,m=c;Ke&&(e[Ke>>2]=Be?w:t);A:{r:{if(m)e[56798]=68,Y=-2147483648,ee=0;else if(!ee&Y>>>0<2147483648)break r;if(!Z){e[56798]=68,E=2147483647;break A}if(!(!ee&Y>>>0<=2147483648)){e[56798]=68;break A}}E=(Z^Y)-Z|0}if(J=ce+16|0,Z=E,!(e[56798]|e[o+188>>2]==(0|t))){A:{r:{s:{if(!(!((0|(P=64&l[A+109|0]?4:3))!=(0|i)|e[A+124>>2]!=g[t-2|0])&g[t-3|0]-48>>>0<10)){i:{if(e[A+124>>2]!=32){if(!(16&l[A+105|0]))break s;if((0|i)==3)break i;break s}if((0|i)!=3)break s}if(4&l[s+2|0]|g[t-2|0]-48>>>0>=10)break s}g[133104]=0,g[o+288|0]=0,rA=1;break r}if(g[133104]=0,e[33275]=0,g[o+288|0]=0,cA=1,Be=0,l[0|t]==48)break A}Be=pa(A,t,he,s,0)}l[0|he]!=46|g[t+p|0]-48>>>0<10|1&g[s+13|0]|g[he+2|0]-48>>>0<10||(g[0|he]=0);A:if(!Be||(Qe=1,e[A+212>>2]==26741)){if(E=o+256|0,e[o+844>>2]=E,f=p,64&l[s+1|0]&&(g[o+256|0]=45,E=o+256|1,e[o+844>>2]=E,f=i+2|0),w=l[t+f|0]){for(;!((255&w)==32|(0|f)>28)&&(c=e[o+844>>2],e[o+844>>2]=c+1,g[0|c]=w,w=l[(f=f+1|0)+t|0]););E=e[o+844>>2]}if(g[0|E]=0,Qe=1,c=g[o+256|0]){if(!(m=e[A+136>>2])||Br(o+256|0,m)){if(c-48>>>0<10||(e[o+176>>2]=o+256,DA(c=o+800|0,88653,o+176|0),!RA(A,c,133104)))break A;e[a>>2]=128|e[a>>2],e[o+160>>2]=o+256,DA(c=o+800|0,88773,o+160|0),RA(A,c,133116),Qe=0}Be=2}}Ke=e[s>>2],g[o+352|0]=0,g[o+624|0]=0;A:{r:{s:if(!(!cA|l[0|t]!=48||(0|(c=g[t+1|0]))==32|(0|c)==e[A+128>>2])){i:{if((0|i)==2){if(l[t+3|0]!=58|g[t+5|0]-48>>>0>=10||!((0|(c=g[t+7|0]))==32|c-9>>>0<5))break i;break s}if((0|i)>3)break r}if(l[0|t]==48&&!((0|(c=i-1|0))<=0))for(f=0;;){if(RA(A,88875,HA(m=o+288|0)+m|0),l[(f=f+1|0)+t|0]!=48)break s;if(!((0|c)>(0|f)))break}}s:{i:{if(!((0|(c=g[0|he]))==32&&16&l[A+105|0])){if(Ve=2,Y=i+2|0,(0|c)==e[A+124>>2])break i;ee=1,E=0,c=0;break s}Ve=1,Y=i+2|0}if(4&l[s+14|0])E=1,c=0,ee=1;else for(c=0,w=1,f=i,ee=1;;){m=c,c=w,w=(ce=f+Ve|0)+t|0,f=0;i:{for(;;){if(E=1,!(g[f+w|0]-48>>>0>=10)){if((0|P)!=(0|(f=f+1|0)))continue;break i}break}c=m;break s}if(g[w+P|0]-48>>>0<10){c=m;break s}if(f=0,g[w-1|0]-48>>>0<10){c=m;break s}i:{for(;;){if(l[(f+ce|0)+t|0]==48){if((0|P)!=(0|(f=f+1|0)))continue;break i}break}ee=0}if((0|(m=g[(f=P+ce|0)+t|0]))!=e[A+124>>2]&(!(16&l[A+105|0])|(0|m)!=32))break s;if(Y=f+2|0,4&l[2+(z(w=c+1|0,12)+s|0)|0])break}}f=!Z;s:if(!(!ee|!(64&l[1+(z(c,12)+s|0)|0])|e[A+212>>2]!=26741)){i:switch(l[0|(m=t+Y|0)]-97|0){case 0:case 4:break i;default:break s}i:{c:{o:{u:switch((w=l[m+1|0])-116|0){case 6:break s;case 1:case 2:case 3:case 4:case 5:break c;case 0:break u;default:break o}if(l[m+2|0]!=116)break i;break s}if((0|w)==32)break s}if(!(!!((0|Z)%1e3|0)&(0|c)!=1)&&(0|w)==108)break s}e[33274]=1|e[33274]}Y=32768&Ke,f&=rA;s:if(e[A+128>>2]!=g[0|he]|g[t+p|0]-48>>>0>=10){i:{if(!f){if(f=0,m=1,!((0|c)>0&E))break i;Z=(p=xs(A,Z,c,ee,o+624|0))?0:Z,f=!!(0|p),w=0;break s}f=1,Z=0,e[33275]==1&&(e[o+144>>2]=c+1,DA(p=o+800|0,89026,o+144|0),RA(A,p,o+688|0)||(e[o+128>>2]=c,DA(p=o+800|0,89026,o+128|0),RA(A,p,o+624|0)))}m=1,w=0}else RA(A,88882,o+624|0),m=0,w=256;E=Y?2:Be;s:{if(c|l[o+624|0]|l[0|he]!=46){if(c)break s}else RA(A,89192,o+624|0);if(e[o+844>>2]=t,g[t+1|0]-48>>>0<10)for(;p=e[o+844>>2],e[o+844>>2]=p+1,g[p+2|0]-48>>>0<10;);if(g[e[o+844>>2]-1|0]-48>>>0>=10||(e[o+416>>2]=e[o+844>>2]-1,kr(A,o+416|0,o+192|0,a,4,s)&&(e[33272]=2)),l[o+192|0]|l[e[o+844>>2]]==48||kr(A,o+844|0,o+192|0,a,4,s)&&(e[33272]=1),cA){if(!E&m&&(e[o+112>>2]=Z,DA(s=o+800|0,89214,o+112|0),RA(A,s,r)))break A;if(1&g[A+110|0]){for(p=t;(32|l[0|p])!=32;)p=p+1|0;e[o+416>>2]=p,l[p+1|0]==37&&(RA(A,89328,r),s=HA(r),g[e[o+416>>2]+1|0]=32,r=r+s|0)}}}us(A,Z,o+416|0,f,c,E|w|rA),!(2&l[A+109|0])|(0|c)<=0?(e[o+60>>2]=15,e[o- -64>>2]=o+624,e[o+56>>2]=o+416,e[o+52>>2]=o+352,e[o+48>>2]=o+288,DA(r,89415,o+48|0)):(e[o+88>>2]=15,e[o+96>>2]=o+416,e[o+92>>2]=o+352,e[o+84>>2]=o+624,e[o+80>>2]=o+288,DA(r,89346,o+80|0));s:if(!m)for(;;){for(i=i+1|0,m=0;m=(p=m)+1|0,g[(c=i+p|0)+t|0]-48>>>0<10;);s=2;i:{c:{o:{u:{l:{n:switch((m=57344&e[A+104>>2])-8192>>>13|0){case 6:break c;case 2:break o;case 0:case 4:case 5:break u;case 1:break l;case 3:break n;default:break i}s=5}if((0|(m=l[0|(f=t+i|0)]))==48)for(;RA(A,88875,c=o+688|0),ia(r,c),p=p-1|0,(0|(m=l[0|(f=(i=i+1|0)+t|0)]))==48;);if((0|s)<(0|p)|(m<<24>>24)-48>>>0>=10)break i;s=o+688|0,us(A,js(f),s,0,0,0),ia(r,s),i=i+p|0;break i}if(us(A,js(s=t+i|0),o+416|0,0,0,0),!((0|m)==8192&l[0|s]!=48)){if(e[o+16>>2]=p,DA(s=o+800|0,89508,o+16|0),!RA(A,s,o+688|0))break i;ia((0|m)==49152?r:o+416|0,o+688|0)}ia(r,o+416|0),i=c;break i}if((0|p)>4||l[0|(s=t+i|0)]==48)break i;us(A,i=js(s),s=o+688|0,0,0,0),ia(r,s),i=c;break i}if(!((0|p)<=1))for(;;){if(e[o+32>>2]=g[t+i|0],DA(s=o+800|0,89575,o+32|0),!RA(A,s,o+688|0))break i;if(ia(r,o+688|0),i=i+1|0,!((0|(p=p-1|0))>1))break}}i:if(!((m=l[0|(p=t+i|0)])-48>>>0>=10||HA(r)>>>0>=190))for(;;){if(s=o+688|0,Xa(A,g[0|p]-48|0,0,2,s),c=HA(r),e[o>>2]=15,e[o+4>>2]=s,DA(r+c|0,89594,o),(m=l[0|(p=(i=i+1|0)+t|0)])-48>>>0>=10)break i;if(!(HA(r)>>>0<=189))break}if(RA(A,89678,o+688|0)&&ia(r,o+688|0),e[A+128>>2]!=(0|m)|g[1+(t+i|0)|0]-48>>>0>=10)break s;RA(A,88882,s=o+688|0),ia(r,s)}if(!(s=l[0|r])|(0|s)==21||(s=Gt(o+184|0,t=1+(t+i|0)|0),i=e[o+184>>2],!(2&l[A+106|0])|(0|i)!=32||(Gt(o+184|0,t+s|0),i=e[o+184>>2]),ns(i)|ee||(A=HA(r)+r|0,g[0|A]=11,g[A+1|0]=0)),e[a>>2]=-2147483648|e[a>>2],e[33275]=e[33275]-1,f=1,Qe)break e;e[33264]=1;break e}e[a>>2]=-129&e[a>>2],f=0;break e}f=1}}return J=o+848|0,f}function bt(A,t,r,a){var s,i,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0;if(J=s=J-416|0,Be=M[r+8>>1],Y=l[r+10|0],64&(i=e[r>>2])){for(e[r>>2]=-65&i,g[199388]=1,f=e[47202],E=e[49846],p=e[47352],w=e[47351],m=e[47350];;){o=(c=e[198304+(w<<2)>>2])>>8;e:{A:switch((31&c)-9|0){case 0:f=o;break e;case 4:E=o;break e;case 3:break A;default:break e}p=c>>>0>=256?o+p|0:0}if(!(!(128&c)&(0|m)>(0|(w=w+1|0))))break}e[47352]=p,e[47351]=w,e[49846]=E,e[47202]=f}E=0;e:if(!((0|(o=e[49572]))>997)){if(1048576&i||!l[0|t])l[199388]&&(e[49572]=o+1,g[199388]=0,e[(A=190288+(o<<3)|0)>>2]=983042,e[A+4>>2]=0),g[189088]=0;else if(!((0|o)>990)){(0|(o=e[A+8224>>2]))>0&&(e[A+8224>>2]=o-1),f=512&i?a:a+4|0,p=(240&e[47202])==16,(ce=2&i)&&((0|(c=e[47200]))<3||(0|(o=e[47350]))>243||(l[199388]&&(e[(w=198300+(o<<2)|0)>>2]=-129&e[w>>2]),e[47350]=o+1,g[199388]=1,Qe=(0|c)==3?20:c,e[198304+(o<<2)>>2]=Qe<<8|193)),m=p?f:a;A:{r:{if(!(8&i)){for(;a=l[(o=P)+t|0],g[o+(s+240|0)|0]=a,223&a&&(P=o+1|0,o>>>0<160););if(g[s+66|0]=0,P=s- -64|2,E=NA(e[47192],t,r,P),e[s+412>>2]=E,!(4096&E))break r;wt(t,s+240|0,o);break e}s:if(va(t,87276,3))Os(t,189088,s+240|0);else{if(w=0,223&(o=l[0|(P=t+3|0)]))for(;g[(s+240|0)+w|0]=Ht(o<<24>>24),w=w+1|0,223&(o=l[0|(P=P+1|0)]););g[(a=s+240|0)+w|0]=0,o=0;i:if(!((0|(r=e[34461]))<=0)){for(;;){if(!Br(a,z(o,44)+137856|0)){e[34457]=o;break i}if((0|r)==(0|(o=o+1|0)))break}o=r}if((0|(r=(0|r)==(0|o)?-1:o))<=0)break s;ma(r),g[189090]=0,g[189089]=r,g[189088]=21}E=-2147483648,e[s+412>>2]=-2147483648,a=-1;break A}if(!(!(8388608&E)|8&l[r+12|0])){for(J=p=J-208|0,w=e[A+60>>2],c=t;a=c,c=c+1|0,l[0|a]!=32;);Gt(p+204|0,c);r:if(ns(e[p+204>>2])){f=qA(p,189088),c=(!(256&w)|(ee=TA(A,c,r+12|0,0))>>>15)&!(67108864&ee)&l[189088]!=21;s:{i:{if(512&w){if(!(c&!(16&l[r+12|0])))break i;break s}if(c)break s}qA(189088,f);break r}if(g[0|a]=45,e[r>>2]=-2&e[r>>2],E=0,c=189088,Z=TA(e[47192],t,r,0),e[s+412>>2]=Z,!((0|w)<=0)&&(f=l[189088])){for(;E=(l[e[144464+(f<<2)>>2]+11|0]==2)+E|0,f=l[0|(c=c+1|0)];);if(!((31&w)>=(0|E))){g[0|a]=32,e[s+412>>2]=TA(e[47192],t,r,0);break r}}e[s+412>>2]=128|(Z||ee),e[33264]=1}J=p+208|0}if(a=-1,l[189088]==21){if(w=qA(s+16|0,132848),p=e[s+412>>2],c=wt(t,s+240|0,o),f=s- -64|1,(0|(a=xn(l[189089]?189089:87315,188772,189296)))<0||(e[r>>2]=4194304|e[r>>2],l[s+66|0]?(b[s+64>>1]=8192,p=TA(e[47193],f,r,0)):p=NA(e[47193],c,r,P)),l[189088]==21&&(o=wt(c,s+240|0,o),(0|(a=xn(l[189089]?189089:87315,188772,189296)))<0||(e[r>>2]=4194304|e[r>>2],l[s+66|0]?(b[s+64>>1]=8192,p=TA(e[47193],f,r,0)):p=NA(e[47193],o,r,P)),E=4096,l[189088]==21))break e;e[s+412>>2]=p,(0|a)>=0||(g[189090]=0,b[94544]=3341,(0|a)==-1&&(qA(132848,w),ma(e[e[32972]+60>>2]),a=e[e[32972]+60>>2]))}E=e[s+412>>2],128&i||(m=268435456&E&&(0|m)<=1?1:m,!(256&E)|528&i|e[A+8224>>2]|2&l[r-11|0]||(e[A+8224>>2]=3,m=(0|m)<=4?4:m)),m=(0|m)<=0&&e[49846]>2?1:m}if(r=l[199388],!((0|m)<=0|(0|(P=e[49572]))>990)){e[49572]=P+1,c=1&r,r=0,b[(o=190288+(P<<3)|0)>>1]=c?2:0,g[o+7|0]=0,g[o+3|0]=0,c=m>>>0>1,g[o+2|0]=c?9:11,b[o+4>>1]=0,e[A+8236>>2]=0;A:if(!(!(o=c?m-2|0:0)|(0|(P=e[49572]))>990))for(f=A+8236|0;;){if(e[49572]=P+1,b[(c=190288+(P<<3)|0)>>1]=0,g[c+7|0]=0,g[c+3|0]=0,p=o>>>0>1,g[c+2|0]=p?9:11,b[c+4>>1]=0,e[f>>2]=0,P=e[49572],(0|(o=p?o-2|0:0))<=0)break A;if(!((0|P)<991))break}e[A+8228>>2]=0,e[A+8232>>2]=0}g[199388]=1&r,!ce|e[47200]!=1||(e[49572]=P+2,g[199388]=0,b[(o=190288+(P<<3)|0)>>1]=1&r?2:0,g[o+7|0]=0,b[o+2>>1]=10,b[o+4>>1]=0,b[o+12>>1]=0,e[o+8>>2]=1179648,g[o+15|0]=0,1&i&&rr(g[t+1|0])&&(r=l[199388],g[199388]=0,t=e[49572],e[49572]=t+2,b[(t=190288+(t<<3)|0)>>1]=r?2:0,g[t+7|0]=0,b[t+2>>1]=10,b[t+4>>1]=0,b[t+12>>1]=0,e[t+8>>2]=1179648,g[t+15|0]=0)),o=Y>>>0<31;A:if(!((0|a)<0))if(t=e[49572],r=l[190290+((m=t-1|0)<<3)|0],l[189088]!=9|l[189089]!=21)(0|r)!=21&&(c=l[199388],g[199388]=0,g[7+(r=190288+(t<<3)|0)|0]=0,b[r+2>>1]=21,b[r+4>>1]=0,b[r>>1]=c?2:0,m=t),e[49572]=m+1,g[190295+(m<<3)|0]=a;else{if((0|r)!=21)break A;e[49572]=m}t=2047&Be,r=(o?Y:31)<<11,p=(Ve=128&i)?l[e[144464+(l[189088]<<2)>>2]+11|0]?189088:189089:189088,(m=l[0|p])|!(1&g[199388])||(m=23,g[0|p]=23,g[p+1|0]=0),Ke=t|r,f=e[49572];A:if(m)if((0|f)>994)t=0;else for(MA=((-1610612736&E)==-2147483648)<<4,Be=Ke+1|0,zA=A+8233|0,t=0,c=1,ee=0,rA=1,Y=-1,ce=-1,o=0;;){w=p+1|0;r:{if((0|(Z=255&m))!=255){if(r=e[144464+(Z<<2)>>2])break r;e[s>>2]=Z,J=r=J-16|0,e[r+12>>2]=s,Qs(132552,87474,s),J=r+16|0,f=e[49572]}if(!(m=l[0|w]))break A;if(p=w,(0|f)<995)continue;break A}r:if((0|(he=255&m))!=21)if((0|(p=l[r+11|0]))!=1){switch(r=Be,he-12|0){case 8:g[3+(r=190288+((Y=f-1|0)<<3)|0)|0]=c,b[r>>1]=4|M[r>>1],r=o;break r;case 0:b[(r=190280+(f<<3)|0)>>1]=8|M[r>>1],r=o;break r;case 10:E|=16384,e[s+412>>2]=E,r=o;break r;case 3:break r}Z=l[199388],g[199388]=0,g[7+(r=190288+(he=f<<3)|0)|0]=0,g[r+2|0]=m,b[r+4>>1]=o,o=(Z?2:0)|MA,b[r>>1]=o,(0|p)==2?((0|c)>=4&&(g[189076]=1),(0|Y)<0||(0|(t=f-1|0))!=(0|Y)&&(g[190291+(t<<3)|0]=c),b[r>>1]=4|o,cA=(t=(0|c)>(0|ce))?f:cA,ce=t?c:ce,o=1,ee&&(g[r+7|0]=ee),Y=f,ee=0,t=c):(!rA|!(64&l[0|zA])||(b[r>>1]=8|o),o=c),f=f+1|0,e[49572]=f,g[he+190291|0]=t,r=0,rA=0,c=o}else{if(!M[r+8>>1]){c=l[r+14|0],r=o;break r}if((0|Y)<0){r=o,ee=Z;break r}g[190295+(Y<<3)|0]=m,r=o}else e[(r=190288+(f<<3)|0)>>2]=1376256,b[r+4>>1]=0,g[r+7|0]=l[p+1|0],e[49572]=f+1,ma(l[p+1|0]),w=p+2|0,f=e[49572],r=o;if(!(m=l[0|w]))break A;if(p=w,o=r,!((0|f)<995))break}else t=0;131072&i&&(r=f+1|0,e[49572]=r,c=l[199388],g[199388]=0,g[7+(o=190288+(f<<3)|0)|0]=0,b[o+2>>1]=27,b[o+4>>1]=0,b[o>>1]=c?2:0,f=r),Ve||(b[190292+(P<<3)>>1]=Ke),e[A+8228>>2]=0,l[e[144464+(l[190282+(f<<3)|0]<<2)>>2]+11|0]!=2|(0|t)<4||(e[A+8228>>2]=1),(0|a)>=0&&(qA(132848,s+16|0),ma(e[e[32972]+60>>2]),r=l[199388],g[199388]=0,a=e[49572],b[(t=190288+(a<<3)|0)>>1]=r?2:0,b[t+2>>1]=21,b[t+4>>1]=0,g[t+7|0]=e[e[32972]+60>>2],f=a+1|0,e[49572]=f),(0|Qe)>0&&(g[199388]=0,e[49572]=f+1,e[(t=190288+(f<<3)|0)>>2]=655362,r=e[47350],e[47350]=r+1,g[t+7|0]=0,b[t+4>>1]=0,e[198304+(r<<2)>>2]=Qe<<8|225),1024&E&&(b[(t=190288+(cA<<3)|0)>>1]=64|M[t>>1]),e[A+8232>>2]=E}}return J=s+416|0,E}function Za(A,t,r,a,s){var i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0,et=0,at=0;e:if(t){if(ce=s<<4,o=(t=e[33268])+r|0,!((0|t)<=0||(i=l[0|(f=ce+129360|0)],w=l[f+1|0]-i<<8,w=(0|t)!=1?(0|w)/(0|t)|0:w,(0|r)>=(0|o))))for(E=w>>>0>255,Z=w>>>8|0,i<<=8,f=0-w>>>8|0,Qe=(0|w)<=0,t=r;Qe?(m=(p=(p=(0|(c=(0|(c=e[101024+(g[z(t,6)+A|0]<<2)>>2]))<(0|f)?f:c))>=18?18:c)+(c=(0|(c=(0|(i=i+w|0))/256|0))>0?c:0)|0)>>>0>=254?254:p,c=c>>>0>=254?254:c):(c=z(t,6)+A|0,g[c+2|0]=E|l[c+2|0],c=(p=(0|(c=(0|i)/256|0))>0?c:0)>>>0>=254?254:p,m=(p=p+Z|0)>>>0>=254?254:p,i=i+w|0),p=z(t,6)+A|0,g[p+5|0]=c,g[p+4|0]=m,(0|o)!=(0|(t=t+1|0)););if(2&l[188785]?(f=e[33271],e[33270]=f):f=e[33270],Z=(E=l[3+(i=129360+(t=s<<4)|0)|0])-(c=l[i+2|0])<<8,Qe=e[i+4>>2],(0|r)>0?(Ke=101056,he=5,p=(0|Z)/(l[t+129368|0]-1|0)|0):(Ke=e[12+(t=t+129360|0)>>2],he=l[t+10|0],p=0),(0|o)<(0|f)){for(w=(0|r)<=0,ee=((t=Z>>31)^Z)-t|0,P=129360+(s<<4)|0,c<<=8,Ve=E<<8,E=0;;){A:{if(m=z(o,6)+A|0,!(!(1&w)&(0|(i=g[0|m]))<4)){r=0,t=o;r:if(1&((0|i)==5|w)){for(;(0|(p=g[z(t,6)+A|0]))<=6&&(r=((0|p)>3)+r|0,(0|f)!=(0|(t=t+1|0))););if(Y=0,(0|(Be=(0|(t=l[P+8|0]))>(0|r)?r:t))<2){p=0,E=c;break r}p=(0|Z)/(Be-1|0)|0,E=c}else(0|Be)>0?E=p+E|0:(E=Ve+(z(ee,g[Y+Ke|0])>>6)|0,(0|he)>(0|(Y=Y+1|0))||(Ke=e[P+12>>2],Y=0));if(Be=Be-1|0,!((0|i)<4)){g[0|m]=6,r=(t=(0|(t=(0|E)/256|0))>0?t:0)+(((r=(i=e[Qe+(i<<2)>>2])>>31)^i)-r|0)|0;break A}}(0|i)!=3?(t=(0|E)/256|0,(63&l[m-6|0])>>>0>=3?(r=(i=e[Qe+(i<<2)>>2])>>31,r=(t=(0|(t=t-g[P+9|0]|0))>0?t:0)+((r^i)-r|0)|0):r=(t=(0|t)>0?t:0)+(((r=(i=e[Qe+(i<<2)>>2])>>31)^i)-r|0)|0):r=(t=(0|(t=(0|E)/256|0))>0?t:0)+(((r=(i=e[Qe+12>>2])>>31)^i)-r|0)|0}if(g[m+5|0]=t>>>0>=254?254:t,w=0,t=(0|r)>0?r:0,g[m+4|0]=t>>>0>=254?254:t,g[m+2|0]=l[m+2|0]|i>>>31,(0|f)==(0|(o=o+1|0)))break}o=f}if(!(l[133068]||((268435455&s)==3&&(t=z(o,6)+A|0,g[t+2|0]=2|l[t+2|0]),e[33269]?(t=l[5+(i=100768+(s<<4)|0)|0],c=i+3|0,r=l[i+4|0]-t|0):(t=l[2+(r=100768+(s<<4)|0)|0],c=ce+100768|0,r=l[r+1|0]-t|0),i=z(o,6)+A|0,g[i+5|0]=t>>>0>=254?254:t,g[i+2|0]=l[i+2|0]|r>>>31,t=(p=t)+(((t=r>>31)^r)-t|0)|0,g[i+4|0]=t>>>0>=254?254:t,r=z(f,6)+A|0,g[r+1|0]=l[0|c],t=o+1|0,l[0|r]==4&&(g[0|r]=6),(0|(r=a-t|0))<=0||(s=l[12+(o=100768+(s<<4)|0)|0],o=l[o+13|0]-s<<8,o=(0|r)!=1?(0|o)/(0|r)|0:o,(0|t)>=(0|a)))))for(p=o>>>0>255,w=o>>>8|0,r=s<<8,s=0-o>>>8|0,E=(0|o)<=0;E?(c=(f=(c=(0|(i=(0|s)>(0|(i=e[101024+(g[z(t,6)+A|0]<<2)>>2]))?s:i))>=18?18:i)+(i=(0|(i=(0|(r=r+o|0))/256|0))>0?i:0)|0)>>>0>=254?254:f,f=i>>>0>=254?254:i):(i=z(t,6)+A|0,g[i+2|0]=p|l[i+2|0],f=(i=(0|(i=(0|r)/256|0))>0?i:0)>>>0>=254?254:i,c=(i=i+w|0)>>>0>=254?254:i,r=r+o|0),i=z(t,6)+A|0,g[i+5|0]=f,g[i+4|0]=c,(0|a)!=(0|(t=t+1|0)););}else{if(t=(he=e[34455])+z(s,68)|0,o=l[t+24|0],f=l[t+25|0],i=(t=e[33268])+r|0,!((0|t)<=0||(m=f-o<<8,m=(0|t)!=1?(0|m)/(0|t)|0:m,(0|r)>=(0|i))))for(p=m>>>0>255,w=m>>>8|0,t=o<<8,f=0-m>>>8|0,E=(0|m)<=0;E?(o=(o=(Z=(0|(o=(0|(o=e[101024+(g[z(r,6)+A|0]<<2)>>2]))<(0|f)?f:o))>=18?18:o)+(c=(0|(o=(0|(t=t+m|0))/256|0))>0?o:0)|0)>>>0>=254?254:o,c=c>>>0>=254?254:c):(o=z(r,6)+A|0,g[o+2|0]=p|l[o+2|0],c=(o=(0|(o=(0|t)/256|0))>0?o:0)>>>0>=254?254:o,o=(o=o+w|0)>>>0>=254?254:o,t=t+m|0),Z=z(r,6)+A|0,g[Z+5|0]=c,g[Z+4|0]=o,(0|i)!=(0|(r=r+1|0)););2&l[188785]?(r=e[33271],e[33270]=r):r=e[33270],f=r,t=he+z(s,68)|0;A:if((0|(w=l[t+33|0]))!=255)for(;;){if((0|(f=f-1|0))<(0|i)){f=r;break A}if(!(g[z(f,6)+A|0]<4))break}if((0|r)>(0|i)){for(zA=((o=(cA=(E=l[t+32|0])-(m=l[0|(c=t+31|0)])<<8)>>31)^cA)-o|0,Ve=(0|(t=l[0|(p=t+30|0)]))==255,Z=w<<8,Qe=m<<8,et=E<<8,ce=he+z(s,68)|0,at=(0|t)!=255,E=0,w=0,t=1,m=0;;){A:{if(P=z(i,6)+A|0,!(!(1&t)&(0|(ee=g[0|P]))<4)){r:if(1&((0|ee)==5|t)){s:if(at){if(rA=1,t=0,o=p,!((0|f)<=(0|(m=i+1|0)))){for(;;){if(o=p,(0|(w=g[z(m,6)+A|0]))>6)break s;if(t=((0|w)>3)+t|0,(0|f)==(0|(m=m+1|0)))break}o=p}}else{if(t=0,m=i,o=c,(0|f)<=(0|i))break s;for(;;){if(o=c,(0|(w=g[z(m,6)+A|0]))>6)break s;if(t=((0|w)>3)+t|0,(0|f)==(0|(m=m+1|0)))break}o=c}if(w=l[0|o]<<8,MA=0,(0|(m=(0|t)<(0|(o=l[ce+34|0]))?t:o))<2){Ke=0;break r}Ke=(0|cA)/(m-1|0)|0}else(0|i)!=(0|f)?rA?(Ve=1,m=m+1|0,rA=0,w=Qe):(0|m)>0?(w=w+Ke|0,rA=0):(rA=0,w=(z(g[16+(ce+MA|0)|0],zA)>>6)+et|0,MA=(0|(t=MA+1|0))<l[ce+35|0]?t:0):(Ve=2,w=Z);if(m=m-1|0,!((0|ee)<4)){t=o=i+1|0;r:if(!((0|r)<=(0|i)))for(;;){if(g[z(t,6)+A|0]>1)break r;if(!((0|r)>=(0|(t=t+1|0))))break}g[0|P]=6,g[P+1|0]=l[ce+26|0],E=0,Y=l[ce+27|0],i=(0|(i=(0|w)/256|0))>0?i:0,g[P+5|0]=i>>>0>=254?254:i,i=i+Y|0,g[P+4|0]=i>>>0>=254?254:i,Be=t-o|0;break A}}if((0|ee)>=2){t=o=i+1|0;r:if(!((0|r)<=(0|i)))for(;;){if(g[z(t,6)+A|0]>1)break r;if(!((0|r)>=(0|(t=t+1|0))))break}E=0,i=(0|(i=(0|w)/256|0))>0?i:0,g[P+5|0]=i>>>0>=254?254:i,Y=e[100976+(ee<<2)>>2],g[P+2|0]=l[P+2|0]|Y>>>31,i=(0|(i=(ee=i)+(((i=Y>>31)^Y)-i|0)|0))>0?i:0,g[P+4|0]=i>>>0>=254?254:i,Be=t-o|0}else(0|Be)<=1?(Y=g[36+(ce+Ve|0)|0],t=0):(Y=g[36+(t=ce+Ve|0)|0],t=(g[t+39|0]-Y|0)/(Be-1|0)|0),o=e[100976+(ee<<2)>>2],g[P+2|0]=l[P+2|0]|o>>>31,t=(0|(t=(((0|w)/256|0)+Y|0)+z(t,E)|0))>0?t:0,g[P+5|0]=t>>>0>=254?254:t,t=(0|(t=t+(((ee=o)^(o>>=31))-o|0)|0))>0?t:0,g[P+4|0]=t>>>0>=254?254:t,E=E+1|0,o=i+1|0}if(t=0,(0|r)==(0|(i=o)))break}i=r}if(l[133068]||(o=z(i,6)+A|0,e[33269]?(c=he+z(s,68)|0,t=l[c+47|0],f=l[c+46|0]-t|0,c=c+45|0):(c=he+z(s,68)|0,t=l[c+44|0],f=l[c+43|0]-t|0,c=c+42|0),c=l[0|c],p=(((p=f>>31)^f)-p|0)+t|0,g[o+4|0]=p>>>0>=254?254:p,g[o+5|0]=t>>>0>=254?254:t,t=z(i,6)+A|0,g[t+2|0]=l[t+2|0]|f>>>31,r=z(r,6)+A|0,g[r+1|0]=c,t=i+1|0,l[0|r]==4&&(g[0|r]=6),(0|(r=a-t|0))<=0)||(o=he+z(s,68)|0,s=l[o+48|0],o=l[o+49|0]-s<<8,o=(0|r)!=1?(0|o)/(0|r)|0:o,(0|t)>=(0|a)))break e;for(p=o>>>0>255,w=o>>>8|0,r=s<<8,s=0-o>>>8|0,E=(0|o)<=0;E?(c=(f=(c=(0|(i=(0|s)>(0|(i=e[101024+(g[z(t,6)+A|0]<<2)>>2]))?s:i))>=18?18:i)+(i=(0|(i=(0|(r=r+o|0))/256|0))>0?i:0)|0)>>>0>=254?254:f,f=i>>>0>=254?254:i):(i=z(t,6)+A|0,g[i+2|0]=p|l[i+2|0],f=(i=(0|(i=(0|r)/256|0))>0?i:0)>>>0>=254?254:i,c=(i=i+w|0)>>>0>=254?254:i,r=r+o|0),i=z(t,6)+A|0,g[i+5|0]=f,g[i+4|0]=c,(0|a)!=(0|(t=t+1|0)););}}function La(){var A,t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0;if((0|(A=e[36455]))!=(0|(f=e[36454]))){e:if(!((0|(P=e[36427]))<0|(0|f)==(0|P))){r=w=e[8+(216192+((m=P)<<4)|0)>>2];A:{for(;;){if((a=e[(o=216192+((m=(0|(a=m-1|0))<0?169:a)<<4)|0)>>2])-5>>>0<2)break A;r:{if((0|a)<=4){if(e[o+12>>2]!=(0|r))break A;if(a=M[o+4>>1],e[o+12>>2]=w,r=e[o+8>>2],16&(t=M[r>>1]))break r;for(Z=32&t?(z(a,12)>>>0)/10|0:a,s=0,a=r,c=0;;){t=M[r>>1];s:if(!(c>>>0<3&&8&t)){if(t=t<<16>>16,(0|(Y=(p=b[2+((E=c<<1)+r|0)>>1])-(i=b[2+(E=w+E|0)>>1])|0))>(0|(p=(0|z(Z,(0|z(e[200944+(c<<2)>>2],(0|Y)>0?p+(i<<1)|0:(p<<1)+i|0))/3e3|0))/256|0)))s||((0|t)<0?a=r:(a=0,t=(0|(t=e[44469]+1|0))<=169?t:0,e[44469]=t,(t=177888+(s=t<<6)|0)&&(a=M[r+4>>1]|M[r+6>>1]<<16,i=M[r>>1]|M[r+2>>1]<<16,b[t>>1]=i,b[t+2>>1]=i>>>16,b[t+4>>1]=a,b[t+6>>1]=a>>>16,a=M[r+60>>1]|M[r+62>>1]<<16,i=M[r+56>>1]|M[r+58>>1]<<16,b[t+56>>1]=i,b[t+58>>1]=i>>>16,b[t+60>>1]=a,b[t+62>>1]=a>>>16,a=M[r+52>>1]|M[r+54>>1]<<16,i=M[r+48>>1]|M[r+50>>1]<<16,b[t+48>>1]=i,b[t+50>>1]=i>>>16,b[t+52>>1]=a,b[t+54>>1]=a>>>16,a=M[r+44>>1]|M[r+46>>1]<<16,i=M[r+40>>1]|M[r+42>>1]<<16,b[t+40>>1]=i,b[t+42>>1]=i>>>16,b[t+44>>1]=a,b[t+46>>1]=a>>>16,a=M[r+36>>1]|M[r+38>>1]<<16,i=M[r+32>>1]|M[r+34>>1]<<16,b[t+32>>1]=i,b[t+34>>1]=i>>>16,b[t+36>>1]=a,b[t+38>>1]=a>>>16,a=M[r+28>>1]|M[r+30>>1]<<16,i=M[r+24>>1]|M[r+26>>1]<<16,b[t+24>>1]=i,b[t+26>>1]=i>>>16,b[t+28>>1]=a,b[t+30>>1]=a>>>16,a=M[r+20>>1]|M[r+22>>1]<<16,i=M[r+16>>1]|M[r+18>>1]<<16,b[t+16>>1]=i,b[t+18>>1]=i>>>16,b[t+20>>1]=a,b[t+22>>1]=a>>>16,a=M[r+12>>1]|M[r+14>>1]<<16,i=M[r+8>>1]|M[r+10>>1]<<16,b[t+8>>1]=i,b[t+10>>1]=i>>>16,b[t+12>>1]=a,b[t+14>>1]=a>>>16,g[s+177904|0]=0,b[t>>1]=32768|M[t>>1],a=t))),t=p+M[E+2>>1]|0;else{if((0-p|0)<=(0|Y))break s;s||((0|t)<0?a=r:(a=0,t=(0|(t=e[44469]+1|0))<=169?t:0,e[44469]=t,(t=177888+(s=t<<6)|0)&&(a=M[r+4>>1]|M[r+6>>1]<<16,i=M[r>>1]|M[r+2>>1]<<16,b[t>>1]=i,b[t+2>>1]=i>>>16,b[t+4>>1]=a,b[t+6>>1]=a>>>16,a=M[r+60>>1]|M[r+62>>1]<<16,i=M[r+56>>1]|M[r+58>>1]<<16,b[t+56>>1]=i,b[t+58>>1]=i>>>16,b[t+60>>1]=a,b[t+62>>1]=a>>>16,a=M[r+52>>1]|M[r+54>>1]<<16,i=M[r+48>>1]|M[r+50>>1]<<16,b[t+48>>1]=i,b[t+50>>1]=i>>>16,b[t+52>>1]=a,b[t+54>>1]=a>>>16,a=M[r+44>>1]|M[r+46>>1]<<16,i=M[r+40>>1]|M[r+42>>1]<<16,b[t+40>>1]=i,b[t+42>>1]=i>>>16,b[t+44>>1]=a,b[t+46>>1]=a>>>16,a=M[r+36>>1]|M[r+38>>1]<<16,i=M[r+32>>1]|M[r+34>>1]<<16,b[t+32>>1]=i,b[t+34>>1]=i>>>16,b[t+36>>1]=a,b[t+38>>1]=a>>>16,a=M[r+28>>1]|M[r+30>>1]<<16,i=M[r+24>>1]|M[r+26>>1]<<16,b[t+24>>1]=i,b[t+26>>1]=i>>>16,b[t+28>>1]=a,b[t+30>>1]=a>>>16,a=M[r+20>>1]|M[r+22>>1]<<16,i=M[r+16>>1]|M[r+18>>1]<<16,b[t+16>>1]=i,b[t+18>>1]=i>>>16,b[t+20>>1]=a,b[t+22>>1]=a>>>16,a=M[r+12>>1]|M[r+14>>1]<<16,i=M[r+8>>1]|M[r+10>>1]<<16,b[t+8>>1]=i,b[t+10>>1]=i>>>16,b[t+12>>1]=a,b[t+14>>1]=a>>>16,g[s+177904|0]=0,b[t>>1]=32768|M[t>>1],a=t))),t=M[E+2>>1]-p|0}s=1,b[2+((c<<1)+a|0)>>1]=t,e[o+8>>2]=a}if((0|(c=c+1|0))==6)break}w=a}if((0|f)!=(0|m))continue;break A}break}w=r}for(a=0;;){if((r=e[(m=216192+(P<<4)|0)>>2])-5>>>0<2)break e;if((0|r)<=4){if(r=e[m+8>>2],t=M[m+4>>1],a){if((0|r)!=(0|a))break e;e[m+8>>2]=w}else w=r;if(16&(a=M[w>>1]))break e;for(E=32&a?(z(t,6)>>>0)/5|0:t,s=0,r=a=e[m+12>>2],c=0;;){A:{r:if((0|(f=(o=b[2+((t=c<<1)+a|0)>>1])-(t=b[2+(p=t+w|0)>>1])|0))>(0|(o=(0|z(E,(0|z(e[200944+(c<<2)>>2],(0|f)>0?o+(t<<1)|0:(o<<1)+t|0))/3e3|0))/256|0))){if(!s){if(b[a>>1]<0){r=a,t=t+o|0;break r}r=(0|(r=e[44469]+1|0))<=169?r:0,e[44469]=r,s=M[a+20>>1]|M[a+22>>1]<<16,t=16+(r=177888+(r<<6)|0)|0,f=M[a+16>>1]|M[a+18>>1]<<16,b[t>>1]=f,b[t+2>>1]=f>>>16,b[t+4>>1]=s,b[t+6>>1]=s>>>16,t=M[a+4>>1]|M[a+6>>1]<<16,s=M[a>>1]|M[a+2>>1]<<16,b[r>>1]=s,b[r+2>>1]=s>>>16,b[r+4>>1]=t,b[r+6>>1]=t>>>16,t=M[a+12>>1]|M[a+14>>1]<<16,s=M[a+8>>1]|M[a+10>>1]<<16,b[r+8>>1]=s,b[r+10>>1]=s>>>16,b[r+12>>1]=t,b[r+14>>1]=t>>>16,t=M[a+28>>1]|M[a+30>>1]<<16,s=M[a+24>>1]|M[a+26>>1]<<16,b[r+24>>1]=s,b[r+26>>1]=s>>>16,b[r+28>>1]=t,b[r+30>>1]=t>>>16,t=M[a+36>>1]|M[a+38>>1]<<16,s=M[a+32>>1]|M[a+34>>1]<<16,b[r+32>>1]=s,b[r+34>>1]=s>>>16,b[r+36>>1]=t,b[r+38>>1]=t>>>16,t=M[a+44>>1]|M[a+46>>1]<<16,s=M[a+40>>1]|M[a+42>>1]<<16,b[r+40>>1]=s,b[r+42>>1]=s>>>16,b[r+44>>1]=t,b[r+46>>1]=t>>>16,t=M[a+52>>1]|M[a+54>>1]<<16,s=M[a+48>>1]|M[a+50>>1]<<16,b[r+48>>1]=s,b[r+50>>1]=s>>>16,b[r+52>>1]=t,b[r+54>>1]=t>>>16,t=M[a+60>>1]|M[a+62>>1]<<16,s=M[a+56>>1]|M[a+58>>1]<<16,b[r+56>>1]=s,b[r+58>>1]=s>>>16,b[r+60>>1]=t,b[r+62>>1]=t>>>16,g[r+16|0]=0,b[r>>1]=32768|M[r>>1],t=M[p+2>>1]}t=t+o|0}else{if((0|f)>=(0-o|0))break A;s||(b[a>>1]<0?r=a:(r=(0|(r=e[44469]+1|0))<=169?r:0,e[44469]=r,s=M[a+20>>1]|M[a+22>>1]<<16,t=16+(r=177888+(r<<6)|0)|0,f=M[a+16>>1]|M[a+18>>1]<<16,b[t>>1]=f,b[t+2>>1]=f>>>16,b[t+4>>1]=s,b[t+6>>1]=s>>>16,t=M[a+4>>1]|M[a+6>>1]<<16,s=M[a>>1]|M[a+2>>1]<<16,b[r>>1]=s,b[r+2>>1]=s>>>16,b[r+4>>1]=t,b[r+6>>1]=t>>>16,t=M[a+12>>1]|M[a+14>>1]<<16,s=M[a+8>>1]|M[a+10>>1]<<16,b[r+8>>1]=s,b[r+10>>1]=s>>>16,b[r+12>>1]=t,b[r+14>>1]=t>>>16,t=M[a+28>>1]|M[a+30>>1]<<16,s=M[a+24>>1]|M[a+26>>1]<<16,b[r+24>>1]=s,b[r+26>>1]=s>>>16,b[r+28>>1]=t,b[r+30>>1]=t>>>16,t=M[a+36>>1]|M[a+38>>1]<<16,s=M[a+32>>1]|M[a+34>>1]<<16,b[r+32>>1]=s,b[r+34>>1]=s>>>16,b[r+36>>1]=t,b[r+38>>1]=t>>>16,t=M[a+44>>1]|M[a+46>>1]<<16,s=M[a+40>>1]|M[a+42>>1]<<16,b[r+40>>1]=s,b[r+42>>1]=s>>>16,b[r+44>>1]=t,b[r+46>>1]=t>>>16,t=M[a+52>>1]|M[a+54>>1]<<16,s=M[a+48>>1]|M[a+50>>1]<<16,b[r+48>>1]=s,b[r+50>>1]=s>>>16,b[r+52>>1]=t,b[r+54>>1]=t>>>16,t=M[a+60>>1]|M[a+62>>1]<<16,s=M[a+56>>1]|M[a+58>>1]<<16,b[r+56>>1]=s,b[r+58>>1]=s>>>16,b[r+60>>1]=t,b[r+62>>1]=t>>>16,g[r+16|0]=0,b[r>>1]=32768|M[r>>1],t=M[p+2>>1])),t=t-o|0}s=1,b[2+((c<<1)+r|0)>>1]=t,e[m+12>>2]=r}if((0|(c=c+1|0))==6)break}w=r}if((0|A)==(0|(P=(0|(r=P+1|0))<=169?r:0)))break}}e[36454]=A}}function wa(A,t){var r,a,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0;J=r=J-48|0,be(+A),i=0|X(1),s=0|X(0),a=i;e:{A:{r:{if((f=2147483647&i)>>>0<=1074752122){if((1048575&i)==598523)break r;if(f>>>0<=1073928572){if((0|a)>0|(0|a)>=0){c=(A+=-1.5707963267341256)+-6077100506506192e-26,D[t>>3]=c,D[t+8>>3]=A-c-6077100506506192e-26,i=1;break e}c=(A+=1.5707963267341256)+6077100506506192e-26,D[t>>3]=c,D[t+8>>3]=A-c+6077100506506192e-26,i=-1;break e}if((0|a)>0|(0|a)>=0){c=(A+=-3.1415926534682512)+-12154201013012384e-26,D[t>>3]=c,D[t+8>>3]=A-c-12154201013012384e-26,i=2;break e}c=(A+=3.1415926534682512)+12154201013012384e-26,D[t>>3]=c,D[t+8>>3]=A-c+12154201013012384e-26,i=-2;break e}if(f>>>0<=1075594811){if(f>>>0<=1075183036){if((0|f)==1074977148)break r;if((0|a)>0|(0|a)>=0){c=(A+=-4.712388980202377)+-18231301519518578e-26,D[t>>3]=c,D[t+8>>3]=A-c-18231301519518578e-26,i=3;break e}c=(A+=4.712388980202377)+18231301519518578e-26,D[t>>3]=c,D[t+8>>3]=A-c+18231301519518578e-26,i=-3;break e}if((0|f)==1075388923)break r;if((0|a)>0|(0|a)>=0){c=(A+=-6.2831853069365025)+-2430840202602477e-25,D[t>>3]=c,D[t+8>>3]=A-c-2430840202602477e-25,i=4;break e}c=(A+=6.2831853069365025)+2430840202602477e-25,D[t>>3]=c,D[t+8>>3]=A-c+2430840202602477e-25,i=-4;break e}if(f>>>0>1094263290)break A}s=(Qe=(c=A+-1.5707963267341256*(w=.6366197723675814*A+6755399441055744-6755399441055744))-(P=6077100506506192e-26*w))<-.7853981633974483,i=Ne(w)<2147483648?~~w:-2147483648,s?(i=i-1|0,P=6077100506506192e-26*(w+=-1),c=A+-1.5707963267341256*w):Qe>.7853981633974483&&(i=i+1|0,P=6077100506506192e-26*(w+=1),c=A+-1.5707963267341256*w),A=c-P,D[t>>3]=A,be(+A),s=0|X(1),X(0),((o=f>>>20|0)-(s>>>20&2047)|0)<17||(P=c,A=(c-=A=6077100506303966e-26*w)-(P=20222662487959506e-37*w-(P-c-A)),D[t>>3]=A,be(+A),s=0|X(1),X(0),(o-(s>>>20&2047)|0)<50||(P=c,A=(c-=A=20222662487111665e-37*w)-(P=84784276603689e-45*w-(P-c-A)),D[t>>3]=A)),D[t+8>>3]=c-A-P;break e}if(f>>>0>=2146435072)A-=A,D[t>>3]=A,D[t+8>>3]=A,i=0;else{for(R(0,0|s),R(1,1048575&a|1096810496),A=+re(),i=0,s=1;o=(r+16|0)+(i<<3)|0,c=+(0|(i=Ne(A)<2147483648?~~A:-2147483648)),D[o>>3]=c,A=16777216*(A-c),i=1,o=s,s=0,o;);for(D[r+32>>3]=A,i=2;i=(s=i)-1|0,D[(r+16|0)+(s<<3)>>3]==0;);if(Ve=r+16|0,o=0,J=m=J-560|0,f=z(Be=(0|(f=((i=(f>>>20|0)-1046|0)-3|0)/24|0))>0?f:0,-24)+i|0,((Y=e[28105])+(p=(ce=s+1|0)-1|0)|0)>=0)for(i=Y+ce|0,s=Be-p|0;D[(m+320|0)+(o<<3)>>3]=(0|s)<0?0:+e[112432+(s<<2)>>2],s=s+1|0,(0|i)!=(0|(o=o+1|0)););for(ee=f-24|0,i=0,o=(0|Y)>0?Y:0,Z=(0|ce)<=0;;){if(Z)A=0;else for(E=i+p|0,s=0,A=0;A=D[(s<<3)+Ve>>3]*D[(m+320|0)+(E-s<<3)>>3]+A,(0|ce)!=(0|(s=s+1|0)););if(D[(i<<3)+m>>3]=A,s=(0|i)==(0|o),i=i+1|0,s)break}MA=47-f|0,Ke=48-f|0,zA=f-25|0,i=Y;A:{for(;;){if(A=D[(i<<3)+m>>3],s=0,o=i,!(E=(0|i)<=0))for(;Z=(m+480|0)+(s<<2)|0,p=Ne(c=5960464477539063e-23*A)<2147483648?~~c:-2147483648,p=Ne(A=-16777216*(c=+(0|p))+A)<2147483648?~~A:-2147483648,e[Z>>2]=p,A=D[((o=o-1|0)<<3)+m>>3]+c,(0|i)!=(0|(s=s+1|0)););A=Ws(A,ee),A+=-8*AA(.125*A),A-=+(0|(Z=Ne(A)<2147483648?~~A:-2147483648));r:{s:{i:{if(rA=(0|ee)<=0){if(ee)break i;p=e[476+((i<<2)+m|0)>>2]>>23}else he=o=(i<<2)+m|0,o=(p=e[o+476>>2])-((s=p>>Ke)<<Ke)|0,e[he+476>>2]=o,Z=s+Z|0,p=o>>MA;if((0|p)<=0)break r;break s}if(p=2,!(A>=.5)){p=0;break r}}if(s=0,o=0,!E)for(;cA=e[(he=(m+480|0)+(s<<2)|0)>>2],E=16777215,o||(E=16777216,cA)?(e[he>>2]=E-cA,o=1):o=0,(0|i)!=(0|(s=s+1|0)););s:if(!rA){s=8388607;i:switch(0|zA){case 1:s=4194303;break;case 0:break i;default:break s}e[476+(E=(i<<2)+m|0)>>2]=e[E+476>>2]&s}Z=Z+1|0,(0|p)==2&&(A=1-A,p=2,o&&(A-=Ws(1,ee)))}if(A!=0)break;if(o=0,!((0|Y)>=(0|(s=i)))){for(;o=e[(m+480|0)+((s=s-1|0)<<2)>>2]|o,(0|s)>(0|Y););if(o){for(f=ee;f=f-24|0,!e[(m+480|0)+((i=i-1|0)<<2)>>2];);break A}}for(s=1;o=s,s=s+1|0,!e[(m+480|0)+(Y-o<<2)>>2];);for(o=i+o|0;;){if(p=i+ce|0,i=i+1|0,D[(m+320|0)+(p<<3)>>3]=e[112432+(Be+i<<2)>>2],s=0,A=0,(0|ce)>0)for(;A=D[(s<<3)+Ve>>3]*D[(m+320|0)+(p-s<<3)>>3]+A,(0|ce)!=(0|(s=s+1|0)););if(D[(i<<3)+m>>3]=A,!((0|i)<(0|o)))break}i=o}(A=Ws(A,24-f|0))>=16777216?(ee=(m+480|0)+(i<<2)|0,s=Ne(c=5960464477539063e-23*A)<2147483648?~~c:-2147483648,o=Ne(A=-16777216*+(0|s)+A)<2147483648?~~A:-2147483648,e[ee>>2]=o,i=i+1|0):(s=Ne(A)<2147483648?~~A:-2147483648,f=ee),e[(m+480|0)+(i<<2)>>2]=s}if(A=Ws(1,f),!((0|i)<0)){for(s=i;o=s,D[(s<<3)+m>>3]=A*+e[(m+480|0)+(s<<2)>>2],s=s-1|0,A*=5960464477539063e-23,o;);if(E=0,!((0|i)<0))for(f=(0|Y)>0?Y:0,o=i;;){for(ee=f>>>0<E>>>0?f:E,Y=i-o|0,s=0,A=0;A=D[115200+(s<<3)>>3]*D[(s+o<<3)+m>>3]+A,ce=(0|s)!=(0|ee),s=s+1|0,ce;);if(D[(m+160|0)+(Y<<3)>>3]=A,o=o-1|0,s=(0|i)!=(0|E),E=E+1|0,!s)break}}if(A=0,(0|i)>=0)for(s=i;o=s,s=s-1|0,A+=D[(m+160|0)+(o<<3)>>3],o;);if(D[r>>3]=p?-A:A,A=D[m+160>>3]-A,s=1,(0|i)>0)for(;A+=D[(m+160|0)+(s<<3)>>3],o=(0|s)!=(0|i),s=s+1|0,o;);D[r+8>>3]=p?-A:A,J=m+560|0,i=7&Z,A=D[r>>3],(0|a)<0?(D[t>>3]=-A,D[t+8>>3]=-D[r+8>>3],i=0-i|0):(D[t>>3]=A,D[t+8>>3]=D[r+8>>3])}}return J=r+48|0,i}function ZA(){var A=0,t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0,et=0,at=0,dt=0,St=0,Zt=0,er=0,pr=0,hr=0,yr=0,Er=0,Sr=0,Wr=0,na=0,qr=0,oa=0,Ba=0,As=0,os=0,ls=0;e[55925]=0,A=e[56772],e[56772]=A+1,r=e[55961],E=e[55922],Y=Yi(39.89822670059037*(t=+(0|A))),m=Yi(22.30530784048753*t),t=+(0|E)/50*(+(0|r)/100)*(Yi(14.765485471872028*t)+(Y+m))*10,A=Ne(t)<2147483648?~~t:-2147483648,e[56607]=A+e[56607];e:if(!(e[55923]<=0)){for(;;){for(r=It(e[33209],0,1103515245,0),A=$,A=Wn(r=r+12345|0,A=r>>>0<12345?A+1|0:A),e[33209]=A,A=8191+((A>>>0)%16383|0)|0,e[55929]=A,dt=+(0|A),t=.75*D[28387]+dt,D[28387]=t,St=(0|(A=e[55924]))>(0|(Ke=e[55928]))?.5*t:t,hr=(s=.033*+e[56652])>0?1-s:1,r=e[56650]<<2,MA=(0|(cA=e[55921]))==1&&(0|r)>263?263:r,yr=111136+((Zt=e[56651])<<1)|0,Er=111136+((zA=e[56658])<<1)|0,Sr=(0|zA)>0,er=e[55918],Wr=z(er,40),na=e[55925],qr=D[27967],pr=e[56607],t=D[27979],ee=D[27969],c=D[27970],et=e[56780],Be=e[56654],w=D[27976],P=D[27972],ce=D[28388],he=D[28389],E=e[55927],a=D[28383],p=e[55926],Qe=e[55956],oa=D[27975],m=D[28131],i=D[28130],o=D[28123],Z=D[28121],f=D[28122],rA=D[28120],Ve=D[28119],Ba=D[28129],As=D[28128],os=D[28127],ls=Da(0*D[27968]),at=0;;){Y=i;A:{r:switch(cA-1|0){case 0:ce=0,i=Z*o,o=f,f=a=i+(Ve*(ce=(0|A)<=2?D[111312+(A<<3)>>3]:ce)+rA*o);break A;case 1:if(a=0,(0|A)>=(0|E)){he=0;break A}i=D[27965]-D[27966],D[27965]=i,a=.028*(he=i+he);break A;case 2:if(!p){Qe=100,a=0;break A}Qe=100,r=Ne(i=+(0|A)/+(0|p)*100)<2147483648?~~i:-2147483648,a=+b[110928+((0|r)%100<<1)>>1],a=t*((+b[110928+((r+1|0)%100<<1)>>1]-a)*(i-+(0|r))+a);break A;case 3:break r;default:break A}p?(Qe=256,r=Ne(i=+(0|A)/+(0|p)*256)<2147483648?~~i:-2147483648,a=+b[111344+((0|r)%256<<1)>>1],a=t*((+b[111344+((r+1|0)%256<<1)>>1]-a)*(i-+(0|r))+a)):(Qe=256,a=0)}if((0|A)>=(0|p)&&((0|pr)>0?(A=(0|Wr)/(0|pr)|0,w=0,P=0,P=zA>>>0<=87?.001*+b[Er>>1]:P,w=Zt>>>0<=87?.001*+b[yr>>1]*.1:w,Ke=A>>Sr,E=(0|(r=(p=(A-1|0)<=(0|MA))?A-2|0:MA))<=40?40:r,i=+b[111776+((E=p||(0|r)<40?E:MA)<<1)>>1],D[27966]=i,Z=i,i=+(0|E),D[27965]=Z*i*.333,Be=(0|(r=A-E|0))>(0|Be)?Be:r,et=0-(r=(0|et)<0?0-Be|0:Be)|0,Ve=(i*=.00833)*i,Ve*=1-(rA=(Z=(i=Pt(qr*+((0|er)/(0|E)|0)))*ls)+Z)-(Z=i*-i),A=(0|(p=A+r|0))!=4):(e[55930]=0,e[55931]=0,e[55932]=0,e[55933]=0,Ke=4,w=0,P=0,p=4,A=0),c=(A|=!na)?s:c,ee=A?hr:ee,A=0),A=A+1|0,i=a=Ba*m+(os*a+As*Y),m=Y,(0|(at=at+1|0))==4)break}if(e[55926]=p,e[55956]=Qe,e[55924]=A,D[28383]=a,e[55927]=E,D[28389]=he,D[28388]=ce,D[27972]=P,D[27976]=w,e[55928]=Ke,e[56654]=Be,e[56780]=et,D[27970]=c,D[27969]=ee,D[28122]=f,D[28120]=rA,D[28119]=Ve,D[28123]=o,D[28121]=Z,D[28131]=m,D[28130]=a,(0|cA)==5&&(a=6e3*((t=+(0|A)/+(0|p))+t+-1),D[28383]=a),t=a*ee+D[28384]*c,D[28383]=t,D[28384]=t,(0|A)<(0|E)&&(t=w*dt+t,D[28383]=t),c=St*D[27974],Y=t*D[27973]+c,m=0,e[55916]!=2&&(m=D[27987],f=D[27986],D[27987]=f,t=c+t*P,D[27986]=t,c=D[28059],o=D[28058],D[28059]=o,t=c*D[28057]+(D[28055]*(m*D[27985]+(D[27983]*t+f*D[27984]))+o*D[28056]),D[28058]=t,m=D[28049],c=D[28051],f=D[28048],o=D[28047],s=D[28050],D[28051]=s,t=m*c+(o*t+f*s),D[28050]=t,m=D[28043],c=D[28041],f=D[28040],o=D[28039],s=D[28042],D[28043]=s,t=c*m+(o*t+f*s),D[28042]=t,m=D[28035],c=D[28033],f=D[28032],o=D[28031],s=D[28034],D[28035]=s,t=c*m+(o*t+f*s),D[28034]=t,m=D[28027],c=D[28025],f=D[28024],o=D[28023],s=D[28026],D[28027]=s,t=c*m+(o*t+f*s),D[28026]=t,m=D[28019],c=D[28017],f=D[28016],o=D[28015],s=D[28018],D[28019]=s,t=c*m+(o*t+f*s),D[28018]=t,m=D[28011],c=D[28009],f=D[28008],o=D[28007],s=D[28010],D[28011]=s,t=c*m+(o*t+f*s),D[28010]=t,m=D[28003],c=D[28001],f=D[28e3],o=D[27999],s=D[28002],D[28003]=s,t=c*m+(o*t+f*s),D[28002]=t,m=D[27995],c=D[27993],f=D[27992],o=D[27991],s=D[27994],D[27995]=s,m=c*m+(o*t+f*s),D[27994]=m),t=D[28385],D[28385]=Y,c=D[28075],f=D[28074],D[28075]=f,o=D[28067],s=D[28066],D[28067]=s,c=c*D[28073]+(D[28071]*Y+f*D[28072]),D[28074]=c,f=o*D[28065]+(D[28063]*Y+s*D[28064]),D[28066]=f,o=D[28081],s=D[28083],i=D[28079],a=D[28080],w=D[28082],D[28083]=w,Y=o*s+(i*(t=oa*St+Y-t)+a*w),D[28082]=Y,o=D[28091],s=D[28089],i=D[28087],a=D[28088],w=D[28090],D[28091]=w,o=s*o+(i*t+a*w),D[28090]=o,s=D[28099],i=D[28097],a=D[28095],w=D[28096],P=D[28098],D[28099]=P,s=i*s+(a*t+w*P),D[28098]=s,i=D[28107],a=D[28105],w=D[28103],P=D[28104],ee=D[28106],D[28107]=ee,i=a*i+(w*t+P*ee),D[28106]=i,a=D[28115],w=D[28113],P=D[28111],ee=D[28112],ce=D[28114],D[28115]=ce,a=w*a+(P*t+ee*ce),D[28114]=a,w=D[28139],P=D[28137],ee=D[28136],ce=D[28135],he=D[27971],Z=D[28138],D[28139]=Z,t=P*w+(ce*(t*he-(a-(i-(s-(o-(Y-(m+c+f)))))))+ee*Z),D[28138]=t,t=D[27977]*(t*+e[50779]),a=+(0|(A=Ne(t)<2147483648?~~t:-2147483648)),(0|(A=e[50776]))<e[50773]&&(p=A+1|0,r=e[50772],(E=e[50774])?(e[50776]=p,A=z(E,g[A+r|0])):(E=l[A+r|0],r=g[r+p|0],e[50776]=A+2,A=E|r<<8),a+=+((0|z(e[50775],(0|z(A,e[50780]))/1024|0))/40|0)),(0|(A=e[55962]))<=63&&(e[55962]=A+1,a=a*+(0|A)*.015625),(0|(A=e[55963]))<=0||(A=A-1|0,e[55963]=A,a=a*+(0|A)*.015625,A||(e[55962]=0)),r=(A=e[51293])+1|0,e[51293]=r,p=z(b[205184+(A<<1)>>1],e[50755])>>8,A=Ne(a)<2147483648?~~a:-2147483648,(0|r)>=5500&&(e[51293]=0),r=e[51290],e[51290]=r+1,A=(0|(A=(0|(A=A+p|0))<=-32768?-32768:A))>=32767?32767:A,g[0|r]=A,r=e[51290],e[51290]=r+1,g[0|r]=A>>>8,p=(r=e[51292])+1|0,e[51292]=p,b[205184+(r<<1)>>1]=A,(0|p)>=5500&&(e[51292]=0),p=1,e[56606]=e[56606]+1,ue[54046]<e[51290]+2>>>0)break e;if(A=e[55925]+1|0,e[55925]=A,!((0|A)<e[55923]))break}p=0}return p}function $A(A,t,r,a,s,i,o){var c,f,m,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0;J=c=J-80|0,e[c+76>>2]=t,m=c+55|0,f=c+56|0;e:{A:{r:{s:{i:for(;;){if(E=t,(2147483647^ce)<(0|p))break s;ce=p+ce|0;c:{o:{u:{if(w=l[0|(p=E)])for(;;){l:{n:if(t=255&w){if((0|t)!=37)break l;for(w=p;;){if(l[w+1|0]!=37){t=w;break n}if(p=p+1|0,Y=l[w+2|0],w=t=w+2|0,(0|Y)!=37)break}}else t=p;if((0|(p=p-E|0))>(0|(cA=2147483647^ce)))break s;if(A&&Xr(A,E,p),p)continue i;e[c+76>>2]=t,p=t+1|0,he=-1,l[t+2|0]!=36|g[t+1|0]-48>>>0>=10||(he=g[t+1|0]-48|0,Ve=1,p=t+3|0),e[c+76>>2]=p,Z=0;n:if((t=(w=g[0|p])-32|0)>>>0>31)ee=p;else if(ee=p,75913&(t=1<<t))for(;;){if(ee=p+1|0,e[c+76>>2]=ee,Z|=t,(t=(w=g[p+1|0])-32|0)>>>0>=32)break n;if(p=ee,!(75913&(t=1<<t)))break}n:if((0|w)!=42){if((0|(Be=b0(c+76|0)))<0)break s;w=e[c+76>>2]}else{if(l[ee+2|0]!=36|g[ee+1|0]-48>>>0>=10){if(Ve)break u;if(w=ee+1|0,!A){e[c+76>>2]=w,Ve=0,Be=0;break n}t=e[r>>2],e[r>>2]=t+4,Ve=0,t=e[t>>2]}else e[((g[ee+1|0]<<2)+s|0)-192>>2]=10,w=ee+3|0,Ve=1,t=e[((g[ee+1|0]<<3)+a|0)-384>>2];if(e[c+76>>2]=w,Be=t,(0|t)>=0)break n;Be=0-Be|0,Z|=8192}if(p=0,P=-1,l[0|w]==46)if(l[w+1|0]!=42)e[c+76>>2]=w+1,P=b0(c+76|0),t=e[c+76>>2],rA=1;else{if(l[w+3|0]!=36|g[w+2|0]-48>>>0>=10){if(Ve)break u;t=w+2|0,P=0,A&&(w=e[r>>2],e[r>>2]=w+4,P=e[w>>2])}else e[((g[w+2|0]<<2)+s|0)-192>>2]=10,t=w+4|0,P=e[((g[w+2|0]<<3)+a|0)-384>>2];e[c+76>>2]=t,rA=~P>>>31|0}else t=w,rA=0;for(;;){if(Qe=p,ee=28,Y=t,(p=g[0|t])-123>>>0<4294967238)break r;if(t=Y+1|0,!((p=l[123983+(p+z(Qe,58)|0)|0])-1>>>0<8))break}e[c+76>>2]=t;n:{p:{if((0|p)!=27){if(!p)break r;if((0|he)>=0){e[(he<<2)+s>>2]=p,p=e[4+(w=(he<<3)+a|0)>>2],e[c+64>>2]=e[w>>2],e[c+68>>2]=p;break p}if(!A)break c;Wt(c- -64|0,p,r,o);break n}if((0|he)>=0)break r}if(p=0,!A)continue i}w=-65537&Z,Z=8192&Z?w:Z,he=0,Ke=84065,ee=f;n:{p:{C:{m:{b:{h:{E:{w:{y:{L:{V:{W:{M:{v:{D:{switch(p=g[0|Y],(p=Qe&&(15&p)==3?-33&p:p)-88|0){case 11:break n;case 9:case 13:case 14:case 15:break p;case 27:break E;case 12:case 17:break L;case 23:break V;case 0:case 32:break W;case 24:break M;case 22:break v;case 29:break D;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 25:case 26:case 28:case 30:case 31:break o}switch(p-65|0){case 0:case 4:case 5:case 6:break p;case 2:break b;case 1:case 3:break o}if((0|p)==83)break h;break o}w=e[c+64>>2],Y=e[c+68>>2],Ke=84065;break y}p=0;v:switch(255&Qe){case 0:case 1:case 6:e[e[c+64>>2]>>2]=ce;continue i;case 2:E=e[c+64>>2],e[E>>2]=ce,e[E+4>>2]=ce>>31;continue i;case 3:b[e[c+64>>2]>>1]=ce;continue i;case 4:g[e[c+64>>2]]=ce;continue i;case 7:break v;default:continue i}E=e[c+64>>2],e[E>>2]=ce,e[E+4>>2]=ce>>31;continue i}P=P>>>0<=8?8:P,Z|=8,p=120}if(E=f,MA=32&p,(w=e[c+64>>2])|(Y=e[c+68>>2]))for(;g[0|(E=E-1|0)]=MA|l[124512+(15&w)|0],zA=!Y&w>>>0>15|!!(0|Y),Qe=Y,Y=Y>>>4|0,w=(15&Qe)<<28|w>>>4,zA;);if(!(e[c+64>>2]|e[c+68>>2])|!(8&Z))break w;Ke=84065+(p>>>4|0)|0,he=2;break w}if(p=f,Y=E=e[c+68>>2],E|(w=e[c+64>>2]))for(;g[0|(p=p-1|0)]=7&w|48,Qe=!Y&w>>>0>7|!!(0|Y),Y=(E=Y)>>>3|0,w=(7&E)<<29|w>>>3,Qe;);if(E=p,!(8&Z))break w;P=(0|(p=f-E|0))<(0|P)?P:p+1|0;break w}w=e[c+64>>2],Y=p=e[c+68>>2],(0|p)<0?(Y=E=0-(Y+!!(0|w)|0)|0,w=0-w|0,e[c+64>>2]=w,e[c+68>>2]=E,he=1,Ke=84065):2048&Z?(he=1,Ke=84066):Ke=(he=1&Z)?84067:84065}E=ps(w,Y,f)}if((0|P)<0&&rA)break s;if(Z=rA?-65537&Z:Z,!(P|!!((p=e[c+64>>2])|(w=e[c+68>>2])))){E=f,P=0;break o}P=(0|(p=!(p|w)+(f-E|0)|0))<(0|P)?P:p;break o}if(ee=(p=(p=ai(E=(p=e[c+64>>2])||84639,0,Y=P>>>0>=2147483647?2147483647:P))?p-E|0:Y)+E|0,(0|P)>=0){Z=w,P=p;break o}if(Z=w,P=p,l[0|ee])break s;break o}if(P){w=e[c+64>>2];break m}p=0,ta(A,32,Be,0,Z);break C}e[c+12>>2]=0,e[c+8>>2]=e[c+64>>2],w=c+8|0,e[c+64>>2]=w,P=-1}p=0;m:{for(;;){if(!(E=e[w>>2]))break m;if(!((E=(0|(Y=l0(c+4|0,E)))<0)|Y>>>0>P-p>>>0)){if(w=w+4|0,P>>>0>(p=p+Y|0)>>>0)continue;break m}break}if(E)break A}if(ee=61,(0|p)<0)break r;if(ta(A,32,Be,p,Z),p)for(ee=0,w=e[c+64>>2];;){if(!(E=e[w>>2])||(ee=(E=l0(c+4|0,E))+ee|0)>>>0>p>>>0)break C;if(Xr(A,c+4|0,E),w=w+4|0,!(p>>>0>ee>>>0))break}else p=0}ta(A,32,Be,p,8192^Z),p=(0|p)<(0|Be)?Be:p;continue i}if((0|P)<0&&rA)break s;if(ee=61,(0|(p=0|ct[0|i](A,D[c+64>>3],Be,P,Z,p)))>=0)continue i;break r}g[c+55|0]=e[c+64>>2],P=1,E=m,Z=w;break o}w=l[p+1|0],p=p+1|0}if(A)break e;if(!Ve)break c;for(p=1;;){if(A=e[(p<<2)+s>>2]){if(Wt((p<<3)+a|0,A,r,o),ce=1,(0|(p=p+1|0))!=10)continue;break e}break}if(ce=1,p>>>0>=10)break e;for(;;){if(e[(p<<2)+s>>2])break u;if((0|(p=p+1|0))==10)break}break e}ee=28;break r}if((0|(w=(0|P)>(0|(Y=ee-E|0))?P:Y))>(2147483647^he))break s;if(ee=61,(0|cA)<(0|(p=(0|(P=w+he|0))<(0|Be)?Be:P)))break r;ta(A,32,p,P,Z),Xr(A,Ke,he),ta(A,48,p,P,65536^Z),ta(A,48,w,Y,0),Xr(A,E,Y),ta(A,32,p,P,8192^Z);continue}break}ce=0;break e}ee=61}e[56798]=ee}ce=-1}return J=c+80|0,ce}function PA(A,t,r,a,s,i,o,c,f){var m,p,w,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0,et=0,at=0,dt=0,St=0,Zt=0,er=0,pr=0,hr=0,yr=0,Er=0,Sr=0,Wr=0,na=0,qr=0,oa=0,Ba=0;J=m=J-96|0,Ke=65535&f,ee=-2147483648&(s^f),et=he=65535&s;e:{if(!((p=f>>>16&32767)-32767>>>0>4294934529&(w=s>>>16&32767)-32767>>>0>=4294934530)){if(E=a,!(!a&(0|(Be=Qe=2147483647&s))==2147418112?!(t|r):Be>>>0<2147418112)){Y=a,ee=32768|s;break e}if(!(!(s=c)&(0|(ce=Qe=2147483647&f))==2147418112?!(i|o):ce>>>0<2147418112)){Y=c,ee=32768|f,t=i,r=o;break e}if(!(t|E|2147418112^Be|r)){if(!(s|i|o|ce)){ee=2147450880,t=0,r=0;break e}ee|=2147418112,t=0,r=0;break e}if(!(s|i|2147418112^ce|o)){if(s=t|E,a=r|Be,t=0,r=0,!(a|s)){ee=2147450880;break e}ee|=2147418112;break e}if(!(t|E|r|Be)){t=0,r=0;break e}if(!(s|i|o|ce)){t=0,r=0;break e}(0|Be)==65535|Be>>>0<65535&&(Qe=(E=!(a|he))<<6,s=Ye(f=E?t:a)+32|0,Aa(m+80|0,t,r,a,he,(f=Qe+((0|(f=Ye(E?r:he)))==32?s:f)|0)-15|0),Ve=16-f|0,a=e[m+88>>2],et=e[m+92>>2],r=e[m+84>>2],t=e[m+80>>2]),ce>>>0>65535||(he=(f=!(c|Ke))<<6,E=Ye(s=f?i:c)+32|0,Aa(m- -64|0,i,o,c,Ke,(s=he+((0|(s=Ye(f?o:Ke)))==32?E:s)|0)-15|0),Ve=16+(Ve-s|0)|0,c=e[m+72>>2],Ke=e[m+76>>2],i=e[m+64>>2],o=e[m+68>>2])}if(s=i,i=o<<15|i>>>17,Sr=r,Qe=It(rA=-32768&(f=s<<15),s=0,r,0),zA=s=$,Wr=i,Be=t,t=It(i,0,t,0),i=$+s|0,r=t>>>0>(f=t+Qe|0)>>>0?i+1|0:i,E=0,t=It(Be,P,rA,P),s=(i=f)+$|0,he=s=t>>>0>(ce=E+t|0)>>>0?s+1|0:s,na=(0|i)==(0|s)&E>>>0>ce>>>0|s>>>0<i>>>0,qr=a,cA=It(rA,P,a,0),oa=$,t=It(Sr,P,Wr,P),E=$+oa|0,E=t>>>0>(MA=t+cA|0)>>>0?E+1|0:E,t=Ke<<15|c>>>17,a=It(at=c<<15|o>>>17,0,Be,P),i=$+E|0,St=i=a>>>0>(dt=a+MA|0)>>>0?i+1|0:i,i=(a=(0|r)==(0|zA)&f>>>0<Qe>>>0|r>>>0<zA>>>0)+i|0,Ke=i=r>>>0>(Zt=r+dt|0)>>>0?i+1|0:i,o=Zt,r=i,et=It(rA,P,er=65536|et,Z),Ba=$,a=It(qr,Y,Wr,P),s=$+Ba|0,f=s=a>>>0>(pr=a+et|0)>>>0?s+1|0:s,t=It(hr=-2147483648|t,0,Be,P),i=$+s|0,i=t>>>0>(yr=t+pr|0)>>>0?i+1|0:i,t=It(at,Y,Sr,P),Er=i,i=i+$|0,Qe=t>>>0>(zA=t+yr|0)>>>0?i+1|0:i,s=r+zA|0,i=rA=(t=0)>>>0>(Be=t+o|0)>>>0?s+1|0:s,r=(t=Be+na|0)>>>0<Be>>>0?i+1|0:i,Ve=((w+p|0)+Ve|0)-16383|0,a=It(hr,Y,Sr,P),c=$,s=It(er,Y,Wr,P),i=$+c|0,Z=(0|c)==(0|(i=s>>>0>(o=s+a|0)>>>0?i+1|0:i))&a>>>0>o>>>0|i>>>0<c>>>0,c=i,s=It(at,Y,qr,Y),i=$+i|0,s=i=(a=s+o|0)>>>0<s>>>0?i+1|0:i,o=(0|i)==(0|c)&a>>>0<o>>>0|i>>>0<c>>>0,i=0,i=(c=o)>>>0>(o=o+Z|0)>>>0?1:i,c=o,o=It(hr,Y,er,Y),i=$+i|0,na=c=c+o|0,o=o>>>0>c>>>0?i+1|0:i,c=a,P=s,s=(0|E)==(0|oa)&cA>>>0>MA>>>0|E>>>0<oa>>>0,i=0,s=((Z=E=(0|E)==(0|St)&MA>>>0>dt>>>0|E>>>0>St>>>0)>>>0>(E=s+E|0)>>>0?1:i)+P|0,i=o,Z=s=(a=a+E|0)>>>0<E>>>0?s+1|0:s,cA=a,s=a=(0|s)==(0|P)&a>>>0<c>>>0|s>>>0<P>>>0,E=a=a+na|0,o=i=s>>>0>a>>>0?i+1|0:i,s=It(at,Y,er,Y),P=$,a=It(hr,Y,qr,Y),i=$+P|0,a=i=a>>>0>(c=a+s|0)>>>0?i+1|0:i,s=(i=(0|P)==(0|i)&s>>>0>c>>>0|i>>>0<P>>>0)+o|0,o=s=a>>>0>(MA=a+E|0)>>>0?s+1|0:s,i=c+Z|0,s=i=(a=(s=0)+cA|0)>>>0<s>>>0?i+1|0:i,c=(0|Z)==(0|i)&a>>>0<cA>>>0|i>>>0<Z>>>0,i=o,i=(o=c+(P=MA)|0)>>>0<c>>>0?i+1|0:i,cA=o,c=a,E=s,s=(a=(a=(a=(0|f)==(0|Ba)&et>>>0>pr>>>0|f>>>0<Ba>>>0)+(f=(0|f)==(0|Er)&pr>>>0>yr>>>0|f>>>0>Er>>>0)|0)+(s=(0|Qe)==(0|Er)&zA>>>0<yr>>>0|Qe>>>0<Er>>>0)|0)+E|0,i=o=i,E=o=(c=(0|(s=(a=f=(Z=Qe)+c|0)>>>0<Z>>>0?s+1|0:s))==(0|E)&c>>>0>a>>>0|s>>>0<E>>>0)+cA|0,o=i=c>>>0>o>>>0?i+1|0:i,c=a,i=0,f=s,s=s+((P=Z=(0|Ke)==(0|rA)&Be>>>0<Zt>>>0|Ke>>>0>rA>>>0)>>>0>(Z=Z+((0|Ke)==(0|St)&dt>>>0>Zt>>>0|Ke>>>0<St>>>0)|0)>>>0?1:i)|0,i=o,f=i=(o=c=(0|(s=(a=a+Z|0)>>>0<Z>>>0?s+1|0:s))==(0|f)&a>>>0<c>>>0|s>>>0<f>>>0)>>>0>(c=c+E|0)>>>0?i+1|0:i,65536&i?Ve=Ve+1|0:(E=he>>>31|0,i=f<<1|c>>>31,c=c<<1|s>>>31,f=i,i=s<<1|a>>>31,a=a<<1|r>>>31,s=i,i=he<<1|ce>>>31,ce<<=1,he=i,i=r<<1|t>>>31,t=t<<1|E,r=i|(o=0)),(0|Ve)>=32767)ee|=2147418112,t=0,r=0;else{A:{if((0|Ve)<=0){if((o=1-Ve|0)>>>0<=127){Aa(m+48|0,ce,he,t,r,i=Ve+127|0),Aa(m+32|0,a,s,c,f,i),Ha(m+16|0,ce,he,t,r,o),Ha(m,a,s,c,f,o),ce=e[m+32>>2]|e[m+16>>2]|!!(e[m+48>>2]|e[m+56>>2]|e[m+52>>2]|e[m+60>>2]),he=e[m+36>>2]|e[m+20>>2],t=e[m+40>>2]|e[m+24>>2],r=e[m+44>>2]|e[m+28>>2],a=e[m>>2],s=e[m+4>>2],o=e[m+8>>2],i=e[m+12>>2];break A}t=0,r=0;break e}o=c,i=65535&f|Ve<<16}Y|=o,ee|=i,(!t&(0|r)==-2147483648?!(ce|he):(0|r)>0|(0|r)>=0)?t|ce|-2147483648^r|he?(t=a,r=s):(E=ee,ee=(a=(0|(i=s))==(0|(r=(r=t=1&a)>>>0>(t=t+a|0)>>>0?i+1|0:i))&t>>>0<a>>>0|r>>>0<i>>>0)>>>0>(Y=a+Y|0)>>>0?E+1|0:E):(a=(0|s)==(0|(r=(t=a+1|0)?s:s+1|0))&t>>>0<a>>>0|r>>>0<s>>>0,s=ee,ee=(Y=a+Y|0)>>>0<a>>>0?s+1|0:s)}}e[A>>2]=t,e[A+4>>2]=r,e[A+8>>2]=Y,e[A+12>>2]=ee,J=m+96|0}function qt(A,t,r,a,s,i,o){var c,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0;J=c=J-480|0,e[c+476>>2]=0,e[c+456>>2]=0,e[c+460>>2]=0,e[c+448>>2]=0,e[c+452>>2]=0,e[c+440>>2]=0,e[c+444>>2]=0,e[c+432>>2]=0,e[c+436>>2]=0,f=0;e:if(e[A+684>>2]){for(Y=o?e[o>>2]:Y;p=l[t+f|0],g[(c+112|0)+f|0]=p,m=f+1|0,p&&(p=f>>>0<158,f=m,p););if(g[m+(c+112|0)|0]=0,!((ce=268435456&i)|!(8&e[47197]))){m=0;A:if(223&(p=l[0|t]))for(f=0;;){if(g[(c+272|0)+f|0]=p,!(223&(p=l[(m=f+1|0)+t|0])))break A;if(w=f>>>0<118,f=m,!w)break}g[(f=c+272|0)+m|0]=0,e[c+48>>2]=f,fr(e[47195],(0|i)>=0?87019:86877,c+48|0)}e[c+464>>2]=t,e[A+8208>>2]=0,e[A+8212>>2]=0,s&&(g[0|s]=0);A:{r:if(223&(f=l[0|t]))for(he=536870912&i,Be=4096&i,Qe=c+105|0,m=t,p=0;;){w=Gt(c+476|0,m),ee=!!(0|rr(e[c+476>>2]))+ee|0,P=l[7668+(f=(E=255&f)+A|0)|0];s:if(!((Z=e[c+476>>2])-48>>>0<10|Z-2406>>>0<10)|(ee?l[A+170|0]:0)){i:if((p=e[c+476>>2]-e[A+600>>2]|0)>>>0>127||!(p=e[6192+((p<<2)+A|0)>>2])){if(P){for(Z=5168+((E<<2)+A|0)|0,P=P+(f=l[f+7924|0])|0,Ve=E|l[m+1|0]<<8,p=0;e[7184+(m=(f<<2)+A|0)>>2]==(0|Ve)&&(e[c+472>>2]=e[c+464>>2],Mt(A,c+472|0,t,2,e[m+6704>>2],c+432|0,i,Y),(0|(m=e[c+432>>2]))>0&&(m=m+35|0,e[c+432>>2]=m),p=1,Mt(A,c+464|0,t,1,e[Z>>2],c+448|0,i,Y),e[c+448>>2]>(0|m)||(m=e[c+444>>2],e[c+456>>2]=e[c+440>>2],e[c+460>>2]=m,m=e[c+436>>2],e[c+448>>2]=e[c+432>>2],e[c+452>>2]=m,e[c+464>>2]=e[c+472>>2])),P>>>0>(f=f+1|0)>>>0;);if(p)break i}c:{o:{if(!(f=e[5168+((E<<2)+A|0)>>2])){if(Mt(A,c+464|0,t,0,e[A+5168>>2],c+448|0,i,Y),e[c+448>>2])break c;if(16&l[188808])break o;if(p=Gt(c+468|0,E=(m=e[c+464>>2])-1|0),f=e[c+468>>2],!(e[A+600>>2]<=0|(0|f)>577)){if(Ei(f)){e[c+32>>2]=21,DA(r,87049,c+32|0);break A}f=e[c+468>>2]}if((0|f)==57384&&((0|(P=e[A+92>>2]))<=e[47352]||(e[47352]=P)),ci(f)&&((0|(f=e[A+72>>2]))<=e[47352]||(e[47352]=f)),!((P=(f=e[c+468>>2])-192|0)>>>0>413)&&(P=l[P+94240|0])&&(p=p-1|0,!(l[m-2|0]==32&l[p+m|0]==32))){for(e[c+472>>2]=E,g[0|E]=P;w=l[(f=m)+p|0],g[0|f]=w,m=f+1|0,(0|w)!=32;);if((0|p)>0&&jA(f,32,p),e[A+24>>2]&&!((0|Sn(94222,e[c+468>>2]))<=0)){e[c+464>>2]=E,p=0;break s}p=0,g[0|r]=0,e[c+464>>2]=t,e[A+8208>>2]=0,e[A+8212>>2]=0;break s}if(!(f=Rs(f))||(0|(m=e[f+4>>2]))==e[A+600>>2])break o;if((0|m)==e[A+188>>2]){e[c+4>>2]=Dn(c- -64|0,e[A+192>>2]),e[c>>2]=21,DA(r,87218,c);break A}if(!(4&l[f+16|0]))break o;e[c+20>>2]=Dn(c- -64|0,e[f+12>>2]),e[c+16>>2]=21,DA(r,87218,c+16|0);break A}if(Mt(A,c+464|0,t,1,f,c+448|0,i,Y),e[c+448>>2])break c}o:if(!((f=e[c+476>>2])-768>>>0<112)){if(rr(f)){if(g[(w+e[c+464>>2]|0)-1|0]<33&(0|ee)<=1)break o;if(g[0|r]=0,!o)break r;e[o>>2]=4096|e[o>>2];break r}jt(A,e[c+476>>2],-1,c+272|0,0),l[c+272|0]&&(e[c+448>>2]=1,e[c+452>>2]=c+272)}e[c+464>>2]=(w+e[c+464>>2]|0)-1;break i}e[A+288>>2]=0}else Mt(A,c+464|0,t,w,p,c+448|0,i,Y);if(m=(f=e[c+452>>2])||86135,e[c+452>>2]=m,p=0,!(e[c+448>>2]<=0)){if(f=1|e[c+456>>2],(0|i)<0)break e;if(!(l[0|m]!=21|Be)){qA(r,m);break A}if(!(!(8&e[47197])|ce))i:if(f=e[47195],(0|(w=e[f+76>>2]))>=0&(!w|e[56823]!=(-1073741825&w)))E=e[(w=f+76|0)>>2],e[w>>2]=E||1073741823,e[f+80>>2]==10||(0|(E=e[f+20>>2]))==e[f+16>>2]?h0(f):(e[f+20>>2]=E+1,g[0|E]=10),e[w>>2]=0;else{if(e[f+80>>2]!=10&&(0|(w=e[f+20>>2]))!=e[f+16>>2]){e[f+20>>2]=w+1,g[0|w]=10;break i}h0(f)}if(w=-32769&(f=e[c+456>>2]),e[c+456>>2]=w,!(!s|!w|(1024&f?he:0))){A=e[c+464>>2],qA(s,m),f=w|(Ke=(r=A)-wt(t,A=c+112|0,HA(A))|0,(1151&f)==1024?Ke:0);break e}(f=e[c+460>>2])&&(g[0|f]=69),pn(A,r,a,m)}}else g[c+104|0]=95,wt(Qe,m,w),f=1,g[105+(c+w|0)|0]=0,RA(A,c+104|0,c- -64|0),p-1>>>0<=4294967293&&(f=HA(f=c- -64|0)+f|0,g[0|f]=11,g[f+1|0]=0,f=0),pn(A,r,a,c- -64|0),e[c+464>>2]=m+w,p=f;if(m=e[c+464>>2],!(223&(f=l[0|m])))break}wt(t,A=c+112|0,HA(A))}f=0}return J=c+480|0,f}function gs(A,t){var r,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0;J=r=J-2976|0,e[t>>2]=1,a=e[A+20>>2],e[(c=r+2960|0)>>2]=e[A+16>>2],e[c+4>>2]=a,a=e[A+12>>2],e[(c=r+2952|0)>>2]=e[A+8>>2],e[c+4>>2]=a,a=e[A+4>>2],e[r+2944>>2]=e[A>>2],e[r+2948>>2]=a,e[50303]||KA();e:if(A=e[r+2948>>2],l[0|A]&&A||((A=e[r+2944>>2])||(A=(A=e[r+2952>>2])||85055,e[r+2944>>2]=A),ar(a=r+80|0,A,60),Li(a,0),!(i=ha(201216,a))||(e[r+2948>>2]=e[i+4>>2]+1,l[r+2958|0]|l[r+2956|0]|l[r+2957|0]))){ee=r+1536|0,J=Y=J-336|0;A:if(!(!(A=e[4+(Z=r+2944|0)>>2])|!l[0|A])){if((0|(ce=HA(A)))>=0){for(a=ce>>>0>=79?79:ce,p=1;A=Ht(g[e[Z+4>>2]+s|0]),g[(Y+256|0)+s|0]=A,p=((255&A)==45)+p|0,A=(0|a)!=(0|s),s=s+1|0,A;);if((0|p)!=1)break A}p=1}if((0|(w=e[50303]))<=0)e[ee>>2]=0,A=0;else{for(c=(0|p)>=0;;){m=e[201216+(Qe<<2)>>2];A:if(va(e[m+8>>2],88032,3)){if((A=e[Z+4>>2])&&va(A,91687,3)){if(c){A=100;r:if(p){if(a=0,s=e[m+4>>2],!(he=l[0|s])){if(!va(Y+256|0,90013,9))break r;break A}for(;;){for(Ve=1,f=s+1|0,Be=1,Ke=0,s=0;(0|s)<(0|ce)&&(0|(A=g[(Y+256|0)+s|0]))!=45||(A=0),Ke=((E=(0|(P=l[s+f|0]))==45)&!!(0|(Be=(E?0:P)<<24>>24==(0|A)?Be:0)))+Ke|0,s=s+1|0,Ve=E+Ve|0,P;);if(s=s+f|0,(E=Be+Ke|0)&&(a=(0|(A=z((f=(0|(A=p-E|0))<=0?5:5-A|0)-((0|(A=Ve-E|0))>0?A:0)|0,100)-(he<<24>>24<<1)|0))>(0|a)?A:a),!(he=l[0|s]))break}if(!(A=a))break A}(a=e[Z>>2])&&(A=Br(a,e[m>>2])?Br(a,e[m+8>>2])?A:A+400|0:A+500|0),((s=l[Z+12|0])-1&255)>>>0>1||((a=l[m+12|0])-1&255)>>>0>1||(A=(0|a)!=(0|s)?A-50|0:A+50|0),s=l[Z+13|0],A=l[m+12|0]!=2|s>>>0>12?A:l[m+13|0]>12?A+5|0:A,(a=l[m+13|0])&&((a=((s?z(s,100):3e3)>>>0)/(a>>>0)|0)>>>0<=99&&(a=1e4/(a>>>0)|0),A=(f=A)+((A=5-(((a-100&65535)>>>0)/10|0)|0)>>31&A)|0,A=s?A+10|0:A),A=(0|A)<=1?1:A}else{if(va(e[m+8>>2],Y+256|0,ce))break A;A=100}e[ee+(o<<2)>>2]=m,e[m+16>>2]=A}else e[ee+(o<<2)>>2]=m;o=o+1|0}if((0|w)==(0|(Qe=Qe+1|0)))break}e[ee+(o<<2)>>2]=0,A=0,o&&(ti(ee,o,8),A=o)}if(J=Y+336|0,p=A,A||(e[t>>2]=0,A=ha(201216,85055),e[r+1536>>2]=A,p=!!(0|A)),t=l[r+2957|0],c=2,(0|(A=l[r+2956|0]))!=2&&(c=2,(t-1&255)>>>0<12||(cA=(0|A)!=1,c=(0|A)==1)),w=(o=e[132136+(c<<2)>>2])+(P=t>>>0<60)|0,A=0,(0|p)>0)for(a=0;;){i=e[(r+1536|0)+(rA<<2)>>2];A:{r:{s:{if(cA){if(P||(t=0,a))break r}else{if(t=l[i+12|0],a|P)break s;t=(0|t)!=(0|c)}if(s=0,t|l[i+13|0]<60)break A;break r}if((0|t)!=(0|c)){s=a;break A}}e[(r+80|0)+(a<<2)>>2]=i,s=a+1|0}A:if(l[i+15|0]){if(E=0,t=A,a=s,!((0|A)>11))for(;;){if((s=l[0|w])||(w=o,s=l[0|o]),A=e[i+12>>2],f=z(t,24)+202624|0,e[f+8>>2]=e[i+8>>2],e[f+12>>2]=A,A=e[i+4>>2],e[f>>2]=e[i>>2],e[f+4>>2]=A,A=e[i+20>>2],e[f+16>>2]=e[i+16>>2],e[f+20>>2]=A,g[f+14|0]=s,e[(r+80|0)+(a<<2)>>2]=f,w=w+1|0,a=a+1|0,A=t+1|0,(E=E+1|0)>>>0>=l[i+15|0])break A;if(s=(0|t)<11,t=A,!s)break}}else a=s;if((0|(rA=rA+1|0))==(0|p))break}else{if(!i)break e;a=0}A:if(!(!(s=l[0|w])|(0|A)>=12))for(;;){if(t=e[i+12>>2],o=z(A,24)+202624|0,e[o+8>>2]=e[i+8>>2],e[o+12>>2]=t,t=e[i+4>>2],e[o>>2]=e[i>>2],e[o+4>>2]=t,t=e[i+20>>2],e[o+16>>2]=e[i+16>>2],e[o+20>>2]=t,g[o+14|0]=s,e[(r+80|0)+(a<<2)>>2]=o,a=a+1|0,!(s=l[0|(w=w+1|0)]))break A;if(t=(0|A)<11,A=A+1|0,!t)break}a?(A=e[(r+80|0)+(l[r+2958|0]%(0|a)<<2)>>2],(t=l[A+14|0])?(g[202976]=0,e[r+48>>2]=47,DA(r+2971|0,91351,r+48|0),g[r+2971|0]=0,t>>>0<=9?(e[r+20>>2]=t,e[r+16>>2]=r+2971,DA(202976,91378,r+16|0)):(e[r+36>>2]=t-10,e[r+32>>2]=r+2971,DA(202976,91503,r+32|0)),A=e[A+8>>2],e[r+4>>2]=202976,e[r>>2]=A,A=202912,DA(202912,87760,r)):A=e[A+8>>2]):A=0}else{if(A=e[i+8>>2],!l[202976])break e;e[r+64>>2]=A,e[r+68>>2]=202976,A=202912,DA(202912,87760,r- -64|0)}return J=r+2976|0,A}function Xa(A,t,r,a,s){var i,o,c=0,f=0,m=0,p=0,w=0,E=0,P=0;J=i=J-464|0,g[i+432|0]=0,g[i+368|0]=0,g[i+304|0]=0,g[i+292|0]=0,w=(0|t)/10|0,c=e[33273];e:{if(!(o=2&a)|e[33272]!=2){P=32&a?113:111,p=1&a,E=t-z(w,10)|0;A:{r:{s:{i:{c:{o:{u:{l:if(l[0|c])c=0;else{n:{if(8&a){if(e[i+288>>2]=t,DA(f=i+452|0,91198,i+288|0),c=RA(A,f,i+304|0)){f=0;break l}e[i+272>>2]=t,DA(f=i+452|0,91314,i+272|0),c=RA(A,f,i+304|0),f=0}else{if(!p)break n;if(m=qA(i+432|0,133104),4&a){if(e[i+260>>2]=P,e[i+256>>2]=t,DA(f=i+452|0,91324,i+256|0),c=RA(A,f,i+304|0),l[133116]&&c)break u;if(f=c,c)break l}e[i+244>>2]=P,e[i+240>>2]=t,DA(f=i+452|0,91384,i+240|0),f=c=RA(A,f,i+304|0)}if(c)break l}n:{if(o){if(!(1&g[133096]))break n;e[i+208>>2]=t,DA(c=i+452|0,91498,i+208|0),c=RA(A,c,i+304|0)}else m=e[A+108>>2],e[i+224>>2]=t,DA(c=i+452|0,(0|r)>=2?91700:(262144&m)>>>18|0?91534:91700,i+224|0),c=RA(A,c,i+304|0);if(c)break l}!p|!(32&l[A+109|0])?(e[i+192>>2]=t,DA(c=i+452|0,91766,i+192|0),c=RA(A,c,i+304|0)):c=0}if(!(16&a)|(0|t)>9)break c;c=f;break o}if(qA(m,133116),!(16&a)|(0|t)>9)break i}RA(A,88875,i+368|0);break r}if(!c)break s;c=f}g[i+368|0]=0;break r}s:if(p&&(e[i+180>>2]=P,e[i+176>>2]=w,DA(c=i+452|0,91846,i+176|0),RA(A,c,i+368|0))){if(f=1,!E|!(16&l[A+109|0]))break s;ia(i+368|0,133104)}else f||(e[i+160>>2]=w,DA(f=i+452|0,512&a?91936:92016,i+160|0),RA(A,f,i+368|0),f=0);if(c=E,l[i+368|0]||(c=E,16&l[A+106|0]&&(e[i+144>>2]=254&w,DA(c=i+452|0,92016,i+144|0),RA(A,c,i+368|0),c=(0|t)%20|0)),g[i+304|0]=0,w=c,(0|c)<=0)c=f;else{if(o&&(c=e[33273],l[0|c])){qA(i+304|0,c),g[i+432|0]=0,m=p;break A}if(m=0,8&a&&(e[i+128>>2]=w,DA(a=i+452|0,91314,i+128|0),m=RA(A,a,i+304|0)),!p|16&l[A+104|0]||(e[i+116>>2]=P,e[i+112>>2]=w,DA(a=i+452|0,91384,i+112|0),f=(m=RA(A,a,i+304|0))?1:f),c=f,!m){s:{if(!o|!(1&e[33274])){if(!(16&l[A+104|0])&&o)break s;f=e[A+108>>2],e[i+96>>2]=w,DA(a=i+452|0,(0|r)>=2?91700:(262144&f)>>>18|0?91534:91700,i+96|0),r=RA(A,a,i+304|0)}else e[i+80>>2]=w,DA(r=i+452|0,91498,i+80|0),r=RA(A,r,i+304|0);if(r)break r}e[i+64>>2]=w,DA(r=i+452|0,91766,i- -64|0),RA(A,r,i+304|0)}}}m=p,l[i+432|0]|c|!p||((0|t)<20|(16&l[A+104|0]?0:E)||(RA(A,92162,i+432|0),m=1,!l[i+432|0]))&&(RA(A,92205,i+432|0),m=1)}if(!(!(r=g[i+304|0])|!(48&(t=e[A+104>>2]))|!l[i+368|0])){if(RA(A,90824,i+292|0),!m|!(8&l[A+109|0])||(g[i+292|0]=0),16&l[A+104|0]){e[i+28>>2]=i+432,e[i+24>>2]=i+368,e[i+20>>2]=i+292,e[i+16>>2]=i+304,DA(s,91059,i+16|0),a=1;break e}e[i+12>>2]=i+432,e[i+8>>2]=i+304,e[i+4>>2]=i+292,e[i>>2]=i+368,DA(s,91059,i),a=1;break e}512&t&&(!r|(0|(t=HA(i+368|0)-1|0))<0||(c=l[e[144464+(g[0|(t=t+(i+368|0)|0)]<<2)>>2]+11|0]!=2,(0|(a=l[e[144464+(r<<2)>>2]+11|0]))==1&&(a=l[e[144464+(g[i+305|0]<<2)>>2]+11|0]),c|(255&a)!=2||(g[0|t]=0))),!(8&l[A+110|0])|!l[i+432|0]?(e[i+56>>2]=i+432,e[i+52>>2]=i+304,e[i+48>>2]=i+368,DA(s,92282,i+48|0)):(e[i+36>>2]=i+304,e[i+32>>2]=i+368,(0|(t=DA(s,90368,i+32|0)))>0&&(t=l[e[144464+(l[(r=t-1|0)+s|0]<<2)>>2]+11|0]==2?r:t),qA(t+s|0,i+432|0))}else qA(s,c);a=0}e:if(268435456&(A=e[A+104>>2])){if((0|HA(s))<=0)break e;for(t=0,A=0;l[0|(r=A+s|0)]==6&&(t&&(g[0|r]=5),t=1),A=A+1|0,(0|HA(s))>(0|A););}else if(256&A&&(t=0,!((0|(A=(p=HA(s))-1|0))<0))){if(A)for(E=-2&p,c=0;l[0|(f=A+s|0)]==6?(r=1,t&&(g[0|f]=5)):r=t,l[0|(f=f-1|0)]==6?(t=1,r&&(g[0|f]=5)):t=r,A=A-2|0,(0|E)!=(0|(c=c+2|0)););1&p&&(!t|l[0|(A=A+s|0)]!=6||(g[0|A]=5))}return J=i+464|0,a}function Ss(A,t,r,a){var s,i,o=0,c=0,f=0,m=0,p=0,w=0,E=0;if(J=s=J-352|0,g[s+304|0]=0,g[s+224|0]=0,g[s+64|0]=0,f=e[e[47192]+292>>2],E=Gt(s+348|0,t),(1048320&(o=e[s+348>>2]))==57344&&(o&=255,e[s+348>>2]=o),2&a&&ms(o)&&RA(A,85437,s+304|0),o=Mi(e[s+348>>2],A),e[s+348>>2]=o,w=1&a,jt(A,o,g[0|(i=t+E|0)],s+224|0,w),!(t=l[s+224|0])){e:if((t=k0(e[s+348>>2]))&&(e[s+348>>2]=16383&t,4&a)){switch(1073741823&(t>>=14)){case 0:case 3:break e}RA(A,t=e[131232+(t<<2)>>2],s+304|0),l[s+304|0]||(g[s+306|0]=gi(84744),p=t,t=s+304|3,RA(e[47194],p,t),l[s+307|0]&&(b[s+304>>1]=5385,t=HA(t)+(s+304|0)|0,g[t+5|0]=0,g[t+4|0]=f,g[t+3|0]=21))}jt(A,e[s+348>>2],g[0|i],s+224|0,w),t=l[s+224|0]}e:{A:{if(t&=255){if((0|t)!=21)break A;qA(r,s+224|0),E=0;break e}if(t=1632,!((0|(o=e[s+348>>2]))<1632)){for(m=103360;;){if((0|o)>=(t+10|0)){if(!(t=e[(m=m+4|0)>>2]))break A;if((0|t)<=(0|o))continue;break A}break}(0|(t=48+(o-t|0)|0))<=0||jt(A,t,0,s+224|0,w)}}A:{r:{s:{i:{if(t=Rs(e[s+348>>2])){if(o=e[t+4>>2],!t|1&(m=e[t+16>>2])||(c=e[47192],e[c+600>>2]==(0|o)|e[c+188>>2]==(0|o)|e[c+184>>2]==(0|o)||(g[s+144|0]=0,RA(c,e[t>>2],s- -64|0)?(0|(c=e[47192]))!=(0|A)&&(f=e[A+292>>2],qA(s+144|0,s- -64|0),g[s+66|0]=e[c+292>>2]):(g[s+66|0]=gi(84744),RA(e[47194],e[t>>2],s+144|0)),l[s+144|0]&&(b[s+64>>1]=5385,qA(3|(c=s- -64|0),p=s+144|0),c=HA(p)+c|0,g[c+5|0]=0,g[c+4|0]=f,g[c+3|0]=21))),l[s+224|0])break A;if(!o||(f=e[47192],e[f+188>>2]!=(0|o)))break i;t=e[f+192>>2];break r}if(l[s+224|0])break A;m=0,o=0;break s}if((t=e[t+12>>2])&&!(2&m))break r}t=25966}if((e[A+212>>2]==(0|t)&(0|t)!=27503||(g[s+226|0]=gi(Dn(s+47|0,t)),(t=e[47194])&&((0|(f=e[s+348>>2]))>55215||(0|(c=f-44032|0))<0?jt(t,f,g[0|i],s+224|3,w):(g[s+52|0]=32,t=p=s+53|0,f-50500>>>0>=588&&(t=zr(4352+((c>>>0)/588|0)|0,p)+p|0),zr(4449+(((f=(c>>>0)/28|0)>>>0)%21|0)|0,t),zr(4519+(c-z(f,28)|0)|0,t+3|0),g[t+6|0]=32,g[t+7|0]=0,g[s+227|0]=0,t=s+224|3,qt(e[47194],p,t,77,0,0,0),$t(e[47194],t,0,-1,0)),t=s+224|3,l[s+227|0]==21&&(g[s+226|0]=gi(s+224|4),jt(e[47194],e[s+348>>2],g[0|i],t,w)),ma(e[e[32972]+60>>2]),l[s+227|0]&&(b[s+224>>1]=5385,t=HA(t)+(s+224|0)|0,g[t+3|0]=21,w=e[A+292>>2],g[t+5|0]=0,g[t+4|0]=w)),!l[s+224|0]))&&(16&m||(ns(e[s+348>>2])&&RA(e[47192],85683,s+224|0),l[s+224|0]||(Or(e[s+348>>2])||RA(e[47192],85778,s+224|0),l[s+224|0]||Os(85992,s+224|0,0))),!(8&m)||4&a)){if(t=e[s+348>>2],(0|o)!=10240?(e[s+32>>2]=t,DA(s+52|0,86013,s+32|0)):(o=s+52|0,1&t&&(g[s+52|0]=49,o=s+53|0),2&t&&(g[0|o]=50,o=o+1|0),4&t&&(g[0|o]=51,o=o+1|0,t=e[s+348>>2]),8&t&&(g[0|o]=52,o=o+1|0,t=e[s+348>>2]),16&t&&(g[0|o]=53,o=o+1|0,t=e[s+348>>2]),32&t&&(g[0|o]=54,o=o+1|0,t=e[s+348>>2]),64&t&&(g[0|o]=55,o=o+1|0,t=e[s+348>>2]),128&t&&(g[0|o]=56,o=o+1|0),g[0|o]=0),t=s+224|0,m=l[s+52|0])for(o=s+52|0;t=HA(t)+t|0,g[0|t]=23,t=t+1|0,jt(e[47192],m<<24>>24,0,t,1),(a=l[0|t])&&(0|a)!=21||(0|(a=g[0|o]))<97||Os(e[130860+((255&a)<<2)>>2],t,0),m=l[0|(o=o+1|0)];);t=HA(t)+t|0,g[0|t]=9,g[t+1|0]=0}}t=HA(r),2&l[A+144|0]?(e[s+16>>2]=255,e[s+28>>2]=s+304,e[s+24>>2]=s+224,e[s+20>>2]=s- -64,DA(s+144|0,86210,s+16|0)):(e[s>>2]=255,e[s+12>>2]=s+224,e[s+8>>2]=s+304,e[s+4>>2]=s- -64,DA(s+144|0,86210,s)),HA(s+144|0)+t>>>0>199||qA(t+r|0,s+144|0)}return J=s+352|0,E}function ks(A,t,r,a,s,i,o){var c,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0,MA=0,zA=0,et=0,at=0,dt=0;J=c=J-528|0,ce=o?e[o>>2]:0,rA=e[s+4>>2];e:{A:{if(e[A+220>>2]>0){ar(m=c+352|0,t,160),J=P=J-176|0,Z=1-(Y=e[A+220>>2])|0,ee=e[A+224>>2],he=e[A+216>>2],w=m;r:{s:{for(;;){if(Be=Gt(P+172|0,w),f=e[P+172>>2]){if((0|f)<(0|Y)|(0|f)>(0|he))break s;if(ee){if((0|(f=g[ee+(f-Y|0)|0]))<=0)break s}else f=f+Z|0;if(w=w+Be|0,g[E+P|0]=f,f=160,(0|(E=E+1|0))!=160)continue}else f=E;break}if(ee=0,g[f+P|0]=0,Z=g[0|P],e[P+172>>2]=Z,Z){for(cA=2+(he-Y|0)|0,Y=f=P;;){he=f+1|0;i:{if((Be=e[A+8180>>2])&&(E=0,!((0|(w=b[Be>>1]))>(0|(Ve=(g[0|he]<<8)+Z|0)))))for(;;){if((0|w)==(0|Ve)){Z=E+cA|0,e[P+172>>2]=Z,f=f+2|0;break i}if(!((0|Ve)>=(0|(w=b[Be+((E=E+1|0)<<1)>>1]))))break}f=he}if(Qe=63&Z|Qe<<6,(0|(E=ee+6|0))<8?ee=E:(ee=ee-2|0,g[0|Y]=Qe>>ee,Y=Y+1|0),Z=g[0|f],e[P+172>>2]=Z,!Z)break}(0|ee)<=0||(g[0|Y]=Qe<<8-ee,Y=Y+1|0)}else Y=P;g[0|Y]=0,wt(m,P,f=Y-P|0),Y=64|f;break r}Y=HA(m)}J=P+176|0,P=m}else Y=HA(t),P=t;if(m=l[0|P]){for(f=0,E=P;p=1023&(p=(p<<3)+m|0)^p>>>8,f=f+1|0,m=l[0|(E=E+1|0)];);f=f+p&1023}else f=0;if(p=e[692+((f<<2)+A|0)>>2]){if(f=l[0|p])break A;f=0;break e}if(f=0,!s)break e;e[s>>2]=0;break e}for(Be=1073741824&rA,Ve=2048&i,rA=512&ce,cA=65536&ce,MA=1&ce,zA=2&ce,ce=8&i,et=1024&i,he=4&i,at=63&Y,dt=A+8233|0;;){i=(255&f)+p|0;A:{r:if((127&(f=l[p+1|0]))==(0|Y)&&!va(P,p+2|0,at)){p=2+((63&f)+p|0)|0;s:{if(f<<24>>24<0)ee=0,g[0|a]=0;else{if((0|(ee=HA(p)))>=160)break s;qA(a,p),p=1+(p+ee|0)|0}if(m=0,i>>>0<=p>>>0)f=r,w=0;else{E=0,w=0;i:{for(;;){p=(f=p)+1|0;c:if((f=l[0|f])>>>0>=100){if(Z=e[A+320>>2],f>>>0>=132){E|=Z>>>f-132&1;break c}E|=!(Z>>>f-100&1)}else{if(f>>>0>=81){Z=f-80|0,Qe=i-p|0;o:if(o)for(f=0;;){if(Ke=z(f,12)+o|0,!l[Ke+10|0])break o;if(E=!!(12&l[Ke+1|0])|E,Ke=(0|f)!=(0|Z),f=f+1|0,!Ke)break}if(C0(r,p,Qe)|1&E)break r;e[33264]=Z,f=r+Qe|0,w|=128,p=i;break i}f>>>0>=65?(w=15&f|-16&w,w=12&~f?w:512|w):f>>>0>=32?m|=1<<f-32:w|=1<<f}if(!(i>>>0>p>>>0))break}if(f=r,1&E)break A}if(65536&m&&!he||et&&49152&m)break A}if(he&&(16384&m||!ce&&32768&m)||(zA?0:512&m)|(MA?0:1024&m)|(cA?0:33554432&w)||!(!(131072&m)|ue[e[47192]+8204>>2]<=f>>>0|Be)|(rA?0:262144&m)|(8&l[e[47192]+8242|0]?0:8192&m)||16&m&&(!e[A+8184>>2]&(!ce|!e[A+8192>>2])||!(!ce|e[A+212>>2]!=25966)&&2097152&e[A+8232>>2])||(e[A+8188>>2]?0:64&m)|(!e[A+8196>>2]|Ve?32&m:0)||!(!(65536&w)|e[A+212>>2]!=26741|128&l[0|dt])|(e[47192]!=(0|A)?524288&m:0))break A;i:{c:{o:{if(!s){if(!ee)break o;break i}if(e[s+4>>2]=m,e[s>>2]=1073741824|w,ee)break c}if(f=0,!(8&l[188788]))break e;mn(s,A=c+272|0),e[c>>2]=t,e[c+4>>2]=A,fr(e[47195],89330,c);break e}e[s>>2]=-1073741824|w}if(8&l[188788]&&(JA(a,c- -64|0),l[e[47192]+172|0]==(w>>>29&1)&&(!o|!(128&w)?(e[c+48>>2]=t,fr(e[47195],89426,c+48|0)):(wt(A=c+352|0,a=r,r=f-r|0),g[351+(r+c|0)|0]=0,e[c+32>>2]=t,e[c+36>>2]=A,fr(e[47195],89397,c+32|0)),mn(s,A=c+272|0),t=e[47195],e[c+16>>2]=c- -64,e[c+20>>2]=A,fr(t,89534,c+16|0))),l[Gt(c- -64|0,P)+P|0]|!s||rr(e[c+64>>2]))break e;e[s>>2]=134217728|e[s>>2];break e}Pe(89236,86634,2467,94846),xe()}p=i}if(!(f=l[0|p]))break}f=0}return J=c+528|0,f}function xs(A,t,r,a,s){var i,o=0,c=0;J=i=J-304|0,g[i+278|0]=0;e:{if((0|t)>0&&(1&a&&(2&a&&(e[i+164>>2]=r,e[i+160>>2]=t,DA(o=i+290|0,89701,i+160|0),o=RA(A,o,i+224|0))||1&g[133096]&&(e[i+148>>2]=r,e[i+144>>2]=t,DA(o=i+290|0,89757,i+144|0),o=RA(A,o,i+224|0))||(e[i+132>>2]=r,e[i+128>>2]=t,DA(o=i+290|0,89894,i+128|0),o=RA(A,o,i+224|0)))||(e[i+116>>2]=r,e[i+112>>2]=t,DA(o=i+290|0,89974,i+112|0),o=RA(A,o,i+224|0))))break e;if((0|(c=(0|t)%100|0))>=20&&RA(A,90022,i+278|0),1&a){if(2&a){o=c-11|0;A:{r:{s:switch((448&e[e[47192]+108>>2])-64>>>6|0){case 0:if(o>>>0<9)break r;if(a=90418,(0|(o=(0|t)%10|0))==1)break A;if(o-2>>>0>=3)break r;a=90453;break A;case 1:if(t-2>>>0>=3)break r;a=90453;break A;case 2:if(o>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;a=90453;break A;case 3:if(a=90508,o>>>0<9)break A;a=(a=(0|t)%10|0)?(0|a)==1?90453:90586:90508;break A;case 4:break s;default:break r}if(!(o>>>0<9)){if(a=90537,(0|(o=(0|t)%10|0))==1)break A;if(!(o-2>>>0>=3)){a=90453;break A}}}a=90586}if(e[i+100>>2]=r,e[i+96>>2]=a,DA(a=i+290|0,90058,i+96|0),o=0,RA(A,a,i+224|0))break e}if(a=c-11|0,1&g[133096]){A:{r:{s:switch((448&e[e[47192]+108>>2])-64>>>6|0){case 0:if(a>>>0<9)break r;if(o=90418,(0|(c=(0|t)%10|0))==1)break A;if(c-2>>>0>=3)break r;o=90453;break A;case 1:if(t-2>>>0>=3)break r;o=90453;break A;case 2:if(a>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;o=90453;break A;case 3:if(o=90508,a>>>0<9)break A;o=(o=(0|t)%10|0)?(0|o)==1?90453:90586:90508;break A;case 4:break s;default:break r}if(!(a>>>0<9)){if(o=90537,(0|(c=(0|t)%10|0))==1)break A;if(!(c-2>>>0>=3)){o=90453;break A}}}o=90586}if(e[i+84>>2]=r,e[i+80>>2]=o,DA(c=i+290|0,90110,i+80|0),o=0,RA(A,c,i+224|0))break e}A:{r:{s:switch((448&e[e[47192]+108>>2])-64>>>6|0){case 0:if(a>>>0<9)break r;if(o=90418,(0|(c=(0|t)%10|0))==1)break A;if(c-2>>>0>=3)break r;o=90453;break A;case 1:if(t-2>>>0>=3)break r;o=90453;break A;case 2:if(a>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;o=90453;break A;case 3:if(o=90508,a>>>0<9)break A;o=(o=(0|t)%10|0)?(0|o)==1?90453:90586:90508;break A;case 4:break s;default:break r}if(!(a>>>0<9)){if(o=90537,(0|(c=(0|t)%10|0))==1)break A;if(!(c-2>>>0>=3)){o=90453;break A}}}o=90586}if(e[i+68>>2]=r,e[i+64>>2]=o,DA(c=i+290|0,90139,i- -64|0),o=0,RA(A,c,i+224|0))break e}else a=c-11|0;A:{r:{s:switch((448&e[e[47192]+108>>2])-64>>>6|0){case 0:if(a>>>0<9)break r;if(o=90418,(0|(a=(0|t)%10|0))==1)break A;if(a-2>>>0>=3)break r;o=90453;break A;case 1:if(t-2>>>0>=3)break r;o=90453;break A;case 2:if(a>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;o=90453;break A;case 3:if(o=90508,a>>>0<9)break A;o=(a=(0|t)%10|0)?(0|a)==1?90453:90586:90508;break A;case 4:break s;default:break r}if(!(a>>>0<9)){if(o=90537,(0|(a=(0|t)%10|0))==1)break A;if(!(a-2>>>0>=3)){o=90453;break A}}}o=90586}e[i+52>>2]=r,e[i+48>>2]=o,DA(a=i+290|0,90218,i+48|0),o=0,RA(A,a,i+224|0)||((0|r)<4||(e[i+32>>2]=r-1,DA(a=i+290|0,89026,i+32|0),RA(A,a,i+176|0)||(RA(A,90273,i+224|0),e[33275]=3)),l[i+224|0]||(e[i+16>>2]=t,DA(a=i+290|0,90303,i+16|0),(o=RA(A,a,i+224|0))||RA(A,90347,i+224|0),e[33275]=2))}return e[i+4>>2]=i+224,e[i>>2]=i+278,DA(s,90368,i),J=i+304|0,!((0|t)!=1|(0|r)!=1)&&(t=1,32&l[A+106|0])||(t=o),t}function Fs(A,t,r,a){var s,i=0,o=0,c=0,f=0,m=0,p=0,w=0;J=s=J+-64|0,b[s+48>>1]=0,e[s+40>>2]=0,e[s+44>>2]=0,e[s+32>>2]=0,e[s+36>>2]=0,e[s+24>>2]=0,e[s+28>>2]=0,e[s+16>>2]=0,e[s+20>>2]=0,e[s+8>>2]=0,e[s+12>>2]=0,e[s>>2]=0,e[s+4>>2]=0,i=t;e:{for(;;){A:{r:{if((0|(o=l[0|i]))!=69){if((0|o)!=32)break r;if(a&&(g[wt(o=a,t,a=(0|(a=i-t|0))>=159?159:a)+a|0]=0),a=63&r)break A;break e}g[0|i]=101}i=i+1|0;continue}break}if(1&r){A:if((i=i-1|0)>>>0<t>>>0)o=a;else for(o=a;;){if((192&l[0|i])!=128)break A;if(o=o+1|0,!((i=i-1|0)>>>0>=t>>>0))break}c=a-1|0}else c=a,o=a;if((0|a)!=1)for(;;){a=c;A:if(!((i=i-1|0)>>>0<t>>>0))for(;;){if((192&l[0|i])!=128)break A;if(o=o+1|0,!((i=i-1|0)>>>0>=t>>>0))break}A:if(!((i=i-1|0)>>>0<t>>>0))for(;;){if((192&l[0|i])!=128)break A;if(o=o+1|0,!((i=i-1|0)>>>0>=t>>>0))break}if(c=a-2|0,!((0|a)>2))break}if((0|o)<=0)c=0;else{if(f=3&(c=(a=(t=o-1|0)>>>0>=48?48:t)+1|0),t=0,o=0,a>>>0>=3)for(w=-4&c,a=0;m=i+o|0,g[o+s|0]=l[0|m],g[0|m]=32,m=(p=1|o)+i|0,g[s+p|0]=l[0|m],g[0|m]=32,m=(p=2|o)+i|0,g[s+p|0]=l[0|m],g[0|m]=32,m=(p=3|o)+i|0,g[s+p|0]=l[0|m],g[0|m]=32,o=o+4|0,(0|w)!=(0|(a=a+4|0)););if(f)for(;a=i+o|0,g[o+s|0]=l[0|a],g[0|a]=32,o=o+1|0,(0|f)!=(0|(t=t+1|0)););}}if(g[s+c|0]=0,f=65520&r,!(512&r)|l[0|(a=i-1|0)]!=105||(g[0|a]=121),o=4|f,256&r){e:{A:{r:{if((0|(t=e[A+212>>2]))!=25966){if((0|t)!=28268)break r;if(g[0|a]<0||128&(t=g[0|(c=i-2|0)]))break e;if(f=e[A+632>>2])t=!!(0|Lr(f,t));else{if((0|(f=e[A+600>>2]))>0&&(t=t-f|0)-1>>>0>254)break e;t=128&l[344+(A+t|0)|0]}if(!t)break e;if(t=g[0|a],f=e[A+612>>2])t=!!(0|Lr(f,t));else{s:{if((0|(f=e[A+600>>2]))>0){if((t=t-f|0)-1>>>0<255)break s;break e}if((0|t)<0)break e}t=4&l[344+(A+t|0)|0]}if(!t)break e;t=g[i-3|0];s:{if(f=e[A+632>>2])t=!!(0|Lr(f,t));else{i:{if((0|(f=e[A+600>>2]))>0){if((t=t-f|0)-1>>>0<255)break i;break s}if((0|t)<0)break s}t=128&l[344+(A+t|0)|0]}if(t)break e}g[0|i]=l[0|a],g[0|a]=l[0|c],g[i+1|0]=32;break e}if(c=g[i-2|0],t=e[A+632>>2])t=!!(0|Lr(t,c));else{s:{if((0|(t=e[A+600>>2]))>0){if((c=c-t|0)-1>>>0<255)break s;break A}if((0|c)<0)break A}t=128&l[344+(A+c|0)|0]}if(!t)break A;if(c=g[0|a],t=e[A+608>>2])t=!!(0|Lr(t,c));else{if((0|(t=e[A+600>>2]))>0){if((c=c-t|0)-1>>>0>=255)break A}else if((0|c)<0)break A;t=2&l[344+(A+c|0)|0]}if(!t)break A;o=va(87771,i-3|0,3)?20|f:o;break e}o=e[A+204>>2]?20|f:o;break e}(l[0|a]==99||(c=l[1+(t=i-2|0)|0]<<8,(l[0|t]|c)==29554|(c|l[0|t])==29289||(l[0|(t=i-2|0)]|l[t+1|0]<<8)==29301||!va(88115,i-3|0,3)||(l[0|(t=i-2|0)]|l[t+1|0]<<8)==29550|l[0|a]==117||!va(88384,i-5|0,5)||(l[0|(t=i-4|0)]|l[t+1|0]<<8|l[t+2|0]<<16|l[t+3|0]<<24)==1735287154||(l[0|t]|l[t+1|0]<<8|l[t+2|0]<<16|l[t+3|0]<<24)==1735549292))&&(o=20|f)}16&o&&(zr(e[A+204>>2],i),8&l[188788]&&Hn(88683,6,e[47195]))}return e[A+8184>>2]|!(2048&r)||(e[A+8184>>2]=1),M[s>>1]!=115&&va(s,88850,3)||(o|=8),J=s- -64|0,l[0|s]==39?65531&o:o}function ea(A,t,r,a,s,i,o,c,f){var m,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0;J=m=J-112|0,p=2147483647&f;e:{if(E=!(t|r),(a|(w=2147483647&s)?w-2147418112>>>0<2147549184:E)||!(!c&(0|(Y=p-2147418112|0))==-2147418112?i|o:(0|Y)==-2147418112&!!(0|c)|Y>>>0>2147549184)){if(!(!a&(0|w)==2147418112?E:w>>>0<2147418112)){c=a,f=32768|s,i=t,o=r;break e}if(!(!c&(0|p)==2147418112?!(i|o):p>>>0<2147418112)){f|=32768;break e}if(!(t|a|2147418112^w|r)){P=a,c=(a=!(t^i|a^c|r^o|s^f^-2147483648))?0:P,f=a?2147450880:s,i=a?0:t,o=a?0:r;break e}if(!(i|c|2147418112^p|o))break e;if(!(t|a|r|w)){if(i|c|o|p)break e;i&=t,o&=r,c&=a,f&=s;break e}if(!(i|c|o|p)){i=t,o=r,c=a,f=s;break e}}w=(E=ce=(P=(0|p)==(0|w))&(0|a)==(0|c)?(0|r)==(0|o)&t>>>0<i>>>0|r>>>0<o>>>0:P&a>>>0<c>>>0|p>>>0>w>>>0)?i:t,Y=E?o:r,he=P=E?f:s,E=E?c:a,ee=65535&P,a=ce?a:c,Be=s=ce?s:f,P=s>>>16&32767,(Z=he>>>16&32767)||(f=s=!(E|ee),p=s?w:E,c=s<<=6,Aa(m+96|0,w,Y,E,ee,(s=s+((0|(f=Ye(f?Y:ee)))==32?Ye(p)+32|0:f)|0)-15|0),E=e[m+104>>2],ee=e[m+108>>2],Y=e[m+100>>2],Z=16-s|0,w=e[m+96>>2]),i=ce?t:i,o=ce?r:o,c=a,f=65535&Be,P||(s=t=!(c|f),p=t?i:c,r=t<<=6,Aa(m+80|0,i,o,c,f,(t=t+((0|(s=Ye(s?o:f)))==32?Ye(p)+32|0:s)|0)-15|0),P=16-t|0,c=e[m+88>>2],f=e[m+92>>2],o=e[m+84>>2],i=e[m+80>>2]),r=f<<3|c>>>29,t=c<<3|o>>>29,r|=524288,c=E<<3|Y>>>29,f=ee<<3|E>>>29,ce=he^Be,s=o<<3|i>>>29,a=i<<3,(0|P)!=(0|Z)&&((i=Z-P|0)>>>0>127?(t=0,r=0,s=0,a=1):(Aa(m- -64|0,a,s,t,r,128-i|0),Ha(m+48|0,a,s,t,r,i),t=e[m+56>>2],r=e[m+60>>2],s=e[m+52>>2],a=e[m+48>>2]|!!(e[m+64>>2]|e[m+72>>2]|e[m+68>>2]|e[m+76>>2]))),E=a,p=s,P=c,ee=524288|f,s=Y<<3|w>>>29,Y=w<<3,w=s;A:if((0|ce)<0){if(i=0,o=0,c=0,f=0,!(E^Y|t^P|p^w|r^ee))break e;if(a=Y-E|0,s=w-((E>>>0>Y>>>0)+p|0)|0,c=(i=P-t|0)-(o=(0|p)==(0|w)&E>>>0>Y>>>0|p>>>0>w>>>0)|0,f=t=(ee-((t>>>0>P>>>0)+r|0)|0)-(i>>>0<o>>>0)|0,t>>>0>524287)break A;i=t=!(c|f),o=t?a:c,r=t<<=6,Aa(m+32|0,a,s,c,f,t=(t=t+((0|(i=Ye(i?s:f)))==32?Ye(o)+32|0:i)|0)-12|0),Z=Z-t|0,c=e[m+40>>2],f=e[m+44>>2],a=e[m+32>>2],s=e[m+36>>2]}else s=p+w|0,i=(0|p)==(0|(s=(a=E+Y|0)>>>0<Y>>>0?s+1|0:s))&a>>>0<E>>>0|s>>>0<p>>>0,p=r+ee|0,p=(t=t+P|0)>>>0<P>>>0?p+1|0:p,1048576&(f=(c=t+i|0)>>>0<t>>>0?p+1|0:p)&&(a=1&E|(1&s)<<31|a>>>1,s=c<<31|s>>>1,Z=Z+1|0,c=(1&f)<<31|c>>>1,f=f>>>1|0);if(r=0,w=-2147483648&he,(0|Z)>=32767)c=r,f=2147418112|w,i=0,o=0;else if(P=0,(0|Z)>0?P=Z:(Aa(m+16|0,a,s,c,f,Z+127|0),Ha(m,a,s,c,f,1-Z|0),a=e[m>>2]|!!(e[m+16>>2]|e[m+24>>2]|e[m+20>>2]|e[m+28>>2]),s=e[m+4>>2],c=e[m+8>>2],f=e[m+12>>2]),Y=7&a,a=(0|(t=c<<29|s>>>3))==(0|(o=(a=(7&s)<<29|a>>>3)>>>0>(i=(Y>>>0>4)+a|0)>>>0?t+1|0:t))&a>>>0>i>>>0|t>>>0>o>>>0,t=r|(7&f)<<29|c>>>3,f=w|f>>>3&65535|P<<16,f=t>>>0>(c=a+t|0)>>>0?f+1|0:f,(0|Y)!=4){if(!Y)break e}else p=o+(t=0)|0,f=(t=(0|t)==(0|(o=(a=i)>>>0>(i=i+(r=1&i)|0)>>>0?p+1|0:p))&r>>>0>i>>>0|t>>>0>o>>>0)>>>0>(c=t+c|0)>>>0?f+1|0:f}e[A>>2]=i,e[A+4>>2]=o,e[A+8>>2]=c,e[A+12>>2]=f,J=m+112|0}function xt(A){var t=0,r=0,a=0,s=0,i=0,o=0,c=0;e:if(A|=0){i=(a=A-8|0)+(A=-8&(t=e[A-4>>2]))|0;A:if(!(1&t)){if(!(3&t)||(a=a-(t=e[a>>2])|0)>>>0<ue[57156])break e;if(A=A+t|0,e[57157]==(0|a)){if(!(3&~(t=e[i+4>>2])))return e[57154]=A,e[i+4>>2]=-2&t,e[a+4>>2]=1|A,void(e[A+a>>2]=A)}else{if(t>>>0<=255){if(s=e[a+8>>2],t=t>>>3|0,(0|(r=e[a+12>>2]))==(0|s)){e[57152]=e[57152]&sa(-2,t);break A}e[s+12>>2]=r,e[r+8>>2]=s;break A}if(c=e[a+24>>2],(0|a)==(0|(t=e[a+12>>2])))if((r=e[(s=a+20|0)>>2])||(r=e[(s=a+16|0)>>2])){for(;o=s,(r=e[(s=(t=r)+20|0)>>2])||(s=t+16|0,r=e[t+16>>2]););e[o>>2]=0}else t=0;else r=e[a+8>>2],e[r+12>>2]=t,e[t+8>>2]=r;if(!c)break A;s=e[a+28>>2];r:{if(e[(r=228912+(s<<2)|0)>>2]==(0|a)){if(e[r>>2]=t,t)break r;e[57153]=e[57153]&sa(-2,s);break A}if(e[c+(e[c+16>>2]==(0|a)?16:20)>>2]=t,!t)break A}if(e[t+24>>2]=c,(r=e[a+16>>2])&&(e[t+16>>2]=r,e[r+24>>2]=t),!(r=e[a+20>>2]))break A;e[t+20>>2]=r,e[r+24>>2]=t}}if(!(a>>>0>=i>>>0)&&1&(t=e[i+4>>2])){A:{if(!(2&t)){if(e[57158]==(0|i)){if(e[57158]=a,A=e[57155]+A|0,e[57155]=A,e[a+4>>2]=1|A,e[57157]!=(0|a))break e;return e[57154]=0,void(e[57157]=0)}if(e[57157]==(0|i))return e[57157]=a,A=e[57154]+A|0,e[57154]=A,e[a+4>>2]=1|A,void(e[A+a>>2]=A);A=(-8&t)+A|0;r:if(t>>>0<=255){if(s=e[i+8>>2],t=t>>>3|0,(0|(r=e[i+12>>2]))==(0|s)){e[57152]=e[57152]&sa(-2,t);break r}e[s+12>>2]=r,e[r+8>>2]=s}else{if(c=e[i+24>>2],(0|i)==(0|(t=e[i+12>>2])))if((r=e[(s=i+20|0)>>2])||(r=e[(s=i+16|0)>>2])){for(;o=s,(r=e[(s=(t=r)+20|0)>>2])||(s=t+16|0,r=e[t+16>>2]););e[o>>2]=0}else t=0;else r=e[i+8>>2],e[r+12>>2]=t,e[t+8>>2]=r;if(c){s=e[i+28>>2];s:{if(e[(r=228912+(s<<2)|0)>>2]==(0|i)){if(e[r>>2]=t,t)break s;e[57153]=e[57153]&sa(-2,s);break r}if(e[c+(e[c+16>>2]==(0|i)?16:20)>>2]=t,!t)break r}e[t+24>>2]=c,(r=e[i+16>>2])&&(e[t+16>>2]=r,e[r+24>>2]=t),(r=e[i+20>>2])&&(e[t+20>>2]=r,e[r+24>>2]=t)}}if(e[a+4>>2]=1|A,e[A+a>>2]=A,e[57157]!=(0|a))break A;return void(e[57154]=A)}e[i+4>>2]=-2&t,e[a+4>>2]=1|A,e[A+a>>2]=A}if(A>>>0<=255)return t=228648+(-8&A)|0,(r=e[57152])&(A=1<<(A>>>3))?A=e[t+8>>2]:(e[57152]=A|r,A=t),e[t+8>>2]=a,e[A+12>>2]=a,e[a+12>>2]=t,void(e[a+8>>2]=A);s=31,A>>>0<=16777215&&(s=62+((A>>>38-(t=Ye(A>>>8|0))&1)-(t<<1)|0)|0),e[a+28>>2]=s,e[a+16>>2]=0,e[a+20>>2]=0,o=228912+(s<<2)|0;A:{r:{if((r=e[57153])&(t=1<<s)){for(s=A<<((0|s)!=31?25-(s>>>1|0):0),t=e[o>>2];;){if(r=t,(-8&e[t+4>>2])==(0|A))break r;if(t=s>>>29|0,s<<=1,!(t=e[16+(o=r+(4&t)|0)>>2]))break}e[o+16>>2]=a,e[a+24>>2]=r}else e[57153]=t|r,e[o>>2]=a,e[a+24>>2]=o;e[a+12>>2]=a,e[a+8>>2]=a;break A}A=e[r+8>>2],e[A+12>>2]=a,e[r+8>>2]=a,e[a+24>>2]=0,e[a+12>>2]=r,e[a+8>>2]=A}A=e[57160]-1|0,e[57160]=A||-1}}}function Ma(A,t,r){var a,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0;J=a=J-176|0;e:{if(32&t)P=r-((0|r)>1)|0;else{i=Ut(A,93302);A:{r:{s:{if((0|t)!=2){if(i)break s;t=0;break e}if(P=r+1|0,w=56+(Y=z(r,76)+133152|0)|0,E=Ut(A,89360),o=Ut(A,93318),c=Ut(A,93426),f=Ut(A,93499),i)break r;break A}P=r+1|0,w=56+(Y=z(r,76)+133152|0)|0,f=0}for(A=0,m=(0|(s=e[i-4>>2]))!=34?(0|s)==39?s:0:s,Z=z(r,76)+133208|0;;){if(s=A,!(A=e[i>>2]))break A;r:{if(!m){if((0|A)==32|A-9>>>0<5)break A;if((0|A)!=47)break r;break A}if((0|s)!=92&&(0|A)==(0|m))break A}if(i=i+4|0,!((0|(p=zr(A,p+Z|0)+p|0))<16))break}}m=0,g[p+w|0]=0,p=z(r,76)+133168|0,i=0;A:if(E)for(A=0,w=(0|(s=e[E-4>>2]))!=34?(0|s)==39?s:0:s;;){if(s=A,!(A=e[E>>2]))break A;r:{if(!w){if((0|A)==32|A-9>>>0<5)break A;if((0|A)!=47)break r;break A}if((0|s)!=92&&(0|A)==(0|w))break A}if(E=E+4|0,!((0|(i=zr(A,i+p|0)+i|0))<36))break}if(g[i+p|0]=0,!(!o|e[o>>2]-48>>>0>=10)){for(;m=(e[o>>2]+z(m,10)|0)-48|0,e[(o=o+4|0)>>2]-48>>>0<10;);(0|m)<=0||(m=m-1|0)}if(s=z(r,76)+133152|0,e[s+4>>2]=m,A=0,i=0,!(!c|e[c>>2]-48>>>0>=10))for(;i=(e[c>>2]+z(i,10)|0)-48|0,e[(c=c+4|0)>>2]-48>>>0<10;);e[s+12>>2]=i,i=z(r,76)+133152|0;A:{r:if(f){for(;r=g[A+93099|0],(s=e[(A<<2)+f>>2])&&(A=A+1|0,(0|r)==(0|s)););s:{i:switch(s-34|0){case 0:case 5:break i;default:break s}if(!r){A=0;break A}}for(A=0;r=g[A+93116|0],(s=e[(A<<2)+f>>2])&&(A=A+1|0,(0|r)==(0|s)););s:{i:switch(s-34|0){case 0:case 5:break i;default:break s}if(!r){A=1;break A}}for(A=0;r=g[A+93197|0],(s=e[(A<<2)+f>>2])&&(A=A+1|0,(0|r)==(0|s)););s:switch(s-34|0){case 0:case 5:break s;default:break r}if(!r){A=2;break A}}A=3}e[i+8>>2]=e[131156+(A<<3)>>2],e[Y>>2]=t}if(qA(137776,133168),r=qA(a+96|0,133208),g[a+157|0]=e[33291],g[a+156|0]=e[33290],A=e[33289],e[a+152>>2]=0,g[a+158|0]=A,(0|P)>0)for(o=0;;){if(c=1,t=z(o,76)+133152|0,l[0|(A=t+16|0)]&&ha(0,A)&&(qA(137776,A),c=0,g[0|r]=0,g[a+158|0]=0,b[a+156>>1]=0),l[0|(A=t+56|0)]){f=qA(r,A),s=e[33679];A:if(l[0|(A=s)])for(;;){if(!Br(A=A+1|0,f)){qA(f,s+1|0);break A}if(A=1+(HA(A)+A|0)|0,!l[0|A])break}c&&(g[137776]=0)}if((A=e[t+8>>2])&&(g[a+156|0]=A),(A=e[t+12>>2])&&(g[a+157|0]=A),(A=e[t+4>>2])&&(g[a+158|0]=A),(0|P)==(0|(o=o+1|0)))break}e[a+148>>2]=r,e[a+144>>2]=137776,(A=gs(a+144|0,a+172|0))?es(A,43)||(t=l[a+156|0],!l[134672]|((0|t)!=l[134724]?t:0)||(e[a>>2]=A,e[a+4>>2]=134672,DA(t=a+16|0,93533,a),A=137776,ar(137776,t,40))):A=92003,t=0,Br(A,134784)&&(qA(134784,A),t=131072)}return J=a+176|0,t}function Tr(A,t){var r,a=0,s=0,i=0,o=0,c=0;r=A+t|0;e:{A:if(!(1&(a=e[A+4>>2]))){if(!(3&a))break e;t=(a=e[A>>2])+t|0;r:{if((0|(A=A-a|0))!=e[57157]){if(a>>>0<=255){if(i=e[A+8>>2],a=a>>>3|0,(0|(s=e[A+12>>2]))!=(0|i))break r;e[57152]=e[57152]&sa(-2,a);break A}if(c=e[A+24>>2],(0|(a=e[A+12>>2]))==(0|A))if((s=e[(i=A+20|0)>>2])||(s=e[(i=A+16|0)>>2])){for(;o=i,(s=e[(i=(a=s)+20|0)>>2])||(i=a+16|0,s=e[a+16>>2]););e[o>>2]=0}else a=0;else s=e[A+8>>2],e[s+12>>2]=a,e[a+8>>2]=s;if(!c)break A;i=e[A+28>>2];s:{if(e[(s=228912+(i<<2)|0)>>2]==(0|A)){if(e[s>>2]=a,a)break s;e[57153]=e[57153]&sa(-2,i);break A}if(e[c+(e[c+16>>2]==(0|A)?16:20)>>2]=a,!a)break A}if(e[a+24>>2]=c,(s=e[A+16>>2])&&(e[a+16>>2]=s,e[s+24>>2]=a),!(s=e[A+20>>2]))break A;e[a+20>>2]=s,e[s+24>>2]=a;break A}if(3&~(a=e[r+4>>2]))break A;return e[57154]=t,e[r+4>>2]=-2&a,e[A+4>>2]=1|t,void(e[r>>2]=t)}e[i+12>>2]=s,e[s+8>>2]=i}A:{if(!(2&(a=e[r+4>>2]))){if(e[57158]==(0|r)){if(e[57158]=A,t=e[57155]+t|0,e[57155]=t,e[A+4>>2]=1|t,e[57157]!=(0|A))break e;return e[57154]=0,void(e[57157]=0)}if(e[57157]==(0|r))return e[57157]=A,t=e[57154]+t|0,e[57154]=t,e[A+4>>2]=1|t,void(e[A+t>>2]=t);t=(-8&a)+t|0;r:if(a>>>0<=255){if(i=e[r+8>>2],a=a>>>3|0,(0|(s=e[r+12>>2]))==(0|i)){e[57152]=e[57152]&sa(-2,a);break r}e[i+12>>2]=s,e[s+8>>2]=i}else{if(c=e[r+24>>2],(0|r)==(0|(a=e[r+12>>2])))if((i=e[(s=r+20|0)>>2])||(i=e[(s=r+16|0)>>2])){for(;o=s,(i=e[(s=(a=i)+20|0)>>2])||(s=a+16|0,i=e[a+16>>2]););e[o>>2]=0}else a=0;else s=e[r+8>>2],e[s+12>>2]=a,e[a+8>>2]=s;if(c){i=e[r+28>>2];s:{if(e[(s=228912+(i<<2)|0)>>2]==(0|r)){if(e[s>>2]=a,a)break s;e[57153]=e[57153]&sa(-2,i);break r}if(e[c+(e[c+16>>2]==(0|r)?16:20)>>2]=a,!a)break r}e[a+24>>2]=c,(s=e[r+16>>2])&&(e[a+16>>2]=s,e[s+24>>2]=a),(s=e[r+20>>2])&&(e[a+20>>2]=s,e[s+24>>2]=a)}}if(e[A+4>>2]=1|t,e[A+t>>2]=t,e[57157]!=(0|A))break A;return void(e[57154]=t)}e[r+4>>2]=-2&a,e[A+4>>2]=1|t,e[A+t>>2]=t}if(t>>>0<=255)return a=228648+(-8&t)|0,(s=e[57152])&(t=1<<(t>>>3))?t=e[a+8>>2]:(e[57152]=t|s,t=a),e[a+8>>2]=A,e[t+12>>2]=A,e[A+12>>2]=a,void(e[A+8>>2]=t);i=31,t>>>0<=16777215&&(i=62+((t>>>38-(a=Ye(t>>>8|0))&1)-(a<<1)|0)|0),e[A+28>>2]=i,e[A+16>>2]=0,e[A+20>>2]=0,o=228912+(i<<2)|0;A:{if((s=e[57153])&(a=1<<i)){for(i=t<<((0|i)!=31?25-(i>>>1|0):0),a=e[o>>2];;){if(s=a,(-8&e[a+4>>2])==(0|t))break A;if(a=i>>>29|0,i<<=1,!(a=e[16+(o=s+(4&a)|0)>>2]))break}e[o+16>>2]=A,e[A+24>>2]=s}else e[57153]=a|s,e[o>>2]=A,e[A+24>>2]=o;return e[A+12>>2]=A,void(e[A+8>>2]=A)}t=e[s+8>>2],e[t+12>>2]=A,e[s+8>>2]=A,e[A+24>>2]=0,e[A+12>>2]=s,e[A+8>>2]=t}}function Rr(A){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0;if(!(t=g[88105]))return A;if(A=es(A,t)){if(!l[88106])return A;if(l[A+1|0]){if(!l[88107]){s=!!(0|(r=l[A+1|0]));e:if(r&&(0|(t=r|l[0|A]<<8))!=(0|(c=l[88106]|l[88105]<<8)))for(r=A+1|0;;){if(s=!!(0|(a=l[(A=r)+1|0])),!a)break e;if(r=A+1|0,(0|c)==(0|(t=a|t<<8&65280)))break}return s?A:0}if(l[A+2|0]){if(!l[88108]){r=A+2|0,s=!!(0|(t=l[A+2|0]));e:if(t&&(0|(t=l[A+1|0]<<16|l[0|A]<<24|t<<8))!=(0|(c=l[88106]<<16|l[88105]<<24|l[88107]<<8)))for(;;){if(A=r+1|0,s=!!(0|(a=l[r+1|0])),!a)break e;if(r=A,(0|c)==(0|(t=(t|a)<<8)))break}else A=r;return s?A-2|0:0}if(l[A+3|0]){if(!l[88109]){r=A+3|0,s=!!(0|(t=l[A+3|0]));e:if(t&&(0|(t=t|l[A+1|0]<<16|l[0|A]<<24|l[A+2|0]<<8))!=(0|(c=(A=l[88105]|l[88106]<<8|l[88107]<<16|l[88108]<<24)<<24|(65280&A)<<8|A>>>8&65280|A>>>24)))for(;;){if(A=r+1|0,s=!!(0|(a=l[r+1|0])),!a)break e;if(r=A,(0|c)==(0|(t=a|t<<8)))break}else A=r;return s?A-3|0:0}c=A,J=f=J-1056|0,e[(A=f+1048|0)>>2]=0,e[A+4>>2]=0,e[(A=f+1040|0)>>2]=0,e[A+4>>2]=0,e[f+1032>>2]=0,e[f+1036>>2]=0,e[f+1024>>2]=0,e[f+1028>>2]=0;e:{A:{r:{s:{if(t=l[88105]){for(;;){if(!l[i+c|0])break A;if(i=i+1|0,e[((255&t)<<2)+f>>2]=i,e[(A=(f+1024|0)+(t>>>3&28)|0)>>2]=e[A>>2]|1<<t,!(t=l[i+88105|0]))break}if(A=1,m=-1,i>>>0>1)break s}else m=-1,A=1;o=-1,r=1;break r}for(a=1,t=1;;){s:if((0|(o=l[88105+(t+m|0)|0]))!=(0|(s=l[A+88105|0])))s>>>0<o>>>0?(a=A-m|0,r=A,t=1):(m=r,r=r+1|0,a=1,t=1);else{if((0|t)==(0|a)){r=r+a|0,t=1;break s}t=t+1|0}if(!(i>>>0>(A=r+t|0)>>>0))break}if(r=1,o=-1,i>>>0<=1)A=a;else{for(A=0,s=1,t=1;;){s:if((0|(w=l[88105+(t+o|0)|0]))!=(0|(p=l[r+88105|0])))p>>>0>w>>>0?(s=r-o|0,A=r,t=1):(o=A,A=A+1|0,s=1,t=1);else{if((0|t)==(0|s)){A=A+s|0,t=1;break s}t=t+1|0}if(!(i>>>0>(r=A+t|0)>>>0))break}A=a,r=s}}for(t=A,va(88105,(a=(A=o+1>>>0>m+1>>>0)?r:t)+88105|0,w=(p=A?o:m)+1|0)?(a=((A=~p+i|0)>>>0<p>>>0?p:A)+1|0,s=0):s=i-a|0,P=i-1|0,E=63|i,o=0,A=c;;){if(!(c-A>>>0>=i>>>0))if(r=ai(c,0,E)){if(c=r,r-A>>>0<i>>>0)break A}else c=c+E|0;r=l[A+P|0],t=i;r:{if(e[(f+1024|0)+(r>>>3&28)>>2]>>>r&1)if((0|(r=e[(r<<2)+f>>2]))==(0|i)){s:{if(m=l[(r=(t=w)>>>0>o>>>0?t:o)+88105|0])for(;;){if(l[A+r|0]!=(255&m))break s;if(!(m=l[88105+(r=r+1|0)|0]))break}for(;;){if(t>>>0<=o>>>0)break e;if(l[88105+(t=t-1|0)|0]!=l[A+t|0])break}t=a,o=s;break r}t=r-p|0}else t=(r=i-r|0)>>>0>o>>>0?r:o;o=0}A=A+t|0}}A=0}J=f+1056|0,r=A}}}}return r}function us(A,t,r,a,s,i){var o,c,f,m,p=0,w=0,E=0;if(J=o=J-560|0,g[o+448|0]=0,g[o+144|0]=0,g[o+120|0]=0,f=34&i,c=t-z(w=(0|t)/100|0,100)|0,1&(m=64&l[A+106|0]?(0|t)>999|i:0)|(0|t)>99){e:{A:{r:{if(!(!f|c)){if(!RA(A,90606,o+304|0))break r;break e}if(c)break A}if(RA(A,90691,o+304|0))break e}RA(A,90725,o+304|0)}p=i,(0|t)<1e3||(p=i,!(8&l[A+105|0])|t-2e3>>>0<4294967196&&(g[o+208|0]=0,xs(A,p=(w>>>0)/10|0,a=16384&e[A+108>>2]?0:s+1|0,!((t>>>0)%1e3|0)|f,o+272|0)||Xa(A,p,s,e[A+212>>2]==28012?520:(0|a)<4?(e[A+108>>2]>>>a&1)<<3:0,o+208|0),2&l[A+109|0]?(e[o+108>>2]=15,e[o+100>>2]=15,e[o+104>>2]=o+208,e[o+96>>2]=o+272,DA(o+144|0,90761,o+96|0)):(e[o+92>>2]=15,e[o+84>>2]=15,e[o+88>>2]=o+272,e[o+80>>2]=o+208,DA(o+144|0,90761,o+80|0)),a=1,1&(!!(0|(w=w-z(p,10)|0))|m)||(g[o+304|0]=0),p=1|i)),g[o+208|0]=0;e:if(!(~m&(0|w)<=0))if(!(4&l[A+106|0])|!(1&p|l[o+144|0])||RA(A,90824,o+120|0),!f|(16&l[A+109|0]?0:c)||(e[o+64>>2]=w,DA(a=o+548|0,90875,o- -64|0),E=RA(A,a,o+208|0),!(4096&e[A+108>>2])|(0|c)<=0||ia(o+208|0,133104)),a=1,1&(~m|!!(0|w))){A:{r:{s:{i:{if(!(131072&e[A+108>>2])||1&p|(0|w)!=1){if(c|E||(e[o+48>>2]=w,DA(a=o+548|0,90985,o+48|0),E=RA(A,a,o+208|0)),E||(e[o+32>>2]=w,DA(a=o+548|0,91027,o+32|0),RA(A,a,o+208|0)))break i;if((0|w)!=1)break r;break s}if(!E)break s}g[o+304|0]=0;break A}if(a=1,4&l[A+105|0])break e}Xa(A,w,s,0,o+208|0)}a=1}else RA(A,88875,o+208|0);e[o+28>>2]=o+304,e[o+24>>2]=o+208,e[o+20>>2]=o+120,e[o+16>>2]=o+144,DA(o+448|0,91059,o+16|0)}else p=i;g[o+132|0]=0;e:{A:{if((0|c)>0)16&l[A+109|0]&&2&p||(!(1&p)|s&&(0|t)<=100||!(64&(a=e[A+104>>2]))&(!(8388608&a)|c>>>0>9)||RA(A,90824,o+132|0),!(1&p|l[o+144|0])|!(524288&e[A+104>>2])|w||RA(A,90824,o+132|0)),g[o+336|0]=0;else if(g[o+336|0]=0,!c&a)break A;if(s?(i=e[A+108>>2],t=(0|s)<4?(i>>>s&1)<<3:0):(a=f?3:2,t=32&i|((0|t)<100?1&p?a:4|a:a),i=e[A+108>>2]),t=(0|s)==1&&e[A+212>>2]==28012?520|t:t,1048576&i&&(a=16|t,t=(0|w)>0||1&p?a:t),!Xa(A,c,s,256&p|t,o+336|0)|!(128&l[A+104|0]))break e;g[o+132|0]=0;break e}l[133104]&&((0|(A=HA(o+448|0)))<=0||l[447+(A=A+o|0)|0]==10&&(g[A+447|0]=0),qA(o+336|0,133104))}e[o+8>>2]=15,e[o+12>>2]=o+336,e[o+4>>2]=o+132,e[o>>2]=o+448,DA(r,91101,o),J=o+560|0}function Kt(A){var t,r,a,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0;for(s=e[32972],e[s+64>>2]=290816,e[s+68>>2]=4104,e[s+96>>2]=0,e[s+100>>2]=0,e[s+120>>2]=90,e[s+124>>2]=100,e[s+112>>2]=64,e[s+116>>2]=256,e[s+104>>2]=5,e[s+108>>2]=0,e[s+84>>2]=100,e[s+88>>2]=64,i=e[50754],e[s+132>>2]=0,e[s+136>>2]=0,e[s+128>>2]=i,e[s+140>>2]=0,e[s+144>>2]=0,e[s+148>>2]=0,e[s+152>>2]=0,e[s+156>>2]=0,e[s+160>>2]=0,e[36435]=450,e[s+92>>2]=2,e[50870]=0,e[50871]=0,e[50872]=0,e[50873]=0,e[50880]=0,e[50881]=0,e[50882]=0,e[50883]=0,e[50890]=0,e[50891]=0,e[50892]=0,e[50893]=0,o=-3.141592653589793/+e[50754],D[25429]=o,f=-2*o,D[25430]=f,t=(o=Pt(200*o))*-o,D[25434]=t,D[25439]=t,D[25444]=t,o=(f=o*Da(2e3*f))+f,D[25433]=o,D[25438]=o,D[25443]=o,f=1-o-t,D[25432]=f,D[25437]=f,D[25442]=f,e[50902]=0,e[50903]=0,e[50900]=0,e[50901]=0,D[25449]=t,D[25448]=o,e[50912]=0,e[50913]=0,D[25447]=f,e[50910]=0,e[50911]=0,D[25454]=t,D[25453]=o,e[50922]=0,e[50923]=0,D[25452]=f,e[50920]=0,e[50921]=0,D[25459]=t,D[25458]=o,e[50932]=0,e[50933]=0,D[25457]=f,e[50930]=0,e[50931]=0,D[25464]=t,D[25463]=o,D[25462]=f,e[50942]=0,e[50943]=0,e[50940]=0,e[50941]=0,D[25469]=t,D[25468]=o,D[25467]=f,e[50952]=0,e[50953]=0,e[50950]=0,e[50951]=0,D[25474]=t,D[25473]=o,D[25472]=f,r=e[32972],i=0;b[236+(m=(i<<1)+r|0)>>1]=256,b[m+164>>1]=256,s=l[i+105376|0]<<1,b[m+254>>1]=s,b[m+182>>1]=s,b[m+200>>1]=l[i+105385|0]<<1,e[308+(s=(c=i<<2)+r|0)>>2]=e[c+105408>>2],e[s+272>>2]=0,b[m+218>>1]=0,e[c+200944>>2]=(0|z(e[c+105456>>2],22050))/e[50754],(0|(i=i+1|0))!=9;);for(P=e[32961],i=0,a=r+344|0;;){if(s=p,w=P,m=i,(0|(p=e[(i=131840+(c=i<<2)|0)>>2]))==-1&&(p=8e3,e[i>>2]=8e3,m&&(e[131840+(4|c)>>2]=e[c+131836>>2])),P=e[131840+(4|c)>>2],!((0|s)>=(0|(p=(0|p)/8|0))||(0|(E=p-s|0))<=0||(c=s+1|0,i=s,1&E&&(g[344+(s+r|0)|0]=(0|w)>=255?255:w,i=c),(0|c)==(0|p))))for(Y=P-w|0;c=((0|z(i-s|0,Y))/(0|E)|0)+w|0,g[i+a|0]=(0|c)>=255?255:c,Z=((0|z((c=i+1|0)-s|0,Y))/(0|E)|0)+w|0,g[c+a|0]=(0|Z)>=255?255:Z,(0|p)!=(0|(i=i+2|0)););if(i=m+2|0,!(m>>>0<10))break}i=e[32972],e[i+80>>2]=232,e[i+72>>2]=256,e[i+76>>2]=238,A||(e[49848]=0),b[i+200>>1]=(0|z(b[i+200>>1],105))/100}function qa(A,t,r){var a,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0;J=a=J-288|0,(0|t)!=132848&&Vr(132848,t,40),(0|(s=A+228|0))!=(0|t)&&Vr(s,t,40),e[a+88>>2]=t,e[a+84>>2]=47,e[a+80>>2]=137584,DA(s=a+96|0,84089,a+80|0),i=is(s),(s=e[A+688>>2])&&(xt(s),e[A+688>>2]=0),s=ka(a+96|0,84577);e:if((0|i)>0&&s)if(r=Ct(i),e[A+688>>2]=r,r)if(m=bn(r,i,s),ra(s),m>>>0<=1032)e[a+16>>2]=a+96,fr(e[30450],85164,a+16|0),r=2;else if(s=e[A+688>>2],r=e[s+4>>2],!((0|(i=e[s>>2]))!=1024|(0|r)<=0)&(0|r)<134217729){s=r+s|0,e[A+684>>2]=s,w=jA(A+5168|0,0,1024),jA(A+7664|0,0,260),jA(A+7924|0,255,256),jA(A+4788|0,0,380),jA(A+6192|0,0,512);A:if((0|(r=l[0|s]))!=7)for(;;){if((0|(i=255&r))!=6){if(!i)break A;i=e[A+684>>2],e[a+72>>2]=r<<24>>24,e[a+64>>2]=132848,e[a+68>>2]=s-i,fr(e[30450],88950,a- -64|0);break}r:{s:{i:{c:{o:switch((i=l[0|(r=s+1|0)])-18|0){case 0:break c;case 2:break o;default:break i}for(r=4+(-4&r)|0,e[A+180>>2]=r;r=(s=r)+1|0,!Vn(s););for(;i=l[0|s],r=s,s=s+1|0,(0|i)!=7;);break r}if(r=s+3|0,(0|(s=((0|(s=g[s+2|0]))<65?191:-65)+s|0))>94)break s;e[4788+((s<<2)+A|0)>>2]=r;break s}switch(r=1+((c=HA(r))+r|0)|0,0|c){case 1:e[5168+((i<<2)+A|0)>>2]=r;break s;case 0:e[w>>2]=r;break s}c=l[s+2|0],(0|i)!=1?(s=e[A+7664>>2],l[0|(p=7924+(o=A+i|0)|0)]==255&&(g[0|p]=s),g[0|(o=o+7668|0)]=l[0|o]+1,e[6704+(o=(s<<2)+A|0)>>2]=r,e[A+7664>>2]=s+1,e[o+7184>>2]=i|c<<8):e[6188+((c<<2)+A|0)>>2]=r}if(l[0|r]!=7)for(;r=1+(HA(r)+r|0)|0,l[0|r]!=7;);}r=l[0|(s=r+1|0)]}for(s=e[A+688>>2]+8|0;;){for(e[692+((r=f<<2)+A|0)>>2]=s;i=l[0|s];)s=s+i|0;for(s=s+1|0,e[692+((4|r)+A|0)>>2]=s;r=l[0|s];)s=r+s|0;if(s=s+1|0,(0|(f=f+2|0))==1024)break}r=0,(0|(A=e[A+324>>2]))<=0|A>>>0<=m>>>0||(e[a+48>>2]=t,fr(e[30450],85519,a+48|0))}else e[a+40>>2]=r,e[a+36>>2]=i,e[a+32>>2]=a+96,fr(e[30450],85349,a+32|0),r=2;else ra(s),r=3;else{if(r||(e[a>>2]=a+96,fr(e[30450],84963,a)),r=1,!s)break e;ra(s)}return J=a+288|0,r}function ds(A){var t,r=0,a=0;for(t=jA(A+344|0,0,256),g[A+364|0]=1,g[A+356|0]=1,g[A+357|0]=1,g[A+358|0]=1,g[A+359|0]=1,g[A+360|0]=1,g[A+361|0]=1,g[A+362|0]=1,g[A+363|0]=1,g[A+348|0]=1,g[A+349|0]=1,g[A+350|0]=1,g[A+351|0]=1,g[A+352|0]=1,g[A+353|0]=1,g[A+354|0]=1,g[A+355|0]=1,g[A+431|0]=3,g[A+429|0]=3,g[A+430|0]=3,g[A+406|0]=3,g[A+407|0]=3,g[A+408|0]=3,g[A+409|0]=3,g[A+410|0]=3,g[A+411|0]=3,g[A+412|0]=3,g[A+413|0]=3,g[A+414|0]=3,g[A+415|0]=3,g[A+416|0]=3,g[A+417|0]=3,g[A+418|0]=3,g[A+419|0]=3,g[A+420|0]=3,g[A+421|0]=3,g[A+440|0]=3,g[A+441|0]=3,g[A+442|0]=3,g[A+443|0]=3,a=21;g[344+(r=A+a|0)|0]=4|l[r+344|0],(0|(r=a+1|0))!=58;)g[0|(r=r+t|0)]=4|l[0|r],g[2+(r=a+t|0)|0]=4|l[r+2|0],g[r+3|0]=4|l[r+3|0],a=a+4|0;g[A+346|0]=4|l[A+346|0],g[A+347|0]=4|l[A+347|0],g[A+432|0]=4|l[A+432|0],g[A+433|0]=4|l[A+433|0],g[A+434|0]=4|l[A+434|0],g[A+435|0]=4|l[A+435|0],g[A+436|0]=4|l[A+436|0],g[A+437|0]=4|l[A+437|0],g[A+438|0]=4|l[A+438|0],g[A+439|0]=4|l[A+439|0],g[A+467|0]=4|l[A+467|0],g[A+468|0]=4|l[A+468|0],g[A+470|0]=4|l[A+470|0],g[A+471|0]=4|l[A+471|0],g[A+348|0]=64|l[A+348|0],g[A+349|0]=64|l[A+349|0],g[A+350|0]=64|l[A+350|0],g[A+351|0]=64|l[A+351|0],g[A+352|0]=64|l[A+352|0],g[A+353|0]=64|l[A+353|0],g[A+354|0]=64|l[A+354|0],g[A+355|0]=64|l[A+355|0],g[A+356|0]=64|l[A+356|0],g[A+357|0]=64|l[A+357|0],g[A+358|0]=64|l[A+358|0],g[A+359|0]=64|l[A+359|0],g[A+360|0]=64|l[A+360|0],g[A+361|0]=64|l[A+361|0],g[A+362|0]=64|l[A+362|0],g[A+363|0]=64|l[A+363|0],g[A+364|0]=64|l[A+364|0],g[A+406|0]=64|l[A+406|0],g[A+407|0]=64|l[A+407|0],g[A+408|0]=64|l[A+408|0],g[A+409|0]=64|l[A+409|0],g[A+410|0]=64|l[A+410|0],g[A+411|0]=64|l[A+411|0],g[A+412|0]=64|l[A+412|0],g[A+413|0]=64|l[A+413|0],g[A+414|0]=64|l[A+414|0],g[A+415|0]=64|l[A+415|0],g[A+416|0]=64|l[A+416|0],g[A+417|0]=64|l[A+417|0],g[A+418|0]=64|l[A+418|0],g[A+419|0]=64|l[A+419|0],g[A+420|0]=64|l[A+420|0],g[A+440|0]=64|l[A+440|0],g[A+441|0]=64|l[A+441|0],g[A+429|0]=64|l[A+429|0],g[A+430|0]=64|l[A+430|0],g[A+431|0]=64|l[A+431|0],g[A+442|0]=64|l[A+442|0],g[A+443|0]=64|l[A+443|0],e[A+40>>2]=1,e[A+204>>2]=e[A+600>>2]+77}function Ci(A,t,r,a,s,i,o,c,f){var m,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0;J=m=J-128|0;e:{A:{if(gA(i,o,c,f,0,0,0,0)){w=65535&f;r:s:{if((0|(P=f>>>16&32767))!=32767){if(p=4,P)break s;p=i|c|o|w?3:2;break r}p=!(i|c|o|w)}if((0|(Y=32767&(he=s>>>16|0)))!=32767&&p)break A}PA(m+16|0,t,r,a,s,i,o,c,f),Qr(m,t=e[m+16>>2],a=e[m+20>>2],s=e[m+24>>2],r=e[m+28>>2],t,a,s,r),a=e[m+8>>2],s=e[m+12>>2],c=e[m>>2],f=e[m+4>>2];break e}if(P=c,(0|gA(t,r,p=a,Z=2147483647&s,i,o,c,E=2147483647&f))<=0){if(gA(t,r,p,Z,i,o,P,E)){c=t,f=r;break e}PA(m+112|0,t,r,a,s,0,0,0,0),a=e[m+120>>2],s=e[m+124>>2],c=e[m+112>>2],f=e[m+116>>2]}else{if(ee=f>>>16&32767,Y?(f=r,c=t):(PA(m+96|0,t,r,p,Z,0,0,0,1081540608),p=e[m+104>>2],Z=c=e[m+108>>2],Y=(c>>>16|0)-120|0,f=e[m+100>>2],c=e[m+96>>2]),ee||(PA(m+80|0,i,o,P,E,0,0,0,1081540608),P=e[m+88>>2],E=i=e[m+92>>2],ee=(i>>>16|0)-120|0,o=e[m+84>>2],i=e[m+80>>2]),ce=P,Be=65535&E|65536,Z=65535&Z|65536,(0|Y)>(0|ee)){for(;;){if(P=(E=p-ce|0)-(w=(0|o)==(0|f)&i>>>0>c>>>0|o>>>0>f>>>0)|0,(0|(w=(Z-((p>>>0<ce>>>0)+Be|0)|0)-(w>>>0>E>>>0)|0))>0|(0|w)>=0){if(p=c,!((c=c-i|0)|P|(f=f-((i>>>0>p>>>0)+o|0)|0)|w)){PA(m+32|0,t,r,a,s,0,0,0,0),a=e[m+40>>2],s=e[m+44>>2],c=e[m+32>>2],f=e[m+36>>2];break e}w=w<<1|P>>>31,p=P<<1|f>>>31}else w=Z<<1|p>>>31,p=p<<1|f>>>31;if(Z=w,w=f<<1|c>>>31,c<<=1,f=w,!((0|(Y=Y-1|0))>(0|ee)))break}Y=ee}if(P=(E=p-ce|0)-(w=(0|o)==(0|f)&i>>>0>c>>>0|o>>>0>f>>>0)|0,E=w=(Z-((p>>>0<ce>>>0)+Be|0)|0)-(w>>>0>E>>>0)|0,(0|w)<0)P=p,E=Z;else if(p=c,!((c=c-i|0)|P|(f=f-((i>>>0>p>>>0)+o|0)|0)|E)){PA(m+48|0,t,r,a,s,0,0,0,0),a=e[m+56>>2],s=e[m+60>>2],c=e[m+48>>2],f=e[m+52>>2];break e}if((0|E)==65535|E>>>0<65535)for(;t=f>>>31|0,Y=Y-1|0,Z=f<<1|c>>>31,c<<=1,f=Z,r=t,t=E<<1|P>>>31,P=r|P<<1,E=t,t>>>0<65536;);t=32768&he,(0|Y)<=0?(PA(m- -64|0,c,f,P,65535&E|(t|Y+120)<<16,0,0,0,1065811968),a=e[m+72>>2],s=e[m+76>>2],c=e[m+64>>2],f=e[m+68>>2]):(a=P,s=65535&E|(t|Y)<<16)}}e[A>>2]=c,e[A+4>>2]=f,e[A+8>>2]=a,e[A+12>>2]=s,J=m+128|0}function $s(A,t,r){var a,s,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0;if(J=a=J-1040|0,(0|(o=m0(A,589824,0)))>=0&&((i=B0(1,2072))?e[i+8>>2]=o:(GA(0|o),i=0)),s=i,i){e:if(i=f0(s))for(P=e[30450],E=(a+96|0)+t|0;;){if((0|(o=e[50303]))>=348){e[a+4>>2]=350,e[a>>2]=o+1,fr(P,91860,a);break e}if(l[i+19|0]!=46)if(e[a+88>>2]=i+19,e[a+84>>2]=47,e[a+80>>2]=A,DA(i=a+96|0,91924,a+80|0),(0|(i=is(i)))!=-31){if(!((0|i)<=0)&&(w=ka(a+96|0,85712))){c=0,g[a+832|0]=0,g[a+752|0]=0,e[a+360>>2]=0,e[a+356>>2]=4,m=0;A:for(;;){for(p=299-m|0;Jt(a+912|0,120,w);){i=a+912|0;r:{if(l[a+912|0]!=35){s:if(!((0|(i=HA(a+912|0)-1|0))<=0))for(;;){if(!((0|(o=g[0|(f=(a+912|0)+i|0)]))==32|o-9>>>0<5))break s;if(g[0|f]=0,!((0|(i=i-1|0))>0))break}if(!(i=Rr(a+912|0)))break r}g[0|i]=0}i=a+912|0;r:if(o=l[a+912|0])for(;;){if(Or(o<<24>>24))break r;if(!(o=l[0|(i=i+1|0)]))break}if(g[0|i]=0,l[a+912|0]){i=i+1|0;r:switch(bs(131904,a+912|0)-1|0){case 0:for(;o=i,i=i+1|0,(0|(f=g[0|o]))==32|f-9>>>0<5;);ar(a+832|0,o,80);continue;case 1:if(g[a+672|0]=0,e[a+364>>2]=5,o=a+672|0,e[a+16>>2]=o,e[a+20>>2]=a+364,ut(i,86237,a+16|0),(o=HA(o)+2|0)>>>0>=p>>>0)continue;g[0|(i=(a+368|0)+m|0)]=e[a+364>>2],qA(i+1|0,a+672|0),c=c+1|0,m=o+m|0;continue A;case 2:if(e[a+52>>2]=a+360,e[a+48>>2]=a+752,ut(i,86237,a+48|0),!r)continue;e[a+32>>2]=E,fr(P,92042,a+32|0);continue;case 5:break r;default:continue}e[a+64>>2]=a+356,ut(i,87268,a- -64|0)}}break}g[(a+368|0)+m|0]=0,o=bs(132112,a+752|0),c?(f=HA(E)+m|0,p=wt((c=B0(28+(HA(a+832|0)+f|0)|0,1))+24|0,a+368|0,i=m+1|0),e[c+4>>2]=p,i=qA(i+p|0,E),e[c>>2]=i,e[c+8>>2]=i,l[a+832|0]&&(e[c>>2]=qA(2+(f+p|0)|0,a+832|0)),i=e[a+360>>2],g[c+14|0]=0,g[c+12|0]=o,g[c+13|0]=i,g[c+15|0]=e[a+356>>2],ra(w),i=e[50303],e[50303]=i+1,e[201216+(i<<2)>>2]=c):ra(w)}}else $s(a+96|0,t,r);if(!(i=f0(s)))break}G0(e[s+8>>2]),xt(s)}J=a+1040|0}function ei(A,t){var r,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0;J=r=J-352|0;e:if(A||(A=e[136284+(t<<4)>>2])){l[0|A]!=47&&(e[r+12>>2]=A,e[r+4>>2]=47,e[r+8>>2]=47,e[r>>2]=137584,DA(A=r+16|0,84114,r)),g[r+240|0]=0;A:{r:{if(a=ka(A,84577)){if((0|Ln(a,20))==-1)break A;if(i=On(a),s=On(a),c=On(a),!((0|i)!=65537|(0|s)!=e[50754])&(0|c)==s<<1)break r;ra(a),b[r+256>>1]=l[84864]|l[84865]<<8,A=l[84852]|l[84853]<<8|l[84854]<<16|l[84855]<<24,e[r+240>>2]=l[84848]|l[84849]<<8|l[84850]<<16|l[84851]<<24,e[r+244>>2]=A,A=l[84860]|l[84861]<<8|l[84862]<<16|l[84863]<<24,e[r+248>>2]=l[84856]|l[84857]<<8|l[84858]<<16|l[84859]<<24,e[r+252>>2]=A,J=i=J-16|0;s:{if((a=HA(A=r+240|0))>>>0>=6&&!va(c=(A+a|0)-6|0,84274,6)){for(m=100;;){for(f=0,J=a=J-16|0,l[227196]||(g[227197]=aA(),g[227196]=1),w=+Ue(),Ne(o=w/1e3)<9223372036854776e3?(p=Ne(o)>=1?~~(o>0?Je(AA(23283064365386963e-26*o),4294967295):xA(23283064365386963e-26*(o-+(~~o>>>0>>>0))))>>>0:0,s=~~o>>>0):(p=-2147483648,s=0),e[a>>2]=s,e[a+4>>2]=p,o=1e3*(w-(+(It(s,p,1e3,0)>>>0)+4294967296*+(0|$)))*1e3,s=Ne(o)<2147483648?~~o:-2147483648,e[a+8>>2]=s,s=c+(a>>>4|0)^z(e[a+8>>2],65537);g[c+f|0]=65+(15&s|s<<1&32),s=s>>>5|0,(0|(f=f+1|0))!=6;);if(J=a+16|0,e[i>>2]=384,(0|(a=m0(A,194,i)))>=0)break s;if(m=m-1|0,e[56798]!=20||!m)break}wt(c,84274,6)}else e[56798]=28;a=-1}J=i+16|0,(0|a)<0||G0(a)}if(!(a=ka(A,84577))){A=hs(0,e[56798],A);break e}}if((0|(i=is(A)))<0){ra(a),A=hs(0,0-i|0,A);break e}if((0|Ln(a,0))==-1){t=e[56798],ra(a),A=hs(0,t,A);break e}if(!(s=Kr(e[(c=136280+(t<<4)|0)>>2],i))){ra(a),A=48;break e}if((0|bn(s,i,a))!=(0|i)){t=e[56798],ra(a),l[r+240|0]&&Nn(r+240|0),xt(s),A=hs(0,t,A);break e}ra(a),l[r+240|0]&&Nn(r+240|0),e[136276+(t<<4)>>2]=(l[s+40|0]|l[s+41|0]<<8|l[s+42|0]<<16|l[s+43|0]<<24)/2,e[c>>2]=s,A=0;break e}t=e[56798],ra(a),A=hs(0,t,A)}else A=28;return J=r+352|0,A}function bi(A,t,r,a,s,i){var o,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0;for(g[0|r]=1,o=1&i,Be=1,Z=-1,ee=-1,p=1,i=t;;){Qe=he-2|0,ce=w,P=ee;e:{A:{for(;;){if(!(E=l[0|i])){ee=P,w=ce;break e}if(i=i+1|0,Y=e[144464+(E<<2)>>2]){r:{if((0|(c=l[Y+11|0]))!=1){if(16&l[Y+6|0]|(0|c)!=2)break r;g[0|(w=r+p|0)]=Z,c=(0|Z)<4|(0|P)>(0|Z),!(2&l[Y+4|0])|!o|(0|Z)>=0||(g[0|w]=1),w=c?ce:p,ee=c?P:Z,Z=-1,p=p+1|0;break A}if(!M[Y+8>>1]){c=0,m=p;s:if((0|E)!=8)c=l[Y+14|0],e[s>>2]&&c>>>0>=4||(P=(0|c)<(0|P)?P:c,Z=c);else{for(;;){if(E=c,m=m-1|0,e[s>>2]|(0|m)<=0||(0|(Y=g[0|(f=r+m|0)]))>3)break s;if(c=E+1|0,!(Y>>>0<2))break}if(g[0|f]=4,ce=(0|P)<4?m:ce,P=(0|P)<=4?4:P,m>>>0<2)break s;if(Y=3&(m=~E+he|0),c=1,Qe-E>>>0>=3)for(E=-4&m,m=0;l[0|(f=r+c|0)]==4&&(g[0|f]=3),l[f+1|0]==4&&(g[f+1|0]=3),l[f+2|0]==4&&(g[f+2|0]=3),l[f+3|0]==4&&(g[f+3|0]=3),c=c+4|0,(0|E)!=(0|(m=m+4|0)););if(f=0,!Y)break s;for(;l[0|(E=r+c|0)]==4&&(g[0|E]=3),c=c+1|0,(0|Y)!=(0|(f=f+1|0)););}if(Be)continue;break e}}break}}ee=P,w=ce,(0|E)==20&&(g[r+p|0]=o&&(0|Z)<0?1:Z,p=p+1|0)}if(g[0|t]=E,he=p-1|0,t=t+1|0,Be=(0|p)<99)continue}break}g[r+p|0]=1,g[0|t]=0;e:if((0|(t=e[s>>2]))>0)ee=4,(0|t)>=(0|p)&&(e[s>>2]=he,t=he),g[t+r|0]=4,w=e[s>>2];else if((0|ee)==5&&(ee=4,!((0|p)<2))){if(i=1,P=1&(t=p-1|0),(0|p)!=2)for(ce=-2&t,m=0;;){f=4;A:{r:{s:switch(l[0|(t=(c=i)+r|0)]-4|0){case 1:break r;case 0:break s;default:break A}f=2&l[A+14|0]?1:3,c=w}g[0|t]=f,w=c}f=4;A:{r:{s:switch(l[0|(t=(c=i+1|0)+r|0)]-4|0){case 1:break r;case 0:break s;default:break A}f=2&l[A+14|0]?1:3,c=w}g[0|t]=f,w=c}if(i=i+2|0,(0|ce)==(0|(m=m+2|0)))break}if(P){f=4;A:{r:switch(l[0|(t=r+i|0)]-4|0){case 1:break A;case 0:break r;default:break e}f=2&l[A+14|0]?1:3,i=w}g[0|t]=f,w=i}}return e[s>>2]=w,e[a>>2]=p,ee}function Kr(A,t){var r,a,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0;if(!A)return Ct(t);if(t>>>0>=4294967232)return e[56798]=48,0;r=t>>>0<11?16:t+11&-8,o=-8&(a=e[4+(c=A-8|0)>>2]);e:if(3&a){f=o+c|0;A:if(o>>>0>=r>>>0){if((i=o-r|0)>>>0<16)break A;e[c+4>>2]=1&a|r|2,e[4+(s=c+r|0)>>2]=3|i,e[f+4>>2]=1|e[f+4>>2],Tr(s,i)}else if(e[57158]!=(0|f))if(e[57157]!=(0|f)){if(2&(i=e[f+4>>2])||(p=o+(-8&i)|0)>>>0<r>>>0)break e;E=p-r|0;r:if(i>>>0<=255){if(o=e[f+8>>2],s=i>>>3|0,(0|(i=e[f+12>>2]))==(0|o)){e[57152]=e[57152]&sa(-2,s);break r}e[o+12>>2]=i,e[i+8>>2]=o}else{if(w=e[f+24>>2],(0|(m=e[f+12>>2]))==(0|f))if((s=e[(o=f+20|0)>>2])||(s=e[(o=f+16|0)>>2])){for(;i=o,m=s,(s=e[(o=s+20|0)>>2])||(o=m+16|0,s=e[m+16>>2]););e[i>>2]=0}else m=0;else s=e[f+8>>2],e[s+12>>2]=m,e[m+8>>2]=s;if(w){i=e[f+28>>2];s:{if(e[(s=228912+(i<<2)|0)>>2]==(0|f)){if(e[s>>2]=m,m)break s;e[57153]=e[57153]&sa(-2,i);break r}if(e[(e[w+16>>2]==(0|f)?16:20)+w>>2]=m,!m)break r}e[m+24>>2]=w,(s=e[f+16>>2])&&(e[m+16>>2]=s,e[s+24>>2]=m),(s=e[f+20>>2])&&(e[m+20>>2]=s,e[s+24>>2]=m)}}E>>>0<=15?(e[c+4>>2]=1&a|p|2,e[4+(s=c+p|0)>>2]=1|e[s+4>>2]):(e[c+4>>2]=1&a|r|2,e[4+(i=c+r|0)>>2]=3|E,e[4+(s=c+p|0)>>2]=1|e[s+4>>2],Tr(i,E))}else{if((i=o+e[57154]|0)>>>0<r>>>0)break e;(s=i-r|0)>>>0>=16?(e[c+4>>2]=1&a|r|2,e[4+(o=c+r|0)>>2]=1|s,e[(i=i+c|0)>>2]=s,e[i+4>>2]=-2&e[i+4>>2]):(e[c+4>>2]=i|1&a|2,e[4+(s=i+c|0)>>2]=1|e[s+4>>2],s=0,o=0),e[57157]=o,e[57154]=s}else{if((o=o+e[57155]|0)>>>0<=r>>>0)break e;e[c+4>>2]=1&a|r|2,s=o-r|0,e[4+(i=c+r|0)>>2]=1|s,e[57155]=s,e[57158]=i}s=c}else{if(r>>>0<256||o>>>0>=r+4>>>0&&(s=c,o-r>>>0<=e[57272]<<1>>>0))break e;s=0}return s?s+8|0:(c=Ct(t))?(wt(c,A,t>>>0>(s=(3&(s=e[A-4>>2])?-4:-8)+(-8&s)|0)>>>0?s:t),xt(A),c):0}function rs(){var A,t,r=0,a=0;return A=Sa(12),e[A>>2]=22050,t=Sa(432),e[(a=t)+4>>2]=0,e[a+8>>2]=0,e[a>>2]=132304,e[a+32>>2]=0,e[a+12>>2]=0,e[a+16>>2]=0,e[a+20>>2]=0,e[a+24>>2]=0,jA(a+40|0,0,376),e[a+420>>2]=0,e[a+424>>2]=-1,g[a+416|0]=1,r=jA(Sa(408),0,408),e[a+28>>2]=r,g[r+8|0]=1,e[A+4>>2]=a,r=Sa(1096),e[r+8>>2]=22050,e[r+4>>2]=22050,e[r>>2]=132352,e[r+64>>2]=22050,e[r+56>>2]=0,e[r+60>>2]=0,e[r+32>>2]=0,e[r+36>>2]=0,e[r+24>>2]=22050,e[r+16>>2]=0,e[r+20>>2]=0,e[r+40>>2]=0,e[r+44>>2]=0,g[r+48|0]=0,e[r+128>>2]=0,e[r+132>>2]=0,b[r+96>>1]=0,e[r+72>>2]=22050,e[r+136>>2]=0,e[r+140>>2]=0,b[r+168>>1]=0,e[r+144>>2]=22050,e[r+200>>2]=0,e[r+204>>2]=0,e[r+208>>2]=0,e[r+212>>2]=0,e[r+216>>2]=22050,b[r+240>>1]=0,e[r+280>>2]=0,e[r+284>>2]=0,e[r+272>>2]=0,e[r+276>>2]=0,e[r+288>>2]=22050,b[r+312>>1]=0,e[r+344>>2]=0,e[r+348>>2]=0,e[r+352>>2]=0,e[r+356>>2]=0,e[r+360>>2]=22050,b[r+384>>1]=0,e[r+416>>2]=0,e[r+420>>2]=0,e[r+424>>2]=0,e[r+428>>2]=0,e[r+432>>2]=22050,b[r+456>>1]=0,e[r+488>>2]=0,e[r+492>>2]=0,e[r+496>>2]=0,e[r+500>>2]=0,e[r+504>>2]=22050,b[r+528>>1]=1,e[r+560>>2]=0,e[r+564>>2]=0,e[r+568>>2]=0,e[r+572>>2]=0,b[r+600>>1]=0,e[r+576>>2]=22050,e[r+640>>2]=0,e[r+644>>2]=0,e[r+632>>2]=0,e[r+636>>2]=0,b[r+680>>1]=0,e[r+656>>2]=22050,e[r+648>>2]=22050,e[r+720>>2]=0,e[r+724>>2]=0,e[r+712>>2]=0,e[r+716>>2]=0,b[r+752>>1]=0,e[r+728>>2]=22050,e[r+792>>2]=0,e[r+796>>2]=0,e[r+784>>2]=0,e[r+788>>2]=0,b[r+824>>1]=0,e[r+800>>2]=22050,e[r+864>>2]=0,e[r+868>>2]=0,e[r+856>>2]=0,e[r+860>>2]=0,e[r+872>>2]=22050,b[r+896>>1]=0,e[r+936>>2]=0,e[r+940>>2]=0,e[r+928>>2]=0,e[r+932>>2]=0,b[r+968>>1]=0,e[r+944>>2]=22050,e[r+1008>>2]=0,e[r+1012>>2]=0,e[r+1e3>>2]=0,e[r+1004>>2]=0,b[r+1040>>1]=0,e[r+1016>>2]=22050,e[r+1088>>2]=0,e[(a=r+1080|0)>>2]=0,e[a+4>>2]=0,e[(a=r+1072|0)>>2]=0,e[a+4>>2]=0,e[A+8>>2]=r,ct[e[e[r>>2]+4>>2]](r,t),A}function fs(A,t,r){var a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0;e:if(w=e[50759]){if(a=e[50980],s=z(a,80)+222176|0,(0|(f=(0|(s=(0|(s=(e[s+12>>2]+e[s>>2]|0)/(0|A)|0))<(0|(p=((0|z(e[50754],19))/40<<16)/(0|A)|0))?s:p))>=399?399:s))>=0&&(jA(t,0,4+(f<<2)|0),a=e[50980]),(0|a)>=0)for(E=e[50801];;){if(i=z(o,80)+222176|0,e[i+4>>2]&&(c=e[i>>2])){if(P=c+e[i+12>>2]|0,a=1+((c-e[i+8>>2]|0)/(0|A)|0)|0,(0|c)>(0|(a=z(s=(0|a)<=1?1:a,A))))for(;e[(m=(s<<2)+t|0)>>2]=e[m>>2]+z(e[i+4>>2],l[((c-a|0)/(e[i+8>>2]>>8)|0)+E|0]),s=s+1|0,(0|c)>(0|(a=A+a|0)););if(!((0|a)>=(0|P)))for(;e[(m=(s<<2)+t|0)>>2]=e[m>>2]+z(e[i+4>>2],l[((a-c|0)/(e[i+12>>2]>>8)|0)+E|0]),s=s+1|0,(0|P)>(0|(a=A+a|0)););}if(!((0|(o=o+1|0))<=e[50980]))break}if(s=1,!((0|(i=65536e3/(0|A)|0))<=0||(0|(a=z(e[55565],10)))<=0))for(i=(0|a)/(0|i)|0;e[(c=(s<<2)+t|0)>>2]=e[c>>2]+a,s=s+1|0,(0|(a=a-i|0))>0;);if((0|o)<=8)for(;s=203216+(a=o<<2)|0,i=z(o,80)+222176|0,c=e[i+4>>2]>>14,e[s>>2]=(0|z(z(c,c),5))/2,r?a=e[a+203264>>2]:(c=a+203264|0,a=e[i>>2]/(0|A)|0,e[c>>2]=a),(0|a)>=(0|p)&&(e[s>>2]=0),(0|(o=o+1|0))!=9;);if(s=0,(0|f)>=0)for(a=0;i=e[(o=(a<<2)+t|0)>>2]>>15,i=z(i,i)>>8,e[o>>2]=i,(0|s)<=524287999&&(e[o>>2]=z(i,l[344+((s>>19)+w|0)|0])>>13),s=A+s|0,o=(0|a)!=(0|f),a=a+1|0,o;);if(e[t+4>>2]=(0|z(e[t+4>>2],l[203300]?6:10))/8,1&r)for(A=e[50826],a=1;;){if(e[203312+(r=a<<2)>>2]=e[t+r>>2]-e[A+r>>2]>>3,(0|(r=a+1|0))==30)break e;e[203312+(r<<=2)>>2]=e[t+r>>2]-e[A+r>>2]>>3,a=a+2|0}}else f=1;return f}function Ai(A,t,r,a){var s,i=0,o=0;J=s=J-176|0,g[0|A]=0,b[s+80>>1]=24320,e[s+104>>2]=0,e[s+108>>2]=0,g[82+(zr(r,i=s+80|2)+s|0)|0]=0;e:{A:{if(!a){if(a=s+80|1,e[s+12>>2]=a,kr(t,s+12|0,s+16|0,s+104|0,0,0)||(e[s+12>>2]=i,kr(t,s+12|0,s+16|0,s+104|0,0,0)||(g[s+81|0]=32,qt(t,i,s+16|0,60,0,0,0))),(r=l[s+16|0])&&(0|r)!=21)break A;r:{if(e[t+212>>2]!=25966){if(xn(85719,188772,189296),g[s+81|0]=95,e[s+12>>2]=a,kr(e[47193],s+12|0,s+16|0,s+104|0,0,0)||(e[s+12>>2]=i,kr(e[47193],s+12|0,s+16|0,s+104|0,0,0)),l[s+16|0])break r;ma(e[e[32972]+60>>2]),r=l[s+16|0]}if(255&r)break A;t=l[87124]|l[87125]<<8|l[87126]<<16|l[87127]<<24,r=l[87120]|l[87121]<<8|l[87122]<<16|l[87123]<<24,g[0|A]=r,g[A+1|0]=r>>>8,g[A+2|0]=r>>>16,g[A+3|0]=r>>>24,g[A+4|0]=t,g[A+5|0]=t>>>8,g[A+6|0]=t>>>16,g[A+7|0]=t>>>24,g[A+16|0]=l[87136],t=l[87132]|l[87133]<<8|l[87134]<<16|l[87135]<<24,r=l[87128]|l[87129]<<8|l[87130]<<16|l[87131]<<24,g[A+8|0]=r,g[A+9|0]=r>>>8,g[A+10|0]=r>>>16,g[A+11|0]=r>>>24,g[A+12|0]=t,g[A+13|0]=t>>>8,g[A+14|0]=t>>>16,g[A+15|0]=t>>>24;break e}a=s+16|0,i=s+104|0,J=r=J-112|0,(o=e[47193])?($t(o,a,i,-1,0),JA(i=a,a=r+48|0),t=e[t+212>>2],g[r+43|0]=t>>>24,g[0|(o=(i=r+43|0)+(t>>>0>16777215)|0)]=t>>>16,g[0|(o=o+!!(16711680&t)|0)]=t>>>8,g[0|(o=o+!!(65280&t)|0)]=t,g[o+!!(255&t)|0]=0,e[r+16>>2]=85719,e[r+24>>2]=i,e[r+20>>2]=a,DA(A,85662,r+16|0)):($t(t,a,i,-1,0),JA(a,t=r+48|0),e[r>>2]=t,DA(A,85451,r)),J=r+112|0,ma(e[e[32972]+60>>2]);break e}if(e[s+12>>2]=i,kr(t,s+12|0,s+16|0,s+104|0,0,0),!l[s+16|0])break e}$t(r=t,t=s+16|0,s+104|0,-1,0),JA(r=t,t=s+112|0),e[s>>2]=t,DA(A,85451,s)}return J=s+176|0,A}function Ja(A,t){var r,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0;if(J=r=J-112|0,e[r+72>>2]=-1,e[(a=r- -64|0)>>2]=-1,e[a+4>>2]=-1,e[r+56>>2]=-1,e[r+60>>2]=-1,e[r+48>>2]=-1,e[r+52>>2]=-1,e[r+40>>2]=-1,e[r+44>>2]=-1,e[r+32>>2]=-1,e[r+36>>2]=-1,e[r+24>>2]=-1,e[r+28>>2]=-1,e[r+16>>2]=-1,e[r+20>>2]=-1,(0|t)>0){for(i=e[r+72>>2],o=e[r+68>>2],c=e[r+64>>2],f=e[r+60>>2],m=e[r+56>>2],p=e[r+52>>2],w=e[r+48>>2],E=e[r+44>>2],P=e[r+40>>2],Y=e[r+36>>2],Z=e[r+32>>2],ee=e[r+28>>2],ce=e[r+24>>2],he=e[r+20>>2],Be=e[r+16>>2];s=i,i=(0|(i=e[60+(a=134912+(Qe<<6)|0)>>2]))<0?s:i,s=o,o=(0|(o=e[a+56>>2]))<0?s:o,s=c,c=(0|(c=e[a+52>>2]))<0?s:c,s=f,f=(0|(f=e[a+48>>2]))<0?s:f,s=m,m=(0|(m=e[a+44>>2]))<0?s:m,s=p,p=(0|(p=e[a+40>>2]))<0?s:p,s=w,w=(0|(w=e[a+36>>2]))<0?s:w,s=E,E=(0|(E=e[a+32>>2]))<0?s:E,s=P,P=(0|(P=e[a+28>>2]))<0?s:P,s=Y,Y=(0|(Y=e[a+24>>2]))<0?s:Y,s=Z,Z=(0|(Z=e[a+20>>2]))<0?s:Z,s=ee,ee=(0|(ee=e[a+16>>2]))<0?s:ee,s=ce,ce=(0|(ce=e[a+12>>2]))<0?s:ce,s=he,he=(0|(he=e[a+8>>2]))<0?s:he,Be=(0|(a=e[a+4>>2]))<0?Be:a,(0|(Qe=Qe+1|0))!=(0|t););e[r+72>>2]=i,e[r+68>>2]=o,e[r+64>>2]=c,e[r+60>>2]=f,e[r+56>>2]=m,e[r+52>>2]=p,e[r+48>>2]=w,e[r+44>>2]=E,e[r+40>>2]=P,e[r+36>>2]=Y,e[r+32>>2]=Z,e[r+28>>2]=ee,e[r+24>>2]=ce,e[r+20>>2]=he,e[r+16>>2]=Be}for(t=0;;){if((0|(a=e[(i=t<<2)+(r+16|0)>>2]))!=e[(i=i+134848|0)>>2]){g[r+80|0]=0;e:{A:switch(t-1|0){case 4:e[47201]=a-1;break e;case 5:e[47200]=a;break e;case 0:case 1:case 2:case 3:case 11:break A;default:break e}e[r+4>>2]=a,e[r>>2]=1,e[r+8>>2]=g[t+102812|0],DA(r+80|0,91942,r)}e[i>>2]=a,a=r+80|0,qA(e[A>>2]+189424|0,a),e[A>>2]=e[A>>2]+HA(a)}if((0|(t=t+1|0))==15)break}J=r+112|0}function vs(A){var t,r,a,s=0,i=0,o=0,c=0;for(s=17,e[A+328>>2]=17,e[A+224>>2]=0,e[A+216>>2]=1105,e[A+220>>2]=1072,e[A+600>>2]=1056,e[A+8180>>2]=105296,o=jA(A+344|0,0,256),g[A+393|0]=1,g[A+365|0]=1,g[A+360|0]=1,g[A+545|0]=1,g[A+529|0]=1,g[A+391|0]=1,g[A+379|0]=1,g[A+374|0]=1,g[A+489|0]=1,g[A+487|0]=1,g[A+398|0]=1,g[A+387|0]=1,g[A+388|0]=2,g[A+389|0]=1,g[A+390|0]=1,g[A+385|0]=2,g[A+383|0]=2,g[A+368|0]=1,g[A+369|0]=2,i=104224;g[0|(s=s+o|0)]=4|l[0|s],s=o+l[i+1|0]|0,g[0|s]=4|l[0|s],s=o+l[i+2|0]|0,g[0|s]=4|l[0|s],s=l[0|(i=i+3|0)],(0|i)!=104251;);g[A+386|0]=8|l[A+386|0],g[A+382|0]=8|l[A+382|0],g[A+384|0]=8|l[A+384|0],g[A+369|0]=16|l[A+369|0],g[A+370|0]=16|l[A+370|0],g[A+371|0]=16|l[A+371|0],i=l[A+361|0],o=l[A+362|0],s=l[A+363|0],c=l[A+364|0],t=l[A+366|0],r=l[A+367|0],g[A+372|0]=16|l[A+372|0],g[A+373|0]=16|l[A+373|0],g[A+375|0]=16|l[A+375|0],g[A+376|0]=16|l[A+376|0],g[A+377|0]=16|l[A+377|0],g[A+378|0]=16|l[A+378|0],g[A+380|0]=16|l[A+380|0],g[A+381|0]=16|l[A+381|0],g[A+383|0]=16|l[A+383|0],g[A+385|0]=16|l[A+385|0],a=l[A+388|0],g[A+367|0]=48|r,g[A+366|0]=40|t,g[A+364|0]=48|c,g[A+363|0]=48|s,g[A+362|0]=48|o,g[A+361|0]=48|i,g[A+388|0]=80|a,i=l[A+390|0],o=l[A+391|0],s=l[A+393|0],g[A+360|0]=128|l[A+360|0],c=l[A+365|0],g[A+393|0]=192|s,g[A+365|0]=128|c,g[A+368|0]=128|l[A+368|0],g[A+374|0]=128|l[A+374|0],g[A+379|0]=128|l[A+379|0],g[A+387|0]=128|l[A+387|0],s=l[A+389|0],g[A+391|0]=192|o,g[A+390|0]=192|i,g[A+389|0]=128|s,g[A+529|0]=128|l[A+529|0],g[A+545|0]=128|l[A+545|0],g[A+489|0]=128|l[A+489|0],g[A+487|0]=128|l[A+487|0],g[A+398|0]=128|l[A+398|0]}function kr(A,t,r,a,s,i){var o,c=0,f=0,m=0,p=0,w=0,E=0;J=o=J-192|0,c=w=e[t>>2];e:{A:{for(;f=1,(0|(m=g[0|c]))>=0||(f=2,m>>>0<4294967264||(f=m>>>0<4294967280?3:4)),!(l[0|(m=f+c|0)]!=32|l[m+1|0]!=46);){if(p-160>>>0<4294967135)break A;wt((E=o+32|0)+p|0,c,f),g[(f=f+p|0)+E|0]=46,c=m+3|0,p=f+1|0}if(p){for(f=0;m=f,f=f+1|0,223&l[c+m|0];);if(!(1+(E=m+p|0)>>>0>160)&&(wt((f=o+32|0)+p|0,c,m),g[f+E|0]=0,ks(A,f,c,r,a,s,i))){e[a>>2]=128|e[a>>2],e[33264]=p,A=1;break e}}}for(c=0;;){if(w=(f=w)+1|0,223&(f=l[0|f]))if(!c|(0|f)!=46|g[31+(c+o|0)|0]-48>>>0>=10){if(g[(o+32|0)+c|0]=f,f=159,(0|(c=c+1|0))!=159)continue}else f=c;else f=c;break}g[(c=o+32|0)+f|0]=0,c=ks(A,c,w,r,a,s,i);A:if(8&l[a+3|0]){if(!Br(r,m=A+268|0)){if(m=e[A+288>>2]+1|0,e[A+288>>2]=m,(0|m)<4)break A;g[0|r]=0;break A}ar(m,r,20),e[A+288>>2]=1}else e[A+288>>2]=0;A:{if(!c){if(c=0,8&l[a+5|0]&&(m=Gt(o+28|0,c=o+32|l[o+32|0]==95),tA(A,e[o+28>>2],r),c=c+m|0),!(f>>>0<2|c)){if(g[0|r]=0,!(16&s&&l[0|(c=31+(f+o|0)|0)]==101)&&(!(4096&s)||l[0|(c=(f=(o+32|0)+f|0)-1|0)]!=l[f-2|0]))break A;g[0|c]=0,c=ks(A,o+32|0,w,r,a,s,i)}if(!c)break A}if(p=e[a>>2],l[A+172|0]&&(p^=536870912,e[a>>2]=p),A=1,!(536870912&p))break e;2&s&&(b[66448]=8192,e[o+16>>2]=r,DA(132898,87470,o+16|0),A=e[t>>2],e[t>>2]=132898,8&l[188788]&&(wt(t=o+32|0,a=A,A=c-A|0),g[A+t|0]=0,e[o+4>>2]=132898,A=e[47195],e[o>>2]=t,fr(A,87652,o)))}g[0|r]=0,A=0}return J=o+192|0,A}function Ns(A,t){var r=0,a=0,s=0;r=31&A;e:{A:{r:{if((0|(A&=96))==96)A=-1;else{if((0|A)!=64)break r;A=1}if(r>>>0>=15)break e;t=e[203136+(r<<2)>>2]+z(A,t)|0;break A}if(r>>>0>=15)break e}A=e[105616+(a=r<<2)>>2],e[a+203136>>2]=(0|t)>=0?(0|A)>(0|t)?t:A:0}e:{A:{r:{s:{i:switch(r-1|0){case 5:if(!(A=e[50759]))break A;e[54728]=e[50982],t=e[50979],r=e[50978],jA(205184,0,11e3),e[51293]=0,t=(r=(s=(0|(a=e[50789]))>0)?130:(0|r)>=5499?5499:r)?s?a:(0|t)>=100?100:t:0,e[50755]=t,r=(0|z(r,e[50754]))/1e3|0,e[51292]=r,e[54729]=(0|t)>20?r<<1:t?r:0,e[33037]=(0|z(500-t|0,(0|z(l[e[50797]+105596|0],(0|z(e[50787],55))/100|0))/16|0))/500;break s;case 0:break i;case 2:case 12:break e;case 4:break r;default:break A}if(!(A=e[50759]))break A}return t=256,(0|(r=(0|(r=e[50785]))>=101?101:r))>=51&&(t=256+(((z(r,25)-1250&65535)>>>0)/50|0)|0),b[A+164>>1]=(0|z(b[A+236>>1],t))/256,b[A+166>>1]=(0|z(b[A+238>>1],t))/256,b[A+168>>1]=(0|z(b[A+240>>1],t))/256,b[A+170>>1]=(0|z(b[A+242>>1],t))/256,b[A+172>>1]=(0|z(b[A+244>>1],t))/256,b[A+174>>1]=(0|z(b[A+246>>1],t))/256,A=e[50790],b[102e3]=(0|z(b[102036],z(A,-3)+256|0))/256,void(b[101999]=(0|z(b[102035],z(A,-6)+256|0))/256)}e[50759]&&(e[54728]=e[50982],A=e[50979],t=e[50978],jA(205184,0,11e3),e[51293]=0,A=(t=(a=(0|(r=e[50789]))>0)?130:(0|t)>=5499?5499:t)?a?r:(0|A)>=100?100:A:0,e[50755]=A,t=(0|z(t,e[50754]))/1e3|0,e[51292]=t,e[54729]=(0|A)>20?t<<1:A?t:0,e[33037]=(0|z(500-A|0,(0|z(l[e[50797]+105596|0],(0|z(e[50787],55))/100|0))/16|0))/500)}return}e[33037]=(0|z(l[e[50797]+105596|0],(0|z(e[50787],55))/100|0))/16}function Os(A,t,r){var a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0;r&&(e[r>>2]=0);e:{A:if(!((0|(a=g[0|A]))<0)){for(;;){if((0|(i=255&a))==32|i-9>>>0<5){if((0|(a=g[0|(A=A+1|0)]))>=0)continue;break A}break}if(!(255&a))break e}for(;;){if((0|(a=f=255&a))==32|a-9>>>0<5)break e;if((0|f)!=124||(0|(a=l[0|(i=A+1|0)]))==124){A:{if((0|(w=e[36115]))>=2){for(a=1,i=-1,m=0;;){r:if(!(!(p=e[144464+(a<<2)>>2])|l[p+11|0]==15)){c=e[p>>2];s:{i:{if(f>>>0>=33){if(E=0,o=0,(255&c)==(0|f)&&(o=1,(s=l[A+1|0])>>>0<33|(0|s)!=(c>>>8&255)||(o=2,(s=l[A+2|0])>>>0<33|(0|s)!=(c>>>16&255)||(o=(s=(s=l[A+3|0])>>>0>32&(0|s)==(c>>>24|0))?4:3,E=0-s|0))),(0|i)>=(0|o))break r;if(s=4,!(1&E))break i;break s}if(o=0,(0|i)>=0)break r}if(c>>>((s=o)<<3)&255)break r}m=l[p+10|0],i=s}if((0|w)==(0|(a=a+1|0)))break}if(m)break A}return r&&Gt(r,A),void(g[0|t]=0)}g[0|t]=m,A=((0|i)<=1?1:i)+A|0,t=i=t+1|0;A:if((0|m)==21){r:if((0|(s=l[0|A]))==32|s-9>>>0<5)a=i;else if(a=i,s)for(;;){if(g[0|a]=Ht(s),a=a+1|0,(0|(s=l[0|(A=A+1|0)]))==32|s-9>>>0<5)break r;if(!s)break}if(g[0|a]=0,!s){if(t=a,Br(i,85593))break A;return void(g[0|i]=0)}g[0|a]=124,t=a+1|0}a=l[0|A]}else A=i;if(!(255&a))break}}g[0|t]=0}function Ii(A,t){var r=0,a=0,s=0,i=0,o=0;e:{A:{r:{s:{i:switch((0|(r=e[A+4>>2]))==e[A+104>>2]?r=bA(A):(e[A+4>>2]=r+1,r=l[0|r]),r-43|0){case 0:case 2:break i;default:break s}if(i=(0|r)==45,o=!t,(0|(r=e[A+4>>2]))==e[A+104>>2]?r=bA(A):(e[A+4>>2]=r+1,r=l[0|r]),o|(t=r-58|0)>>>0>4294967285)break r;if(e[A+116>>2]<0)break A;e[A+4>>2]=e[A+4>>2]-1;break A}t=r-58|0}if(!(t>>>0<4294967286)){if((t=r-48|0)>>>0<10){for(;s=(0|(a=(a=z(a,10)+r|0)-48|0))<214748364,(0|(t=e[A+4>>2]))==e[A+104>>2]?r=bA(A):(e[A+4>>2]=t+1,r=l[0|t]),s&(t=r-48|0)>>>0<=9;);s=a>>31}r:if(!(t>>>0>=10))for(;;){if(t=(a=It(a,s,10,0))+r|0,r=$,r=t>>>0<a>>>0?r+1|0:r,a=t-48|0,s=r-(t>>>0<48)|0,(0|(t=e[A+4>>2]))==e[A+104>>2]?r=bA(A):(e[A+4>>2]=t+1,r=l[0|t]),(t=r-48|0)>>>0>9)break r;if(!(a>>>0<2061584302&(0|s)<=21474836|(0|s)<21474836))break}if(t>>>0<10)for(;(0|(t=e[A+4>>2]))==e[A+104>>2]?t=bA(A):(e[A+4>>2]=t+1,t=l[0|t]),t-48>>>0<10;);(0|(t=e[A+116>>2]))>0|(0|t)>=0&&(e[A+4>>2]=e[A+4>>2]-1),A=a,a=i?0-A|0:A,s=i?0-(!!(0|A)+s|0)|0:s;break e}}if(s=-2147483648,!(e[A+116>>2]<0))return e[A+4>>2]=e[A+4>>2]-1,$=-2147483648,0}return $=s,a}function Ls(A){var t=0,r=0,a=0,s=0;if(e[36432]=110,e[36433]=100,e[36434]=450,e[36430]=5,t=e[203136+((0|A)==2?32:8)>>2],a=e[32972],(0|(r=e[a+84>>2]))>0&&(t=(0|z(t,r))/100|0),r=(0|t)>=359?359:t,r=(0|(t=(0|t)>=450?450:t))>399?6:(0|t)>379?7:l[((0|r)<=80?80:r)+101856|0],1&A&&(e[32526]=(0|z(r,e[a+72>>2]))/256,e[32527]=(0|z(r,e[a+76>>2]))/256,e[32528]=(0|z(r,e[a+80>>2]))/256,r>>>0>7||(s=r-1|0,e[32528]=s,e[32526]=r,e[32527]=s)),2&A){A=e[a+72>>2];e:{A:{r:{s:{i:{c:{o:{u:{if((0|t)>=351)a=t-350|0,e[36432]=85-(((255&a)>>>0)/3|0)&255,a=60-(a>>>3|0)|0;else{if((0|t)<251)break u;a=t-250|0,e[36432]=110-(a>>>2|0),a=110-(a>>>1|0)|0}if(e[36433]=a,A=(0|z(A,r))/256|0,e[36431]=110+((0|z(A,150))/128|0),t>>>0<=349)break o;if(r=t-350|0,e[36431]=l[r+102224|0],t>>>0<390)break i;if(e[36434]=450+((t+112<<24>>24)/-2<<24>>24),t>>>0<441)break c;e[36434]=860-t,A=12;break A}A=(0|z(A,r))/256|0,e[36431]=(0|t)>=170?110+((0|z(A,150))/128|0)|0:128+((A<<7)/130|0)|0}A=(A<<8)/115|0;break A}if(A=12,t>>>0>430)break A;if(A=13,t>>>0<=400)break s;break A}if(A=(A<<8)/115|0,e[36428]=A,t>>>0<375)break r}A=14;break A}if((0|t)<351)break e;A=l[r+102336|0]}e[36428]=A}e[36429]=(0|A)<=16?16:A}}function Bs(A,t,r){var a,s,i,o;a=.000244140625*+e[50767],D[r>>3]=a,D[r+40>>3]=.015625*+e[A+112>>2],D[r+48>>3]=.015625*+e[A+276>>2],D[r+56>>3]=.00390625*+(0|z(b[A+166>>1],b[t+4>>1]))+ +b[A+220>>1],D[r+64>>3]=.00390625*+(0|z(b[A+168>>1],b[t+6>>1]))+ +b[A+222>>1],D[r+72>>3]=.00390625*+(0|z(b[A+170>>1],b[t+8>>1]))+ +b[A+224>>1],D[r+80>>3]=.00390625*+(0|z(b[A+172>>1],b[t+10>>1]))+ +b[A+226>>1],D[r+88>>3]=.00390625*+(0|z(b[A+174>>1],b[t+12>>1]))+ +b[A+228>>1],s=b[A+230>>1],i=b[A+176>>1],o=b[t+14>>1],e[r+112>>2]=0,e[r+116>>2]=1080623104,e[r+104>>2]=0,e[r+108>>2]=1081032704,D[r+96>>3]=.00390625*+(0|z(i,o))+ +(0|s),l[t+40|0]?(e[r+184>>2]=0,e[r+188>>2]=1072693248,D[r+104>>3]=l[t+40|0]<<1):(e[r+184>>2]=0,e[r+188>>2]=0),D[r+120>>3]=.00390625*+b[A+202>>1]*+(l[t+35|0]<<1),D[r+128>>3]=.00390625*+b[A+204>>1]*+(l[t+36|0]<<1),D[r+136>>3]=.00390625*+b[A+206>>1]*+(l[t+37|0]<<1),t=l[t+38|0],A=b[A+208>>1],e[r+176>>2]=0,e[r+180>>2]=1079574528,e[r+160>>2]=0,e[r+164>>2]=1083129856,e[r+152>>2]=0,e[r+156>>2]=1083129856,e[r+352>>2]=0,e[r+356>>2]=1072693248,e[r+168>>2]=0,e[r+172>>2]=1079574528,D[r+144>>3]=.00390625*+(0|A)*+(t<<1),A=e[50779],D[r+368>>3]=a,D[r+360>>3]=+(0|A)/100*3}function Ys(A){var t=0;Fe(A,Wa(A));e:{A:{r:{s:{i:{c:{o:{u:{l:{n:{if((0|(A=-1048576&$))<268435455|(0|A)<=268435455){p:{C:{if((0|A)<33554431|(0|A)<=33554431){if((0|A)<8388607|(0|A)<=8388607){if(t=524328,!0&(0|A)==-2147483648)break e;if(0|(0|A)!=-2143289344)break A;return 557096}if(!0&(0|A)==8388608)break C;if(0|(0|A)!=16777216)break A;return 524358}if((0|A)>71303167)break p;if(!0&(0|A)==33554432)break r;if(0|(0|A)!=67108864)break A}return 266270}if(!0&(0|A)==71303168)break n;if(!0&(0|A)==134217728)break s;if(0|(0|A)!=138412032)break A;return 294942}if((0|A)<542113791|(0|A)<=542113791){if((0|A)<536870911|(0|A)<=536870911){if(!0&(0|A)==268435456)break i;if(0|(0|A)!=272629760)break A;return 299028}if(!0&(0|A)==536870912)break o;if(!0&(0|A)==538968064)break c;if(0|(0|A)!=541065216)break A;return 569389}if((0|A)<1075838975|(0|A)<=1075838975){if(!0&(0|A)==542113792)break n;if(0|(0|A)!=1073741824)break A;return 532520}if(!0&(0|A)==1075838976)break u;if(!0&(0|A)==1077936128)break l;if(0|(0|A)!=1078984704)break A}return 299038}return 565288}return 1581096}return 536621}return 1585197}return 266260}return 262174}return 2396190}t=16384}return t}function ys(A,t,r,a,s,i){var o,c,f=0,m=0,p=0,w=0;if(c=8388607&A,m=e[34456],f=l[0|(A=c+m|0)]|l[A+1|0]<<8){o=!(p=l[A+2|0]),A=e[36434]<<o,(0|r)<=0?r=f:(r=(0|z(e[50754],r))/1e3<<o,A=(0|A)<(0|(w=(0|z(r,A))/(0|f)|0))?w:A),s=(0|s)>0?(0|z(r,s))/256|0:r,r=(0|z(s,e[36431]))/256|0,r=(0|A)<(0|(r=(4&a)>>>2|0&&(0|r)>(0|s)?s:r))?r:A,p||(f=f>>>1|0,r=(0|r)/2|0);e:if(!((0|i)<0)){if(a=c+4|0,256&t)A=e[50758],e[36439]=A,e[(t=216192+(A<<4)|0)>>2]=7,e[t+8>>2]=a+m,e[t+4>>2]=f<<16|r,i=p|i<<8;else{if(A=e[50758],e[36439]=A,e[(A=216192+(A<<4)|0)>>2]=6,i=p|i<<8,e[A+12>>2]=i,e[A+8>>2]=a+m,m=A,A=z(t=f>>>2|0,3),s=(0|r)>(0|f),e[m+4>>2]=s?A:r,m=e[50758]+1|0,e[50758]=(0|m)<=169?m:0,(0|A)<(0|(r=s?r-A|0:0)))for(s=t<<1,p=a+(p?t:s)|0;t=e[50758],e[36439]=t,e[(t=216192+(t<<4)|0)>>2]=6,e[t+4>>2]=s,e[t+12>>2]=i,e[t+8>>2]=p+e[34456],t=e[50758]+1|0,e[50758]=(0|t)<=169?t:0,(0|A)<(0|(r=r-s|0)););if((0|r)<=0)break e;A=e[50758],e[36439]=A,e[(t=216192+(A<<4)|0)>>2]=6,e[t+4>>2]=r,e[t+8>>2]=e[34456]+(a+(f-r<<o)|0)}e[12+(216192+(A<<4)|0)>>2]=i,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0}}}function wt(A,t,r){var a,s=0,i=0;if(r>>>0>=512)return iA(0|A,0|t,0|r),A;a=A+r|0;e:if(3&(A^t))if(a>>>0<4)r=A;else if((s=a-4|0)>>>0<A>>>0)r=A;else for(r=A;g[0|r]=l[0|t],g[r+1|0]=l[t+1|0],g[r+2|0]=l[t+2|0],g[r+3|0]=l[t+3|0],t=t+4|0,s>>>0>=(r=r+4|0)>>>0;);else{A:if(3&A)if(r)for(r=A;;){if(g[0|r]=l[0|t],t=t+1|0,!(3&(r=r+1|0)))break A;if(!(r>>>0<a>>>0))break}else r=A;else r=A;if(!((s=-4&a)>>>0<64||(i=s+-64|0)>>>0<r>>>0))for(;e[r>>2]=e[t>>2],e[r+4>>2]=e[t+4>>2],e[r+8>>2]=e[t+8>>2],e[r+12>>2]=e[t+12>>2],e[r+16>>2]=e[t+16>>2],e[r+20>>2]=e[t+20>>2],e[r+24>>2]=e[t+24>>2],e[r+28>>2]=e[t+28>>2],e[r+32>>2]=e[t+32>>2],e[r+36>>2]=e[t+36>>2],e[r+40>>2]=e[t+40>>2],e[r+44>>2]=e[t+44>>2],e[r+48>>2]=e[t+48>>2],e[r+52>>2]=e[t+52>>2],e[r+56>>2]=e[t+56>>2],e[r+60>>2]=e[t+60>>2],t=t- -64|0,i>>>0>=(r=r- -64|0)>>>0;);if(r>>>0>=s>>>0)break e;for(;e[r>>2]=e[t>>2],t=t+4|0,s>>>0>(r=r+4|0)>>>0;);}if(r>>>0<a>>>0)for(;g[0|r]=l[0|t],t=t+1|0,(0|a)!=(0|(r=r+1|0)););return A}function Pt(A){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0;be(+A),t=0|X(1),X(0);e:{if((a=(t=t>>>20&2047)-969|0)>>>0<63)f=t;else{if((0|a)<0)return A+1;if(!(t>>>0<1033)){if(be(+A),a=0|X(1),r=0,!(0|X(0))&(0|a)==-1048576)break e;return t>>>0>=2047?A+1:(0|a)<0?(D[8+(t=J-16|0)>>3]=12882297539194267e-247,12882297539194267e-247*D[t+8>>3]):(D[8+(t=J-16|0)>>3]=3105036184601418e216,3105036184601418e216*D[t+8>>3])}}if(r=D[14409],i=(r=(A=(r=(s=D[14408]*A+r)-r)*D[14411]+(r*D[14410]+A))*A)*r*(A*D[14415]+D[14414]),r*=A*D[14413]+D[14412],be(+s),X(1),c=0|X(0),A=i+(r+(D[115376+(a=c<<4&2032)>>3]+A)),o=e[(a=a+115384|0)>>2],t=(c<<13)+(t=e[a+4>>2])|0,t=(a=(a=o)+(o=0)|0)>>>0<o>>>0?t+1|0:t,!f)return-2147483648&c?(R(0,0|a),R(1,t+1071644672|0),(A=(s=(r=+re())*A)+r)<1&&(e[8+(t=J-16|0)>>2]=0,e[t+12>>2]=1048576,D[t+8>>3]=22250738585072014e-324*D[t+8>>3],A=(A=(i=A+1)+(s+(r-A)+(A+(1-i)))+-1)==0?0:A),A*=22250738585072014e-324):(R(0,0|a),R(1,t-1058013184|0),A=5486124068793689e288*((r=+re())*A+r)),A;R(0,0|a),R(1,0|t),r=(r=+re())*A+r}return r}function ka(A,t){var r,a=0,s=0,i=0,o=0;J=r=J-16|0;e:{if(es(84270,g[0|t])){if(s=2,es(t,43)||(s=l[0|t]!=114),s=es(t,120)?128|s:s,i=s=es(t,101)?524288|s:s,o=64|s,i=(0|(s=l[0|t]))==114?i:o,i=(0|s)==119?512|i:i,e[r>>2]=438,e[r+4>>2]=0,(A=0|ze(-100,0|A,32768|((0|s)==97?1024|i:i),0|r))>>>0>=4294963201&&(e[56798]=0-A,A=-1),(0|A)<0)break e;J=s=J-32|0;A:{r:{if(es(84270,g[0|t])){if(a=Ct(1176))break r}else e[56798]=28;t=0;break A}jA(a,0,144),es(t,43)||(e[a>>2]=l[0|t]==114?8:4),l[0|t]==97?(1024&(t=0|Ie(0|A,3,0))||(t|=1024,e[s+16>>2]=t,e[s+20>>2]=t>>31,Ie(0|A,4,s+16|0)),t=128|e[a>>2],e[a>>2]=t):t=e[a>>2],e[a+80>>2]=-1,e[a+48>>2]=1024,e[a+60>>2]=A,e[a+44>>2]=a+152,8&t||(e[s>>2]=s+24,e[s+4>>2]=0,0|kA(0|A,21523,0|s)||(e[a+80>>2]=10)),e[a+40>>2]=10,e[a+36>>2]=11,e[a+32>>2]=12,e[a+12>>2]=13,l[227205]||(e[a+76>>2]=-1),e[a+56>>2]=e[56816],(t=e[56816])&&(e[t+52>>2]=a),e[56816]=a,t=a}if(J=s+32|0,a=t)break e;GA(0|A)}else e[56798]=28;a=0}return J=r+16|0,a}function ti(A,t,r){var a,s=0,i=0,o=0,c=0,f=0;if(o=A,J=a=J-208|0,e[a+8>>2]=1,e[a+12>>2]=0,c=t<<2){for(e[a+16>>2]=4,e[a+20>>2]=4,t=4,s=4,i=2;A=t,t=(s+4|0)+t|0,e[(a+16|0)+(i<<2)>>2]=t,i=i+1|0,s=A,t>>>0<c>>>0;);if((A=(o+c|0)-4|0)>>>0<=o>>>0)i=0,t=1,A=0;else{for(i=1,t=1;3&~i?(ue[(a+16|0)+((s=t-1|0)<<2)>>2]>=A-o>>>0?Pr(o,r,a+8|0,t,0,a+16|0):kn(o,r,t,a+16|0),(0|t)!=1?(Xi(a+8|0,s),t=1):(Xi(a+8|0,1),t=0)):(kn(o,r,t,a+16|0),yi(a+8|0,2),t=t+2|0),i=1|(s=e[a+8>>2]),e[a+8>>2]=i,A>>>0>(o=o+4|0)>>>0;);i=s>>>0>1,A=e[a+12>>2]!=0}if(Pr(o,r,a+8|0,t,0,a+16|0),i|(0|t)!=1|A)for(;(0|t)<=1?(yi(s=a+8|0,A=Tn(s)),i=e[a+8>>2],A=A+t|0):(Xi(s=a+8|0,2),e[a+8>>2]=7^e[a+8>>2],yi(s,1),Pr((f=o-4|0)-e[(c=a+16|0)+((A=t-2|0)<<2)>>2]|0,r,s,t-1|0,1,c),Xi(s,1),i=1|e[a+8>>2],e[a+8>>2]=i,Pr(f,r,s,A,1,c)),t=A,o=o-4|0,e[a+12>>2]|(0|t)!=1|(0|i)!=1;);}J=a+208|0}function Es(A,t,r,a){var s,i=0,o=0,c=0;J=s=J-32|0,c=i=2147483647&a,o=i-1006698496|0;e:if(0|(i=i-1140785152|0)>>>0>o>>>0){if(i=r<<4|t>>>28,r=a<<4|r>>>28,(0|(t&=268435455))==134217728&!!(0|A)|t>>>0>134217728){o=r+1073741824|0,o=(i=i+1|0)?o:o+1|0;break e}if(o=r+1073741824|0,A|(0|t)!=134217728)break e;o=(A=1&i)>>>0>(i=A+i|0)>>>0?o+1|0:o}else(!r&(0|c)==2147418112?!(A|t):c>>>0<2147418112)?(i=0,o=2146435072,c>>>0>1140785151||(o=0,(c=c>>>16|0)>>>0<15249||(Aa(s+16|0,A,t,r,i=65535&a|65536,c-15233|0),Ha(s,A,t,r,i,15361-c|0),i=(t=e[s+8>>2])<<4,t=e[s+12>>2]<<4|t>>>28,r=e[s>>2],c=o=e[s+4>>2],i|=o>>>28,o=t,(0|(A=268435455&c))==134217728&!!(0|(t=r|!!(e[s+16>>2]|e[s+24>>2]|e[s+20>>2]|e[s+28>>2])))|A>>>0>134217728?o=(i=i+1|0)?o:o+1|0:t|(0|A)!=134217728||(o=(A=i)>>>0>(i=i+(1&i)|0)>>>0?o+1|0:o)))):(i=r<<4|t>>>28,o=524287&(A=a<<4|r>>>28)|2146959360);return J=s+32|0,R(0,0|i),R(1,-2147483648&a|o),+re()}function Hs(A){var t,r=0,a=0,s=0,i=0,o=0;if(be(+A),o=0|X(1),s=0|X(0),(0|(i=o>>>20&2047))==2047)return(A*=1)/A;if(!(a=s<<1)&(0|(r=o<<1|s>>>31))==2145386496|r>>>0<2145386496)return!a&(0|r)==2145386496?0*A:A;if(i)r=1048575&o|1048576;else{if(i=0,a=s<<12,(0|(r=o<<12|s>>>20))>0|(0|r)>=0)for(;i=i-1|0,r=r<<1|a>>>31,a<<=1,(0|r)>0|(0|r)>=0;);a=31&(r=1-i|0),(63&r)>>>0>=32?(r=s<<a,s=0):(r=(1<<a)-1&s>>>32-a|o<<a,s<<=a)}if(a=s,(0|i)>1023){for(;;){if(!((0|(s=r+-1048576|0))<0||(r=s)|a))return 0*A;if(r=r<<1|a>>>31,a<<=1,!((0|(i=i-1|0))>1023))break}i=1023}if(!((0|(s=r+-1048576|0))<0||(r=s)|a))return 0*A;if((0|r)==1048575|r>>>0<1048575)for(;i=i-1|0,s=r>>>0<524288,r=r<<1|a>>>31,a<<=1,s;);return t=-2147483648&o,(0|i)>0?r=r+-1048576|i<<20:(s=1-i|0,o=r,i=a,a=31&s,(63&s)>>>0>=32?(r=0,a=o>>>a|0):(r=o>>>a|0,a=((1<<a)-1&o)<<32-a|i>>>a)),R(0,0|a),R(1,r|t),+re()}function as(A,t,r,a,s){var i,o=0,c=0;J=i=J-160|0;e:{A:{r:{s:switch((o=l[t+10|0])-15|0){case 6:break r;case 0:break s;default:break A}g[0|A]=0;break e}e[i>>2]=z(l[r+7|0],44)+137856,DA(A,86002,i),A=HA(A)+A|0;break e}if(a){if(g[i+140|0]=0,r?tr(0,0,r,i+8|0,0):Vi(o,i+8|0),r=i+140|0,o=l[i+140|0]){if((0|o)==32){g[0|A]=0;break e}224&(o=o<<24>>24)||(s&&(e[s>>2]=o),r=i+141|0)}if(!((0|(s=HA(r)))<=0)){A=qA(A,r)+s|0,g[0|A]=0;break e}}s=0;A:if(!(!(r=255&(o=e[t>>2]))|(0|r)==47)){if(a){if((0|(c=255&o))==95)break A;r:{s:{if((0|c)==35){if(c=3,l[t+11|0]!=2)break s;break A}if((c=r-32|0)>>>0>95)break r}r=M[93952+(c<<1)>>1]}s=zr(r,A)}else g[0|A]=o,s=1;for(;;){if(!(r=255&(o>>=8))|(0|r)==47)break A;if(a){if((0|r)==35&l[t+11|0]==2)break A;if(r-48>>>0<10)continue;(c=r-32|0)>>>0<=95&&(r=M[93952+(c<<1)>>1]),s=zr(r,A+s|0)+s|0}else g[A+s|0]=o,s=s+1|0}}g[0|(A=A+s|0)]=0}return J=i+160|0,A}function Rs(A){var t,r=0;t=A,r=131280;e:{A:{if(!((0|A)<=1023||(r=131300,A>>>0<1328||(r=131320,A>>>0<1424||(r=131340,A>>>0<1536||(r=131360,A>>>0<1792||(r=131380,A>>>0<1872||(r=131400,A>>>0<2432||(r=131420,A>>>0<2560||(r=131440,A>>>0<2688||(r=131460,A>>>0<2816||(r=131480,A>>>0<2944||(r=131500,A>>>0<3072||(r=131520,A>>>0<3200||(r=131540,A>>>0<3328||(r=131560,A>>>0<3456||(r=131580,A>>>0<3584||(r=131600,A>>>0<3712||(r=131620,A>>>0<3840||(r=131640,A>>>0<4096||(r=131660,A>>>0<4256||(r=131680,A>>>0<4352||(r=131700,A>>>0<4608||(r=131720,A>>>0<5024||(r=131740,A>>>0<10496||(r=131760,A>>>0<12544||(r=131780,A>>>0<40960))))))))))))))))))))))))))){if(A>>>0>=55296)break A;r=131800}if((0|t)>=M[(A=r)+8>>1])break e}A=0}return A}function tA(A,t,r){var a,s=0,i=0,o=0,c=0;J=a=J-208|0,g[a+80|0]=0;e:{if((s=t-224|0)>>>0<=158)t=101072+(s<<1)|0;else{if((t=t-592|0)>>>0>88)break e;t=101392+(t<<1)|0}if(t=M[t>>1]){if(o=t<<16>>16,c=(s=63&t)>>>0>37?s+59|0:b[101584+(s<<1)>>1],s=t>>>6|0,(0|o)<0)s=59+(63&s)|0,t=t>>>12&7;else{if(!(i=31&s))break e;s=0,t=t>>>11&15}(i=RA(A,e[129920+(i<<3)>>2],a+112|0))&&w0(A,c,a+176|0)&&(t&&4096&RA(A,e[129920+(t<<3)>>2],a+80|0)&&(r=HA(t=qA(r,a+80|0)),g[a+80|0]=0,r=t+r|0),s?(w0(t=A,s,A=a+144|0),e[a+68>>2]=a+80,e[a- -64>>2]=A,e[a+60>>2]=6,e[a+52>>2]=23,e[a+56>>2]=a+176,e[a+48>>2]=a+112,DA(r,84101,a+48|0)):(0|o)<0?qA(r,a+176|0):1&e[A+144>>2]|4096&i?(e[a+36>>2]=23,e[a+40>>2]=6,e[a+44>>2]=a+176,e[a+32>>2]=a+112,DA(r,84430,a+32|0)):(e[a+16>>2]=23,e[a+8>>2]=23,e[a>>2]=4,e[a+12>>2]=a+112,e[a+4>>2]=a+176,DA(r,84802,a)))}}J=a+208|0}function _(){Ki(),e[55928]=0,e[55926]=0,e[55927]=0,e[55924]=0,e[56244]=0,e[56245]=0,e[56246]=0,e[56247]=0,e[56260]=0,e[56261]=0,e[56262]=0,e[56263]=0,e[56276]=0,e[56277]=0,e[56278]=0,e[56279]=0,e[55974]=0,e[55975]=0,e[55972]=0,e[55973]=0,e[55988]=0,e[55989]=0,e[55990]=0,e[55991]=0,e[56004]=0,e[56005]=0,e[56006]=0,e[56007]=0,e[56020]=0,e[56021]=0,e[56022]=0,e[56023]=0,e[56036]=0,e[56037]=0,e[56038]=0,e[56039]=0,e[56052]=0,e[56053]=0,e[56054]=0,e[56055]=0,e[56068]=0,e[56069]=0,e[56070]=0,e[56071]=0,e[56086]=0,e[56087]=0,e[56084]=0,e[56085]=0,e[56102]=0,e[56103]=0,e[56100]=0,e[56101]=0,e[56118]=0,e[56119]=0,e[56116]=0,e[56117]=0,e[56134]=0,e[56135]=0,e[56132]=0,e[56133]=0,e[56150]=0,e[56151]=0,e[56148]=0,e[56149]=0,e[56166]=0,e[56167]=0,e[56164]=0,e[56165]=0,e[56182]=0,e[56183]=0,e[56180]=0,e[56181]=0,e[56198]=0,e[56199]=0,e[56196]=0,e[56197]=0,e[56214]=0,e[56215]=0,e[56212]=0,e[56213]=0,e[56230]=0,e[56231]=0,e[56228]=0,e[56229]=0}function ve(A,t){var r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0;e:{if((0|(i=e[A+4>>2]))==e[A>>2])if((o=e[A+8>>2])>>>0<(r=e[A+12>>2])>>>0)r=(s=(1+(r-o>>2)|0)/2<<2)+o|0,(0|i)!=(0|o)&&(Yt(r=r-(a=o-i|0)|0,i,a),i=e[A+8>>2]),e[A+4>>2]=r,e[A+8>>2]=s+i;else{if((a=(0|r)==(0|i)?1:r-i>>1)>>>0>=1073741824)break e;if(p=(f=Sa(r=a<<2))+r|0,c=r=(a+3&-4)+f|0,(0|i)!=(0|o)){if(w=-4&(o=o-i|0),s=r,a=i,o=1+((m=o-4|0)>>>2|0)&7)for(c=0;e[s>>2]=e[a>>2],a=a+4|0,s=s+4|0,(0|o)!=(0|(c=c+1|0)););if(c=r+w|0,!(m>>>0<28))for(;e[s>>2]=e[a>>2],e[s+4>>2]=e[a+4>>2],e[s+8>>2]=e[a+8>>2],e[s+12>>2]=e[a+12>>2],e[s+16>>2]=e[a+16>>2],e[s+20>>2]=e[a+20>>2],e[s+24>>2]=e[a+24>>2],e[s+28>>2]=e[a+28>>2],a=a+32|0,(0|c)!=(0|(s=s+32|0)););}e[A+12>>2]=p,e[A+8>>2]=c,e[A+4>>2]=r,e[A>>2]=f,i&&(xt(i),r=e[A+4>>2])}else r=i;return e[r-4>>2]=e[t>>2],void(e[A+4>>2]=e[A+4>>2]-4)}qi(),xe()}function Oe(A,t,r){var a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0;e:{A:{r:{s:{i:{c:{o:{u:{l:{if(t){if(!r)break l;break u}return OA=(t=A)-z(A=(A>>>0)/(r>>>0)|0,r)|0,ge=0,$=0,A}if(!A)break o;break c}if(!((a=r-1|0)&r))break i;i=0-(o=(Ye(r)+33|0)-Ye(t)|0)|0;break r}return OA=0,ge=t-z(A=(t>>>0)/0|0,0)|0,$=0,A}if((a=32-Ye(t)|0)>>>0<31)break s;break A}if(OA=A&a,ge=0,(0|r)==1)break e;return r=31&(a=Gi(r)),(63&a)>>>0>=32?A=t>>>r|0:(s=t>>>r|0,A=((1<<r)-1&t)<<32-r|A>>>r),$=s,A}o=a+1|0,i=63-a|0}if(a=31&(s=63&o),s>>>0>=32?(s=0,c=t>>>a|0):(s=t>>>a|0,c=((1<<a)-1&t)<<32-a|A>>>a),a=31&(i&=63),i>>>0>=32?(t=A<<a,A=0):(t=(1<<a)-1&A>>>32-a|t<<a,A<<=a),o)for(p=(0|(a=r-1|0))==-1?-1:0;f=s<<1|c>>>31,c=(s=c<<1|t>>>31)-(m=r&(i=p-(f+(s>>>0>a>>>0)|0)>>31))|0,s=f-(s>>>0<m>>>0)|0,t=t<<1|A>>>31,A=w|A<<1,w=f=1&i,o=o-1|0;);return OA=c,ge=s,$=t<<1|A>>>31,f|A<<1}OA=A,ge=t,A=0,t=0}return $=t,A}function We(A,t){var r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0;e:{if((0|(r=e[A+8>>2]))==e[A+12>>2])if((a=e[A+4>>2])>>>0>(o=e[A>>2])>>>0)s=Yt((i=(1+(a-o>>2)|0)/-2<<2)+a|0,a,r=r-a|0)+r|0,e[A+8>>2]=s,e[A+4>>2]=i+e[A+4>>2];else{if((i=(0|r)==(0|o)?1:r-o>>1)>>>0>=1073741824)break e;if(p=(c=Sa(s=i<<2))+s|0,s=i=(-4&i)+c|0,(0|r)!=(0|a)){if(w=-4&(r=r-a|0),m=1+((f=r-4|0)>>>2|0)&7)for(s=0,r=i;e[r>>2]=e[a>>2],a=a+4|0,r=r+4|0,(0|m)!=(0|(s=s+1|0)););else r=i;if(s=i+w|0,!(f>>>0<28))for(;e[r>>2]=e[a>>2],e[r+4>>2]=e[a+4>>2],e[r+8>>2]=e[a+8>>2],e[r+12>>2]=e[a+12>>2],e[r+16>>2]=e[a+16>>2],e[r+20>>2]=e[a+20>>2],e[r+24>>2]=e[a+24>>2],e[r+28>>2]=e[a+28>>2],a=a+32|0,(0|s)!=(0|(r=r+32|0)););}e[A+12>>2]=p,e[A+8>>2]=s,e[A+4>>2]=i,e[A>>2]=c,o&&(xt(o),s=e[A+8>>2])}else s=r;return e[s>>2]=e[t>>2],void(e[A+8>>2]=e[A+8>>2]+4)}qi(),xe()}function $e(A,t){var r,a=0,s=0,i=0,o=0,c=0;s=189088,J=r=J-320|0,e[r+312>>2]=0,i=bi(A,o=qA(r+112|0,189088),r,r+316|0,r+312|0,0),a=e[r+316>>2];e:if((0|t)<=3){if((0|a)<2)break e;if(i=3&(t=a-1|0),A=1,a-2>>>0>=3)for(c=-4&t,t=0;g[0|(a=A+r|0)]>=4&&(g[0|a]=3),g[1+(a=A+r|0)|0]>=4&&(g[a+1|0]=3),g[a+2|0]>=4&&(g[a+2|0]=3),g[a+3|0]>=4&&(g[a+3|0]=3),A=A+4|0,(0|c)!=(0|(t=t+4|0)););if(!i)break e;for(t=0;g[0|(a=A+r|0)]>=4&&(g[0|a]=3),A=A+1|0,(0|i)!=(0|(t=t+1|0)););}else if(A=1,!((0|a)<=1)){for(;;){if((0|i)>g[0|(c=A+r|0)]){if((0|a)!=(0|(A=A+1|0)))continue;break e}break}g[0|c]=t}if(A=l[0|o])for(t=1;a=e[144464+((255&A)<<2)>>2],l[a+11|0]!=2|16&l[a+6|0]||(i=255&(a=g[t+r|0]),(0|a)<2&&i||(g[0|s]=l[i+94151|0],s=s+1|0,A=l[0|o]),t=t+1|0),g[0|s]=A,s=s+1|0,A=l[0|(o=o+1|0)];);g[0|s]=0,J=r+320|0}function fA(A){var t=0,r=0,a=0,s=0,i=0,o=0;r=t=e[(A|=0)>>2],e[A>>2]=t+1;e:{A:{r:{s:{i:{c:{o:switch(((i=l[0|t])>>>4|0)-8|0){case 0:case 1:case 2:case 3:break A;case 7:break i;case 6:break c;case 4:case 5:break o;default:break e}if((a=t+2|0)>>>0>=(s=e[A+4>>2])>>>0)break s;if(e[A>>2]=a,(192&(r=l[r+1|0]))!=128)break r;return 63&r|i<<6&1984}if((a=t+3|0)>>>0>=(s=e[A+4>>2])>>>0)break s;if(r=t+2|0,e[A>>2]=r,(192&(t=l[t+1|0]))!=128){a=r;break r}if(e[A>>2]=a,(192&(r=l[0|r]))!=128)break r;return 63&r|(63&t|i<<6&960)<<6}if(!((s=e[A+4>>2])>>>0<=(r=t+4|0)>>>0)){if(a=t+2|0,e[A>>2]=a,(192&(s=l[t+1|0]))!=128||(a=t+3|0,e[A>>2]=a,(192&(o=l[t+2|0]))!=128)||(e[A>>2]=r,t=l[0|a],a=r,(192&t)!=128))break r;return 0|((A=63&t|o<<6&4032|(63&s|i<<6&960)<<12)>>>0>=1114112?65533:A)}}e[A>>2]=s;break A}e[A>>2]=a-1}i=65533}return 0|i}function NA(A,t,r,a){var s,i,o=0,c=0,f=0,m=0,p=0,w=0;if(J=s=J-432|0,!(!a|!(536870912&(i=TA(A,t,r,a))))&&(b[s+48>>1]=8192,a=qA(s+48|2,a),l[0|a])){for(f=s+224|0,o=1,m=200;;){if(Gt(s+44|0,a),t=ms(e[s+44>>2]),c=e[r>>2],t?(e[r>>2]=2|c,zr(Ht(e[s+44>>2]),a)):e[r>>2]=-3&c,w=e[33264],TA(A,a,r,0),1&o?(e[s+16>>2]=189088,c=ss(f,m,84130,s+16|0)):(e[s+32>>2]=15,e[s+36>>2]=189088,c=ss(f,m,84434,s+32|0)),o=(t=e[33264])+1|0,e[33264]=o,t>>>0<=2147483646){for(;;)if(t=a,a=a+1|0,(0|(p=g[0|t]))==32|p-9>>>0<5){for(;t=(a=t)+1|0,(0|(p=g[0|a]))==32|p-9>>>0<5;);if(o=o-1|0,e[33264]=o,!((0|o)>0))break}}if(f=f+c|0,e[33264]=w,!(l[0|a]&&(o=0,(0|(m=m-c|0))>1)))break}(s+224|0)!=(0|f)&&(e[s>>2]=s+224,ss(189088,200,84130,s))}return J=s+432|0,i}function He(A,t,r,a,s,i,o,c){var f,m;f=e[32972],m=e[f+116>>2],b[A+8>>1]=M[A+8>>1]+i,i=32&c?0-i|0:i,b[A+10>>1]=i+M[A+10>>1],b[A+12>>1]=i+M[A+12>>1],a=(0|a)>(0|(i=((i=(0|z(t,m))/256|0)-(t=b[A+6>>1])|0)/2|0))?i:a,b[A+6>>1]=((0|r)<(0|a)?a:r)+t;e:{A:switch(s-1|0){case 0:t=(0|(t=235-(r=b[A+4>>1])|0))<=-100?-100:t,b[A+4>>1]=((0|t)>=-60?-60:t)+r;break e;case 1:t=(0|(t=(0|(t=235-(r=b[A+4>>1])|0))<=-300?-300:t))>=-150?-150:t,b[A+4>>1]=t+r,b[A+2>>1]=t+M[A+2>>1];break e;case 2:break A;default:break e}t=(0|(t=(0|(t=100-(r=b[A+4>>1])|0))<=-400?-400:t))>-300?-400:t,b[A+4>>1]=t+r,b[A+2>>1]=t+M[A+2>>1]}e[f+132>>2]||(g[A+20|0]=(z(l[A+20|0],o)>>>0)/100,g[A+21|0]=(z(l[A+21|0],o)>>>0)/100,g[A+22|0]=(z(l[A+22|0],o)>>>0)/100,g[A+23|0]=(z(l[A+23|0],o)>>>0)/100,g[A+24|0]=(z(l[A+24|0],o)>>>0)/100,g[A+25|0]=(z(l[A+25|0],o)>>>0)/100)}function WA(A){var t,r=0,a=0,s=0,i=0;J=t=J-48|0;e:{if(A){l[0|A]||(A=si(84285),l[0|A]&&A||(A=si(121696),l[0|A]&&A||(A=si(84614),l[0|A]&&A||(A=84891))));A:{for(;;){if(!(!(a=l[A+r|0])|(0|a)==47)){if(s=23,(0|(r=r+1|0))!=23)continue;break A}break}s=r}a=84891;A:{r:{if(r=l[0|A],(l[A+s|0]|(0|r)==46||(a=A,(0|r)==67))&&!l[a+1|0]||!Br(a,84891)||!Br(a,85136)){if(r=121652,l[a+1|0]==46)break r;A=0;break A}if(r=e[56851])for(;;){if(!Br(a,r+8|0))break r;if(!(r=e[r+32>>2]))break}(A=Ct(36))&&(r=e[30414],e[A>>2]=e[30413],e[A+4>>2]=r,wt(r=A+8|0,a,s),g[r+s|0]=0,e[A+32>>2]=e[56851],e[56851]=A),r=A||121652}A=r}if((0|A)==-1)break e;e[56809]=A}else A=e[56809];i=A?A+8|0:84309}return J=t+48|0,i}function bA(A){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0;f=!!((t=e[A+112>>2])|(a=e[A+116>>2])),s=t,o=t=(i=e[A+4>>2])-(c=e[A+44>>2])|0,r=t+e[A+120>>2]|0,t=e[A+124>>2]+(t>>31)|0;e:{if(!(((0|(t=r>>>0<o>>>0?t+1|0:t))>=(0|a)&r>>>0>=s>>>0|(0|t)>(0|a))&f)){if((0|(f=Zi(A)))>=0)break e;i=e[A+4>>2],c=e[A+44>>2]}return e[A+112>>2]=-1,e[A+116>>2]=-1,e[A+104>>2]=i,a=(o=r)+(r=c-i|0)|0,t=(r>>31)+t|0,e[A+120>>2]=a,e[A+124>>2]=r>>>0>a>>>0?t+1|0:t,-1}return t=(a=r+1|0)?t:t+1|0,i=e[A+4>>2],c=e[A+8>>2],o=s=e[A+116>>2],s|(r=e[A+112>>2])&&(s=r-a|0,(0|(r=o-(t+(r>>>0<a>>>0)|0)|0))>=(0|(o=(m=c-i|0)>>31))&s>>>0>=m>>>0|(0|r)>(0|o)||(c=s+i|0)),e[A+104>>2]=c,a=(s=(r=e[A+44>>2])-i|0)+a|0,t=(s>>31)+t|0,e[A+120>>2]=a,e[A+124>>2]=a>>>0<s>>>0?t+1|0:t,r>>>0>=i>>>0&&(g[i-1|0]=f),f}function Yt(A,t,r){var a=0,s=0;e:if((0|A)!=(0|t)){if(t-(s=A+r|0)>>>0<=0-(r<<1)>>>0)return wt(A,t,r);if(a=3&(A^t),A>>>0<t>>>0){if(a)a=A;else{if(3&A)for(a=A;;){if(!r)break e;if(g[0|a]=l[0|t],t=t+1|0,r=r-1|0,!(3&(a=a+1|0)))break}else a=A;if(!(r>>>0<=3))for(;e[a>>2]=e[t>>2],t=t+4|0,a=a+4|0,(r=r-4|0)>>>0>3;);}if(r)for(;g[0|a]=l[0|t],a=a+1|0,t=t+1|0,r=r-1|0;);}else{if(!a){if(3&s)for(;;){if(!r)break e;if(g[0|(a=(r=r-1|0)+A|0)]=l[t+r|0],!(3&a))break}if(!(r>>>0<=3))for(;e[(r=r-4|0)+A>>2]=e[t+r>>2],r>>>0>3;);}if(!r)break e;for(;g[(r=r-1|0)+A|0]=l[t+r|0],r;);}}return A}function Wt(A,t,r,a){switch(t-9|0){case 0:return t=e[r>>2],e[r>>2]=t+4,void(e[A>>2]=e[t>>2]);case 6:return t=e[r>>2],e[r>>2]=t+4,t=b[t>>1],e[A>>2]=t,void(e[A+4>>2]=t>>31);case 7:return t=e[r>>2],e[r>>2]=t+4,e[A>>2]=M[t>>1],void(e[A+4>>2]=0);case 8:return t=e[r>>2],e[r>>2]=t+4,t=g[0|t],e[A>>2]=t,void(e[A+4>>2]=t>>31);case 9:return t=e[r>>2],e[r>>2]=t+4,e[A>>2]=l[0|t],void(e[A+4>>2]=0);case 16:return t=e[r>>2]+7&-8,e[r>>2]=t+8,void(D[A>>3]=D[t>>3]);case 17:ct[0|a](A,r);default:return;case 1:case 4:case 14:return t=e[r>>2],e[r>>2]=t+4,t=e[t>>2],e[A>>2]=t,void(e[A+4>>2]=t>>31);case 2:case 5:case 11:case 15:return t=e[r>>2],e[r>>2]=t+4,e[A>>2]=e[t>>2],void(e[A+4>>2]=0);case 3:case 10:case 12:case 13:}t=e[r>>2]+7&-8,e[r>>2]=t+8,r=e[t+4>>2],e[A>>2]=e[t>>2],e[A+4>>2]=r}function cr(A,t,r,a,s,i){var o;J=o=J-80|0;e:if((0|i)>=16384){if(PA(o+32|0,t,r,a,s,0,0,0,2147352576),a=e[o+40>>2],s=e[o+44>>2],t=e[o+32>>2],r=e[o+36>>2],i>>>0<32767){i=i-16383|0;break e}PA(o+16|0,t,r,a,s,0,0,0,2147352576),i=((0|i)>=49149?49149:i)-32766|0,a=e[o+24>>2],s=e[o+28>>2],t=e[o+16>>2],r=e[o+20>>2]}else(0|i)>-16383||(PA(o- -64|0,t,r,a,s,0,0,0,7471104),a=e[o+72>>2],s=e[o+76>>2],t=e[o+64>>2],r=e[o+68>>2],i>>>0>4294934644?i=i+16269|0:(PA(o+48|0,t,r,a,s,0,0,0,7471104),i=((0|i)<=-48920?-48920:i)+32538|0,a=e[o+56>>2],s=e[o+60>>2],t=e[o+48>>2],r=e[o+52>>2]));PA(o,t,r,a,s,0,0,0,i+16383<<16),t=e[o+12>>2],e[A+8>>2]=e[o+8>>2],e[A+12>>2]=t,t=e[o+4>>2],e[A>>2]=e[o>>2],e[A+4>>2]=t,J=o+80|0}function sr(A,t){var r,a,s=0;J=r=J+-64|0,s=e[A>>2],a=e[s-4>>2],s=e[s-8>>2],e[r+32>>2]=0,e[r+36>>2]=0,e[r+40>>2]=0,e[r+44>>2]=0,e[r+48>>2]=0,e[r+52>>2]=0,g[r+55|0]=0,g[r+56|0]=0,g[r+57|0]=0,g[r+58|0]=0,g[r+59|0]=0,g[r+60|0]=0,g[r+61|0]=0,g[r+62|0]=0,e[r+24>>2]=0,e[r+28>>2]=0,e[r+20>>2]=0,e[r+16>>2]=125084,e[r+12>>2]=A,e[r+8>>2]=t,A=A+s|0,s=0;e:if($a(a,t,0))e[r+56>>2]=1,ct[e[e[a>>2]+20>>2]](a,r+8|0,A,A,1,0),s=e[r+32>>2]==1?A:0;else{ct[e[e[a>>2]+24>>2]](a,r+8|0,A,1,0);A:switch(e[r+44>>2]){case 0:s=e[r+48>>2]==1&&e[r+36>>2]==1&&e[r+40>>2]==1?e[r+28>>2]:0;break e;case 1:break A;default:break e}e[r+32>>2]!=1&&e[r+48>>2]|e[r+36>>2]!=1|e[r+40>>2]!=1||(s=e[r+24>>2])}return J=r- -64|0,s}function jt(A,t,r,a,s){var i,o,c=0;J=i=J-80|0,b[i+72>>1]=0,e[i+64>>2]=0,e[i+68>>2]=0,g[0|a]=0,c=zr(t,o=2|(c=i- -64|0))+c|0,g[c+2|0]=32;e:if((0|r)!=-1)t>>>0>=33&&!Or(t)?(g[c+3|0]=(0|r)==32?32:31,g[i+65|0]=95,RA(A,i- -64|1,i+16|0)||(g[i+65|0]=32,RA(A,o,i+16|0)||qt(A,o,i+16|0,40,0,268435456,0)),l[i+16|0]||tA(A,t,i+16|0),t=qA(a,i+16|0),!(r=l[0|t])|(0|r)==21||(e[i+56>>2]=0,e[i+60>>2]=0,$t(A,t,i+56|0,-1,1&s))):(e[i>>2]=t,DA(t=i- -64|1,85485,i),RA(A,t,a));else{if(RA(A,o,a)||(g[i+65|0]=95,RA(A,i- -64|1,i+16|0)|e[A+212>>2]==25966))break e;gi(85055),RA(e[47194],o,i+16|0)&&(g[0|a]=21,g[a+1|0]=0),ma(e[e[32972]+60>>2])}J=i+80|0}function jA(A,t,r){var a=0,s=0,i=0,o=0;if(r&&(g[0|A]=t,g[(a=A+r|0)-1|0]=t,!(r>>>0<3||(g[A+2|0]=t,g[A+1|0]=t,g[a-3|0]=t,g[a-2|0]=t,r>>>0<7||(g[A+3|0]=t,g[a-4|0]=t,r>>>0<9||(s=(a=0-A&3)+A|0,t=z(255&t,16843009),e[s>>2]=t,e[(r=(a=r-a&-4)+s|0)-4>>2]=t,a>>>0<9||(e[s+8>>2]=t,e[s+4>>2]=t,e[r-8>>2]=t,e[r-12>>2]=t,a>>>0<25||(e[s+24>>2]=t,e[s+20>>2]=t,e[s+16>>2]=t,e[s+12>>2]=t,e[r-16>>2]=t,e[r-20>>2]=t,e[r-24>>2]=t,e[r-28>>2]=t,(r=a-(o=4&s|24)|0)>>>0<32))))))))for(a=It(t,0,1,1),i=$,t=s+o|0;e[t+24>>2]=a,e[t+28>>2]=i,e[t+16>>2]=a,e[t+20>>2]=i,e[t+8>>2]=a,e[t+12>>2]=i,e[t>>2]=a,e[t+4>>2]=i,t=t+32|0,(r=r-32|0)>>>0>31;);return A}function KA(){var A,t=0,r=0,a=0,s=0,i=0;if(J=A=J-208|0,(0|(a=e[50303]))>0)for(;(s=e[(r=201216+(t<<2)|0)>>2])&&(xt(s),e[r>>2]=0),(0|a)!=(0|(t=t+1|0)););if(e[50303]=0,e[A+16>>2]=137584,e[A+20>>2]=47,DA(t=A+32|0,87827,A+16|0),$s(t,HA(t)+1|0,0),e[A+4>>2]=47,e[A>>2]=137584,DA(t,87933,A),$s(t,HA(t)+1|0,1),t=e[50303],e[201216+(r=t<<2)>>2]=0,r=Kr(a=e[50741],r+4|0)){if(e[50741]=r,ti(201216,t,7),a=e[50741],r=0,t=e[50304])for(s=0;i=e[t+4>>2],l[0|i]&&Br(i+1|0,86589)&&va(e[t+8>>2],88032,3)&&(e[(r<<2)+a>>2]=t,r=r+1|0),t=e[201216+((s=s+1|0)<<2)>>2];);e[(r<<2)+a>>2]=0}return J=A+208|0,a}function Jt(A,t,r){var a=0,s=0,i=0,o=0;if(i=t-1|0,(0|t)>=2){t=A;e:{for(;;){A:{r:{if((0|(a=e[r+4>>2]))!=(0|(s=e[r+8>>2]))){if((o=ai(a,10,s-a|0))?s=1+(o-(a=e[r+4>>2])|0)|0:(a=e[r+4>>2],s=e[r+8>>2]-a|0),wt(t,a,a=s>>>0<i>>>0?s:i),s=a+e[r+4>>2]|0,e[r+4>>2]=s,t=t+a|0,o||!(i=i-a|0))break A;if((0|s)!=e[r+8>>2]){e[r+4>>2]=s+1,a=l[0|s];break r}}if(!((0|(a=Zi(r)))>=0)){if(a=0,(0|A)==(0|t))break e;if(16&l[0|r])break A;break e}}if(g[0|t]=a,t=t+1|0,(255&a)!=10&&(i=i-1|0))continue}break}A?(g[0|t]=0,a=A):a=0}}else if(t=e[r+72>>2],e[r+72>>2]=t-1|t,!i)return g[0|A]=0,A;return a}function Ya(A){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0;if(t=z(A,44),(0|(A=e[t+137896>>2]))>0&&Ya(A-1|0),A=e[36115],!((0|(t=e[36+(r=t+137856|0)>>2]))<=0)){if(s=e[r+32>>2],c=1&t,(0|t)!=1)for(f=-2&t,r=0;t=l[10+(i=(a=r<<4)+s|0)|0],e[144464+(t<<2)>>2]=i,(0|A)>=(0|t)?t=A:jA(144464+((A=A+1|0)<<2)|0,0,t-A<<2),A=l[10+(a=(16|a)+s|0)|0],e[144464+(A<<2)>>2]=a,(0|A)<=(0|t)?A=t:jA(144464+((t=t+1|0)<<2)|0,0,A-t<<2),r=r+2|0,(0|f)!=(0|(o=o+2|0)););else r=0;c&&(t=l[10+(r=(r<<4)+s|0)|0],e[144464+(t<<2)>>2]=r,(0|A)>=(0|t)||(jA(144464+((A=A+1|0)<<2)|0,0,t-A<<2),A=t))}e[36115]=A}function pa(A,t,r,a,s){var i,o=0,c=0,f=0;J=i=J-16|0;e:if(1&g[A+106|0]&&(o=l[0|r],!(!(1&g[a+2|0])&(0|o)!=46||256&(f=e[a+12>>2])|!(!(2&f)||s)||(Gt(i+12|0,(0|o)!=46?r:r+2|0),!(o=l[0|r])|!l[r+1|0])))){if(!(!(f=e[i+12>>2])|2&l[a+2|0])){if(!rr(f))break e;o=l[0|r]}(0|o)==46&&(g[0|r]=32),c=2,e[A+212>>2]!=26741|s||(r=rr(e[i+12>>2])?NA(A,r+2|0,0,0):0,128&l[A+8233|0]&&(!(!(s=e[i+12>>2])|2&l[a+2|0])&s-48>>>0>=10||(c=0)),c=32768&r?0:c,131072&r&&(c=163840&e[A+8232>>2]?34:l[t-2|0]!=45?c:0))}return J=i+16|0,c}function ir(A,t,r,a,s){var i,o=0,c=0;if(J=i=J-208|0,e[i+204>>2]=r,jA(r=i+160|0,0,40),e[i+200>>2]=e[i+204>>2],(0|$A(0,t,i+200|0,i+80|0,r,a,s))<0)s=-1;else{e[A+76>>2],o=e[A>>2],e[A+72>>2]<=0&&(e[A>>2]=-33&o);e:{A:{if(e[A+48>>2]){if(e[A+16>>2])break A}else e[A+48>>2]=80,e[A+28>>2]=0,e[A+16>>2]=0,e[A+20>>2]=0,c=e[A+44>>2],e[A+44>>2]=i;if(r=-1,Mn(A))break e}r=$A(A,t,i+200|0,i+80|0,i+160|0,a,s)}c&&(ct[e[A+36>>2]](A,0,0),e[A+48>>2]=0,e[A+44>>2]=c,e[A+28>>2]=0,t=e[A+20>>2],e[A+16>>2]=0,e[A+20>>2]=0,r=t?r:-1),t=A,A=e[A>>2],e[t>>2]=A|32&o,s=32&A?-1:r}return J=i+208|0,s}function rt(A,t,r,a){var s,i=0,o=0,c=0,f=0,m=0,p=0,w=0;if(J=s=J-208|0,o=l[0|t])for(;g[i+s|0]=o,f=((255&o)==6&(0|c)!=21)+f|0,c=o<<24>>24,o=l[(i=i+1|0)+t|0];);if(g[i+s|0]=0,i=l[0|s])for(p=f-2|0,c=0,w=(0|a)<2,o=0;;){e:{A:if((255&i)!=6|w|(0|o)==21){if((0|(a=255&i))==255){if(!m|(0|r)<2)break e;a=r>>>0>2?11:(0|c)%3|0?23:11}o=a,a=c}else{if(i=c+1|0,l[A+169|0]){o=(0|i)>1?5:6,a=i;break A}if(o=6,a=f,(0|i)==(0|f))break A;o=(0|i)%3|0||(0|c)==(0|p)?5:6,a=i}c=a,g[0|t]=o,t=t+1|0}if(!(i=l[(m=m+1|0)+s|0]))break}(0|r)>=2&&(g[0|t]=11,t=t+1|0),g[0|t]=0,J=s+208|0}function dr(A,t){var r=0;r=0,A&&(r=e[50754],r=(A=(A=(0|z(e[145712+(t?12:((0|A)>199)<<2)>>2],A))/256|0)>>>0>(t=e[36430])>>>0?A:t)>>>0<=89999?(z(A,r)>>>0)/1e3|0:(z(A,(0|r)/25|0)>>>0)/40|0),(0|(A=e[36440]))<=0||(0|(t=e[36424]))<0||(e[4+(t=216192+(t<<4)|0)>>2]||(e[t+4>>2]=A),e[36440]=0),e[36426]=0,e[36439]=-1,e[36455]=e[50758],La(),e[36427]=-1,A=216192+(e[50758]<<4)|0,e[A>>2]=5,e[A+4>>2]=r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,e[36426]=0,e[36438]&&(e[36438]=0,A=216192+(e[50758]<<4)|0,e[A>>2]=14,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)}function gA(A,t,r,a,s,i,o,c){var f,m=0,p=0,w=0;m=1,f=p=2147483647&a;e:if(!((w=(0|p)==2147418112)&!r?A|t:w&!!(0|r)|p>>>0>2147418112)&&!((w=(0|(p=2147483647&c))==2147418112)&!o?s|i:w&!!(0|o)|p>>>0>2147418112)){if(!(A|s|r|o|t|i|p|f))return 0;if((0|(m=a&c))>0|(0|m)>=0){if(m=-1,(0|r)==(0|o)&(0|a)==(0|c)?(0|t)==(0|i)&A>>>0<s>>>0|t>>>0<i>>>0:r>>>0<o>>>0&(0|a)<=(0|c)|(0|a)<(0|c))break e;return!!(A^s|r^o|t^i|a^c)}m=-1,((0|r)==(0|o)&(0|a)==(0|c)?(0|t)==(0|i)&A>>>0>s>>>0|t>>>0>i>>>0:r>>>0>o>>>0&(0|a)>=(0|c)|(0|a)>(0|c))||(m=!!(A^s|r^o|t^i|a^c))}return m}function JA(A,t){var r=0,a=0,s=0,i=0;for(r=l[85836]|l[85837]<<8,g[0|t]=r,g[t+1|0]=r>>>8,g[t+2|0]=l[85838];;)if(s=l[0|A],A=r=A+1|0,(0|s)!=255){if(!s)break;if(!(a=e[144464+(s<<2)>>2]))continue;if(l[a+11|0]==1&&(i=l[a+14|0],!(M[a+8>>1]|i>>>0>4))){if(i>>>0<2)continue;g[0|t]=l[i+93943|0],t=t+1|0;continue}if(255&(A=e[a>>2]))for(;g[0|t]=A,t=t+1|0,a=65280&A,A=A>>>8|0,a;);if(A=r,(0|s)!=21||(32|(r=g[0|A]))-97>>>0>=26)continue;for(;g[0|t]=r,t=t+1|0,(32|(r=g[0|(A=A+1|0)]))-97>>>0<26;);}g[0|t]=0}function ha(A,t){var r,a,s=0,i=0,o=0;J=r=J-112|0,A||(e[50303]||KA(),A=201216),ar(s=r+16|0,t,40),e[r>>2]=47,e[r+4>>2]=s,DA(t=r- -64|0,87599,r),a=HA(t),o=-1;e:{A:{r:{if(i=e[A>>2]){t=0,s=-1;s:{for(;;){if(Cn(r+16|0,e[i>>2])){if(Cn(r+16|0,i=e[i+8>>2])?o=Cn(r- -64|0,i+(HA(i)-a|0)|0)?o:t:s=t,i=e[((t=t+1|0)<<2)+A>>2])continue;break s}break}if((0|t)>=0)break A;t=(0|s)<0?o:s;break r}if((0|(t=s))>=0)break r}t=o}if(s=0,(0|t)<0)break e}s=e[(t<<2)+A>>2]}return J=r+112|0,s}function Nr(A,t){var r,a,s=0,i=0,o=0,c=0,f=0;J=r=J-16|0,be(+t),a=0|X(1),i=0|X(0),(0|(o=(s=2147483647&a)-1048576|0))==2145386495|o>>>0<2145386495?(c=i<<28,o=s>>>4|0,s=(15&s)<<28|i>>>4,i=o+1006632960|0):(0|s)==2146435072|s>>>0>2146435072?(c=i<<28,s=(15&a)<<28|i>>>4,i=a>>>4|2147418112):s|i?(Aa(r,i,o=s,0,0,(s=s?Ye(s):Ye(i)+32|0)+49|0),f=e[r>>2],c=e[r+4>>2],o=15372-s<<16,s=e[r+8>>2],i=o|65536^e[r+12>>2]):(s=0,i=0),e[A>>2]=f,e[A+4>>2]=c,e[A+8>>2]=s,e[A+12>>2]=-2147483648&a|i,J=r+16|0}function Vr(A,t,r){var a=0,s=0;e:{A:{r:{if(!(3&((s=A)^t))){a=!!(0|r);s:if(!(!(3&t)|!r))for(;;){if(a=l[0|t],g[0|s]=a,!a)break e;if(s=s+1|0,a=!!(0|(r=r-1|0)),!(3&(t=t+1|0)))break s;if(!r)break}if(!a)break A;if(!l[0|t])break e;if(!(r>>>0<4))for(;;){if(~(a=e[t>>2])&a-16843009&-2139062144)break r;if(e[s>>2]=a,s=s+4|0,t=t+4|0,!((r=r-4|0)>>>0>3))break}}if(!r)break A}for(;;){if(a=l[0|t],g[0|s]=a,!a)break e;if(s=s+1|0,t=t+1|0,!(r=r-1|0))break}}r=0}return jA(s,0,r),A}function Pr(A,t,r,a,s,i){var o,c=0,f=0,m=0;J=o=J-240|0,c=e[r>>2],e[o+232>>2]=c,r=e[r+4>>2],e[o>>2]=A,e[o+236>>2]=r,m=1;e:{A:{r:{if(r|(0|c)!=1){for(c=A;;){if((0|Ds(r=c-e[(f=(a<<2)+i|0)>>2]|0,A,t))<=0){r=c;break r}s:{if(!((0|a)<2|s)&&(s=e[f-8>>2],(0|Ds(f=c-4|0,r,t))>=0||(0|Ds(f-s|0,r,t))>=0))break s;if(e[(m<<2)+o>>2]=r,yi(c=o+232|0,s=Tn(c)),m=m+1|0,a=a+s|0,s=0,c=r,e[o+236>>2]|e[o+232>>2]!=1)continue;break A}break}r=c;break A}r=A}if(s)break e}Us(o,m),kn(r,t,a,i)}J=o+240|0}function Cr(A,t){var r=0;e[4+(134912+(r=A<<2)|0)>>2]=t,e[r+136192>>2]=t,r=28;e:{A:{r:switch(A-1|0){case 0:e[50792]=t,e[50786]=t,Ls(3);break A;case 1:e[50787]=t,e[33037]=(0|z(l[e[50797]+105596|0],(0|z(e[50787],55))/100|0))/16;break A;case 2:A=(0|t)>=99?99:t,e[50785]=(0|A)>0?A:0;break A;case 3:e[50788]=(0|t)>=99?99:t;break A;case 12:e[47268]=t;break A;case 6:e[47205]=t;break A;case 9:break A;case 8:break r;default:break e}(A=255&t)&&(e[e[47192]+152>>2]=A),e[47196]=t}r=0}return r}function Ut(A,t){var r=0,a=0,s=0;e:if(e[A>>2])for(;;){if(Or(e[A-4>>2])){if(a=0,(0|(r=g[0|t]))==e[A>>2])for(;(0|(r=g[(a=a+1|0)+t|0]))==e[(A=A+4|0)>>2];);if(!r){for(;t=A,A=A+4|0,Or(e[t>>2]););for(s=t+((e[t>>2]==61)<<2)|0;s=(A=s)+4|0,Or(e[A>>2]););switch((t=e[A>>2])-34|0){case 0:case 5:break e}return Or(t)||e[A>>2]==47?102808:A}}if(!e[(A=A+4|0)>>2])break}return s}function xr(A,t,r,a){var s,i,o=0,c=0,f=0;return!l[A+25|0]|D[A+8>>3]!=r|D[A+16>>3]!=a?(D[A+16>>3]=a,D[A+8>>3]=r,a=(o=Pt(-3.141592653589793/(c=+e[A>>2])*a))*-o,D[A+48>>3]=a,o*=Da(-6.283185307179586/c*r),o+=o,D[A+40>>3]=o,c=1-o-a,D[A+32>>3]=c,!(f=l[A+24|0])|r==0||(c=1/c,D[A+32>>3]=c,a*=r=-c,D[A+48>>3]=a,o*=r,D[A+40>>3]=o,f=1)):(f=l[A+24|0],a=D[A+48>>3],o=D[A+40>>3],c=D[A+32>>3]),g[A+25|0]=1,r=D[A+64>>3],s=D[A+56>>3],D[A+64>>3]=s,i=t,t=a*r+(c*t+o*s),D[A+56>>3]=f?i:t,t}function ri(A,t,r,a,s){var i,o=0,c=0,f=0,m=0;if((i=e[34388])&&!((0|(c=e[34436]))>=(e[34393]-2|0))){if(e[34436]=c+1,o=z(c,36)+i|0,e[o>>2]=A,e[o+4>>2]=e[34437],m=e[34438],e[o+12>>2]=t>>>24,e[o+8>>2]=16777215&t,e[o+24>>2]=m,t=e[50754],s=e[34439]+((s-e[34392]|0)/2|0)|0,e[o+20>>2]=s,t=Ne(f=1e3*+(0|s)/+(0|t))<2147483648?~~f:-2147483648,e[o+16>>2]=t,A-3>>>0<=1)return void(e[28+(z(c,36)+i|0)>>2]=e[33282]+r);t=28+(z(c,36)+i|0)|0,e[t>>2]=r,(0|A)==7&&(e[t+4>>2]=a)}}function Ha(A,t,r,a,s,i){var o=0,c=0,f=0,m=0;64&i?(t=31&(r=i+-64|0),(63&r)>>>0>=32?(r=0,t=s>>>t|0):(r=s>>>t|0,t=((1<<t)-1&s)<<32-t|a>>>t),a=0,s=0):i&&(f=a,o=31&(c=64-i|0),(63&c)>>>0>=32?(c=f<<o,m=0):(c=(1<<o)-1&f>>>32-o|s<<o,m=f<<o),f=t,t=31&i,(63&i)>>>0>=32?(o=0,t=r>>>t|0):(o=r>>>t|0,t=((1<<t)-1&r)<<32-t|f>>>t),t|=m,r=o|c,o=a,a=31&i,(63&i)>>>0>=32?(c=0,a=s>>>a|0):(c=s>>>a|0,a=((1<<a)-1&s)<<32-a|o>>>a),s=c),e[A>>2]=t,e[A+4>>2]=r,e[A+8>>2]=a,e[A+12>>2]=s}function Ni(A){var t=0,r=0;if(!A){if(e[33174]&&(t=Ni(e[33174])),e[33136]&&(t=Ni(e[33136])|t),A=e[56816])for(;e[A+20>>2]!=e[A+28>>2]&&(t=Ni(A)|t),A=e[A+56>>2];);return t}return e[A+76>>2],e[A+20>>2]==e[A+28>>2]||(ct[e[A+36>>2]](A,0,0),e[A+20>>2])?((0|(t=e[A+8>>2]))!=(0|(r=e[A+4>>2]))&&(t=r-t|0,ct[e[A+40>>2]](A,t,t>>31,1)),t=0,e[A+28>>2]=0,e[A+16>>2]=0,e[A+20>>2]=0,e[A+4>>2]=0,e[A+8>>2]=0):t=-1,t}function Ga(A,t){var r=0,a=0,s=0,i=0,o=0;if((192&(r=l[0|t]))==128)for(;(192&(r=l[0|(t=t-1|0)]))==128;);e:if(128&(r=r<<24>>24)){if(a=1,(0|(s=224&r))!=192)if((240&r)!=224){if(a=3,(248&r)!=240){r&=255,a=0;break e}}else a=2,o=1;r=l[a+93846|0]&r,(i=l[t+1|0])?(r=63&i|r<<6,(0|s)!=192&&((s=l[t+2|0])?(r=63&s|r<<6,o||((t=l[t+3|0])?r=63&t|r<<6:a=2)):a=1)):a=0}return e[A>>2]=r,a+1|0}function Oi(A,t,r,a){var s,i=0,o=0;return J=s=J-224|0,A?(e[s>>2]=137584,e[s+4>>2]=47,e[s+8>>2]=t,DA(t=s+16|0,85430,s),(0|(i=is(t)))<0?t=hs(a,0-i|0,s+16|0):(t=ka(s+16|0,85659))?((o=e[A>>2])&&xt(o),i?(o=Ct(i),e[A>>2]=o,o?(0|bn(o,i,t))==(0|i)?(ra(t),t=0,r&&(e[r>>2]=i)):(r=e[56798],ra(t),xt(e[A>>2]),e[A>>2]=0,t=hs(a,r,s+16|0)):(ra(t),t=48)):(t=0,e[A>>2]=0)):t=hs(a,e[56798],s+16|0)):t=28,J=s+224|0,t}function Gt(A,t){var r=0,a=0,s=0,i=0,o=0;if((192&(r=l[0|t]))==128)for(;(192&(r=l[0|(t=t+1|0)]))==128;);e:if(128&(r=r<<24>>24)){if(a=1,(0|(s=224&r))!=192)if((240&r)!=224){if(a=3,(248&r)!=240){r&=255,a=0;break e}}else a=2,o=1;r=l[a+93846|0]&r,(i=l[t+1|0])?(r=63&i|r<<6,(0|s)!=192&&((s=l[t+2|0])?(r=63&s|r<<6,o||((t=l[t+3|0])?r=63&t|r<<6:a=2)):a=1)):a=0}return e[A>>2]=r,a+1|0}function Aa(A,t,r,a,s,i){var o=0,c=0,f=0;64&i?(a=t,t=31&(s=i+-64|0),(63&s)>>>0>=32?(s=a<<t,a=0):(s=(1<<t)-1&a>>>32-t|r<<t,a<<=t),t=0,r=0):i&&(o=a,a=31&i,(63&i)>>>0>=32?(c=o<<a,f=0):(c=(1<<a)-1&o>>>32-a|s<<a,f=o<<a),o=t,a=31&(s=64-i|0),(63&s)>>>0>=32?(s=0,t=r>>>a|0):(s=r>>>a|0,t=((1<<a)-1&r)<<32-a|o>>>a),a=f|t,s|=c,t=31&i,(63&i)>>>0>=32?(c=o<<t,t=0):(c=(1<<t)-1&o>>>32-t|r<<t,t=o<<t),r=c),e[A>>2]=t,e[A+4>>2]=r,e[A+8>>2]=a,e[A+12>>2]=s}function Wa(A){var t=0;return A>>>0<=55295?t=l[e[125552+(A>>>6&67108860)>>2]+(255&A)|0]:(t=4,A>>>0<57344||(A>>>0<63488?t=3:A>>>0<=195327?t=l[e[126416+(A-63488>>>6&67108860)>>2]+(255&A)|0]:(t=2,A>>>0<917504||(A>>>0<=918015?t=l[e[128476+(A-917504>>>6&67108860)>>2]+(255&A)|0]:A>>>0<983040||(A>>>0<1048574?t=3:A>>>0<1048576||(t=3,A>>>0<1114110||(t=A>>>0<1114112?2:5))))))),255&t}function n0(A,t){var r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0;if(!((0|(r=e[33709]))<=0)){if(s=(0|A)>31?A-32|0:A,A=0,r>>>0>=4)for(p=-4&r;c=2|A,f=1|A,a=e[134912+((o=3|A)<<6)>>2]==(0|s)?o:e[134912+(c<<6)>>2]==(0|s)?c:e[134912+(f<<6)>>2]==(0|s)?f:e[134912+(A<<6)>>2]==(0|s)?A:a,A=A+4|0,(0|p)!=(0|(i=i+4|0)););if(i=3&r)for(;a=e[134912+(A<<6)>>2]==(0|s)?A:a,A=A+1|0,(0|i)!=(0|(m=m+1|0)););(0|a)<=0||(e[33709]=a,r=a)}Ja(t,r)}function o0(A){var t,r=0,a=0,s=0;for(J=t=J-96|0,ar(t,A,60),Li(t,1);s=Ht(g[0|(a=t+r|0)]),g[0|a]=s,r=r+1|0,255&s;);e[t+92>>2]=0,e[t+84>>2]=0,e[t+88>>2]=0,e[t+76>>2]=0,e[t+80>>2]=0,e[t+72>>2]=A;e:{A:{r:{if(Tt(t,1)){if(l[202976])break r;break A}if(e[50303]||KA(),r=268437247,!(A=ha(201216,t))||!Tt(e[A+8>>2],0))break e;if(!l[202976])break A}Tt(202976,2)}zn(e[32972]),e[t+76>>2]=e[32972]+40,wi(t+72|0,202976),r=0}return J=t+96|0,r}function l0(A,t){if(!A)return 0;e:{A:{if(A){if(t>>>0<=127)break A;if(e[e[56841]>>2]){if(t>>>0<=2047){g[A+1|0]=63&t|128,g[0|A]=t>>>6|192,A=2;break e}if(!((-8192&t)!=57344&t>>>0>=55296)){g[A+2|0]=63&t|128,g[0|A]=t>>>12|224,g[A+1|0]=t>>>6&63|128,A=3;break e}if(t-65536>>>0<=1048575){g[A+3|0]=63&t|128,g[0|A]=t>>>18|240,g[A+2|0]=t>>>6&63|128,g[A+1|0]=t>>>12&63|128,A=4;break e}}else if((-128&t)==57216)break A;e[56798]=25,A=-1}else A=1;break e}g[0|A]=t,A=1}return A}function c0(A){var t=0,r=0,a=0,s=0;if(e[A+20>>2]=0,(a=(r=e[A+8>>2])-(t=e[A+4>>2])|0)>>>0>=9)for(;xt(e[t>>2]),t=e[A+4>>2]+4|0,e[A+4>>2]=t,(a=(r=e[A+8>>2])-t|0)>>>0>8;);switch(s=512,(a>>>2|0)-1|0){case 1:s=1024;case 0:e[A+16>>2]=s}if((0|t)!=(0|r)){for(;xt(e[t>>2]),(0|r)!=(0|(t=t+4|0)););(0|(t=e[A+8>>2]))!=(0|(r=e[A+4>>2]))&&(e[A+8>>2]=t+(3+(r-t|0)&-4))}(A=e[A>>2])&&xt(A)}function ai(A,t,r){var a=0,s=0;a=!!(0|r);e:{A:{r:if(!(!(3&A)|!r))for(s=255&t;;){if((0|s)==l[0|A])break A;if(a=!!(0|(r=r-1|0)),!(3&(A=A+1|0)))break r;if(!r)break}if(!a)break e;if(!(l[0|A]==(255&t)|r>>>0<4))for(a=z(255&t,16843009);;){if(~(s=a^e[A>>2])&s-16843009&-2139062144)break A;if(A=A+4|0,!((r=r-4|0)>>>0>3))break}if(!r)break e}for(t&=255;;){if((0|t)==l[0|A])return A;if(A=A+1|0,!(r=r-1|0))break}}return 0}function Vs(A,t){var r=0,a=0;e:{if(a=255&t){if(3&A)for(;;){if(!(r=l[0|A])|(0|r)==(255&t))break e;if(!(3&(A=A+1|0)))break}A:if(!(~(r=e[A>>2])&r-16843009&-2139062144))for(a=z(a,16843009);;){if(~(r^=a)&r-16843009&-2139062144)break A;if(r=e[A+4>>2],A=A+4|0,r-16843009&~r&-2139062144)break}for(;(a=l[0|(r=A)])&&(A=r+1|0,(0|a)!=(255&t)););return r}return HA(A)+A|0}return A}function g0(A,t,r,a,s){var i,o=0,c=0;c=-1;e:if(!(((o=(0|(i=2147483647&a))==2147418112)&!r?A|t:o&!!(0|r)|i>>>0>2147418112)||(o=2147483647&s)>>>0>2147418112&(0|o)!=2147418112)){if(!(A|r|o|i|t))return 0;if((0|(o=a&s))>0|(0|o)>=0){if((!!(0|r)|(0|a)!=(0|s))&(0|a)<(0|s))break e;return!!(A|r|a^s|t)}(!r&(0|a)==(0|s)?A|t:!!(0|r)&(0|a)>=(0|s)|(0|a)>(0|s))||(c=!!(A|r|a^s|t))}return c}function Li(A,t){var r,a=0;J=r=J+-64|0,g[202976]=0,e[r+48>>2]=47,DA(r+59|0,91351,r+48|0),t||(g[r+59|0]=0);e:{A:{if(A&&(A=es(A,43))){if(g[0|A]=0,g[0|(A=A+1|0)]-48>>>0>=10)break A;a=js(A)}if((0|a)<=0)break e;if(a>>>0<=9){e[r+4>>2]=a,e[r>>2]=r+59,DA(202976,91378,r);break e}e[r+20>>2]=a-10,e[r+16>>2]=r+59,DA(202976,91503,r+16|0);break e}e[r+36>>2]=A,e[r+32>>2]=r+59,DA(202976,85425,r+32|0)}J=r- -64|0}function Ta(A){var t,r=0,a=0,s=0;J=t=J-80|0,r=gs(A,t+12|0),e[t+12>>2]?(ar(a=t+16|0,r,60),r=0,Li(a,1),!Tt(a,0)|!l[202976]||Tt(202976,2),zn(e[32972]),wi(A,86012)):r=268437247,J=t+80|0;e:{A:{r:{s:{if((0|r)<=268437502){if(!r)break e;if((0|r)==268436479)break A;if((0|r)!=268437247)break s;return 2}if((0|r)==268437503|(0|r)==268437759)break r;if((0|r)==268439295)break e}return-1}return 2}s=1}return s}function Zr(A,t,r,a,s,i,o,c,f){var m,p,w;f=It(t,r,c,f),c=$,s=It(a,s,i,o),a=$+c|0,c=s>>>0>(f=s+f|0)>>>0?a+1|0:a,m=o,p=r,o=(r=It(o,s=0,r,a=0))+f|0,f=$+c|0,w=o,r=r>>>0>o>>>0?f+1|0:f,o=It(i,0,t,0),c=$,a=It(i,f=0,p,a),i=$+f|0,i=a>>>0>(c=c+a|0)>>>0?i+1|0:i,a=r,i=i>>>0>(f=i+w|0)>>>0?a+1|0:a,r=It(t,0,m,s)+c|0,s=$,c=(s=r>>>0<c>>>0?s+1|0:s)+f|0,f=i,e[A+8>>2]=c,e[A+12>>2]=s>>>0>c>>>0?f+1|0:f,e[A>>2]=o,e[A+4>>2]=r}function qA(A,t){var r=0,a=0;e:{if(3&((a=A)^t))r=l[0|t];else{if(3&t)for(;;){if(r=l[0|t],g[0|a]=r,!r)break e;if(a=a+1|0,!(3&(t=t+1|0)))break}if(!(~(r=e[t>>2])&r-16843009&-2139062144))for(;e[a>>2]=r,r=e[t+4>>2],a=a+4|0,t=t+4|0,!(r-16843009&~r&-2139062144););}if(g[0|a]=r,255&r)for(;r=l[t+1|0],g[a+1|0]=r,a=a+1|0,t=t+1|0,r;);}return A}function Da(A){var t,r=0,a=0;J=t=J-16|0,be(+A),a=0|X(1),X(0);e:if((a&=2147483647)>>>0<=1072243195){if(r=1,a>>>0<1044816030)break e;r=vi(A,0)}else if(r=A-A,!(a>>>0>=2146435072)){switch(3&wa(A,t)){case 0:r=vi(D[t>>3],D[t+8>>3]);break e;case 1:r=-Ms(D[t>>3],D[t+8>>3],1);break e;case 2:r=-vi(D[t>>3],D[t+8>>3]);break e}r=Ms(D[t>>3],D[t+8>>3],1)}return J=t+16|0,r}function pn(A,t,r,a){var s=0,i=0,o=0;if(!((HA(a)+HA(t)|0)>=(0|r))){for(o=e[36115],r=a;s=l[0|r];)if(r=r+1|0,!((0|s)>=(0|o))){e:{A:switch(s=e[144464+(s<<2)>>2],l[s+11|0]-1|0){case 1:break e;case 0:break A;default:continue}i=l[s+14|0]<4|i;continue}1&(l[s+4|0]>>>1|i)||(e[A+8212>>2]=e[A+8212>>2]+1),e[A+8208>>2]=e[A+8208>>2]+1,i=0}t&&ia(t,a)}}function Yi(A){var t,r=0;J=t=J-16|0,be(+A),r=0|X(1),X(0);e:if((r&=2147483647)>>>0<=1072243195){if(r>>>0<1045430272)break e;A=Ms(A,0,0)}else if(r>>>0>=2146435072)A-=A;else{switch(3&wa(A,t)){case 0:A=Ms(D[t>>3],D[t+8>>3],1);break e;case 1:A=vi(D[t>>3],D[t+8>>3]);break e;case 2:A=-Ms(D[t>>3],D[t+8>>3],1);break e}A=-vi(D[t>>3],D[t+8>>3])}return J=t+16|0,A}function hn(A){var t=0;e[A+296>>2]=303173648,e[A+300>>2]=370677780,t=e[26341],e[A+304>>2]=e[26340],e[A+308>>2]=t,t=e[26343],e[A+312>>2]=e[26342],e[A+316>>2]=t,vs(A),e[A+56>>2]=2,e[A+36>>2]=3,e[A+40>>2]=1074,g[A+168|0]=5,e[A+132>>2]=32,e[A+104>>2]=1032,e[A+108>>2]=66,e[A+8>>2]=5,e[A+12>>2]=32,g[A+365|0]=64|l[A+365|0],g[A+368|0]=64|l[A+368|0],g[A+396|0]=64|l[A+396|0],g[A+399|0]=64|l[A+399|0]}function u0(A,t,r){var a=0,s=0,i=0;e:{if(!(a=e[r+16>>2])){if(Mn(r))break e;a=e[r+16>>2]}if(a-(i=e[r+20>>2])>>>0<t>>>0)return 0|ct[e[r+36>>2]](r,A,t);A:if(e[r+80>>2]<0)a=0;else{for(s=t;;){if(!(a=s)){a=0;break A}if(l[(s=a-1|0)+A|0]==10)break}if((s=0|ct[e[r+36>>2]](r,A,a))>>>0<a>>>0)break e;A=A+a|0,t=t-a|0,i=e[r+20>>2]}wt(i,A,t),e[r+20>>2]=e[r+20>>2]+t,s=t+a|0}return s}function d0(A){var t,r=0,a=0;e:{if((0|(t=e[34064]))>0)for(;;){if((a=e[136284+(r<<4)>>2])&&!Br(A,a)){if(e[136276+(r<<4)>>2])return r;if(a=-1,ei(0,r))break e;return r}if((0|t)==(0|(r=r+1|0)))break}a=-1,ei(A,t)||(r=Kr(e[12+(136272+(e[34064]<<4)|0)>>2],HA(A)+1|0),a=e[34064],e[12+(136272+(a<<4)|0)>>2]=r,qA(r,A),e[34064]=a+1)}return a}function mn(A,t){var r,a=0,s=0,i=0,o=0;for(J=r=J-16|0,g[0|t]=0,(a=15&e[A>>2])&&(t=(s=HA(t=qA(t,Bi(128496,64|a))))+t|0),a=8;;){e:{A:{if(a>>>0<=29){if(e[A>>2]>>>a&1)break A;break e}if(!(e[A+4>>2]>>>a-32&1)|a>>>0<32)break e}(0|(s=(o=HA(i=Bi(128496,a))+1|0)+s|0))>=80||(e[r>>2]=i,DA(t,84439,r),t=t+o|0)}if((0|(a=a+1|0))==64)break}J=r+16|0}function K0(A,t,r){var a,s=0,i=0,o=0;if(J=a=J-16|0,l[0|A]){for(o=e[30450];;)if(i=A,A=A+1|0,!((0|(s=g[0|i]))==32|s-9>>>0<5)){for((0|(s=js(i)))>0&&((0|s)<32?e[t>>2]=e[t>>2]|1<<s:(i=Bi(129568,r),e[a+4>>2]=s,e[a>>2]=i,fr(o,84902,a)),i=A);i=(A=i)+1|0,(s=g[0|A])-48>>>0<10|(32|s)-97>>>0<26;);if(!s)break}}J=a+16|0}function Pa(A,t,r){var a=0,s=0,i=0,o=0;e:if(t&&!((0|(s=r-4|0))<=0))for(i=(0|(r=e[t-4>>2]))!=34?(0|r)==39?r:0:r,r=0;;){if(o=r,!(r=e[t>>2]))break e;A:{if(!i){if((0|r)==32|r-9>>>0<5)break e;if((0|r)!=47)break A;break e}if((0|o)!=92&&(0|r)==(0|i))break e}if(t=t+4|0,!((0|s)>(0|(a=zr(r,A+a|0)+a|0))))break}return g[A+a|0]=0,a}function rr(A){var t=0;e:if(!ns(A)){t=0;A:if(!(A>>>0<768)){if(A-2305>>>0<=1270){if((124&A)>>>0<100)break e;if(t=1,Sn(93850,A))break A;return A-3450>>>0<6}if((0|A)==1541|A-1456>>>0<19|(0|A)==1648||(0|(t=-256&A))==10240|(0|t)==4352|A-3904>>>0<125|A>>>0<880)break e;t=1,A-1611>>>0<20||(t=A-12353>>>0<30400)}return t}return 1}function wi(A,t){var r=0;A?((r=e[A+4>>2])&&qA(133208,r),(r=e[A>>2])&&ar(133168,r,40),e[33289]=l[A+14|0],e[33291]=l[A+13|0],e[33290]=l[A+12|0],ar(134672,l[0|t]!=33|l[t+1|0]!=118?t:(l[t+2|0]==47?3:0)+t|0,40),A=e[50298],e[33678]=e[50297],e[33679]=A,A=e[50302],e[33682]=e[50301],e[33683]=A,A=e[50300],e[33680]=e[50299],e[33681]=A):jA(133152,0,76)}function ki(A,t,r,a){g[A+53|0]=1;e:if(e[A+4>>2]==(0|r)){g[A+52|0]=1;A:{if(!(r=e[A+16>>2])){if(e[A+36>>2]=1,e[A+24>>2]=a,e[A+16>>2]=t,(0|a)!=1)break e;if(e[A+48>>2]==1)break A;break e}if((0|t)==(0|r)){if((0|(r=e[A+24>>2]))==2&&(e[A+24>>2]=a,r=a),e[A+48>>2]!=1)break e;if((0|r)==1)break A;break e}e[A+36>>2]=e[A+36>>2]+1}g[A+54|0]=1}}function xa(A,t){var r=0,a=0,s=0,i=0,o=0;e:if(r=e[t>>2])for(;;){a=0;A:if(A){for(;o=g[a+r|0],(s=e[(a<<2)+A>>2])&&(a=a+1|0,(0|o)==(0|s)););r:switch(s-34|0){case 0:case 5:break r;default:break A}if(!o)break e}if(!(r=e[((i=i+1|0)<<3)+t>>2]))break}return e[4+((i<<3)+t|0)>>2]}function Ws(A,t){e:if((0|t)>=1024){if(A*=898846567431158e293,t>>>0<2047){t=t-1023|0;break e}A*=898846567431158e293,t=((0|t)>=3069?3069:t)-2046|0}else(0|t)>-1023||(A*=2004168360008973e-307,t>>>0>4294965304?t=t+969|0:(A*=2004168360008973e-307,t=((0|t)<=-2960?-2960:t)+1938|0));return R(0,0),R(1,t+1023<<20),A*+re()}function ss(A,t,r,a){var s,i,o,c=0;return J=i=J-16|0,e[i+12>>2]=a,J=s=J-160|0,o=t?A:s+158|0,e[s+144>>2]=o,c=-1,A=t-1|0,e[s+148>>2]=A>>>0<=t>>>0?A:0,A=jA(s,0,144),e[A+76>>2]=-1,e[A+36>>2]=17,e[A+80>>2]=-1,e[A+44>>2]=A+159,e[A+84>>2]=A+144,(0|t)<0?e[56798]=61:(g[0|o]=0,c=ir(A,r,a,15,16)),J=A+160|0,J=i+16|0,c}function Cn(A,t){var r=0,a=0,s=0;e:if(r=l[0|A])for(;;){if(!(a=l[0|t])){s=r;break e}if((0|r)!=(0|a)&&(0|(a=r-65>>>0<26?32|r:r))!=(0|((r=l[0|t])-65>>>0<26?32|r:r))){s=l[0|A];break e}if(t=t+1|0,r=l[A+1|0],A=A+1|0,!r)break}return(s=(A=255&s)-65>>>0<26?32|A:A)-((A=l[0|t])-65>>>0<26?32|A:A)|0}function bn(A,t,r){var a=0,s=0;if(a=e[r+72>>2],e[r+72>>2]=a-1|a,(0|(a=e[r+4>>2]))==(0|(s=e[r+8>>2]))?a=t:(wt(A,a,a=t>>>0>(a=s-a|0)>>>0?a:t),e[r+4>>2]=a+e[r+4>>2],A=A+a|0,a=t-a|0),a)for(;;){if(Ri(r)||!(s=0|ct[e[r+32>>2]](r,A,a)))return t-a|0;if(A=A+s|0,!(a=a-s|0))break}return t}function js(A){for(var t=0,r=0,a=0,s=0;A=(t=A)+1|0,(0|(r=g[0|t]))==32|r-9>>>0<5;);e:{A:{r:switch((r=g[0|t])-43|0){case 0:break A;case 2:break r;default:break e}s=1}r=g[0|A],t=A}if(r-48>>>0<10)for(;a=48+(z(a,10)-g[0|t]|0)|0,A=g[t+1|0],t=t+1|0,A-48>>>0<10;);return s?a:0-a|0}function In(A,t){var r,a,s,i=0;return J=r=J-32|0,e[t>>2]=0,e[t+4>>2]=0,e[(i=a=t+24|0)>>2]=0,e[i+4>>2]=0,e[(i=s=t+16|0)>>2]=0,e[i+4>>2]=0,e[(i=t+8|0)>>2]=0,e[i+4>>2]=0,e[r+28>>2]=t+28,e[r+24>>2]=a,e[r+20>>2]=t+20,e[r+16>>2]=s,e[r+12>>2]=t+12,e[r+8>>2]=i,e[r+4>>2]=t+4,e[r>>2]=t,A=ut(A,84553,r),J=r+32|0,A}function wn(A){var t=0,r=0,a=0;if((t=l[0|A])&&((r=l[A+1|0])?(r=t|r<<8,(t=l[A+2|0])&&(r|=t<<16,(A=l[A+3|0])&&(r|=A<<24))):r=t),(0|(t=e[36115]))>0)for(A=0;;){if(!(!(a=e[144464+(A<<2)>>2])|e[a>>2]!=(0|r)))return l[a+10|0];if((0|t)==(0|(A=A+1|0)))break}return 0}function kn(A,t,r,a){var s,i=0,o=0,c=0,f=0,m=0;J=s=J-240|0,e[s>>2]=A,c=1;e:if(!((0|r)<2))for(i=A;;){if((0|Ds(A,o=(i=i-4|0)-e[((f=r-2|0)<<2)+a>>2]|0,t))>=0&&(0|Ds(A,i,t))>=0)break e;if(m=o,i=(o=(0|Ds(o,i,t))>=0)?m:i,e[(c<<2)+s>>2]=i,c=c+1|0,!((0|(r=o?r-1|0:f))>1))break}Us(s,c),J=s+240|0}function DA(A,t,r){var a,s,i,o=0;return J=s=J-16|0,e[s+12>>2]=r,J=a=J-160|0,wt(i=a+8|0,124528,144),e[a+52>>2]=A,e[a+28>>2]=A,o=(o=-2-A|0)>>>0>2147483647?2147483647:o,e[a+56>>2]=o,A=A+o|0,e[a+36>>2]=A,e[a+24>>2]=A,A=Qs(i,t,r),o&&(t=e[a+28>>2],g[t-((0|t)==e[a+24>>2])|0]=0),J=a+160|0,J=s+16|0,A}function Us(A,t){var r,a=0,s=0,i=0,o=0,c=0;if(a=4,J=r=J-256|0,(0|t)>=2)for(e[(c=(t<<2)+A|0)>>2]=r;;){for(i=a>>>0>=256?256:a,wt(e[c>>2],e[A>>2],i),s=0;o=(s<<2)+A|0,s=s+1|0,wt(e[o>>2],e[(s<<2)+A>>2],i),e[o>>2]=e[o>>2]+i,(0|t)!=(0|s););if(!(a=a-i|0))break}J=r+256|0}function RA(A,t,r){var a,s=0;return J=a=J-96|0,e[a+88>>2]=0,e[a+92>>2]=1073741824,e[a+84>>2]=t,t=kr(A,a+84|0,r,a+88|0,2,0),536870912&(s=e[a+88>>2])?(t=e[47202],e[47202]=0,g[a+2|0]=32,b[a>>1]=8192,ar(s=3|a,e[a+84>>2],77),A=NA(A,s,0,0),qA(r,189088),e[47202]=t):A=t?s:0,J=a+96|0,A}function xn(A,t,r){var a=0,s=0,i=0;s=xi(A),a=e[t>>2];e:{A:if((0|s)>=0){if(a){if(!Br(A,r))break A;(i=e[a+688>>2])&&xt(i),xt(a),e[t>>2]=0}e[t>>2]=qe(A),A=qA(r,A),qa(r=e[t>>2],r+228|0,0)&&(ma(e[e[32972]+60>>2]),g[0|A]=0,s=-1),a=e[t>>2],e[a+292>>2]=s}else if(!a)break e;g[a+268|0]=0}return s}function Hi(A){var t=0,r=0;return(0|(t=e[A+76>>2]))>=0&(!t|e[56823]!=(-1073741825&t))?(r=e[(t=A+76|0)>>2],e[t>>2]=r||1073741823,(0|(r=e[A+4>>2]))==e[A+8>>2]?A=Zi(A):(e[A+4>>2]=r+1,A=l[0|r]),e[t>>2]=0,A):(0|(t=e[A+4>>2]))!=e[A+8>>2]?(e[A+4>>2]=t+1,l[0|t]):Zi(A)}function va(A,t,r){var a=0,s=0;e:{A:{if(r>>>0>=4){if(3&(A|t))break A;for(;;){if(e[A>>2]!=e[t>>2])break A;if(t=t+4|0,A=A+4|0,!((r=r-4|0)>>>0>3))break}}if(!r)break e}for(;;){if((0|(a=l[0|A]))==(0|(s=l[0|t]))){if(t=t+1|0,A=A+1|0,r=r-1|0)continue;break e}break}return a-s|0}return 0}function za(A,t){var r,a=0,s=0,i=0;J=r=J-16|0,t?(Aa(r,s=((a=t>>31)^t)-a|0,0,0,0,(a=Ye(s))+81|0),s=0+e[r+8>>2]|0,a=(65536^e[r+12>>2])+(16414-a<<16)|0,i=-2147483648&t|(a=s>>>0<i>>>0?a+1|0:a),a=e[r+4>>2],t=e[r>>2]):t=0,e[A>>2]=t,e[A+4>>2]=a,e[A+8>>2]=s,e[A+12>>2]=i,J=r+16|0}function si(A){var t,r=0,a=0,s=0;if((0|(r=Vs(A,61)))==(0|A))return 0;e:if(!l[(t=r-A|0)+A|0]&&(r=e[56800])&&(a=e[r>>2])){for(;;){if(C0(A,a,t)||(a=e[r>>2]+t|0,l[0|a]!=61)){if(a=e[r+4>>2],r=r+4|0,a)continue;break e}break}s=a+1|0}return s}function xi(A){var t=0,r=0;e:if(!((0|(r=e[34461]))<=0)){for(;;){if(!Br(A,z(t,44)+137856|0)){e[34457]=t;break e}if((0|r)==(0|(t=t+1|0)))break}return-1}return(A=(0|t)==(0|r))?-1:((0|(A=A?-1:t))!=e[36114]&&(e[36115]=0,Ya(A),e[36114]=A,e[36115]=e[36115]+1),t)}function vn(A,t,r,a){var s=0,i=0;e:if((32|l[0|t])!=32){if(s=((0|a)>2)<<1,i=Ss(A,t,r,s=(0|a)>1?4|s:s),l[0|r]!=21)for(s|=1,t=t+i|0,i=1;;){if((32|l[0|t])==32)break e;if(t=Ss(A,t,r,s)+t|0,i=i+1|0,l[0|r]==21)break}return qA(189088,r),0}return rt(A,r,a,i),t}function zr(A,t){var r,a=0,s=0,i=0;if(A>>>0<=127)return g[0|t]=A,1;if(A>>>0>=1114112)return g[0|t]=32,1;for(a=z(r=A>>>0<2048?1:A>>>0<65536?2:3,6),g[0|t]=l[r+93842|0]|A>>>a;a=a-6|0,g[(s=s+1|0)+t|0]=A>>>a&63|128,(0|(i=i+1|0))!=(0|r););return r+1|0}function f0(A){var t=0,r=0;e:{if((0|(t=e[A+12>>2]))>=e[A+16>>2]){if(t=0,(0|(r=0|Te(e[A+8>>2],A+24|0,2048)))<=0){if(!r|(0|r)==-44)break e;return e[56798]=0-r,0}e[A+16>>2]=r}r=t,t=A+t|0,e[A+12>>2]=r+M[t+40>>1],r=e[t+36>>2],e[A>>2]=e[t+32>>2],e[A+4>>2]=r,t=t+24|0}return t}function p0(A,t){var r,a=0;if(a=e[A+632>>2])return!!(0|Lr(a,t));e:{A:{if((0|(r=e[A+600>>2]))>0){if(a=0,(t=t-r|0)-1>>>0<255)break A;break e}if((a=t-192|0)>>>0<=413)return 128&l[344+(l[a+94240|0]+A|0)|0];if(a=0,t>>>0>255)break e}a=128&l[344+(A+t|0)|0]}return a}function Ms(A,t,r){var a,s,i;return i=(a=A*A)*(a*a)*(158969099521155e-24*a-25050760253406863e-24)+(a*(27557313707070068e-22*a-.0001984126982985795)+.00833333333332249),s=a*A,r?A-(a*(.5*t-i*s)-t+.16666666666666632*s):s*(a*i-.16666666666666632)+A}function ii(A,t){var r,a=0,s=0,i=0;J=r=J-16|0,t?(Aa(r,a=t,0,0,0,(t=Ye(t))+81|0),a=0+e[r+8>>2]|0,t=(65536^e[r+12>>2])+(16414-t<<16)|0,i=s>>>0>a>>>0?t+1|0:t,s=e[r+4>>2],t=e[r>>2]):t=0,e[A>>2]=t,e[A+4>>2]=s,e[A+8>>2]=a,e[A+12>>2]=i,J=r+16|0}function h0(A){var t,r=0;J=t=J-16|0,g[t+15|0]=10;e:{if(!(r=e[A+16>>2])){if(Mn(A))break e;r=e[A+16>>2]}(0|r)==(0|(r=e[A+20>>2]))|e[A+80>>2]==10?ct[e[A+36>>2]](A,t+15|0,1):(e[A+20>>2]=r+1,g[0|r]=10)}J=t+16|0}function Ri(A){var t,r=0;return r=e[A+72>>2],e[A+72>>2]=r-1|r,e[A+20>>2]!=e[A+28>>2]&&ct[e[A+36>>2]](A,0,0),e[A+28>>2]=0,e[A+16>>2]=0,e[A+20>>2]=0,4&(r=e[A>>2])?(e[A>>2]=32|r,-1):(t=e[A+44>>2]+e[A+48>>2]|0,e[A+8>>2]=t,e[A+4>>2]=t,r<<27>>31)}function ni(A){var t=0;e:{A:{r:{s:{if((0|(A=o0(A)))<=268437502){if(!A)break e;if((0|A)==268436479)break A;if((0|A)!=268437247)break s;return 2}if((0|A)==268437503|(0|A)==268437759)break r;if((0|A)==268439295)break e}return-1}return 2}t=1}return t}function HA(A){var t=0,r=0,a=0;e:{if(3&(t=A))for(;;){if(!l[0|t])break e;if(!(3&(t=t+1|0)))break}for(;r=t,t=t+4|0,!(~(a=e[r>>2])&a-16843009&-2139062144););for(;r=(t=r)+1|0,l[0|t];);}return t-A|0}function _a(A,t,r){var a,s=0,i=0,o=0;e[A+112>>2]=t,e[A+116>>2]=r,a=e[A+4>>2],s=e[A+44>>2]-a|0,e[A+120>>2]=s,e[A+124>>2]=s>>31,s=e[A+8>>2],t|r&&((0|r)>=(0|(o=(i=s-a|0)>>31))&t>>>0>=i>>>0|(0|r)>(0|o)||(s=t+a|0)),e[A+104>>2]=s}function Bn(A,t){var r,a,s=0;if(be(+A),r=0|X(1),a=0|X(0),(0|(s=r>>>20&2047))!=2047){if(!s)return A==0?s=0:(A=Bn(18446744073709552e3*A,t),s=e[t>>2]+-64|0),e[t>>2]=s,A;e[t>>2]=s-1022,R(0,0|a),R(1,-2146435073&r|1071644672),A=+re()}return A}function vi(A,t){var r,a,s=0;return(a=1-(s=.5*(r=A*A)))+(1-a-s+(r*(r*(r*(2480158728947673e-20*r-.001388888888887411)+.0416666666666666)+(s=r*r)*s*(r*(-11359647557788195e-27*r+2087572321298175e-24)-27557314351390663e-23))-A*t))}function ps(A,t,r){var a=0,s=0;if(t)for(;r=r-1|0,s=A,A=ui(A,t,10),a=$,g[0|r]=s-It(A,a,10,0)|48,s=t>>>0>9,t=a,s;);if(A)for(;t=(A>>>0)/10|0,g[0|(r=r-1|0)]=A-z(t,10)|48,a=A>>>0>9,A=t,a;);return r}function yn(A,t){var r=0,a=0,s=0;e:if(A){for(;s=g[t+r|0],(a=e[(r<<2)+A>>2])&&(r=r+1|0,(0|s)==(0|a)););A:switch(a-34|0){case 0:case 5:break A;default:break e}if(!s)return 0}return 1}function m0(A,t,r){var a,s=0;return J=a=J-16|0,!(64&t)&&(s=0,4259840&~t)||(e[a+12>>2]=r+4,s=e[r>>2]),e[a>>2]=s,e[a+4>>2]=0,(A=0|ze(-100,0|A,32768|t,0|a))>>>0>=4294963201&&(e[56798]=0-A,A=-1),J=a+16|0,A}function C0(A,t,r){var a=0,s=0,i=0;if(!r)return 0;e:if(a=l[0|A]){for(;;){if((s=l[0|t])&&!(!(r=r-1|0)|(0|a)!=(0|s))){if(t=t+1|0,a=l[A+1|0],A=A+1|0,a)continue;break e}break}i=a}return(255&i)-l[0|t]|0}function Vi(A,t){var r,a=0;J=a=J-128|0,a=jA(a,0,128),g[a+98|0]=9,g[a+66|0]=9,g[a+34|0]=A,b[a+68>>1]=1,r=e[36125],e[a+104>>2]=r,e[a+72>>2]=r,e[a+40>>2]=e[144464+(A<<2)>>2],g[a+2|0]=9,e[a+8>>2]=r,tr(0,0,a+32|0,t,0),J=a+128|0}function b0(A){var t=0,r=0,a=0;if(g[e[A>>2]]-48>>>0>=10)return 0;for(;a=e[A>>2],r=-1,t>>>0<=214748364&&(r=(0|(r=g[0|a]-48|0))>(2147483647^(t=z(t,10)))?-1:r+t|0),e[A>>2]=a+1,t=r,g[a+1|0]-48>>>0<10;);return t}function I0(A,t){var r=0;if(!(!A|e[A>>2]-48>>>0>=10)){if(e[A>>2]-48>>>0<10)for(;r=(e[A>>2]+z(r,10)|0)-48|0,e[(A=A+4|0)>>2]-48>>>0<10;);(0|t)==1&&(r=(0|Ht(e[A>>2]))==115?z(r,1e3):r)}return r}function Or(A){var t=0;t=1;e:{switch(0|Wa(A)){case 30:if(t=0,(0|A)==160|(0|A)==8199|(0|A)==8239)break e;return 1;case 0:if(A-9>>>0<5)return 1;if((0|A)==133)break e;break;case 28:case 29:break e}t=0}return t}function w0(A,t,r){var a,s=0;return J=a=J-16|0,g[a+6|0]=0,g[a+7|0]=95,s=zr(s=t,t=a+8|0)+a|0,g[s+8|0]=32,g[s+9|0]=0,RA(A,a+7|0,r)||(g[a+7|0]=32,RA(A,t,r)||qt(A,t,r,20,0,0,0)),J=a+16|0,g[0|r]}function k0(A){var t=0,r=0;r=170;e:if(!((0|A)<170))for(;;){if((0|A)==(0|r))return M[101616+(t<<1|2)>>1];if((2147483646&(t=t+2|0))==124)break e;if(!((0|(r=M[101616+(t<<1)>>1]))<=(0|A)))break}return 0}function It(A,t,r,a){var s,i,o,c,f=0,m=0;return c=z(f=r>>>16|0,m=A>>>16|0),f=(65535&(m=((o=z(s=65535&r,i=65535&A))>>>16|0)+z(m,s)|0))+z(f,i)|0,$=(z(t,r)+c|0)+z(A,a)+(m>>>16)+(f>>>16)|0,65535&o|f<<16}function Ht(A){var t=0,r=0,a=0,s=0;for(t=2778;;){if((0|(r=e[1040+((a=(t+s|0)/2|0)<<4)>>2]))==(0|A))return(t=e[1048+(a<<4)>>2])||A;if(!((0|(s=(r=A>>>0>r>>>0)?a+1|0:s))<=(0|(t=r?t:a-1|0))))break}return A}function En(A){var t=0,r=0,a=0,s=0;for(t=2778;;){if((0|(r=e[1040+((a=(t+s|0)/2|0)<<4)>>2]))==(0|A))return(t=e[1044+(a<<4)>>2])||A;if(!((0|(s=(r=A>>>0>r>>>0)?a+1|0:s))<=(0|(t=r?t:a-1|0))))break}return A}function is(A){var t,r=0;return J=t=J-112|0,(A=0|Ze(0|A,0|t))>>>0>=4294963201&&(e[56798]=0-A,A=-1),r=0-e[56798]|0,A||(r=-31,(61440&e[t+12>>2])!=16384&&(r=e[t+40>>2])),J=t+112|0,r}function x0(A,t,r){var a;if(!(a=e[A+16>>2]))return e[A+36>>2]=1,e[A+24>>2]=r,void(e[A+16>>2]=t);e:{if((0|t)==(0|a)){if(e[A+24>>2]!=2)break e;return void(e[A+24>>2]=r)}g[A+54|0]=1,e[A+24>>2]=2,e[A+36>>2]=e[A+36>>2]+1}}function ta(A,t,r,a,s){var i;if(J=i=J-256|0,!(73728&s|(0|r)<=(0|a))){if(jA(i,255&t,(r=(a=r-a|0)>>>0<256)?a:256),!r)for(;Xr(A,i,256),(a=a-256|0)>>>0>255;);Xr(A,i,a)}J=i+256|0}function hs(A,t,r){var a=0;e:{if(A){if(a=e[A>>2]){xt(e[a+4>>2]),a=e[A>>2];break e}if(a=Ct(16),e[A>>2]=a,a)break e;t=48}return t}return e[a>>2]=0,e[a+4>>2]=Ji(r),A=e[A>>2],e[A+8>>2]=0,e[A+12>>2]=0,t}function ra(A){var t=0,r=0;Ni(A),ct[e[A+12>>2]](A),1&g[0|A]||((t=e[A+52>>2])&&(e[t+56>>2]=e[A+56>>2]),(r=e[A+56>>2])&&(e[r+52>>2]=t),e[56816]==(0|A)&&(e[56816]=r),xt(e[A+96>>2]),xt(A))}function ms(A){var t=0,r=0;t=1;e:{A:{r:{s:switch((r=Wa(A))-9|0){case 1:break e;case 6:case 18:break r;case 0:break s;default:break A}return(0|Ht(A))!=(0|A)}return Fe(A,r)>>>15&1}t=0}return t}function Wi(A){var t,r,a,s=0,i=0;if(a=HA(A)+1|0,s=e[33282],(0|(r=(t=e[33287])+a|0))>=e[33286]){if(!(s=Kr(s,i=r+1e3|0)))return-1;e[33286]=i,e[33282]=s}return wt(s+t|0,A,a),e[33287]=r,t}function Mn(A){var t=0;return t=e[A+72>>2],e[A+72>>2]=t-1|t,8&(t=e[A>>2])?(e[A>>2]=32|t,-1):(e[A+4>>2]=0,e[A+8>>2]=0,t=e[A+44>>2],e[A+28>>2]=t,e[A+20>>2]=t,e[A+16>>2]=t+e[A+48>>2],0)}function v0(A,t,r,a){e:if(A){A:switch(t+2|0){case 0:return void(g[0|A]=r);case 1:return void(b[A>>1]=r);case 2:case 3:return void(e[A>>2]=r);case 5:break A;default:break e}e[A>>2]=r,e[A+4>>2]=a}}function ji(A,t,r,a,s,i,o,c,f){var m;J=m=J-16|0,ea(m,t,r,a,s,i,o,c,-2147483648^f),a=e[m>>2],r=e[m+4>>2],t=e[m+12>>2],e[A+8>>2]=e[m+8>>2],e[A+12>>2]=t,e[A>>2]=a,e[A+4>>2]=r,J=m+16|0}function Br(A,t){var r=0,a=0;e:if(!(!(r=l[0|A])|(0|r)!=(0|(a=l[0|t]))))for(;;){if(a=l[t+1|0],!(r=l[A+1|0]))break e;if(t=t+1|0,A=A+1|0,(0|r)!=(0|a))break}return r-a|0}function Bi(A,t){var r=0,a=0,s=0;if(!(r=e[A>>2]))return 84399;if(e[A+4>>2]!=(0|t))for(;;){if(!(r=e[(a=A+8|0)>>2]))return 84399;if(s=A,A=a,e[s+12>>2]==(0|t))break}return r}function Gn(A,t,r){var a=0,s=0,i=0;e:if(r){for(;;){if(!(!(a=e[t>>2])|!(s=e[A>>2])|(0|a)!=(0|s))){if(t=t+4|0,A=A+4|0,r=r-1|0)continue;break e}break}i=s-a|0}return i}function aa(A){var t,r=0,a=0;if((0|(t=e[36115]))>0)for(;;){if(!(!(a=e[144464+(r<<2)>>2])|e[a>>2]!=(0|A)))return l[a+10|0];if((0|t)==(0|(r=r+1|0)))break}return 0}function oi(A){var t,r;return(A=(t=e[33175])+(r=A+7&-8)|0)>>>0<=t>>>0&&r||A>>>0>we.byteLength/65536<<16>>>0&&!(0|Se(0|A))?(e[56798]=48,-1):(e[33175]=A,t)}function Cs(A){var t=0;e:if(!((t=Wa(A))>>>0>27)){if(!(1<<t&134259072)){if((0|t)==6)return 1;if((0|t)!=9)break e;return(0|En(A))!=(0|A)}return Fe(A,t)>>>14&1}return 0}function Dn(A,t){var r=0;return g[0|A]=t>>>24,g[0|(r=(t>>>0>16777215)+A|0)]=t>>>16,g[0|(r=r+!!(16711680&t)|0)]=t>>>8,g[0|(r=r+!!(65280&t)|0)]=t,g[r+!!(255&t)|0]=0,A}function Qn(A,t){e:if((0|(A=Cr(A,t)))<=268437502){if(!A|(0|A)==268436479|(0|A)!=268437247)break e;return}}function Tn(A){var t=0;return t=e[A>>2]-1|0,(t=g[121600+(z(0-t&t,124511785)>>>27|0)|0])||(A=e[A+4>>2],t=(A=g[121600+(z(0-A&A,124511785)>>>27|0)|0])?A+32|0:0),t}function Ui(A){var t=0,r=0,a=0;e:{if(!((t=Wa(A))>>>0>27)){if(r=1,116672&(a=1<<t))break e;if(134227968&a)return Fe(A,t)>>>10&1}r=0}return r}function ns(A){var t=0,r=0,a=0;e:{if(!((t=Wa(A))>>>0>27)){if(r=1,34752&(a=1<<t))break e;if(134227968&a)return Fe(A,t)>>>10&1}r=0}return r}function Ki(){var A,t=0;(A=e[56797])&&((t=e[A+8>>2])&&ct[e[e[t>>2]+12>>2]](t),(t=e[A+4>>2])&&ct[e[e[t>>2]+16>>2]](t),xt(A)),e[56797]=0,e[56797]=rs()}function B0(A,t){var r=0;return A&&(r=It(A,0,t,0),(A|t)>>>0<65536||(r=$?-1:r)),!(A=Ct(r))|!(3&l[A-4|0])||jA(A,0,r),A}function Pn(A,t){var r,a;a=e[130128+(t-z(r=(0|t)/100|0,100)<<2)>>2],e[A+100>>2]=a,e[A+96>>2]=a,t+99>>>0>=199&&(e[A+100>>2]=e[130128+(r<<2)>>2])}function zn(A){var t=0;(t=Ct(1344))&&(A=wt(t,A,1344),t=216192+(e[50758]<<4)|0,e[t>>2]=11,e[t+8>>2]=A,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)}function bs(A,t){var r=0;e:if(r=e[A>>2])for(;;){if(t&&!Br(t,r))break e;if(!(r=e[(A=A+8|0)>>2]))break}return e[A+4>>2]}function Zi(A){var t,r=0;return J=t=J-16|0,r=-1,Ri(A)||(0|ct[e[A+32>>2]](A,t+15|0,1))==1&&(r=l[t+15|0]),J=t+16|0,r}function Lr(A,t){var r=0,a=0;if(t){for(;a=A,(r=e[A>>2])&&(A=a+4|0,(0|t)!=(0|r)););return r?a:0}return(y0(A)<<2)+A|0}function Sn(A,t){var r=0,a=0;if(r=M[A>>1])for(;;){if(a=a+1|0,(0|t)==(0|r))return a;if(!(r=M[(a<<1)+A>>1]))break}return 0}function Xi(A,t){var r=0,a=0;t>>>0<=31?(a=e[A>>2],r=A+4|0):(t=t-32|0,r=A),r=e[r>>2],e[A>>2]=a<<t,e[A+4>>2]=r<<t|a>>>32-t}function yi(A,t){var r=0,a=0;r=e[A+4>>2],t>>>0<=31?a=e[A>>2]:(t=t-32|0,a=r,r=0),e[A+4>>2]=r>>>t,e[A>>2]=r<<32-t|a>>>t}function Sa(A){var t=0;A=A||1;e:{for(;;){if(t=Ct(A))break e;if(!(t=e[57276]))break;ct[0|t]()}nA(),xe()}return t}function Ei(A){return A>>>0<=131071?l[117424+(A>>>3&31|l[117424+(A>>>8|0)|0]<<5)|0]>>>(7&A)&1:A>>>0<196606}function Fn(A,t,r,a,s,i,o,c,f){e[A>>2]=t,e[A+4>>2]=r,e[A+8>>2]=a,e[A+12>>2]=65535&s|(f>>>16&32768|s>>>16&32767)<<16}function $a(A,t,r){return r?(0|A)==(0|t)?1:!Br(e[A+4>>2],e[t+4>>2]):e[A+4>>2]==e[t+4>>2]}function Nn(A){var t=0;(0|(t=0|CA(-100,0|A,0)))==-31&&(t=0|mA(0|A)),t>>>0>=4294963201&&(e[56798]=0-t)}function qi(){var A;A=Ct(84)+80|0,e[A>>2]=125420,e[A>>2]=125380,e[A>>2]=125400,YA(0|A,125512,9),xe()}function On(A){var t,r;return t=Hi(A),r=Hi(A),Hi(A)<<16&16711680|r<<8&65280|255&t|Hi(A)<<24}function li(A){var t=0;return A?(t=1,A-9472>>>0<160|A-65529>>>0<7||(t=Or(A)),t):0}function Ln(A,t){var r;return r=t>>31,e[A+76>>2],function(a,s,i){return e[a+20>>2]!=e[a+28>>2]&&(ct[e[a+36>>2]](a,0,0),!e[a+20>>2])||(e[a+28>>2]=0,e[a+16>>2]=0,e[a+20>>2]=0,ct[e[a+40>>2]](a,s,i,0),(0|$)<0)?-1:(e[a+4>>2]=0,e[a+8>>2]=0,e[a>>2]=-17&e[a>>2],0)}(A,t,r)}function y0(A){var t=0,r=0;for(r=A;r=(t=r)+4|0,e[t>>2];);return t-A>>2}function E0(A,t){return g[0|A]=t,g[A+4|0]=0,g[A+3|0]=t>>>24,g[A+2|0]=t>>>16,g[A+1|0]=t>>>8,A}function sa(A,t){var r=0;return(-1>>>(r=31&t)&A)<<r|((r=A)&-1<<(A=0-t&31))>>>A}function Mi(A,t){var r=0;return(0|A)==73&&(r=305,l[t+173|0])||(r=Ht(A)),r}function ma(A){e[36114]!=(0|A)&&(e[36115]=0,Ya(A),e[36114]=A,e[36115]=e[36115]+1)}function Yn(A){return A?e[34460]+A|0:(Hn(85328,20,e[30450]),e[32320])}function Ji(A){var t,r;return(r=Ct(t=HA(A)+1|0))?wt(r,A,t):0}function ja(){var A;e[33287]=0,(A=e[33282])&&(xt(A),e[33286]=0,e[33282]=0)}function fr(A,t,r){var a;J=a=J-16|0,e[a+12>>2]=r,Qs(A,t,r),J=a+16|0}function Hn(A,t,r){e[r+76>>2],A=u0(A,t,r)}function Gs(A,t){return t?A<<24|(65280&A)<<8|A>>>8&65280|A>>>24:A}function ci(A){return A-8212>>>0>=12?Sn(93856,A):1}function M0(A){var t=0;A&&((t=e[A+688>>2])&&xt(t),xt(A))}function Rn(A){return(0|A)<=127?es(87712,A):0}function Vn(A){return!(A=l[0|A]?1:va(A,A+1|0,3))}function G0(A){(A=(0|(A=0|GA(0|A)))!=27?A:0)&&(e[56798]=A)}function Ds(A,t,r){return A|=0,t|=0,0|ct[0|(r|=0)](A,t)}function es(A,t){return A=Vs(A,t),l[0|A]==(255&t)?A:0}function Wn(A,t){return Oe(A,t,2147483647),$=ge,OA}function Gi(A){return A?31-Ye(A-1^A)|0:32}function Xr(A,t,r){32&l[0|A]||u0(t,r,A)}function ar(A,t,r){g[(Vr(A,t,r)+r|0)-1|0]=0}function gi(A){return xn(A,188776,189328)}function D0(A,t){t|=0,e[8+(A|=0)>>2]=t}function Qs(A,t,r){return ir(A,t,r,0,0)}function Ts(A){return e[12+(A|=0)>>2]}function Ks(A){return e[16+(A|=0)>>2]}function jn(A){return e[20+(A|=0)>>2]}function Ca(A){return e[8+(A|=0)>>2]}function Q0(A){return e[4+(A|=0)>>2]}function Un(A){return e[(A|=0)>>2]}function ui(A,t,r){return Oe(A,t,r)}function Di(A){(A|=0)&&xt(A)}function ia(A,t){qA(HA(A)+A|0,t)}function Kn(A){return 0|A}function _i(A){return 0}function Zs(A){xt(A|=0)}function T0(A){}N(k=l,1024,""),N(k,45536,"HhYWFhgWFhYXExYaFhIWFg4ODg4ODg4ODg4WFhoaGhYWCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoXFhMZERkGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBhcaExo="),N(k,45664,""),N(k,81428,"ggAAAAAAAAIAAAAAAAAAAgAAAAAAAAAC"),N(k,81475,"AgAAAAAAACAAAAAAAAAAIA=="),N(k,81506,"IA=="),N(k,81522,"IAAAAAAAAAAg"),N(k,81618,"IA=="),N(k,81634,"IA=="),N(k,81650,"IAAAAAAAAAAg"),N(k,81682,"IAAAAAAAAAAgAAAAAAAAACAAAAAAAIAAAAAAAAAAgA=="),N(k,81728,"gAAAAAAAAACAAAAAAAAAAIA="),N(k,81760,"gAAAAAAAAACA"),N(k,81904,"gAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAU"),N(k,81961,"FAAAAAAAAAAU"),N(k,81985,"FAAAAAAAAAAE"),N(k,82009,"BAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA="),N(k,82097,"EAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA="),N(k,82169,"EAAAAAAAAAAQAAAAAAAAABAAAAAAAACA"),N(k,82224,"gAAAAAAAAACA"),N(k,82272,"gAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),N(k,82353,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),N(k,82393,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAQAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAABAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),N(k,82625,"BAAAAAAAAAAE"),N(k,82649,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAQAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),N(k,83033,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),N(k,83097,"BAAAAAAAAAAE"),N(k,83121,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAQAAAEAAAAAFAAAAQAAAAgEAAABAAAAAQQAAAAAAAACBAAAAAAAAAgEAAAAAAAAAAQAAAAAAAAABAAAAQAAAAgEAAAAAAAAAQQAAAAAAAAARAAAAAAAAAAEAAAAAAAAAAQA=="),N(k,83288,"QA=="),N(k,83303,"AkAAAAAAAAAQQAAAEAAAAIBAAAAAAAAACEA="),N(k,83352,"QAAAAAAAABBAAAAQAAAAgAAg"),N(k,83379,"gAAAAABAAACQggAAIEAAAJAAAAAAAAAAgAAAAABAAACQggAAIEAAAJCCAAAgAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAQAAAkIIAACBAAACQggAAIEAAAJCCAAAgQAAAkAAAAEBAAACQAAAAYEAAAJCCAABgQAAAkIIAACBAAACQggAAIEAAAJCCAAAgQAAAkIIAACBAAACQggAAIAAAAIAAAAAEAAAAAAAAAIAAAAAAAAAACAAAAAAAAAAEAAAAAAAAACAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAkAAAAAAAAAQQAAAEAAAAIBAAAAAAAAABEAAAAAAAAAIAAAAgIIAAAAAAACAgAAAAAAAAIAAAAAAAAAAgIYAAAAAAACAhgAAAAAAAICAAAAAAAAAgIAAAAAAAACAggAAAAAAAICAAAAAAAAAgIAAAAAAAACAgAAAAAAAAICAAAAAAAAAgJIAAACAAACAggAAAIAAAICCAAAAAAAAgIIAAAAAAACAggAAAIAAAICCAAAAAAAAgIIAAAAAAACAggAAAAAAAICAAAAAAAAAgIAAAAAAAACAggAAAAAAAICGAAAAAAAAgIIAAAAAAACAhgAAAAAAAICCAAAAAAAAgIIAAAAAAACAggAAAAAAAICCAAAAAAAAgIAAAAAAAACAggAAAAAAAICAAAAAAAAAgIIAAAAAAACAggAAAAAAAICCAAAAAAAAgIAAAAAAAACAggAAAAAAAICGAAAAAAAAgJIAAAAAAACAhgAAAAAAAICAAAAAAAAAgIAAAAAAAACAhg=="),N(k,83999,""),N(k,93904,"ICAgICAgICAgICYlKyNTRFpBTCEgQD9KTktWP1RYP1dBQkNIRkdZPT0sLCcqICAAIAAhACIAsAIkACUA5gDIAigAKQB+AisAzAItAC4ALwBSAjEAMgBcAjQANQA2ADcAdQI5ANACsgI8AD0APgCUAlkCUQKyA+cA8ABbAkYAYgInAWoCXwJLAGsCcQJLAVQCpgNjAoACgwK4A4oCjAJTAccD+ACSAioDXABdAF4AXwBgAGEAYgBjAGQAZQBmAGECaABpAGoAawBsAG0AbgBvAHAAcQByAHMAdAB1AHYAdwB4AHkAegB7AHwAfQADA38APT0sLCcnAAMCBAUGBxoAAAAAAQECAwMEBQYHBwgJCgsAAAEBAgIDAwQFBgcHCAkKAAABAgMDAwQFBgcHBwgJClNldFdvcmRTdHJlc3MA5ADrAO8A9gD8AP8AAAAAAAAAYWFhYWFhYWNlZWVlaWlpaWRub29vb28Ab3V1dXV5dHNhYWFhYWFhY2VlZWVpaWlpZG5vb29vbwBvdXV1dXl0eWFhYWFhYWNjY2NjY2NjZGRkZGVlZWVlZWVlZWVnZ2dnZ2dnZ2hoaGhpaWlpaWlpaWlpaWlqamtra2xsbGxsbGxsbGxubm5ubm5ubm5vb29vb29vb3JycnJycnNzc3Nzc3NzdHR0dHR0dXV1dXV1dXV1dXV1d3d5eXl6enp6enpzYmJiYgAAb2NjZGRkZGRlZWVmZmdnaGlpa2tsbG1ubm9vb29vcHB5AABzc3R0dHR1dXV2eXl6enp6enp6AAAAd3R0dGtkZGRsbGxubm5hYWlpb291dXV1dXV1dXV1ZWFhYWFhYWdnZ2dra29vb296empkZGRnZ3d3bm5hYWFhb29hYWFhZWVlZWlpaWlvb29vcnJycnV1dXVzc3R0eXloaG5kb296emFhZWVvb29vb29vb3l5bG50amRxYWNjbHRzegAAYnV2ZWVqanFxcnJ5eWFhYWJvY2RkZWVlZWVl"),N(k,94846,"TG9va3VwRGljdDIAAAAAAAAAgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAoQCiAKMApAClAKYApwCoAKkAqgCrAKwArQCuAK8AsACxALIAswC0ALUAtgC3ALgAuQC6ALsAvAC9AL4AvwDAAMEAwgDDAMQAxQDGAMcAyADJAMoAywDMAM0AzgDPANAA0QDSANMA1ADVANYA1wDYANkA2gDbANwA3QDeAN8A4ADhAOIA4wDkAOUA5gDnAOgA6QDqAOsA7ADtAO4A7wDwAPEA8gDzAPQA9QD2APcA+AD5APoA+wD8AP0A/gD/AIAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAQB2AJBAaQAPQFaAacAqABgAV4BZAF5Aa0AfQF7AbAABQHbAkIBtAA+AVsBxwK4AGEBXwFlAXoB3QJ+AXwBVAHBAMIAAgHEADkBBgHHAAwByQAYAcsAGgHNAM4ADgEQAUMBRwHTANQAUAHWANcAWAFuAdoAcAHcAN0AYgHfAFUB4QDiAAMB5AA6AQcB5wANAekAGQHrABsB7QDuAA8BEQFEAUgB8wD0AFEB9gD3AFkBbwH6AHEB/AD9AGMB2QKAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAmAdgCowCkAP3/JAGnAKgAMAFeAR4BNAGtAP3/ewGwACcBsgCzALQAtQAlAbcAuAAxAV8BHwE1Ab0A/f98AcAAwQDCAP3/xAAKAQgBxwDIAMkAygDLAMwAzQDOAM8A/f/RANIA0wDUACAB1gDXABwB2QDaANsA3ABsAVwB3wDgAOEA4gD9/+QACwEJAecA6ADpAOoA6wDsAO0A7gDvAP3/8QDyAPMA9AAhAfYA9wAdAfkA+gD7APwAbQFdAdkCgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAE4AVYBpAAoATsBpwCoAGABEgEiAWYBrQB9Aa8AsAAFAdsCVwG0ACkBPAHHArgAYQETASMBZwFKAX4BSwEAAcEAwgDDAMQAxQDGAC4BDAHJABgBywAWAc0AzgAqARABRQFMATYB1ADVANYA1wDYAHIB2gDbANwAaAFqAd8AAQHhAOIA4wDkAOUA5gAvAQ0B6QAZAesAFwHtAO4AKwERAUYBTQE3AfQA9QD2APcA+ABzAfoA+wD8AGkBawHZAoAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAEEAgQDBAQEBQQGBAcECAQJBAoECwQMBK0ADgQPBBAEEQQSBBMEFAQVBBYEFwQYBBkEGgQbBBwEHQQeBB8EIAQhBCIEIwQkBCUEJgQnBCgEKQQqBCsELAQtBC4ELwQwBDEEMgQzBDQENQQ2BDcEOAQ5BDoEOwQ8BD0EPgQ/BEAEQQRCBEMERARFBEYERwRIBEkESgRLBEwETQROBE8EFiFRBFIEUwRUBFUEVgRXBFgEWQRaBFsEXASnAF4EXwSAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAD9//3//f+kAP3//f/9//3//f/9//3/DAatAP3//f/9//3//f/9//3//f/9//3//f/9//3/Gwb9//3//f8fBv3/IQYiBiMGJAYlBiYGJwYoBikGKgYrBiwGLQYuBi8GMAYxBjIGMwY0BjUGNgY3BjgGOQY6Bv3//f/9//3//f9ABkEGQgZDBkQGRQZGBkcGSAZJBkoGSwZMBk0GTgZPBlAGUQZSBv3//f/9//3//f/9//3//f/9//3//f/9//3/gACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAGCAZIKMArCCvIKYApwCoAKkAegOrAKwArQD9/xUgsACxALIAswCEA4UDhgO3AIgDiQOKA7sAjAO9AI4DjwOQA5EDkgOTA5QDlQOWA5cDmAOZA5oDmwOcA50DngOfA6ADoQP9/6MDpAOlA6YDpwOoA6kDqgOrA6wDrQOuA68DsAOxA7IDswO0A7UDtgO3A7gDuQO6A7sDvAO9A74DvwPAA8EDwgPDA8QDxQPGA8cDyAPJA8oDywPMA80DzgP9/4AAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAP3/ogCjAKQApQCmAKcAqACpANcAqwCsAK0ArgCvALAAsQCyALMAtAC1ALYAtwC4ALkA9wC7ALwAvQC+AP3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f8XINAF0QXSBdMF1AXVBdYF1wXYBdkF2gXbBdwF3QXeBd8F4AXhBeIF4wXkBeUF5gXnBegF6QXqBf3//f8OIA8g/f+AAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAChAKIAowCkAKUApgCnAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwQDCAMMAxADFAMYAxwDIAMkAygDLAMwAzQDOAM8AHgHRANIA0wDUANUA1gDXANgA2QDaANsA3AAwAV4B3wDgAOEA4gDjAOQA5QDmAOcA6ADpAOoA6wDsAO0A7gDvAB8B8QDyAPMA9AD1APYA9wD4APkA+gD7APwAMQFfAf8AgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAESASIBKgEoATYBpwA7ARABYAFmAX0BrQBqAUoBsAAFARMBIwErASkBNwG3ADwBEQFhAWcBfgEVIGsBSwEAAcEAwgDDAMQAxQDGAC4BDAHJABgBywAWAc0AzgDPANAARQFMAdMA1ADVANYAaAHYAHIB2gDbANwA3QDeAN8AAQHhAOIA4wDkAOUA5gAvAQ0B6QAZAesAFwHtAO4A7wDwAEYBTQHzAPQA9QD2AGkB+ABzAfoA+wD8AP0A/gA4AYAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAEOAg4DDgQOBQ4GDgcOCA4JDgoOCw4MDg0ODg4PDhAOEQ4SDhMOFA4VDhYOFw4YDhkOGg4bDhwOHQ4eDh8OIA4hDiIOIw4kDiUOJg4nDigOKQ4qDisOLA4tDi4OLw4wDjEOMg4zDjQONQ42DjcOOA45DjoO/f/9//3//f8/DkAOQQ5CDkMORA5FDkYORw5IDkkOSg5LDkwOTQ5ODk8OUA5RDlIOUw5UDlUOVg5XDlgOWQ5aDlsO/f/9//3//f+AAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAdIKIAowCkAB4gpgCnANgAqQBWAasArACtAK4AxgCwALEAsgCzABwgtQC2ALcA+AC5AFcBuwC8AL0AvgDmAAQBLgEAAQYBxADFABgBEgEMAckAeQEWASIBNgEqATsBYAFDAUUB0wBMAdUA1gDXAHIBQQFaAWoB3AB7AX0B3wAFAS8BAQEHAeQA5QAZARMBDQHpAHoBFwEjATcBKwE8AWEBRAFGAfMATQH1APYA9wBzAUIBWwFrAfwAfAF+ARkggACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAAh4DHqMACgELAQoepwCAHqkAgh4LHvIerQCuAHgBHh4fHiABIQFAHkEetgBWHoEeVx6DHmAe8x6EHoUeYR7AAMEAwgDDAMQAxQDGAMcAyADJAMoAywDMAM0AzgDPAHQB0QDSANMA1ADVANYAah7YANkA2gDbANwA3QB2Ad8A4ADhAOIA4wDkAOUA5gDnAOgA6QDqAOsA7ADtAO4A7wB1AfEA8gDzAPQA9QD2AGse+AD5APoA+wD8AP0AdwH/AIAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAKEAogCjAKwgpQBgAacAYQGpAKoAqwCsAK0ArgCvALAAsQCyALMAfQG1ALYAtwB+AbkAugC7AFIBUwF4Ab8AwADBAMIAwwDEAMUAxgDHAMgAyQDKAMsAzADNAM4AzwDQANEA0gDTANQA1QDWANcA2ADZANoA2wDcAN0A3gDfAOAA4QDiAOMA5ADlAOYA5wDoAOkA6gDrAOwA7QDuAO8A8ADxAPIA8wD0APUA9gD3APgA+QD6APsA/AD9AP4A/wCAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAEAQUBQQGsIB4gYAGnAGEBqQAYAqsAeQGtAHoBewGwALEADAFCAX0BHSC2ALcAfgENARkCuwBSAVMBeAF8AcAAwQDCAAIBxAAGAcYAxwDIAMkAygDLAMwAzQDOAM8AEAFDAdIA0wDUAFAB1gBaAXAB2QDaANsA3AAYARoC3wDgAOEA4gADAeQABwHmAOcA6ADpAOoA6wDsAO0A7gDvABEBRAHyAPMA9ABRAfYAWwFxAfkA+gD7APwAGQEbAv8AgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAEFAUEBrCAeIGABpwBhAakAGAKrAHkBrQB6AXsBsACxAAwBQgF9AR0gtgC3AH4BDQEZArsAUgFTAXgBfAHAAMEAwgACAcQABgHGAMcAyADJAMoAywDMAM0AzgDPABABQwHSANMA1ABQAdYAWgFwAdkA2gDbANwAGAEaAt8A4ADhAOIAAwHkAAcB5gDnAOgA6QDqAOsA7ADtAO4A7wARAUQB8gDzAPQAUQH2AFsBcQH5APoA+wD8ABkBGwL/AP3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9/wEJAgkDCQUJBgkHCQgJCQkKCQsJDgkPCRAJDQkSCRMJFAkRCRUJFgkXCRgJGQkaCRsJHAkdCR4JHwkgCSEJIgkjCSQJJQkmCScJKAkpCSoJKwksCS0JLgkvCV8JMAkxCTIJMwk0CTUJNgk3CTgJOQkgAD4JPwlACUEJQglDCUYJRwlICUUJSglLCUwJSQlNCTwJZAn9//3//f/9//3/IAAwADEAMgAzADQANQA2ADcAOAA5AP3//f/9//3//f8CAAAAAAAAAAEAAAADAAAA//36+Pb08vDu7Oro5uTi4N7c2tjW1NLQzszKyMbEwsC+vLq4trSysK6sqqimpKKgnpyamJaUkpCOjIqIhoSCgH58enh2dHJwbmxqaGZkYmBeXFpYVlRSUE5MSkhGREJAPjw6ODY0MjAuLCooJiQiIB4cGhgWFBIQDgwKCAYEAgAAAgQGCAoMDhASFBYYGhweICIkJigqLC4wMjQ2ODo8PkBCREZISkxOUFJUVlhaXF5gYmRmaGpsbnBydHZ4enx+gIKEhoiKjI6QkpSWmJqcnqCipKaoqqyusLK0tri6vL7AwsTGyMrMztDS1NbY2tze4OLk5ujq7O7w8vT2+Pr9///06uDWzMO6saifl4+Hf3hxamNcVlBKRD85NC8rJiIeGhcTEA0LCAYEAgEAAAAAAAAAAQIDBAUHCAoMDhATFRcaHR8iJSgsLjAyNDY5Oz1AQkVHSkxPUVRXWl1fYmVoa25xdHh7foGFiIuPkpaZnaCkqKyvs7e7v8PHy8/T19vgz8zJxsPAvbm0sKunopyXkoyGgXt1b2ljXVdQSkQ+ODMtJyIcFxINCAQCAgEAAAAAAAEBAgMEBQcICgwNDxIUFhkbHiEkJyotMDQ2ODo8P0FDRkhLTVBSVVhaXWBjZmlsb3J1eHt+gYWIi4+SlpmdoKSorK+zt7u/w8fLz9PX2+D/+fTu6eTf2tXQy8bBvbizr6qmoZ2ZlZCMiISAfXl1cW5qZ2NgXVlWU1BNSkdEQT48OTc0Mi8tKygmJCIgHhwaGRcVFBIRDw4NDAoJCAcGBQUEAwICAQE="),N(k,99845,"AQECAgMEBAUGBwgJCgsMDg8QEhMVFxgaHB4g0M7NzMrIx8XDwcC9u7i1s7CtqqejoJ2ZlpKPi4eEgHx4dHBtaWVhXVlVUU1KRkI+Ozc0MS8tKigmJCIgHhwaGRcVFBIRDw4NDAoJCAcGBQUEAwICAQE="),N(k,99973,"AQECAgMEBAUGBwgJCgsMDg8QEhMVFxgaHB4gmJmZmpydn6Gkp6mssLO2ur7BxcnN0dTY3N/j5urt8PL19/n7/P3+/v////////79+/r49vPx7uzp5uTg3drX09DMyMTAvLi0sKyno5+alpGNiIR/e3ZybWllYFxYVFBMSERAPDk1Mi8rKCYjIB0aFxUSDw0KCAcFAwIBAAAAAAD+///////+/fz6+Pb08e7r6OXh3trW0s3JxL+6trCrpqGclpGLhoB7dW9qZF9ZVE9JRD86NTArJiIdGRURDQoHBAMBAAAAAAAAAAABAQIEBQcJCw0QEhUYGx4iJSktMTU6PkNITFFXW15iZWhrbnF0dnh7fH6AgYKDg4SEg4OCgXJycXFwb21samhmZGFfXFpXVFFOS0hFQj87ODUyLywpJiMgHRsYFhQSEA4MCwoJCAcHBwcHBgUFBQUFBQUFBQYHBwgJCgwNDxASFBYYGx0gIyYpLC8zNzs/Q0dMUVZbYGVqb3R5f4SJj5Wboaets7rAx87V3OPq8fX3+vz9/v///v79/fz7+/r6+fj49/f29vX09PPz8vLx8PDv7u7t7Ovq6uno5+bl5OPi4eDe3dzb2djW1dPS0M7My8nHxcPAvry5t7Wyr62qp6ShnpqXlJCNiYWBfXl1cW1oZGFeW1dUUU1KRkNAPDk1Mi4qJyMfHBgUEQ0LCQcFBAMCAQAAAAAAAAAAAQEBAgIDAwQEBQYGBwgICQoLDAwNDg8QERITFBYXGBkbHB0fICIjJSYoKSstLzAyNDY4Ojw+QEJER0lLTlBSVVdaXV9iZWdqbXBzdnl8f4KGiYyQk5aanaCjpqmsr7K1uLu+wcTHys3Q09bZ3N/i5Ofp7O7w8vT2+Pr7/X9/f4CBg4SHiYyPkpaZnaGlqq6yt7vAxcnN0tba3uLm6u3w8/X4+vv8/f7+/fz7+ff08Ozn4tzVzsa9tKmekoiCfXdybGZgWlROSUI8NzItKCQfGxgUEQ4MCQcGBQQEBAQFBggKDRAUGB0jKS83PkdQWmRwfIOFiIqMjo+RkpOTAEAIAEYSAAAAAAAAGAwAAARQEgZOFgAAAAAAACI0AAAEWBYGUhYAAAAAAAAiQAAAAFwIAFxQAAAAAAAATAgBAABWBABeQgAAAAAAACIKAAAAPgoAPhQAAAAAAAAcEAAABEQSBkQWAAAAAAAAHiwAAAZAEABCIAAAAAAAACASAAACRC4AKiAAAAAAAAAuOgAABE4YBkgWAAAAAAAAKjQAAARYIgBAIAAAAAAAAC5SAAAAOAwAOBQAAAAAAAAYDAAAAEYSAEYYAAAAAAAAIBQAAAkAAAAJAAAAEAAAABAAAAAQAAAAFwAAADcAAAAgAAAAACgYCAAKNCAUCgYmGA4EAAYAAAAHAAAACQAAAAkAAAAUAAAAFAAAABQAAAAZAAAA5iAUCA=="),N(k,101072,"ZgNmAWYCpgSmAiYEpoooAmoDagFqAqoCbgNuAW4CrgIpALMEdAN0AXQCtAS0AgAAdAR6A3oBegK6An4BOQC+AgAApgMAAKYBAADmAwAAaAEAAGgCAAAoAwAA6AEAAOkBAABpBAAAqgMAAKoBAAAqAwAA6gMAAOoBAABsAgAArAEAACwDAAAsAgAAbQIAAG0EAACuBAAArgMAAK4BAADuAwAALgAAAO6LAABvAgAAMAIwAAAAcQEAADECAADxAQAAMQMAAHEEAABzAQAAMwIAAPMBMwAAADMAAAC0AwAAtAEAAPQCAAC0igAAdwEAADcCAAD3AQAAeAEAAHgCAAA4AgAA+AEAADkCAAD5AQAAeQQAALoEAAC6AwAAugEAADoEAAD6AgAA+gMAAHwCAAB+AgAAAAB/AQAAPwMAAP8BOACmAAEAgQBnBQAAKAEpBWkF6gAAAEIFAADDAEMdAADvBGwFLABsAAQAAACtAG0FAADuBAUAbgCxBPEEMQXxj7IAAAByBQAAMwVzAPQEtJoAAAgAtwCOADcVAAA3BQAAzQB3ALcIOAUAAG8FyQAJAbkAOQX6BAoAewW7ALwAvgB+AD8FPwEAAAsBAADMAIwAAAAAAGcAAABsDW0ALwGwAHEAdgVMBEwc6Y8AAOnPOY4AADnO"),N(k,101586,"sQNZAlsCswO5A1MByQPGA4MCxQOSApQCfgJ8AgAAqgBhgLIAMoCzADOAuQAxgLoAb4CwAmiAsQJmgrICaoCzAnKAtAJ5grUCe4K2AoGCtwJ3gLgCeYDAApSCwQKVguACY4LhAmyA4gJzgOMCeIBwIDCAcSBpgHQgNIB1IDWAdiA2gHcgN4B4IDiAeSA5gHogK4B7IC2AfCA9gH0gKIB+ICmAfyBugIAgMECBIDFAgiAyQIMgM0CEIDRAhSA1QIYgNkCHIDdAiCA4QIkgOUCKICtAiyAtQIwgPUCNIChAjiApQJAgYUCRIGVAkiBvQJMgeECUIFlClSBoQJYga0CXIGxAmCBtQJkgbkCaIHBAmyBzQJwgdEAAAAAAaXhjbXZsZA=="),N(k,101888,"AQAAAAoAAABkAAAA6AMAAAUAAAAyAAAA9AEAAAAXCgkYExgY"),N(k,101936,"///////9+fXy7uvo5OHe2tjV0s/MycbEwb+8ure1s7CurKmopaOhn56bmZiWlJKRj42LiYiHhYOCgX9+fHt6eHd2dXNycXBvbm1ramloZ2ZlZGNiYWBfXl1cW1pZWVhXVlVUU1JSUVBQT05NTExLS0pJSEdHRkVFRENDQkJBQEA/Pj49PTw7Ozo6OTk4ODc2NjU1NDQ0MzIyMTEwMC8vLi4uLS0sLCwrKyopKCgoJycnJiYmJSUlJCQjIyMjIiIiISEhICAfHx8eHh4dHR0dHBwbGxsbGhoaGhkZGRgYGBgXFxcXFhYWFRUVFRQUFBQTExMSEhERERAQEBAQEA8PDw8ODg4NDQ0MDAwMCwsLCwoKCgkJCQgICAAAAAAAAAAAeHl4d3d2dnV0dHNycXBwb29ubWxrampoZ2dmZmZlZWNiYmFgYF9eXVtaW1pZWFZVVlVVVFJRUE9NTk5MTUtLSklHSEZFRUVDQUA/Pz89PTs7Ozo4OTo4NjU0NDU0NDIwLy8tLi0="),N(k,102336,"FhYWFhYWFhUVFRUUFBMTEhEQDw8PDw8PDwAAAAAAAABkeGRpZG5uZF9kaXhpbn2Ch3N9ZGl4S2RLaXhVS2RpeFVpX3N4ZF9kbnhfaWRzeGRkZGl4ZGlfc3huX2RpeGRpaXp9bmlkaXhkaWl6fW5pZGl4X2lkc3huZGRkeGRkZGRkZGRk"),N(k,102480,"ZJZkaW5zbm5uZGmWaW59h4xzh2RpllppWnqHZFpkaZZkaWR6h2RkZGmWZGlpc4duaWRplmRpaXqCeH1kaZZkaW56fXNuZGmWZGlpeod4aWRplmRpaXOHbmlkZGRkZGRkZGRkZA=="),N(k,102592,"bnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRuZG5ubmRubnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRubm5ubm5ubnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRubm5ubm5ubnhkbm5ubm5ubg=="),N(k,102708,"rwAAAGQAAAAyAAAAMg=="),N(k,102744,"ZA=="),N(k,102764,"MjIoRlpkZGRGboeWZGRLZHiWAAAAAAAABwAAAA4AAAAVAAAAKAAAAFAAAAAAAAAAAFNBUFIAQwAAAAAARgAAAAAAAAABAAAAAgAAAAQAAAAPAAAAAAEAAAEBAAEBAgQAAAAAAPMAEAEAAQABAAEAAQAB8ADwAPA="),N(k,102898,"QABaAG4AgACPAJwAqQC1AMAAygDUAN0A5gDvAPcAAAEHAQ8BFgEeASUBLAEyATkBQAFGAUwBUgFYAV4BZAFqAW8BdQF6AYABhQGKAY8BlAGZAZ4BowGoAa0BsgG2AbsBwAHEAckBzQHRAdYB2gHeAeMB5wHrAe8B8wH3AfsBAAIDAgcCCwIPAhMCFwIbAh8CIgImAioCLQIxAjUCOAI8AkACQwJHAkoCTgJRAlQCWAJbAl8CYgJlAmkCbAJvAnMCdgJ5AnwCgAKDAoYCiQKMAo8CkgKWApkCnAKfAqICpQKoAqsCrgKxArQCtwK6Ar0CwALCAsUCyALLAs4C0QLUAtYC2QLcAt8C4gLkAucC6gLtAu8C8gL1AvcC+gL9AgADAgMFAwcDCgMNAw8DEgMVAxcDGgMcAx8DIQMkAycDKQMsAy4DMQMzAzYDOAM7Az0DQANCA0QDRwNJA0wDTgNRA1MDVQNYA1oDXQNfA2EDZANmA2gDawNtA28DcgN0A3YDeQN7A30DgAOCA4QDhgMAAAGqAqytAwQFsLGys7S0tgYHCLkJCrwMDQ4PEBESYWJjZGVmZ2hpamtsbW5vcHFyc3R1"),N(k,103360,"YAYAAPAGAABmCQAA5gkAAGYKAADmCgAAZgsAAOYLAABmDAAA5gwAAGYNAABQDgAA0A4AACAPAABAEAAAkBA="),N(k,103440,"5gDmAOYA5gAAAAAA5gDmAL4AqgC+AMgAAAAAAL4A8AC+AL4A0gDSAAAAAADSANIAyADIANIA0gAAAAAA5gDmAOYA5gDwAPAAAAAAAAQBBAGqAIwA3ADcAAAAAAD6AA4BoACMAMgAjAAAAAAA8ACgALQAtADSANIAAAAAAOYA8ACqANwAtAC0AAAAAAD6AA4BlgCCAMgAyAAAAAAADgEOAbYAjADcANwAAAAAAPgAEwGbALQA0gDSAAAAAAAOASwBwwMAAAAAAABsAAAAAAAAAKAAkQCbAJYAAAAAAMgA9QAnAAAAtwAAAAAAAADCugAAyADIAMgAyAAAAAAA0gDmAAABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGgAAAAAAABscHR4fICEiIyQlJicoKSorAAAs"),N(k,103790,"LQAAAAAAAAAu"),N(k,103816,"Lw=="),N(k,103833,"MAAAAAAAMQ=="),N(k,103856,"Mg=="),N(k,103868,"MwAAAK0AAQBABgEADCAtAAAAAAC+AL4A0gDSAAAAAADmAPoAoACWAMgAyAAAAAAA+gAEAbkAwwDDAL4AAAAAANIA3AD6AMgA+gD6AAAAAAD6APoAMjM0Njk6PD0+P0BBQkNERkdJSktMTU5PUFFSU1RWAACWAIwAtAC0AAAAAADIAMgAbA=="),N(k,104016,"oADIALQAtAAAAAAA3ADwALQAoADIAMgAAAAAAPAA+gBjAAAAZgAAAGgAAABrAAAAcAAAAHQAAAB4AAAA/g=="),N(k,104096,"oACMAJYApQAAAAAA2gAxAZEAkQCqAKAAAAAAAEoBXgEuAAAALAAAACcAAADIAg=="),N(k,104160,"MTIzNTY3OTo7PD4/QEFCREVGR0hJSktMTU5PUFFSU1RW"),N(k,104208,"vgC0AOYA5gAAAAAA+gD6ABESExQWFxkaGxwdHyAhIiQlJicoKSosc3uDmwAAAAAAtAC0AL4AtAAAAAAA5gDwALQAtAC0AKAAAAAAAOYAtABABAAAMAQAADUEAAA4BAAAOQQAAD4EAABDBAAASwQAAE0EAABOBAAATwQAAFAEAABRBAAAVgQAAFcEAABdBAAAXgQ="),N(k,104368,"tACgAMgAyAAAAAAA3ADmAKAAhwDSANIAAAAAAAQBGAGgAIwAyADIAAAAAADcAOYAyADIAMgAyAAAAAAAyADIAKAAvgCvAK8AAAAAAMgA0gCqAHMA0gDwAAAAAAAEARgBqgCqALQAtAAAAAAA8AAEAZYAtADIAMgAAAAAANIA+gCWAJYAtAC0AAAAAAAsASwBoACHANwA3AAAAAAA+gAYAaAAqgDIAMgAAAAAAEABVAG0AKAA8ADwAAAAAAAEAQQBvgC0AMgA5gAAAAAA8AD6AJYAlgC0ALQA0gDmAOYA8ABhAAAA4AAAAOEAAACjHgAA4wAAAKEeAAADAQAAsR4AAK8eAACzHgAAtR4AALceAADiAAAApx4AAKUeAACpHgAAqx4AAK0eAABlAAAA6AAAAOkAAAC7HgAAvR4AALkeAADqAAAAwR4AAL8eAADDHgAAxR4AAMceAABpAAAA7AAAAO0AAADJHgAAKQEAAMseAABvAAAA8gAAAPMAAADPHgAA9QAAAM0eAAD0AAAA0x4AANEeAADVHgAA1x4AANkeAAChAQAA3R4AANseAADfHgAA4R4AAOMeAAB1AAAA+QAAAPoAAADnHgAAaQEAAOUeAACwAQAA6x4AAOkeAADtHgAA7x4AAPEeAAB5AAAA8x4AAP0AAAD3HgAA+R4AAPUe"),N(k,104896,"5gCWAOYA5gDmAAAA8AD6AAAAAAAnAAAAAAAAAAABAgM="),N(k,104945,"AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRo="),N(k,105072,"GxwdAAAeHyAhIiMkACUmAAAAACcAACgAKQAqACsAAAAAAAAsAC0ALgAAAAAALwAAADAAAAAAAAAAMQ=="),N(k,105170,"MgAz"),N(k,105195,"NAAAAAAANQA2"),N(k,105226,"NwA4ADkArQABAAwgAQ=="),N(k,105249,"AQIDAAQAAQIDAAQFBgIDAAQFBwEDAAQICQoDAAAICAoDAAALCwsLAAAMDAwMAAAMAQ4BEwEBAw8DDgYRBgMJAQsPCwEMCQwBDgYOCQ4ODg8OHA4DDxEPEg8PEBEQAREGEQkRDxETEiAS/38AAAAAlgCMANwA3AAAAAAABAEYAYKAeHRkZICAgIyAgKCrq4CAgA=="),N(k,105412,"yAAAAMgAAACQAQAAkAEAAJABAABYAgAAWAIAAFgC"),N(k,105456,"8AAAAKoAAACqAAAAqgAAAKoAAACqAAAAqgAAAKoAAACqAAAAAQIMAw0EDgULAAAAAQIDBAUGAAAAAAAACwwNDg=="),N(k,105540,"MgAAAK8AAABkAAAAMg=="),N(k,105568,"rw=="),N(k,105596,"EBAKEBY="),N(k,105620,"/38AANAHAAAsAQAAYwAAAGMAAABjAAAAAAAAANAH"),N(k,105668,"BA=="),N(k,105680,"QEFCQ0RFRkdISUpLTE1OT1BRUlNUVldYWVtcXV5gYWJkZWdoaWtsbm9xc3R2d3l7fH6AgoSFh4mLjY+Rk5WXmZueoKKkp6mrrrCztbi6vb/CxcfKzdDT1tnc3+Ll6Ozv8vb5/P7/"),N(k,105792,"//7+/v7+/v7+/v39/f38/Pz7+/v6+vn5+Pj39/b19fTz8/Lx7+3r6efl4+Hf3drY1dPQzcvIxcK/u7i1sq6rp6OgnJiUkIyIhH97d3JuaWRgXltYVlNRTkxKR0VCQD48OTc1MzEvLCooJiQiIB4dGxkXFRMSEA4MCwkHBgQDAQ=="),N(k,106064,"//7+/v7+/f38+/v6+fj39vX08vHv7uzq6efl4+Hf3NrY1dPRz83LycfFw8G/vbu5t7SysK2rqaakoZ+cmpeUko+MioeEgX57eHZzcGxpZmNgX11bWlhWVVNSUE9NTEpJSEZFRENCQD8+PTw7Ojk4Nzc2NTQ0MzIyMTAwLy8uLi4tLS0sLCwsLCwsKysrKywrKiopKCgnJiYlJCQjIyIhISAgHx4eHR0cHBsaGhkZGBgXFxYWFRUUFBMTEhISEREQEA8PDw4ODQ0NDAwLCwsKCgoJCQkICAgHBwcHBgYGBQUFBQQEBAQEAwMDAwICAgICAgEBAQEBAQ=="),N(k,106341,"RvIpAC8ALwBF8ikALwAuAEXyKAAuAC0ANPIoAC0tLAA08igAKysrADTyKAAqKioANPIoACkpKQA08igAAOf/zv+1/5z/g/9q/1H/N/8e/wX/7P7T/rr+of6I/m/+Vf48/iP+Cv7x/dj9v/2m/Y39dP1b/UL9Kf0Q/ff83vzF/Kz8k/x6/GH8SPwv/Bb8/fvk+8v7svuZ+4D7Z/tP+zb7HfsE++v60vq6+qH6iPpv+lf6Pvol+g369Pnb+cP5qvmR+Xn5YPlH+S/5Fvn++OX4zfi0+Jz4g/hr+FP4Ovgi+Ar48ffZ98H3qPeQ93j3YPdH9y/3F/f/9uf2z/a39p/2h/Zv9lf2P/Yn9g/29/Xf9cf1sPWY9YD1aPVR9Tn1IfUK9fL02/TD9Kz0lPR99GX0TvQ29B/0CPTw89nzwvOr85TzfPNl807zN/Mg8wnz8vLb8sTyrvKX8oDyafJS8jzyJfIO8vjx4fHL8bTxnvGH8XHxW/FE8S7xGPEB8evw1fC/8Knwk/B98GfwUfA78CXwEPD67+Tvzu+576Pvje9472LvTe847yLvDe/47uLuze647qPuju557mTuT+467iXuEO777eft0u297antlO2A7WvtV+1C7S7tGu0F7fHs3ezJ7LXsoeyN7HnsZexR7D3sKuwW7ALs7+vb68jrtOuh643reutn61TrQest6xrrB+v06uLqz+q86qnqluqE6nHqX+pM6jrqJ+oV6gPq8One6czpuumo6ZbphOly6WHpT+k96SzpGukI6ffo5ujU6MPosuig6I/ofuht6FzoS+g76CroGegI6Pjn5+fX58bntuel55Xnhed152XnVedF5zXnJecV5wXn9ubm5tfmx+a45qjmmeaK5nvma+Zc5k3mPuYw5iHmEuYD5vXl5uXY5cnlu+Wt5Z7lkOWC5XTlZuVY5UrlPOUv5SHlE+UG5fjk6+Te5NDkw+S25KnknOSP5ILkdeRo5FzkT+RD5DbkKuQd5BHkBeT54+3j4ePV48njveOx46XjmuOO44Pjd+Ns42HjVuNL4z/jNOMq4x/jFOMJ4//i9OLq4t/i1eLK4sDituKs4qLimOKO4oTie+Jx4mfiXuJU4kviQuI54i/iJuId4hTiDOID4vrh8eHp4eDh2OHQ4cfhv+G34a/hp+Gf4Zfhj+GI4YDheOFx4WrhYuFb4VThTeFG4T/hOOEx4SrhJOEd4RbhEOEK4QPh/eD34PHg6+Dl4N/g2eDU4M7gyeDD4L7guOCz4K7gqeCk4J/gmuCV4JHgjOCH4IPgfuB64HbgcuBu4GrgZuBi4F7gWuBX4FPgT+BM4EngReBC4D/gPOA54DbgM+Ax4C7gK+Ap4CfgJOAi4CDgHuAc4BrgGOAW4BTgEuAR4A/gDuAN4AvgCuAJ4AjgB+AG4AXgBeAE4APgA+AC4ALgAuAC4ALgAeAC4ALgAuAC4ALgA+AD4ATgBeAF4AbgB+AI4AngCuAL4A3gDuAP4BHgEuAU4BbgGOAa4BzgHuAg4CLgJOAn4CngK+Au4DHgM+A24DngPOA/4ELgReBJ4EzgT+BT4FfgWuBe4GLgZuBq4G7gcuB24HrgfuCD4IfgjOCR4JXgmuCf4KTgqeCu4LPguOC+4MPgyeDO4NTg2eDf4OXg6+Dx4Pfg/eAD4QrhEOEW4R3hJOEq4THhOOE/4UbhTeFU4VvhYuFq4XHheOGA4Yjhj+GX4Z/hp+Gv4bfhv+HH4dDh2OHg4enh8eH64QPiDOIU4h3iJuIv4jniQuJL4lTiXuJn4nHie+KE4o7imOKi4qzituLA4sri1eLf4uri9OL/4gnjFOMf4yrjNOM/40vjVuNh42zjd+OD447jmuOl47HjvePJ49Xj4ePt4/njBeQR5B3kKuQ25EPkT+Rc5GjkdeSC5I/knOSp5Lbkw+TQ5N7k6+T45AblE+Uh5S/lPOVK5VjlZuV05YLlkOWe5a3lu+XJ5djl5uX15QPmEuYh5jDmPuZN5lzma+Z75ormmeao5rjmx+bX5ubm9uYF5xXnJec150XnVedl53XnheeV56XntufG59fn5+f45wjoGegq6DvoS+hc6G3ofuiP6KDosujD6NTo5uj36AjpGuks6T3pT+lh6XLphOmW6ajpuunM6d7p8OkD6hXqJ+o66kzqX+px6oTqluqp6rzqz+ri6vTqB+sa6y3rQetU62freuuN66HrtOvI69vr7+sC7BbsKuw97FHsZex57I3soey17Mns3ezx7AXtGu0u7ULtV+1r7YDtlO2p7b3t0u3n7fvtEO4l7jruT+5k7nnuju6j7rjuze7i7vjuDe8i7zjvTe9i73jvje+j77nvzu/k7/rvEPAl8DvwUfBn8H3wk/Cp8L/w1fDr8AHxGPEu8UTxW/Fx8YfxnvG08cvx4fH48Q7yJfI88lLyafKA8pfyrvLE8tvy8vIJ8yDzN/NO82XzfPOU86vzwvPZ8/DzCPQf9Db0TvRl9H30lPSs9MP02/Ty9Ar1IfU59VH1aPWA9Zj1sPXH9d/19/UP9if2P/ZX9m/2h/af9rf2z/bn9v/2F/cv90f3YPd495D3qPfB99n38fcK+CL4OvhT+Gv4g/ic+LT4zfjl+P74Fvkv+Uf5YPl5+ZH5qvnD+dv59PkN+iX6PvpX+m/6iPqh+rr60vrr+gT7Hfs2+0/7Z/uA+5n7svvL++T7/fsW/C/8SPxh/Hr8k/ys/MX83vz3/BD9Kf1C/Vv9dP2N/ab9v/3Y/fH9Cv4j/jz+Vf5v/oj+of66/tP+7P4F/x7/N/9R/2r/g/+c/7X/zv/n/wAAGQAyAEsAZAB9AJYArwDJAOIA+wAUAS0BRgFfAXgBkQGrAcQB3QH2AQ8CKAJBAloCcwKMAqUCvgLXAvACCQMiAzsDVANtA4YDnwO4A9ED6gMDBBwENQROBGcEgASZBLEEygTjBPwEFQUuBUYFXwV4BZEFqQXCBdsF8wUMBiUGPQZWBm8GhwagBrkG0QbqBgIHGwczB0wHZAd9B5UHrQfGB94H9gcPCCcIPwhYCHAIiAigCLkI0QjpCAEJGQkxCUkJYQl5CZEJqQnBCdkJ8QkJCiEKOQpQCmgKgAqYCq8KxwrfCvYKDgslCz0LVAtsC4MLmwuyC8oL4Qv4CxAMJww+DFUMbAyEDJsMsgzJDOAM9wwODSUNPA1SDWkNgA2XDa4NxA3bDfINCA4fDjUOTA5iDnkOjw6lDrwO0g7oDv8OFQ8rD0EPVw9tD4MPmQ+vD8UP2w/wDwYQHBAyEEcQXRBzEIgQnhCzEMgQ3hDzEAgRHhEzEUgRXRFyEYcRnBGxEcYR2xHwEQUSGRIuEkMSVxJsEoASlRKpEr4S0hLmEvsSDxMjEzcTSxNfE3MThxObE68TwxPWE+oT/hMRFCUUOBRMFF8UcxSGFJkUrBS/FNMU5hT5FAwVHhUxFUQVVxVqFXwVjxWhFbQVxhXZFesV/RUQFiIWNBZGFlgWahZ8Fo4WnxaxFsMW1BbmFvgWCRcaFywXPRdOF2AXcReCF5MXpBe1F8UX1hfnF/gXCBgZGCkYOhhKGFsYaxh7GIsYmxirGLsYyxjbGOsY+xgKGRoZKRk5GUgZWBlnGXYZhRmVGaQZsxnCGdAZ3xnuGf0ZCxoaGigaNxpFGlMaYhpwGn4ajBqaGqgathrEGtEa3xrtGvoaCBsVGyIbMBs9G0obVxtkG3EbfhuLG5gbpBuxG70byhvWG+Mb7xv7GwccExwfHCscNxxDHE8cWxxmHHIcfRyJHJQcnxyqHLUcwRzMHNYc4RzsHPccAR0MHRYdIR0rHTYdQB1KHVQdXh1oHXIdfB2FHY8dmR2iHawdtR2+Hccd0R3aHeMd7B30Hf0dBh4PHhceIB4oHjAeOR5BHkkeUR5ZHmEeaR5xHngegB6IHo8elh6eHqUerB6zHroewR7IHs8e1h7cHuMe6h7wHvYe/R4DHwkfDx8VHxsfIR8nHywfMh83Hz0fQh9IH00fUh9XH1wfYR9mH2sfbx90H3kffR+CH4Yfih+OH5Iflh+aH54foh+mH6kfrR+xH7Qftx+7H74fwR/EH8cfyh/NH88f0h/VH9cf2R/cH94f4B/iH+Qf5h/oH+of7B/uH+8f8R/yH/Mf9R/2H/cf+B/5H/of+x/7H/wf/R/9H/4f/h/+H/4f/h//H/4f/h/+H/4f/h/9H/0f/B/7H/sf+h/5H/gf9x/2H/Uf8x/yH/Ef7x/uH+wf6h/oH+Yf5B/iH+Af3h/cH9kf1x/VH9Ifzx/NH8ofxx/EH8Efvh+7H7cftB+xH60fqR+mH6Ifnh+aH5Yfkh+OH4ofhh+CH30feR90H28fax9mH2EfXB9XH1IfTR9IH0IfPR83HzIfLB8nHyEfGx8VHw8fCR8DH/0e9h7wHuoe4x7cHtYezx7IHsEeuh6zHqwepR6eHpYejx6IHoAeeB5xHmkeYR5ZHlEeSR5BHjkeMB4oHiAeFx4PHgYe/R30Hewd4x3aHdEdxx2+HbUdrB2iHZkdjx2FHXwdch1oHV4dVB1KHUAdNh0rHSEdFh0MHQEd9xzsHOEc1hzMHMEctRyqHJ8clByJHH0cchxmHFscTxxDHDccKxwfHBMcBxz7G+8b4xvWG8obvRuxG6QbmBuLG34bcRtkG1cbShs9GzAbIhsVGwgb+hrtGt8a0RrEGrYaqBqaGowafhpwGmIaUxpFGjcaKBoaGgsa/RnuGd8Z0BnCGbMZpBmVGYUZdhlnGVgZSBk5GSkZGhkKGfsY6xjbGMsYuxirGJsYixh7GGsYWxhKGDoYKRgZGAgY+BfnF9YXxRe1F6QXkxeCF3EXYBdOFz0XLBcaFwkX+BbmFtQWwxaxFp8WjhZ8FmoWWBZGFjQWIhYQFv0V6xXZFcYVtBWhFY8VfBVqFVcVRBUxFR4VDBX5FOYU0xS/FKwUmRSGFHMUXxRMFDgUJRQRFP4T6hPWE8MTrxObE4cTcxNfE0sTNxMjEw8T+xLmEtISvhKpEpUSgBJsElcSQxIuEhkSBRLwEdsRxhGxEZwRhxFyEV0RSBEzER4RCBHzEN4QyBCzEJ4QiBBzEF0QRxAyEBwQBhDwD9sPxQ+vD5kPgw9tD1cPQQ8rDxUP/w7oDtIOvA6lDo8OeQ5iDkwONQ4fDggO8g3bDcQNrg2XDYANaQ1SDTwNJQ0ODfcM4AzJDLIMmwyEDGwMVQw+DCcMEAz4C+ELyguyC5sLgwtsC1QLPQslCw4L9grfCscKrwqYCoAKaApQCjkKIQoJCvEJ2QnBCakJkQl5CWEJSQkxCRkJAQnpCNEIuQigCIgIcAhYCD8IJwgPCPYH3gfGB60HlQd9B2QHTAczBxsHAgfqBtEGuQagBocGbwZWBj0GJQYMBvMF2wXCBakFkQV4BV8FRgUuBRUF/ATjBMoEsQSZBIAEZwROBDUEHAQDBOoD0QO4A58DhgNtA1QDOwMiAwkD8ALXAr4CpQKMAnMCWgJBAigCDwL2Ad0BxAGrAZEBeAFfAUYBLQEUAfsA4gDJAK8AlgB9AGQASwAyABkAMAAAADAAAABAAAAAUAAAAJAAAACgAAAAsAAAAMAAAACAm7XL3Ojt7Obczr+wo5iQjIuMj5KUlZKMg3hpWUk8MSopLTZEVml9j5+qsbKtpJaHeGlcU09PVV5reoiWoquwsa6ooJiRi4iJjZSdqLK7wMG9tKWSfGNKMh4OBQIFDx4wRFltf4yWnJ+fnZuZmZyhqbO/ytXc4N7YzLumj3dgSzouKCkvOkhZanqGkJSVkYmAdWtiXFpcYWl0gIqUmp6dmJCGfHFoYmBja3iIm6/C0t/m5+LXxrKchG9bS0A5Nzg9Q0pQVFZVUk1IQj8+QUlWZ3yTq8PZ6vb8+/Tn1cCqlIBxZF1aXGFocHd9f397dGthV05IRkhOWWZ1hJOfp6uqpJmLe2pbTkZDRU1aa3+SprjFz9PSzcS5raGWjomHh4qNkZKRjIR4aFVBLhwOBQEFDx80TWiBmrDBzdPT0Mi/taukn5ydoKWqrrGwq6OWh3ZjUUI2Ly0xOkhZa36OnKaqqaOYintsXVJKSEpQWmd1gi0AAAAmAAAALQAAAC0AAAA3AAAALQ=="),N(k,110928,"yv5w/hICZAHgAFkAFwD2/8b/8P/NAVcCGAK9AgIDXQLxAc0BMAKUAW4A4ACDAGgAn/+bABYBZv9z+6r94QJ9ALD9KQALAAn/9v9BAFwAUADQ/kcApwD//3oA6QChANX/FgHfAeUBlwEKAYoChgBQAOwARAAEAQ0BswA1AIwAEwElASgBaAABAZgANwG2AAcB9QB9ADoBjAAsAMsA5gAV/+L+FwBrAFwApf8mANABuwGwAGIA8Pxv9p346/vA+Ur6mPoT+0v8Jv0="),N(k,111162,"BgAHAAgACQAKAAsADQAOABAAEgAUABYAGQAcACAAIwAoAC0AMwA5AEAARwBQAFoAZQByAIAAjgCfALMAygDjAAABHAE+AWcBlQHHAQACOAJ+As8CcQOPAwAEcQT8BJ4FVgYfBwAI4Qj4CTsLrAw9DgAQwxHwE3cWWBl7HAAghSPfJ+4ssDL2OABArkekUIVbZmYzc/9/"),N(k,111324,"qMtoQQAAAACoy2jBAAAAAAAAAAAXCtQJkglQCQ8JzgiPCE8IEwjVB5oHYgcoB/MGvgaLBloGKwb9BdMFqQWBBVwFOAUWBfcE1wS7BKAEhgRuBFcEQQQtBBkEBwT1A+QD1APFA7YDqAOZA40DfwNxA2UDVwNLAz4DMgMkAxgDCwP+AvIC5ALYAssCvgKxAqQClwKLAn0CcgJkAlkCTAJAAjQCKAIcAhICBQL7AfAB5QHbAdABxgG7AbIBqAGeAZQBigGBAXcBbgFjAVsBUAFIAT0BNAErASABGAENAQQB+gDwAOcA3ADUAMgAwAC1AKwAoQCYAI4AhQB7AHEAaQBeAFYATABDADkAMQAnAB4AFgALAAQA+//y/+n/4P/X/87/xP+7/7L/qf+g/5X/jf+C/3r/cP9m/1z/Uv9J/z//Nf8r/yL/F/8O/wT/+v7x/uf+3f7T/sr+wP62/q3+o/6b/pD+h/59/nP+av5f/lb+TP5C/jj+Lf4j/hn+Df4D/vf97P3h/dX9yf29/bH9pf2Y/Yz9f/1z/Wb9Wf1M/T/9M/0k/Rn9Cv3//PH85fzY/Mz8vvyz/KT8mPyL/H78cfxi/FX8Rfw4/Cb8GfwG/Pb74vvQ+7r7pfuO+3b7XPtB+yT7Bvvl+sT6n/p5+lP6KPr++dD5oflw+Tz5CfnR+Jr4YPgm+Oj3q/ds9yz36/aq9mj2Jvbj9bAEdgRABA4E3wO0A4sDZQNBAx8DAAPiAsYCqwKSAnoCZAJOAjoCJwIVAgMC8wHjAdQBxgG4AasBnwGTAYcBfAFyAWgBXgFVAUwBQwE7ATMBLAEkAR0BFgEQAQkBAwH9APcA8gDtAOcA4gDdANkA1ADQAMwAxwDDAMAAvAC4ALQAsQCuAKoApwCkAKEAngCbAJkAlgCTAJEAjgCMAIkAhwCFAIMAgAB+AHwAegB4AHcAdQBzAHEAbwBuAGwAagBpAGcAZgBkAGMAYQBgAF8AXQBcAFsAWgBYAFcAVgBVAFQAUwBSAFAATwBOAE0ATABLAEsASgBJAEgARwBGAEUARABEAEMAQgBBAEAAQAA/AD4APQA9ADwAOwA7ADoAOQA5ADgAOAA3ADcANgA2ADUANQA0ADQAMwAzADIAMgAxADEAMAAwAC8ALwAuAC4ALQAtACwALAArACsAKgAqACkAKQApACkAKAAoACcAJwAmACYAJgAmACUAJQAkACQAJAAkACMAIwAjACMAIgAiACEAIQAhACEAIAAgACAAIAAfAB8AHwAfAB4AHgAeAB4AHQAdAB0AHQAcABwAHAAcABsAGwAxNkZyYW1lTWFuYWdlckltcGwAMTJGcmFtZU1hbmFnZXIAMjNTcGVlY2hXYXZlR2VuZXJhdG9ySW1wbAAxOVNwZWVjaFdhdmVHZW5lcmF0b3IAMTNXYXZlR2VuZXJhdG9y"),N(k,112416,"AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA"),N(k,115203,"QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNf6CK2VHFWdAAAAAAAAAOEMAAPr+Qi52vzo7nrya9wy9vf3/////3z88VFVVVVXFP5ErF89VVaU/F9CkZxERgT8AAAAAAADIQu85+v5CLuY/JMSC/72/zj+19AzXCGusP8xQRtKrsoM/hDpOm+DXVT8="),N(k,115390,"8D9uv4gaTzubPDUz+6k99u8/XdzYnBNgcbxhgHc+muzvP9FmhxB6XpC8hX9u6BXj7z8T9mc1UtKMPHSFFdOw2e8/+o75I4DOi7ze9t0pa9DvP2HI5mFO92A8yJt1GEXH7z+Z0zNb5KOQPIPzxso+vu8/bXuDXaaalzwPiflsWLXvP/zv/ZIatY4890dyK5Ks7z/RnC9wPb4+PKLR0zLso+8/C26QiTQDarwb0/6vZpvvPw69LypSVpW8UVsS0AGT7z9V6k6M74BQvMwxbMC9iu8/FvTVuSPJkbzgLamumoLvP69VXOnj04A8UY6lyJh67z9Ik6XqFRuAvHtRfTy4cu8/PTLeVfAfj7zqjYw4+WrvP79TEz+MiYs8dctv61tj7z8m6xF2nNmWvNRcBITgW+8/YC86PvfsmjyquWgxh1TvP504hsuC54+8Hdn8IlBN7z+Nw6ZEQW+KPNaMYog7Ru8/fQTksAV6gDyW3H2RST/vP5SoqOP9jpY8OGJ1bno47z99SHTyGF6HPD+msk/OMe8/8ucfmCtHgDzdfOJlRSvvP14IcT97uJa8gWP14d8k7z8xqwlt4feCPOHeH/WdHu8/+r9vGpshPbyQ2drQfxjvP7QKDHKCN4s8CwPkpoUS7z+Py86JkhRuPFYvPqmvDO8/tquwTXVNgzwVtzEK/gbvP0x0rOIBQoY8MdhM/HAB7z9K+NNdOd2PPP8WZLII/O4/BFuOO4Cjhrzxn5JfxfbuP2hQS8ztSpK8y6k6N6fx7j+OLVEb+AeZvGbYBW2u7O4/0jaUPujRcbz3n+U02+fuPxUbzrMZGZm85agTwy3j7j9tTCqnSJ+FPCI0Ekym3u4/imkoemASk7wcgKwERdruP1uJF0iPp1i8Ki73IQrW7j8bmklnmyx8vJeoUNn10e4/EazCYO1jQzwtiWFgCM7uP+9kBjsJZpY8VwAd7UHK7j95A6Ha4cxuPNA8wbWixu4/MBIPP47/kzze09fwKsPuP7CvervOkHY8Jyo21dq/7j934FTrvR2TPA3d/ZmyvO4/jqNxADSUj7ynLJ12srnuP0mjk9zM3oe8QmbPotq27j9fOA+9xt54vIJPnVYrtO4/9lx77EYShrwPkl3KpLHuP47X/RgFNZM82ie1Nkev7j8Fm4ovt5h7PP3Hl9QSre4/CVQc4uFjkDwpVEjdB6vuP+rGGVCFxzQ8t0ZZiiap7j81wGQr5jKUPEghrRVvp+4/n3aZYUrkjLwJ3Ha54aXuP6hN7zvFM4y8hVU6sH6k7j+u6SuJeFOEvCDDzDRGo+4/WFhWeN3Ok7wlIlWCOKLuP2QZfoCqEFc8c6lM1FWh7j8oIl6/77OTvM07f2aeoO4/grk0h60Sary/2gt1EqDuP+6pbbjvZ2O8LxplPLKf7j9RiOBUPdyAvISUUfl9n+4/zz5afmQfeLx0X+zodZ/uP7B9i8BK7oa8dIGlSJqf7j+K5lUeMhmGvMlnQlbrn+4/09QJXsuckDw/Xd5PaaDuPx2lTbncMnu8hwHrcxSh7j9rwGdU/eyUPDLBMAHtoe4/VWzWq+HrZTxiTs8286LuP0LPsy/FoYi8Eho+VCek7j80NzvxtmmTvBPOTJmJpe4/Hv8ZOoRegLytxyNGGqfuP25XcthQ1JS87ZJEm9mo7j8Aig5bZ62QPJlmitnHqu4/tOrwwS+3jTzboCpC5azuP//nxZxgtmW8jES1FjKv7j9EX/NZg/Z7PDZ3FZmuse4/gz0epx8Jk7zG/5ELW7TuPykebIu4qV285cXNsDe37j9ZuZB8+SNsvA9SyMtEuu4/qvn0IkNDkrxQTt6fgr3uP0uOZtdsyoW8ugfKcPHA7j8nzpEr/K9xPJDwo4KRxO4/u3MK4TXSbTwjI+MZY8juP2MiYiIExYe8ZeVde2bM7j/VMeLjhhyLPDMtSuyb0O4/Fbu809G7kbxdJT6yA9XuP9Ix7pwxzJA8WLMwE57Z7j+zWnNuhGmEPL/9eVVr3u4/tJ2Ol83fgrx689O/a+PuP4czy5J3Gow8rdNamZ/o7j/62dFKj3uQvGa2jSkH7u4/uq7cVtnDVbz7FU+4ovPuP0D2pj0OpJC8OlnljXL57j80k6049NZovEde+/J2/+4/NYpYa+LukbxKBqEwsAXvP83dXwrX/3Q80sFLkB4M7z+smJL6+72RvAke11vCEu8/swyvMK5uczycUoXdmxnvP5T9n1wy4448etD/X6sg7z+sWQnRj+CEPEvRVy7xJ+8/ZxpOOK/NYzy15waUbS/vP2gZkmwsa2c8aZDv3CA37z/StcyDGIqAvPrDXVULP+8/b/r/P12tj7x8iQdKLUfvP0mpdTiuDZC88okNCIdP7z+nBz2mhaN0PIek+9wYWO8/DyJAIJ6RgryYg8kW42DvP6ySwdVQWo48hTLbA+Zp7z9LawGsWTqEPGC0AfMhc+8/Hz60ByHVgrxfm3szl3zvP8kNRzu5Kom8KaH1FEaG7z/TiDpgBLZ0PPY/i+cukO8/cXKdUezFgzyDTMf7UZrvP/CR048S94+82pCkoq+k7z99dCPimK6NvPFnji1Ir+8/CCCqQbzDjjwnWmHuG7rvPzLrqcOUK4Q8l7prNyvF7z/uhdExqWSKPEBFblt20O8/7eM75Lo3jrwUvpyt/dvvP53NkU07iXc82JCegcHn7z+JzGBBwQVTPPFxjyvC8+8/EhETFBUWFxgZGhscHR4fICERIiMkESUmJygpKissES0uLxAQMBAQEBAQEBAxMjMQNDUQEBERERERERERERERERERERERERERERERERE2ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERNxERERE4ETk6Ozw9PhERERERERERERERERERERERERERERERERERERERERERERERERERERERERE/EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEUBBEUJDREVGR0hJShFLTE1OT1BREFJTVFVWV1hZWltcXRBeX2AQERERYWJjEBAQEBAQEBAQEBERERFkEBAQEBAQEBAQEBAQEBAQERFlEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQERFmZxAQaGkREREREREREREREREREREREREREREREWoREWsQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEWxtEBAQEBAQEBAQbhAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQb3BxchAQEBAQEBAQc3R1EBAQEBB2dxAQEBB4EBB5EBAQEBAQEBAQEBAQEBA="),N(k,117968,"//////////////////////////////////////////8AAAAAAAAAAP7//wf+//8HAAAAAAAEIAT//3////9//////////////////////////////////8P/AwAfUA=="),N(k,118072,"IAAAAAAA37xA1///+////////////7///////////////////////wP8///////////////////////////+////fwL//////wEAAAAA/7+2AP///4cHAAAA/wf//////////v/D////////////////7x/+4f+fAAD///////8A4P///////////////wMA//////8HMAT////8/x8AAP///wH/BwAAAAAAAP//3z8AAPD/+AP////////////v/9/h/8///v/vn/n///3F459ZgLDP/wMQ7of5///9bcOHGQJewP8/AO6/+////e3jvxsBAM//AB7un/n///3t458ZwLDP/wIA7Mc91hjH/8PHHYEAwP8AAO/f/f///f/j3x1gB8//AADv3/3///3v498dYEDP/wYA79/9/////+ffXfCAz/8A/Oz/f/z///svf4Bf/8D/DAD+/////3//Bz8g/wMAAAAA1vf//6///ztfIP/zAAAAAAEAAAD/AwAA//7///8f/v8D///+////HwAAAAAAAAAA////////f/n/A////////////z//////vyD///////f///////////89fz3//////z3/////PX89/3//////////Pf//////////BwAAAAD//wAA/////////////z8//v//////////////////////////////////////////////////////////n////v//B////////////8f/Af/fDwD//w8A//8PAP/fDQD////////P//8BgBD/AwAAAAD/A///////////////Af//////B///////////PwD///9//w//AcD/////Px8A//////8P////A/8DAAAAAP///w//////////f/7/HwD/A/8DgA=="),N(k,118768,"////////7//vD/8DAAAAAP//////8////////7//AwD///////9/AP/j//////8//wH//////+cAAAAAAN5vBP///////////////////////////////wAAAACA/x8A//8/P/////8/P/+q////P////////99f3B/PD/8f3B8="),N(k,118910,"AoAAAP8f"),N(k,118928,"hPwvPlC9//PgQwAA//////8B"),N(k,118982,"wP///////wMAAP//////f///////f/////////////////////8feAwA/////78g/////////4AAAP//fwB/f39/f39/f/////8AAAAAAIA="),N(k,119088,"4AAAAP4DPh/+////////////f+D+//////////////fg///////+/////////////38AAP///wcAAAAAAAD///////////////////////////////8/"),N(k,119184,"////////////////////////////////////////AAD//////////////////////x8AAAAAAAAAAP//////P/8f////DwAA//////9/8I///////////////////wAAAACA//z////////////////5////////fAAAAAAAgP+//////wAAAP///////w8A//////////8vAP8DAAD86P//////B/////8HAP///x/////////3/wCA/wP///9/////////fwD/P/8D//9//P////////9/BQAAOP//PAB+fn4Af3////////f/AP///////////////////wf/A///////////////////////////DwD//3/4//////8P/////////////////z//////////////////AwAAAAB/APjg//1/X9v/////////////////AwAAAPj///////////////8/AAD///////////z///////8AAAAAAP8P"),N(k,119582,"3/////////////////////8fAAD/A/7//wf+//8HwP////////////9//Pz8HAAAAAD/7///f///t/8//z8AAAAA////////////////////BwAAAAAAAAAA////////Hw=="),N(k,119712,"////H////////wEAAAAAAP////8A4P///wf//////wf///8//////w//PgAAAAAA/////////////////////////z//A/////8P/////w///////wD///////8P"),N(k,119824,"////////fwD//z8A/w=="),N(k,119856,"P/3/////v5H//z8A//9/AP///38AAAAAAAAAAP//NwD//z8A////AwAAAAAAAAAA/////////8AAAAAAAAAAAG/w7/7//z8AAAAAAP///x////8fAAAAAP/+//8fAAAA////////PwD//z8A//8HAP//Aw=="),N(k,119984,"////////////AQAAAAAAAP///////wcA////////BwD//////wD/Aw=="),N(k,120048,"////H4AA//8/"),N(k,120076,"//9/AP//////////PwAAAMD/AAD8////////AQAA////Af8D////////x/9wAP////9HAP//////////HgD/FwAAAAD///v///+fQAAAAAAAAAAAf73/v/8B/////////wH/A++f+f///e3jnxmB4A8="),N(k,120208,"//////////+7B/+DAAAAAP//////////swD/Aw=="),N(k,120256,"////////P38AAAA/AAAAAP////////9/EQD/AwAAAAD///////8/Af8DAAAAAAAA////5/8H/wM="),N(k,120336,"/////////wE="),N(k,120356,"////////////AwCA"),N(k,120388,"//z///////waAAAA////////538AAP///////////yAAAAAA/////////wH//f////9/fwEA/wMAAPz////8///+fw=="),N(k,120464,"f/v/////f7TLAP8Dv/3///9/ewH/Aw=="),N(k,120524,"//9/AP////////////////////////8D"),N(k,120560,"/////////////////38AAP///////////////////////////////w8="),N(k,120624,"//////9/"),N(k,120656,"//////////9/"),N(k,120688,"/////////wH///9//wM="),N(k,120714,"////PwAA////////AAAPAP8D+P//4P//"),N(k,120760,"//////////8="),N(k,120784,"////////////h/////////+A//8AAAAAAAAAAAsAAAD/////////////////////////////////////////AP///////////////////////////////////////wcA////fwAAAAAAAAcA8AD/////////////////////////////////////////////////////////////////D/////////////////8H/x//Af9D"),N(k,120976,"/////////////9///////////99k3v/r7/////////+/59/f////e1/8/f//////////////////////////////////////////////////////P/////3///f////3///f////3///f////3/////9/////f//98////////9////52wc="),N(k,121136,"//////8fgD//Qw=="),N(k,121192,"//////8P/wP///////////////////////////////8fAAAAAAAAAP//////////jwj/Aw=="),N(k,121264,"7////5b+9wqE6paqlvf3Xv/7/w/u+/8P"),N(k,121302,"////A////wP///8D"),N(k,121328,"/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8="),N(k,121601,"ARcCHRgTAx4bGQsUCAQNHxYcEhoKBwwVEQkGEAUPDt4SBJUAAAAA////////////////INsBABQAAABDLlVURi04"),N(k,121696,"TENfQ1RZUEUAAAAATENfTlVNRVJJQwAATENfVElNRQAAAAAATENfQ09MTEFURQAATENfTU9ORVRBUlkATENfTUVTU0FHRVM="),N(k,121776,"Qy5VVEYtOA=="),N(k,121800,"MAUCAE5vIGVycm9yIGluZm9ybWF0aW9uAElsbGVnYWwgYnl0ZSBzZXF1ZW5jZQBEb21haW4gZXJyb3IAUmVzdWx0IG5vdCByZXByZXNlbnRhYmxlAE5vdCBhIHR0eQBQZXJtaXNzaW9uIGRlbmllZABPcGVyYXRpb24gbm90IHBlcm1pdHRlZABObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5AE5vIHN1Y2ggcHJvY2VzcwBGaWxlIGV4aXN0cwBWYWx1ZSB0b28gbGFyZ2UgZm9yIGRhdGEgdHlwZQBObyBzcGFjZSBsZWZ0IG9uIGRldmljZQBPdXQgb2YgbWVtb3J5AFJlc291cmNlIGJ1c3kASW50ZXJydXB0ZWQgc3lzdGVtIGNhbGwAUmVzb3VyY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUASW52YWxpZCBzZWVrAENyb3NzLWRldmljZSBsaW5rAFJlYWQtb25seSBmaWxlIHN5c3RlbQBEaXJlY3Rvcnkgbm90IGVtcHR5AENvbm5lY3Rpb24gcmVzZXQgYnkgcGVlcgBPcGVyYXRpb24gdGltZWQgb3V0AENvbm5lY3Rpb24gcmVmdXNlZABIb3N0IGlzIGRvd24ASG9zdCBpcyB1bnJlYWNoYWJsZQBBZGRyZXNzIGluIHVzZQBCcm9rZW4gcGlwZQBJL08gZXJyb3IATm8gc3VjaCBkZXZpY2Ugb3IgYWRkcmVzcwBCbG9jayBkZXZpY2UgcmVxdWlyZWQATm8gc3VjaCBkZXZpY2UATm90IGEgZGlyZWN0b3J5AElzIGEgZGlyZWN0b3J5AFRleHQgZmlsZSBidXN5AEV4ZWMgZm9ybWF0IGVycm9yAEludmFsaWQgYXJndW1lbnQAQXJndW1lbnQgbGlzdCB0b28gbG9uZwBTeW1ib2xpYyBsaW5rIGxvb3AARmlsZW5hbWUgdG9vIGxvbmcAVG9vIG1hbnkgb3BlbiBmaWxlcyBpbiBzeXN0ZW0ATm8gZmlsZSBkZXNjcmlwdG9ycyBhdmFpbGFibGUAQmFkIGZpbGUgZGVzY3JpcHRvcgBObyBjaGlsZCBwcm9jZXNzAEJhZCBhZGRyZXNzAEZpbGUgdG9vIGxhcmdlAFRvbyBtYW55IGxpbmtzAE5vIGxvY2tzIGF2YWlsYWJsZQBSZXNvdXJjZSBkZWFkbG9jayB3b3VsZCBvY2N1cgBTdGF0ZSBub3QgcmVjb3ZlcmFibGUAUHJldmlvdXMgb3duZXIgZGllZABPcGVyYXRpb24gY2FuY2VsZWQARnVuY3Rpb24gbm90IGltcGxlbWVudGVkAE5vIG1lc3NhZ2Ugb2YgZGVzaXJlZCB0eXBlAElkZW50aWZpZXIgcmVtb3ZlZABEZXZpY2Ugbm90IGEgc3RyZWFtAE5vIGRhdGEgYXZhaWxhYmxlAERldmljZSB0aW1lb3V0AE91dCBvZiBzdHJlYW1zIHJlc291cmNlcwBMaW5rIGhhcyBiZWVuIHNldmVyZWQAUHJvdG9jb2wgZXJyb3IAQmFkIG1lc3NhZ2UARmlsZSBkZXNjcmlwdG9yIGluIGJhZCBzdGF0ZQBOb3QgYSBzb2NrZXQARGVzdGluYXRpb24gYWRkcmVzcyByZXF1aXJlZABNZXNzYWdlIHRvbyBsYXJnZQBQcm90b2NvbCB3cm9uZyB0eXBlIGZvciBzb2NrZXQAUHJvdG9jb2wgbm90IGF2YWlsYWJsZQBQcm90b2NvbCBub3Qgc3VwcG9ydGVkAFNvY2tldCB0eXBlIG5vdCBzdXBwb3J0ZWQATm90IHN1cHBvcnRlZABQcm90b2NvbCBmYW1pbHkgbm90IHN1cHBvcnRlZABBZGRyZXNzIGZhbWlseSBub3Qgc3VwcG9ydGVkIGJ5IHByb3RvY29sAEFkZHJlc3Mgbm90IGF2YWlsYWJsZQBOZXR3b3JrIGlzIGRvd24ATmV0d29yayB1bnJlYWNoYWJsZQBDb25uZWN0aW9uIHJlc2V0IGJ5IG5ldHdvcmsAQ29ubmVjdGlvbiBhYm9ydGVkAE5vIGJ1ZmZlciBzcGFjZSBhdmFpbGFibGUAU29ja2V0IGlzIGNvbm5lY3RlZABTb2NrZXQgbm90IGNvbm5lY3RlZABDYW5ub3Qgc2VuZCBhZnRlciBzb2NrZXQgc2h1dGRvd24AT3BlcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MAT3BlcmF0aW9uIGluIHByb2dyZXNzAFN0YWxlIGZpbGUgaGFuZGxlAFJlbW90ZSBJL08gZXJyb3IAUXVvdGEgZXhjZWVkZWQATm8gbWVkaXVtIGZvdW5kAFdyb25nIG1lZGl1bSB0eXBlAE11bHRpaG9wIGF0dGVtcHRlZABSZXF1aXJlZCBrZXkgbm90IGF2YWlsYWJsZQBLZXkgaGFzIGV4cGlyZWQAS2V5IGhhcyBiZWVuIHJldm9rZWQAS2V5IHdhcyByZWplY3RlZCBieSBzZXJ2aWNl"),N(k,123730,"pQJbAPABtQWMBSUBgwYdA5QE/wDHAzEDCwa8AY8BfwPKBCsA2gavAEIDTgPcAQ4EFQChBg0BlAILAjgGZAK8Av8CXQPnBAsHzwLLBe8F2wXhAh4GRQKFAIICbANvBPEA8wMYBdkA2gNMBlQCewGdA70EAABRABUCuwCzA20A/wGFBC8F+QQ4AGUBRgGfALcGqAFzAlMB"),N(k,123928,"IQQAAAAAAAAAAC8C"),N(k,123960,"NQRHBFYE"),N(k,123982,"oAQ="),N(k,124002,"RgVgBW4FYQYAAM8BAAAAAAAAAADJBukG+QYeBzkHSQdeBw=="),N(k,124048,"GQAKABkZGQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAAZABEKGRkZAwoHAAEACQsYAAAJBgsAAAsABhkAAAAZGRk="),N(k,124129,"DgAAAAAAAAAAGQAKDRkZGQANAAACAAkOAAAACQAOAAAO"),N(k,124187,"DA=="),N(k,124199,"EwAAAAATAAAAAAkMAAAAAAAMAAAM"),N(k,124245,"EA=="),N(k,124257,"DwAAAAQPAAAAAAkQAAAAAAAQAAAQ"),N(k,124303,"Eg=="),N(k,124315,"EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa"),N(k,124370,"GgAAABoaGgAAAAAAAAk="),N(k,124419,"FA=="),N(k,124431,"FwAAAAAXAAAAAAkUAAAAAAAUAAAU"),N(k,124477,"Fg=="),N(k,124489,"FQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVG"),N(k,124564,"EQ=="),N(k,124604,"//////////8="),N(k,124672,"0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNsAAAAAIAAAAAkAAAAKAAAADQAAAAsAAAAMAAAAhQAAAAAgAAABIAAAAiAAAAMgAAAEIAAABSAAAAYgAAAIIAAACSAAAAogAAAoIAAAKSAAAF8gAAAAMAAAAAAAAE4xMF9fY3h4YWJpdjExNl9fc2hpbV90eXBlX2luZm9FAAAAAGjpAQB46AEAZOoBAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQAAAGjpAQCo6AEAnOgBAE4xMF9fY3h4YWJpdjExN19fcGJhc2VfdHlwZV9pbmZvRQAAAGjpAQDY6AEAnOgBAE4xMF9fY3h4YWJpdjExOV9fcG9pbnRlcl90eXBlX2luZm9FAGjpAQAI6QEA/OgBAAAAAADM6AEAFAAAABUAAAAWAAAAFwAAABgAAAAZAAAAGgAAABsAAAAAAAAAsOkBABQAAAAcAAAAFgAAABcAAAAYAAAAHQAAAB4AAAAfAAAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAAGjpAQCI6QEAzOgBAAAAAAAg6gEACQAAACAAAAAhAAAAAAAAAEjqAQAJAAAAIgAAACMAAAAAAAAACOoBAAkAAAAkAAAAJQAAAFN0OWV4Y2VwdGlvbgAAAABA6QEA+OkBAFN0OWJhZF9hbGxvYwAAAABo6QEAEOoBAAjqAQBTdDIwYmFkX2FycmF5X25ld19sZW5ndGgAAAAAaOkBACzqAQAg6gEAU3Q5dHlwZV9pbmZvAAAAAEDpAQBU6gE="),N(k,125552,"wLEAAMCyAADAswAAwLQAAMC1AADAtgAAwLcAAMC4AADAuQAAwLoAAMC7AADAvAAAwL0AAMC+AADAvwAAwMAAAMDBAADAwgAAwMMAAMDEAADAxQAAwMIAAMDGAADAxwAAwMgAAMDJAADAygAAwMsAAMDMAADAzQAAwM4AAMDPAADA0AAAwNEAAMDSAADA0wAAwNQAAMDVAADA1gAAwNcAAMDYAADA2QAAwNIAAMDaAADA2wAAwNwAAMDdAADA3gAAwN8AAMDgAADA4QAAwNgAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADA4gAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwOMAAMDkAADAwgAAwMIAAMDCAADA5QAAwMIAAMDmAADA5wAAwOgAAMDpAADA6gAAwOsAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADA7AAAwO0AAMDCAADA7gAAwO8AAMDCAADA8AAAwPEAAMDyAADA8wAAwPQAAMD1AADA9gAAwPcAAMD4AADAwgAAwPkAAMD6AADA+wAAwPwAAMD9AADA/gAAwP8AAMAAAQDAAQEAwAIBAMADAQDABAEAwAUBAMAGAQDABwEAwAgBAMAJAQDACgEAwAsBAMAMAQDACwEAwA0BAMAOAQDADwEAwAsBAMDCAADAwgAAwMIAAMAQAQDAEQEAwBIBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDAwgAAwMIAAMDCAADAwgAAwBMBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAwgAAwBQBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAwgAAwBUBAMAWAQDACwEAwAsBAMAXAQDAGAEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAGQEAwMIAAMDCAADAGgEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAGwEAwBwBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMAdAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwB4BAMAfAQDAIAEAwCEBAMAiAQDAIwEAwCQBAMAlAQDA2AAAwNgAAMAmAQDACwEAwAsBAMALAQDACwEAwAsBAMAnAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwCgBAMApAQDACwEAwAsBAMAqAQDACwEAwCsBAMALAQDALAEAwC0BAMAuAQDALwEAwNgAAMDYAADAMAEAwDEBAMAyAQDAMwEAwDQBAMALAQDACwEAwAsBAMALAQDACwEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMA1AQDAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwDYBAMA3AQDAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAOAEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMA5AQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDAwgAAwMIAAMA6AQDAOwEAwDwB"),N(k,128496,"oVcBAEEAAADdVwEAQgAAACZYAQBDAAAAa1gBAEQAAADSWAEARQAAABNZAQBGAAAAfFkBAEcAAACEWQEASAAAADBaAQBJAAAAZ1oBAEoAAADuWgEASwAAAC5bAQBMAAAAcVsBAE0AAADZWwEATgAAAGtcAQBPAAAAh1wBAAgAAADcXAEACQAAAB9dAQAKAAAAZ10BAAsAAACVXQEADAAAAMpdAQANAAAAD14BAA4AAAAqXgEADwAAAIZeAQAPAAAAvV4BABAAAABDXwEAEQAAAH1fAQASAAAAq18BABMAAADZXwEAFAAAAAVgAQAVAAAAMGABABcAAABgYAEAGAAAAHlgAQAZAAAAtWABABsAAADdYAEAHAAAAPBgAQAdAAAAI2EBACAAAABEYQEAIQAAAG9hAQAiAAAAnWEBACMAAADRYQEAJAAAAPNhAQAlAAAAFWIBACYAAABZYgEAKAAAAH1iAQApAAAArmIBACoAAADoYgEAKwAAADVjAQAtAAAAb2MBAC4AAACnYwEALwAAAOZjAQAwAAAAeGQBADEAAACdZAEAMgAAAM9kAQAzAAAA/mQBAGQAAABgZQEAyAAAAN1lAQDJAAAAAAAAAP////8iZgEAAQAAAD5mAQACAAAABVUBAAMAAADNZgEAEQAAADRnAQASAAAAg2cBABMAAAD7ZwEAFAAAADtoAQAVAAAATGgBABYAAAB0aAEAEQAAALdoAQAhAAAAymgBACIAAAD+aAEAIwAAAEtpAQAkAAAAaWkBACUAAACfaQEAJgAAAOJpAQAhAAAAAAAAAP////8AAAAAAAAAACYAAAAAAAAAAQAAAJByAQABAAAAkHMBAAEAAACQdAEAAQAAAJB1AQABAAAAkHYBAAEAAACQdwEAAQAAAJB4AQABAAAAkHkBAAEAAACQegEAAQAAAJB7AQABAAAAkHwBAAEAAACQfQEAAQAAAJB+AQABAAAAkH8BAAEAAACQgAEAAQAAAJCBAQABAAAAkIIBAAUAAAAAAAAABg=="),N(k,129280,"oIMBAKCDAQAghAEAIIQBAKCEAQAghQEAoIUBACCGAQCghgEAoIYBACCHAQAghwEAoIcBAKCHAQAgiAEAIIgBAKCIAQCgiAEAIIkBACCJAQAuOU4ycIoBAAMHBQCQigEALjlOLnCKAQADBwUAkIoBAC45Ti5wigEAAwcFAJCKAQAuOVoycIoBAAMJBQCVigEALjlOMnCKAQADBwUAkIoBAC45SjdwigEABAcFAJqKAQAuOUo3cIoBAAQHBQCaigEALjlKN3CKAQAEBwUAmooBAC45TjJwigEAAwcFAJCKAQAuOU4ucIoBAAMHBQCQigEALjlOMnCKAQADBwUAkIoBACIpKSBwigEAAwcFAJqKAQAuOTcycIoBAAMHBQCaigEAo1MBABABAAAAVAEADAEAANJUAQARAQAAClUBACMAAAB/VQEAGwAAADRWAQAVAAAAxVYBAAABAAABVwEAAgEAAE1XAQADAQAAvVcBAAQBAAD7VwEABQEAAE5YAQATAAAAkVgBAB4AAADVWAEAFwAAAF9ZAQAaAAAAkVkBABkAAAD0WQEAGAAAADhaAQAdAAAAzloBABwAAAAPWwEAFgAAADdbAQAU"),N(k,129744,"Q1gBABABAACIWAEADAEAAPNYAQARAQAAM1kBACMAAACHWQEAGwAAAOBZAQAVAAAAQloBAAABAACcWgEAAgEAAABbAQADAQAAT1sBAAQBAACnWwEABQEAAEhcAQATAAAAc1wBAB4AAADEXAEAFwAAABVdAQAaAAAAXV0BABkAAACIXQEAGAAAANJdAQAdAAAABF4BABwAAAAvXgEAFgAAAF9eAQAU"),N(k,129920,"u08BAAEAAABcUAEAAAAAAM9QAQAAAAAAOFIBAAAAAABBUwEAAAAAAIFTAQAAAAAA+1MBAAAAAADnVAEAAAAAACVVAQAAAAAAiVUBAAAAAABUVgEAAAAAAPxWAQAAAAAADlcBAAAAAABIVwEAAAAAAKdXAQAAAAAA9lcBAAAAAAA3WAEAAAAAAKNYAQAAAAAA6FgBAAAAAAAuWQEAAAAAAH9ZAQAAAAAA61kBAAAAAAD/////g00BAIIAAAB5AAAAdg=="),N(k,130128,"4I8BAOCPAQBQkAEAwJABAMCQAQDAkAEAAQAAANQKAwCMCgMAROcC"),N(k,130176,"I0sBAAEAAAAAAAAA/////1dMAQABAAAA+0wBAAIAAADGTQEAAwAAAAAAAAD/////Vk4BAAAAAADSTgEAAQAAALJPAQACAAAAGFABABQAAAAAAAAA/////wAAAAAAAAAAt1ABABIAAABNUgEAFAAAAN5SAQAkAAAAhlMBAEAAAAARVAEAwQAAAAAAAAD/////q1QBAAEAAAAAAAAA/////1dMAQAAAAAAGVUBAAEAAACRVQEAAgAAAENWAQADAAAA31YBAAQAAAAgVwEABQAAAAAAAAD/////AAAAAAAAAABXTAEAAQAAAIlXAQACAAAAr1cBAAMAAADfVgEABAAAACBXAQAFAAAAAAAAAP////8AAAAAClgBADxYAQAYUAEAqFgB"),N(k,130480,"8l8BAAEAAAA5YAEAAgAAAFhgAQADAAAAgWABAAQAAACwYAEABQAAANNgAQAGAAAABWEBAAcAAAAqYQEACAAAAFFhAQAJAAAAdmEBAAoAAACQYQEACwAAAMNhAQAMAAAA+WEBAA0AAAAuYgEADgAAAE5iAQAPAAAAhmIBAA8AAADUYgEADwAAABljAQAPAAAAP2MBAA8AAACkYwEABwAAANpjAQAHAAAAO2QBAAcAAACEZAEABwAAAK9kAQAHAAAAw2QBAA4AAADnZAEADgAAAAplAQAQAAAA9GUBABAAAAArZgEAEAAAAN9WAQAQAAAAbmYBABAAAADBZgEAEA=="),N(k,130752,"f20BAD4AAACjbQEAPOAAAM1tAQAmAAAA1G0BACIAAAA6bgEAIAAAAHhuAQAnAAAAAAAAAP////8AAAAAAAAAAGNnAQBkAAAAxWcBAAAAAAAJaAEAHgAAAEJoAQBBAAAAQ1YBAGQAAACGaAEAlgAAAKVoAQDmAAAAAAAAAP////9jZwEAZAAAAL5oAQA8AAAA6WgBAFAAAABDVgEAZAAAABJpAQB9AAAAUmkBAKAAAAAAAAAA/////wAAAAAAAAAAY2cBAGQAAACUaQEARgAAAN5pAQBVAAAAQ1YBAGQAAAAoagEAbgAAAGdqAQB4AAAAAAAAAP////8AAAAAAAAAAGNnAQBkAAAAlGkBABQAAADeaQEAMgAAAENWAQBkAAAAKGoBAIwAAABnagEAtAAAAAAAAAD/////"),N(k,131076,"QP8BAAD/AQCA/wEAwP8B"),N(k,131104,"wmoBACDgAAALawEACeAAAEFrAQBf4AAAe2sBACI="),N(k,131152,"q2sBAAEAAAC8awEAAgAAAA1sAQAD"),N(k,131184,"+EwBAMJNAQBTTgEACU8BAOVPAQBkUAEA2lABAGdSAQDyUgEA1FMBAGFUAQ=="),N(k,131236,"iFIBADlTAQAAAAAAnlMBAGRUAQDwVAEAL1UBAJpVAQBQVgE="),N(k,131280,"Y1IBAIADAACAA/8DbGUAAAcAAAA0UwEAIAQAAAAELwUAAAAAAAAAAHNTAQAwBQAAMAWPBXloAAAEAAAAG1QBAJAFAACQBf8FAAAAAAAAAAC3VAEAAAYAAAAG/wYAAAAAAAAAACpVAQAABwAAAAdPBwAAAAAAAAAAllUBAAAJAAAACX8JaWgAAAQAAAA/VgEAgAkAAIAJ/wluYgAABAAAANZWAQAACgAAAAp/CmFwAAAEAAAAClcBAIAKAACACv8KdWcAAAQAAABfVwEAAAsAAAALfwsAAAAAAAAAAM5XAQCACwAAgAv/C2F0AAAEAAAAD1gBAAAMAAAADH8MZXQAAAAAAAAsWAEAgAwAAIAM/wxuawAABAAAAJ9YAQAADQAAAA1/DWxtAAAEAAAA5FgBAIANAACADf8NaXMAAAQAAAA8WQEAAA4AAAAOfw4AAAAAAAAAAJtZAQCADgAAgA7/DgAAAAAAAAAA8FkBAAAPAAAAD/8PAAAAAAAAAAA0WgEAABAAAAAQnxAAAAAAAAAAANlaAQCgEAAAoBD/EGFrAAAEAAAAGFsBAAARAAAAEf8Rb2sAAAQAAABKWwEAABIAAAASnxMAAAAAAAAAALlbAQAAKAAAACj/KAAAAAAQAAAAWlwBAEAwAABAMP8wAAAAAAgAAACDXAEAADEAAAAx/58AAAAACAAAABhbAQAApwAAAKf/129rAAAM"),N(k,131840,"WAIAAKoAAACwBAAAhwAAANAHAABuAAAAuAsAAG4AAAD/////"),N(k,131888,"qAsD"),N(k,131904,"mF4BAAEAAAA4XwEAAgAAAGFfAQADAAAAnV8BAAYAAADCXwEACQAAAPhfAQAKAAAAJ2ABAAQAAABNYAEABQAAAI1gAQAkAAAAq2ABAAsAAADVYAEADAAAAPZgAQANAAAAFmEBAA4AAABMYQEADwAAAGdhAQAQAAAAlmEBABEAAAC7YQEAEgAAAAJiAQAfAAAAG2IBACUAAABIYgEAIAAAAJJiAQAhAAAAzmIBACIAAADwYgEABwAAAC5jAQAI"),N(k,132112,"jmMBAAEAAAC8YwEAAgAAAAAAAAABAAAAFJwBACCcAQAsnAEAPAAAABo="),N(k,132163,"AgMFCAsOEhYbICUrMTc+RUxTWmJpcXmAiJCYn6autbzCyc/V2uDk6e3w9Pb5+/z9/f39/Pv59vTw7enk4NrVz8nCvLWupp+YkIiAeXFpYlpTTEU+NzErJSAbFhIOCwgFAwI="),N(k,132288,"QAAAAAABAAAAAAAA7AQCACcAAAAoAAAAKQAAACoAAAArAAAAQOkBAMO2AQBo6QEAsLYBAOQEAgAAAAAAJAUCACwAAAAtAAAALgAAAC8AAABA6QEAArcBAGjpAQDstgEAEAUCAGjpAQDStgEAGAUCAAU="),N(k,132412,"DQ=="),N(k,132436,"CwAAAAoAAADoeAM="),N(k,132460,"Ag=="),N(k,132476,"//////////8="),N(k,132544,"MAUCAAAAAAAF"),N(k,132564,"MA=="),N(k,132588,"CwAAADEAAAD4eAMAAAQ="),N(k,132612,"AQ=="),N(k,132628,"/////wo="),N(k,132696,"yAUCAAB/BA==");var di,ct=(di=[null,function(A){var t,r=0;return r=e[(A|=0)>>2],e[A>>2]=r+1,r=255&(t=g[0|r]),(0|t)<0&&(r=M[(e[A+12>>2]+(r<<1)|0)-256>>1]),0|r},_i,function(A){var t,r;return t=e[(A|=0)>>2],r=e[t>>2],e[A>>2]=t+4,0|r},function(A){var t=0,r=0;return t=e[(A|=0)>>2],(0|(r=fA(A)))==65533&&(e[A>>2]=t+1,e[A+8>>2]=1,r=255&(t=g[0|t]),(0|t)>=0||(r=M[(e[A+12>>2]+(r<<1)|0)-256>>1])),0|r},fA,function(A){var t,r,a=0;return(a=e[4+(A|=0)>>2])>>>0<=(r=(t=e[A>>2])+1|0)>>>0?(e[A>>2]=a,65533):(e[A>>2]=r,a=l[0|t],e[A>>2]=t+2,a|l[t+1|0]<<8)},function(A,t){var r,a,s;return t|=0,A=e[(A|=0)>>2],r=e[A+4>>2],a=e[t>>2],(t=Br(r+1|0,(s=e[a+4>>2])+1|0))||(t=g[0|r]-g[0|s]|0)||(t=Br(e[A>>2],e[a>>2])),0|t},function(A,t){var r;return A|=0,t=e[(t|=0)>>2],r=e[A>>2],(A=e[t+16>>2]-e[r+16>>2]|0)||(A=Br(e[r>>2],e[t>>2])),0|A},Kn,function(A,t,r,a){var s;return t|=0,r|=0,a|=0,J=s=J-16|0,(A=0|yA(e[60+(A|=0)>>2],0|t,0|r,255&a,s+8|0))?(e[56798]=A,A=-1):A=0,J=s+16|0,$=A?-1:e[s+12>>2],0|(A?-1:e[s+8>>2])},function(A,t,r){t|=0,r|=0;var a,s=0,i=0,o=0,c=0,f=0,m=0;J=a=J-32|0,s=e[28+(A|=0)>>2],e[a+16>>2]=s,o=e[A+20>>2],e[a+28>>2]=r,e[a+24>>2]=t,t=o-s|0,e[a+20>>2]=t,o=t+r|0,f=2;e:{A:{t=a+16|0,(s=0|Ge(e[A+60>>2],0|t,2,a+12|0))?(e[56798]=s,s=-1):s=0;r:{if(s)s=t;else for(;;){if((0|(i=e[a+12>>2]))==(0|o))break r;if((0|i)<0){s=t;break A}if(c=i-((m=(c=e[t+4>>2])>>>0<i>>>0)?c:0)|0,e[(s=(m<<3)+t|0)>>2]=c+e[s>>2],e[(t=(m?12:4)+t|0)>>2]=e[t>>2]-c,o=o-i|0,t=s,f=f-m|0,(i=0|Ge(e[A+60>>2],0|t,0|f,a+12|0))?(e[56798]=i,i=-1):i=0,i)break}if((0|o)!=-1)break A}t=e[A+44>>2],e[A+28>>2]=t,e[A+20>>2]=t,e[A+16>>2]=t+e[A+48>>2],A=r;break e}e[A+28>>2]=0,e[A+16>>2]=0,e[A+20>>2]=0,e[A>>2]=32|e[A>>2],A=0,(0|f)!=2&&(A=r-e[s+4>>2]|0)}return J=a+32|0,0|A},function(A,t,r){A|=0,t|=0,r|=0;var a,s=0,i=0,o=0;J=a=J-32|0,e[a+16>>2]=t,s=e[A+48>>2],e[a+20>>2]=r-!!(0|s),i=e[A+44>>2],e[a+28>>2]=s,e[a+24>>2]=i;e:{A:{if((s=0|FA(e[A+60>>2],a+16|0,2,a+12|0))?(e[56798]=s,s=-1):s=0,s)t=32;else{if((0|(s=e[a+12>>2]))>0)break A;t=s?32:16}e[A>>2]=t|e[A>>2];break e}o=s,(i=e[a+20>>2])>>>0>=s>>>0||(s=e[A+44>>2],e[A+4>>2]=s,e[A+8>>2]=s+(o-i|0),e[A+48>>2]&&(e[A+4>>2]=s+1,g[(t+r|0)-1|0]=l[0|s]),o=r)}return J=a+32|0,0|o},function(A){return 0|GA(e[60+(A|=0)>>2])},Ds,function(A,t,r,a,s,i){A|=0,t=+t,r|=0,a|=0,s|=0,i|=0;var o,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0,cA=0;J=o=J-560|0,e[o+44>>2]=0,be(+t),c=0|X(1),X(0),(0|c)<0?(he=1,rA=84997,be(+(t=-t)),c=0|X(1),X(0)):2048&s?(he=1,rA=85e3):(rA=(he=1&s)?85003:84998,cA=!he);e:if(2146435072&~c){Qe=o+16|0;A:{r:{s:{if(t=Bn(t,o+44|0),(t+=t)!=0){if(c=e[o+44>>2],e[o+44>>2]=c-1,(0|(Ve=32|i))!=97)break s;break A}if((0|(Ve=32|i))==97)break A;w=e[o+44>>2],E=(0|a)<0?6:a;break r}w=c-29|0,e[o+44>>2]=w,t*=268435456,E=(0|a)<0?6:a}for(f=ee=(o+48|0)+((0|w)>=0?288:0)|0;a=t<4294967296&t>=0?~~t>>>0:0,e[f>>2]=a,f=f+4|0,(t=1e9*(t-+(a>>>0)))!=0;);if((0|w)<=0)a=w,c=f,m=ee;else for(m=ee,a=w;;){if(Y=(0|a)>=29?29:a,!(m>>>0>(c=f-4|0)>>>0)){for(a=0;p=e[c>>2],Ke=a,a=31&Y,(63&Y)>>>0>=32?(P=p<<a,a=0):(P=(1<<a)-1&p>>>32-a,a=p<<a),p=P+Z|0,a=ui(Ke=Ke+a|0,a>>>0>Ke>>>0?p+1|0:p,1e9),e[c>>2]=Ke-It(a,$,1e9,0),m>>>0<=(c=c-4|0)>>>0;);a&&(e[(m=m-4|0)>>2]=a)}for(;m>>>0<(c=f)>>>0&&!e[(f=c-4|0)>>2];);if(a=e[o+44>>2]-Y|0,e[o+44>>2]=a,f=c,!((0|a)>0))break}if((0|a)<0)for(Be=1+((E+25>>>0)/9|0)|0,Z=(0|Ve)==102;;){if(P=(0|(a=0-a|0))>=9?9:a,c>>>0<=m>>>0)f=e[m>>2];else{for(Y=1e9>>>P|0,p=~(-1<<P),a=0,f=m;Ke=a,a=e[f>>2],e[f>>2]=Ke+(a>>>P|0),a=z(Y,a&p),(f=f+4|0)>>>0<c>>>0;);f=e[m>>2],a&&(e[c>>2]=a,c=c+4|0)}if(a=P+e[o+44>>2]|0,e[o+44>>2]=a,m=(!f<<2)+m|0,c=c-(f=Z?ee:m)>>2>(0|Be)?f+(Be<<2)|0:c,!((0|a)<0))break}if(a=0,!(c>>>0<=m>>>0||(a=z(ee-m>>2,9),f=10,(p=e[m>>2])>>>0<10)))for(;a=a+1|0,p>>>0>=(f=z(f,10))>>>0;);if((0|(f=(E-((0|Ve)!=102?a:0)|0)-((0|Ve)==103&!!(0|E))|0))<(z(c-ee>>2,9)-9|0)){if(w=((((0|w)<0?4:292)+o|0)+((p=(0|(Y=f+9216|0))/9|0)<<2)|0)-4048|0,f=10,(0|(P=Y-z(p,9)|0))<=7)for(;f=z(f,10),(0|(P=P+1|0))!=8;);if(!(!(Z=(Y=e[w>>2])-z(f,Be=(Y>>>0)/(f>>>0)|0)|0)&(0|(p=w+4|0))==(0|c))&&(!(1&Be)&&(t=9007199254740992,!(1&g[w-4|0])|(0|f)!=1e9|m>>>0>=w>>>0)||(t=9007199254740994),ce=(0|c)==(0|p)?1:1.5,ce=(p=f>>>1|0)>>>0>Z>>>0?.5:(0|p)==(0|Z)?ce:1.5,l[0|rA]!=45|cA||(ce=-ce,t=-t),p=Y-Z|0,e[w>>2]=p,t+ce!=t)){if(a=f+p|0,e[w>>2]=a,a>>>0>=1e9)for(;e[w>>2]=0,(w=w-4|0)>>>0<m>>>0&&(e[(m=m-4|0)>>2]=0),a=e[w>>2]+1|0,e[w>>2]=a,a>>>0>999999999;);if(a=z(ee-m>>2,9),f=10,!((p=e[m>>2])>>>0<10))for(;a=a+1|0,p>>>0>=(f=z(f,10))>>>0;);}c=c>>>0>(f=w+4|0)>>>0?f:c}for(;p=c,!(Y=c>>>0<=m>>>0)&&!e[(c=p-4|0)>>2];);if((0|Ve)==103){if(E=((c=(0|(f=E||1))>(0|a)&(0|a)>-5)?~a:-1)+f|0,i=(c?-1:-2)+i|0,!(w=8&s)){if(c=-9,!Y&&(w=e[p-4>>2])&&(P=10,c=0,!((w>>>0)%10|0))){for(;f=c,c=c+1|0,!((w>>>0)%((P=z(P,10))>>>0)|0););c=~f}f=z(p-ee>>2,9),(-33&i)!=70?(w=0,E=(0|(c=(0|(c=((a+f|0)+c|0)-9|0))>0?c:0))>(0|E)?E:c):(w=0,E=(0|(c=(0|(c=(c+f|0)-9|0))>0?c:0))>(0|E)?E:c)}}else w=8&s;if(P=-1,(0|((Y=w|E)?2147483645:2147483646))<(0|E))break e;if(Z=1+(!!(0|Y)+E|0)|0,(0|(f=-33&i))!=70){if((Qe-(c=ps(((c=a>>31)^a)-c|0,0,Qe))|0)<=1)for(;g[0|(c=c-1|0)]=48,(Qe-c|0)<2;);if(g[0|(Be=c-2|0)]=i,g[c-1|0]=(0|a)<0?45:43,(0|(c=Qe-Be|0))>(2147483647^Z))break e}else{if((2147483647^Z)<(0|a))break e;c=(0|a)>0?a:0}if((0|(a=c+Z|0))>(2147483647^he))break e;ta(A,32,r,Z=a+he|0,s),Xr(A,rA,he),ta(A,48,r,Z,65536^s);r:{s:{i:{if((0|f)==70){for(a=8|(i=o+16|0),w=9|i,m=f=m>>>0>ee>>>0?ee:m;;){c=ps(e[m>>2],0,w);c:if((0|f)==(0|m))(0|c)==(0|w)&&(g[o+24|0]=48,c=a);else{if(o+16>>>0>=c>>>0)break c;for(;g[0|(c=c-1|0)]=48,o+16>>>0<c>>>0;);}if(Xr(A,c,w-c|0),!(ee>>>0>=(m=m+4|0)>>>0))break}if(Y&&Xr(A,85998,1),(0|E)<=0|m>>>0>=p>>>0)break i;for(;;){if((c=ps(e[m>>2],0,w))>>>0>o+16>>>0)for(;g[0|(c=c-1|0)]=48,o+16>>>0<c>>>0;);if(Xr(A,c,(0|E)>=9?9:E),c=E-9|0,p>>>0<=(m=m+4|0)>>>0)break s;if(a=(0|E)>9,E=c,!a)break}break s}c:if(!((0|E)<0))for(ee=m>>>0<p>>>0?p:m+4|0,a=8|(i=o+16|0),p=9|i,f=m;;){(0|p)==(0|(c=ps(e[f>>2],0,p)))&&(g[o+24|0]=48,c=a);o:if((0|f)==(0|m))Xr(A,c,1),c=c+1|0,w|E&&Xr(A,85998,1);else{if(o+16>>>0>=c>>>0)break o;for(;g[0|(c=c-1|0)]=48,o+16>>>0<c>>>0;);}if(Xr(A,c,(0|(i=p-c|0))>(0|E)?E:i),E=E-i|0,ee>>>0<=(f=f+4|0)>>>0)break c;if(!((0|E)>=0))break}ta(A,48,E+18|0,18,0),Xr(A,Be,Qe-Be|0);break r}c=E}ta(A,48,c+9|0,9,0)}ta(A,32,r,Z,8192^s),P=(0|r)<(0|Z)?Z:r;break e}if(w=(i<<26>>31&9)+rA|0,!(a>>>0>11)){for(c=12-a|0,ce=16;ce*=16,c=c-1|0;);t=l[0|w]!=45?t+ce-ce:-(ce+(-t-ce))}for((0|Qe)==(0|(c=ps(((c=e[o+44>>2])^(f=c>>31))-f|0,0,Qe)))&&(g[o+15|0]=48,c=o+15|0),ee=2|he,m=32&i,f=e[o+44>>2],g[0|(E=c-2|0)]=i+15,g[c-1|0]=(0|f)<0?45:43,c=8&s,f=o+16|0;i=f,p=Ne(t)<2147483648?~~t:-2147483648,g[0|f]=m|l[p+124512|0],!((0|a)>0|c)&(t=16*(t-+(0|p)))==0|((f=i+1|0)-(o+16|0)|0)!=1||(g[i+1|0]=46,f=i+2|0),t!=0;);P=-1,(2147483645-(i=(c=Qe-E|0)+ee|0)|0)<(0|a)||(ta(A,32,r,i=(a=!a||((m=f-(o+16|0)|0)-2|0)>=(0|a)?m=f-(o+16|0)|0:a+2|0)+i|0,s),Xr(A,w,ee),ta(A,48,r,i,65536^s),Xr(A,o+16|0,m),ta(A,48,a-m|0,0,0),Xr(A,E,c),ta(A,32,r,i,8192^s),P=(0|r)<(0|i)?i:r)}else ta(A,32,r,c=he+3|0,-65537&s),Xr(A,rA,he),a=32&i,Xr(A,t!=t?a?85596:85774:a?85247:85460,3),ta(A,32,r,c,8192^s),P=(0|r)<(0|c)?c:r;return J=o+560|0,0|P},function(A,t){var r;A|=0,r=t|=0,t=e[t>>2]+7&-8,e[r>>2]=t+16,D[A>>3]=Es(e[t>>2],e[t+4>>2],e[t+8>>2],e[t+12>>2])},function(A,t,r){t|=0,r|=0;var a,s,i=0,o=0;return a=e[84+(A|=0)>>2],o=e[a+4>>2],s=e[A+28>>2],(i=(i=e[A+20>>2]-s|0)>>>0>o>>>0?o:i)&&(wt(e[a>>2],s,i),e[a>>2]=i+e[a>>2],o=e[a+4>>2]-i|0,e[a+4>>2]=o),i=e[a>>2],(o=r>>>0>o>>>0?o:r)&&(wt(i,t,o),i=o+e[a>>2]|0,e[a>>2]=i,e[a+4>>2]=e[a+4>>2]-o),g[0|i]=0,t=e[A+44>>2],e[A+28>>2]=t,e[A+20>>2]=t,0|r},function(A,t,r){r|=0;var a,s,i=0;return wt(t|=0,a=e[84+(A|=0)>>2],r=r>>>0>(i=(s=ai(a,0,i=r+256|0))?s-a|0:i)>>>0?i:r),t=a+i|0,e[A+84>>2]=t,e[A+8>>2]=t,e[A+4>>2]=r+a,0|r},function(A,t,r){t|=0,r|=0;var a,s=0,i=0,o=0;s=e[84+(A|=0)>>2],a=e[s>>2]?s:84412,s=0;e:if(e[A+48>>2])for(;;){if(!(i=e[(s<<2)+a>>2]))break e;if(g[e[A+44>>2]+s|0]=(0|i)>=128?64:i,!((s=s+1|0)>>>0<ue[A+48>>2]))break}return i=e[A+44>>2],e[A+4>>2]=i,e[A+84>>2]=(s<<2)+a,e[A+8>>2]=s+i,!r|!s||(e[A+4>>2]=i+1,g[0|t]=l[0|i],o=1),0|o},Kn,Zs,T0,T0,function(A,t,r){r|=0;var a,s=0;return J=a=J+-64|0,s=1,$a(A|=0,t|=0,0)||(s=0,t&&(s=0,(t=sr(t,125132))&&(jA(4|(s=a+8|0),0,52),e[a+56>>2]=1,e[a+20>>2]=-1,e[a+16>>2]=A,e[a+8>>2]=t,ct[e[e[t>>2]+28>>2]](t,s,e[r>>2],1),(0|(A=e[a+32>>2]))==1&&(e[r>>2]=e[a+24>>2]),s=(0|A)==1))),J=a- -64|0,0|s},function(A,t,r,a,s,i){r|=0,a|=0,s|=0,i|=0,$a(A|=0,e[8+(t|=0)>>2],i)&&ki(t,r,a,s)},function(A,t,r,a,s){if(r|=0,a|=0,s|=0,$a(A|=0,e[8+(t|=0)>>2],s))e[t+28>>2]==1|e[t+4>>2]!=(0|r)||(e[t+28>>2]=a);else e:if($a(A,e[t>>2],s)){if(!(e[t+16>>2]!=(0|r)&e[t+20>>2]!=(0|r))){if((0|a)!=1)break e;return void(e[t+32>>2]=1)}e[t+20>>2]=r,e[t+32>>2]=a,e[t+40>>2]=e[t+40>>2]+1,e[t+36>>2]!=1|e[t+24>>2]!=2||(g[t+54|0]=1),e[t+44>>2]=4}},function(A,t,r,a){r|=0,a|=0,$a(A|=0,e[8+(t|=0)>>2],0)&&x0(t,r,a)},Zs,function(A,t,r,a,s,i){r|=0,a|=0,s|=0,i|=0,$a(A|=0,e[8+(t|=0)>>2],i)?ki(t,r,a,s):(A=e[A+8>>2],ct[e[e[A>>2]+20>>2]](A,t,r,a,s,i))},function(A,t,r,a,s){if(r|=0,a|=0,s|=0,$a(A|=0,e[8+(t|=0)>>2],s))e[t+28>>2]==1|e[t+4>>2]!=(0|r)||(e[t+28>>2]=a);else e:{if($a(A,e[t>>2],s)){if(!(e[t+16>>2]!=(0|r)&e[t+20>>2]!=(0|r))){if((0|a)!=1)break e;return void(e[t+32>>2]=1)}e[t+32>>2]=a;A:if(e[t+44>>2]!=4){if(b[t+52>>1]=0,A=e[A+8>>2],ct[e[e[A>>2]+20>>2]](A,t,r,r,1,s),l[t+53|0]){if(e[t+44>>2]=3,!l[t+52|0])break A;break e}e[t+44>>2]=4}if(e[t+20>>2]=r,e[t+40>>2]=e[t+40>>2]+1,e[t+36>>2]!=1|e[t+24>>2]!=2)break e;return void(g[t+54|0]=1)}A=e[A+8>>2],ct[e[e[A>>2]+24>>2]](A,t,r,a,s)}},function(A,t,r,a){r|=0,a|=0,$a(A|=0,e[8+(t|=0)>>2],0)?x0(t,r,a):(A=e[A+8>>2],ct[e[e[A>>2]+28>>2]](A,t,r,a))},Zs,function(A){return 84787},Zs,function(A){return 85058},Zs,function(A){return 84147},function(A){var t;return t=A|=0,A=e[A>>2],e[t>>2]=A+1,0|((0|(A=g[0|A]))<0?65533:255&A)},function(A,t,r,a,s,i){A|=0,t|=0,r|=0,a|=0,s|=0,i|=0;var o,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0;if(o=Sa(408),e[o+4>>2]=a,e[o>>2]=r,t?(wt(o+16|0,t,376),D[o+392>>3]=(D[t+368>>3]-D[t>>3])/+(r>>>0),t=0):t=1,e[o+400>>2]=s,g[o+8|0]=t,i){if(r=e[A+24>>2])for(t=e[A+20>>2],a=e[A+8>>2];(s=e[e[(t>>>8&16777212)+a>>2]+((1023&t)<<2)>>2])&&(xt(s),r=e[A+24>>2],a=e[A+8>>2],t=e[A+20>>2]),t=t+1|0,e[A+20>>2]=t,r=r-1|0,e[A+24>>2]=r,t>>>0>=2048&&(xt(e[a>>2]),a=e[A+8>>2]+4|0,e[A+8>>2]=a,t=e[A+20>>2]-1024|0,e[A+20>>2]=t,r=e[A+24>>2]),r;);t=e[A+28>>2],e[A+420>>2]=e[t>>2],(r=e[A+32>>2])&&(g[t+8|0]=l[r+8|0],wt(t+16|0,A+40|0,376),(t=e[A+32>>2])&&xt(t),e[A+32>>2]=0)}if(r=(a=e[A+24>>2])+e[A+20>>2]|0,s=e[A+12>>2],(0|r)==(0|((0|(t=e[A+8>>2]))!=(0|s)?(s-t<<8)-1:0))){J=c=J-32|0;e:{A:{r:{s:{if((t=e[16+(i=A+4|0)>>2])>>>0>=1024){if(e[i+16>>2]=t-1024,t=e[i+4>>2],E=e[t>>2],s=t+4|0,e[i+4>>2]=s,(0|(t=e[i+8>>2]))==e[i+12>>2])if((f=e[i>>2])>>>0<s>>>0)r=Yt((a=(1+(s-f>>2)|0)/-2<<2)+s|0,s,t=t-s|0)+t|0,e[i+8>>2]=r,e[i+4>>2]=a+e[i+4>>2];else{if((r=(0|t)==(0|f)?1:t-f>>1)>>>0>=1073741824)break s;if(P=(a=r<<2)+(m=Sa(a))|0,r=a=m+(-4&r)|0,(0|t)!=(0|s)){if(Y=-4&(t=t-s|0),w=1+((p=t-4|0)>>>2|0)&7)for(r=0,t=a;e[t>>2]=e[s>>2],s=s+4|0,t=t+4|0,(0|w)!=(0|(r=r+1|0)););else t=a;if(r=a+Y|0,!(p>>>0<28))for(;e[t>>2]=e[s>>2],e[t+4>>2]=e[s+4>>2],e[t+8>>2]=e[s+8>>2],e[t+12>>2]=e[s+12>>2],e[t+16>>2]=e[s+16>>2],e[t+20>>2]=e[s+20>>2],e[t+24>>2]=e[s+24>>2],e[t+28>>2]=e[s+28>>2],s=s+32|0,(0|r)!=(0|(t=t+32|0)););}e[i+12>>2]=P,e[i+8>>2]=r,e[i+4>>2]=a,e[i>>2]=m,f&&(xt(f),r=e[i+8>>2])}else r=t;e[r>>2]=E,e[i+8>>2]=e[i+8>>2]+4;break e}if((f=(s=e[i+8>>2])-e[i+4>>2]>>2)>>>0<(a=(t=e[i+12>>2])-(r=e[i>>2])|0)>>2>>>0){if((0|t)!=(0|s)){e[c+8>>2]=Sa(4096),We(i,c+8|0);break e}if(e[c+8>>2]=Sa(4096),ve(i,c+8|0),t=e[i+4>>2],E=e[t>>2],s=t+4|0,e[i+4>>2]=s,(0|(t=e[i+8>>2]))==e[i+12>>2])if((f=e[i>>2])>>>0<s>>>0)r=Yt((a=(1+(s-f>>2)|0)/-2<<2)+s|0,s,t=t-s|0)+t|0,e[i+8>>2]=r,e[i+4>>2]=a+e[i+4>>2];else{if((r=(0|t)==(0|f)?1:t-f>>1)>>>0>=1073741824)break s;if(P=(a=r<<2)+(m=Sa(a))|0,r=a=m+(-4&r)|0,(0|t)!=(0|s)){if(Y=-4&(t=t-s|0),w=1+((p=t-4|0)>>>2|0)&7)for(r=0,t=a;e[t>>2]=e[s>>2],s=s+4|0,t=t+4|0,(0|w)!=(0|(r=r+1|0)););else t=a;if(r=a+Y|0,!(p>>>0<28))for(;e[t>>2]=e[s>>2],e[t+4>>2]=e[s+4>>2],e[t+8>>2]=e[s+8>>2],e[t+12>>2]=e[s+12>>2],e[t+16>>2]=e[s+16>>2],e[t+20>>2]=e[s+20>>2],e[t+24>>2]=e[s+24>>2],e[t+28>>2]=e[s+28>>2],s=s+32|0,(0|r)!=(0|(t=t+32|0)););}e[i+12>>2]=P,e[i+8>>2]=r,e[i+4>>2]=a,e[i>>2]=m,f&&(xt(f),r=e[i+8>>2])}else r=t;e[r>>2]=E,e[i+8>>2]=e[i+8>>2]+4;break e}if(e[c+24>>2]=i+12,!((t=(0|t)==(0|r)?1:a>>1)>>>0>=1073741824)){if(t=Sa(r=t<<2),e[c+8>>2]=t,a=t+(f<<2)|0,e[c+16>>2]=a,e[c+20>>2]=t+r,e[c+12>>2]=a,e[c+4>>2]=Sa(4096),We(c+8|0,c+4|0),(0|(s=e[i+8>>2]))==e[i+4>>2]){t=s;break A}for(;ve(c+8|0,s=s-4|0),e[i+4>>2]!=(0|s););break r}}qi(),xe()}t=e[i+8>>2]}r=e[i>>2],e[i>>2]=e[c+8>>2],e[c+8>>2]=r,e[i+4>>2]=e[c+12>>2],e[c+12>>2]=s,e[i+8>>2]=e[c+16>>2],e[c+16>>2]=t,a=e[i+12>>2],e[i+12>>2]=e[c+20>>2],e[c+20>>2]=a,(0|t)!=(0|s)&&(e[c+16>>2]=t+(3+(s-t|0)&-4)),r&&xt(r)}J=c+32|0,r=(a=e[A+24>>2])+e[A+20>>2]|0,t=e[A+8>>2]}e[e[t+(r>>>8&16777212)>>2]+((1023&r)<<2)>>2]=o,e[A+24>>2]=a+1},function(A){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0;r=e[420+(A|=0)>>2]+1|0,e[A+420>>2]=r;e:{if(t=e[A+32>>2]){if(r>>>0>(c=e[t+4>>2])>>>0){(r=e[A+28>>2])&&(xt(r),t=e[A+32>>2]),e[A+32>>2]=0,e[A+28>>2]=t;break e}for(i=A+40|0,o=t+16|0,f=e[A+28>>2]+16|0,m=+(r>>>0)/+(c>>>0),t=0;;){if(a=D[(r=t<<3)+o>>3],s=D[r+f>>3],D[r+i>>3]=a==a?(a-s)*m+s:s,(0|(r=1|t))==47)break e;a=D[(r<<=3)+o>>3],s=D[r+f>>3],D[r+i>>3]=a==a?(a-s)*m+s:s,t=t+2|0}}if(t=e[A+28>>2],r>>>0>ue[t>>2]){if(i=e[A+24>>2]){if(g[A+416|0]=0,o=e[A+8>>2],r=e[A+20>>2],t=e[e[o+(r>>>8&16777212)>>2]+((1023&r)<<2)>>2],e[A+32>>2]=t,e[A+24>>2]=i-1,r=r+1|0,e[A+20>>2]=r,r>>>0>=2048&&(xt(e[o>>2]),e[A+8>>2]=e[A+8>>2]+4,e[A+20>>2]=e[A+20>>2]-1024,t=e[A+32>>2]),l[t+8|0])wt(t+16|0,e[A+28>>2]+16|0,376),t=e[A+32>>2],e[t+368>>2]=0,e[t+372>>2]=0,a=D[A+40>>3],e[t+392>>2]=0,e[t+396>>2]=0,D[t+16>>3]=a;else if(r=e[A+28>>2],l[r+8|0]&&(wt(r+16|0,t+16|0,376),t=e[A+28>>2],e[t+368>>2]=0,e[t+372>>2]=0,!(t=e[A+32>>2])))break e;(0|(r=e[t+400>>2]))!=-1&&(e[A+424>>2]=r),e[A+420>>2]=0,D[t+16>>3]=D[t+392>>3]*+ue[t+4>>2]+D[t+16>>3];break e}g[A+416|0]=1}else a=D[t+392>>3]+D[A+40>>3],D[A+40>>3]=a,D[t+16>>3]=a}return 0|(l[A+416|0]?0:A+40)},function(A){return e[424+(A|=0)>>2]},function(A){var t=0;return e[(A|=0)>>2]=132304,(t=e[A+28>>2])&&xt(t),(t=e[A+32>>2])&&xt(t),c0(A+4|0),0|A},function(A){var t=0;e[(A|=0)>>2]=132304,(t=e[A+28>>2])&&xt(t),(t=e[A+32>>2])&&xt(t),c0(A+4|0),xt(A)},function(A,t,r){t|=0,r|=0;var a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0;if(!e[1088+(A|=0)>>2])return 0;e:if(t){for(m=A+648|0,f=A- -64|0;;){if(a=e[A+1088>>2],!(a=0|ct[e[e[a>>2]+4>>2]](a)))break e;if(s=Hs(D[A+32>>3]+D[a+16>>3]/+e[A+24>>2]),D[A+32>>3]=s,s=Yi(6.283185307179586*s),s=Hs(D[A+16>>3]+D[a>>3]*(.06*s*D[a+8>>3]+1)/+e[A+8>>2]),D[A+16>>3]=s,c=It(e[56848],e[56849],1284865837,1481765933),i=$,i=(c=c+1|0)?i:i+1|0,e[56848]=c,e[56849]=i,o=.75*D[A+40>>3]+ +(i>>>1|0)/2147483647,D[A+40>>3]=o,p=D[a+24>>3],i=s>=D[a+32>>3],g[A+48|0]=i,o=(E=p)*(p=.2*o),o=xr(f+512|0,xr(f+440|0,s=D[a+352>>3]*(p*D[a+48>>3]+D[a+40>>3]*(s+s+-1+(i?o:.01*o)))*.5,D[a+104>>3],D[a+168>>3]),D[a+112>>3],D[a+176>>3]),o=xr(f+8|0,xr(f+80|0,xr(f+152|0,xr(f+224|0,xr(f+296|0,xr(f+368|0,o==o?(o-s)*D[a+184>>3]+s:s,D[a+96>>3],D[a+160>>3]),D[a+88>>3],D[a+152>>3]),D[a+80>>3],D[a+144>>3]),D[a+72>>3],D[a+136>>3]),D[a+64>>3],D[a+128>>3]),D[a+56>>3],D[a+120>>3]),c=It(e[56848],e[56849],1284865837,1481765933),i=$,i=(c=c+1|0)?i:i+1|0,e[56848]=c,e[56849]=i,s=.75*D[A+56>>3]+ +(i>>>1|0)/2147483647,D[A+56>>3]=s,i=(w<<1)+r|0,p=xr(m+8|0,s=D[a+352>>3]*(D[a+192>>3]*(.3*s))*.5,D[a+200>>3],D[a+248>>3]),P=D[a+296>>3],Y=xr(m+80|0,s,D[a+208>>3],D[a+256>>3]),Z=D[a+304>>3],ee=xr(m+152|0,s,D[a+216>>3],D[a+264>>3]),ce=D[a+312>>3],he=xr(m+224|0,s,D[a+224>>3],D[a+272>>3]),Be=D[a+320>>3],Qe=xr(m+296|0,s,D[a+232>>3],D[a+280>>3]),Ve=D[a+328>>3],E=o,o=(xr(m+368|0,s,D[a+240>>3],D[a+288>>3])-s)*D[a+336>>3]+(Ve*(Qe-s)+(Be*(he-s)+(ce*(ee-s)+(Z*(Y-s)+(P*(p-s)+0))))),s=(E+(s==s?(s-o)*D[a+344>>3]+o:o))*D[a+360>>3]*4e3,a=(0|(a=Ne(s)<2147483648?~~s:-2147483648))>=32e3?32e3:a,b[i>>1]=(0|a)<=-32e3?-32e3:a,(0|(w=w+1|0))==(0|t))break}w=t}return 0|(t>>>0>w>>>0?w:t)},function(A,t){t|=0,e[1088+(A|=0)>>2]=t},Kn,Zs,_i,function(A,t,r,a){return $=0,0}],di.grow=function(A){var t=this.length;return this.length=this.length+A,t},di.set=function(A,t){this[A]=t},di.get=function(A){return this[A]},di);return{v:function(){var A,t=0;J=A=J-16|0,0|EA(A+12|0,A+8|0)||(t=Ct(4+(e[A+12>>2]<<2)|0),e[56800]=t,t&&(!(t=Ct(e[A+8>>2]))||(e[e[56800]+(e[A+12>>2]<<2)>>2]=0,0|pA(e[56800],0|t)))&&(e[56800]=0)),J=A+16|0,e[56841]=227236,e[56823]=42},w:Di,x:Un,y:function(A,t){t|=0,e[(A|=0)>>2]=t},z:function(A,t){return t|=0,g[e[4+(A|=0)>>2]+t|0]},A:Ca,B:D0,C:function(A){return l[12+(A|=0)|0]},D:function(A,t){t|=0,g[12+(A|=0)|0]=t},E:function(A){return l[13+(A|=0)|0]},F:function(A,t){t|=0,g[13+(A|=0)|0]=t},G:function(A){return l[14+(A|=0)|0]},H:function(A,t){t|=0,g[14+(A|=0)|0]=t},I:function(A){return l[15+(A|=0)|0]},J:function(A,t){t|=0,g[15+(A|=0)|0]=t},K:Ks,L:function(A,t){t|=0,e[16+(A|=0)>>2]=t},M:jn,N:function(A,t){t|=0,e[20+(A|=0)>>2]=t},O:Di,P:Un,Q:Q0,R:Ca,S:Ts,T:Ks,U:jn,V:function(A){return e[24+(A|=0)>>2]},W:Di,X:function(){var A,t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,w=0,E=0,P=0,Y=0,Z=0,ee=0,ce=0,he=0,Be=0,Qe=0,Ve=0,Ke=0,rA=0;if(A=Sa(20),e[A+16>>2]=0,e[A+8>>2]=175,e[A+12>>2]=50,!(t=e[33208])){J=t=(J=Be=J-16|0)-80|0;e:{if((r=si(84292))&&(e[t+32>>2]=r,ss(137584,160,85959,t+32|0),(0|is(137584))==-31||(e[t+16>>2]=r,ss(137584,160,86031,t+16|0),(0|is(137584))==-31)))break e;(r=si(84619))&&(e[t>>2]=r,ss(137584,160,85959,t),(0|is(137584))==-31)||(r=l[84826]|l[84827]<<8|l[84828]<<16|l[84829]<<24,e[34396]=l[84822]|l[84823]<<8|l[84824]<<16|l[84825]<<24,e[34397]=r,b[68804]=l[84846]|l[84847]<<8,r=l[84842]|l[84843]<<8|l[84844]<<16|l[84845]<<24,e[34400]=l[84838]|l[84839]<<8|l[84840]<<16|l[84841]<<24,e[34401]=r,r=l[84834]|l[84835]<<8|l[84836]<<16|l[84837]<<24,e[34398]=l[84830]|l[84831]<<8|l[84832]<<16|l[84833]<<24,e[34399]=r)}if(J=t+80|0,e[Be+12>>2]=0,s=Be+12|0,J=c=J-16|0,e[c+12>>2]=22050,WA(85144)||WA(85315)||WA(85473)||WA(85698),w=c+12|0,J=i=J-16|0,e[i+12>>2]=0,!((t=Oi(137832,84262,0,s))||(t=Oi(137836,84420,0,s))||(t=Oi(137840,84813,0,s))||(t=Oi(137820,85016,i+12|0,s))))if(e[34454]=ue[i+12>>2]/68,r=e[34460],e[34456]=r,r&&(0|(m=l[0|r]|l[r+1|0]<<8|l[r+2|0]<<16|l[r+3|0]<<24))==83969){if(E=l[r+4|0]|l[r+5|0]<<8|l[r+6|0]<<16|l[r+7|0]<<24,r=e[34458],Y=l[0|r],e[34461]=Y,Y)for(t=r+4|0,m=0;a=z(m,44)+137856|0,s=l[0|t],e[a+36>>2]=s,e[a+40>>2]=l[t+1|0],o=l[t+8|0]|l[t+9|0]<<8|l[t+10|0]<<16|l[t+11|0]<<24,r=l[t+4|0]|l[t+5|0]<<8|l[t+6|0]<<16|l[t+7|0]<<24,g[0|a]=r,g[a+1|0]=r>>>8,g[a+2|0]=r>>>16,g[a+3|0]=r>>>24,g[a+4|0]=o,g[a+5|0]=o>>>8,g[a+6|0]=o>>>16,g[a+7|0]=o>>>24,o=l[t+16|0]|l[t+17|0]<<8|l[t+18|0]<<16|l[t+19|0]<<24,r=l[t+12|0]|l[t+13|0]<<8|l[t+14|0]<<16|l[t+15|0]<<24,g[a+8|0]=r,g[a+9|0]=r>>>8,g[a+10|0]=r>>>16,g[a+11|0]=r>>>24,g[a+12|0]=o,g[a+13|0]=o>>>8,g[a+14|0]=o>>>16,g[a+15|0]=o>>>24,o=l[t+24|0]|l[t+25|0]<<8|l[t+26|0]<<16|l[t+27|0]<<24,r=l[t+20|0]|l[t+21|0]<<8|l[t+22|0]<<16|l[t+23|0]<<24,g[a+16|0]=r,g[a+17|0]=r>>>8,g[a+18|0]=r>>>16,g[a+19|0]=r>>>24,g[a+20|0]=o,g[a+21|0]=o>>>8,g[a+22|0]=o>>>16,g[a+23|0]=o>>>24,o=l[t+32|0]|l[t+33|0]<<8|l[t+34|0]<<16|l[t+35|0]<<24,r=l[t+28|0]|l[t+29|0]<<8|l[t+30|0]<<16|l[t+31|0]<<24,g[a+24|0]=r,g[a+25|0]=r>>>8,g[a+26|0]=r>>>16,g[a+27|0]=r>>>24,g[a+28|0]=o,g[a+29|0]=o>>>8,g[a+30|0]=o>>>16,g[a+31|0]=o>>>24,r=t+36|0,e[a+32>>2]=r,t=r+(s<<4)|0,(0|Y)!=(0|(m=m+1|0)););(0|Y)<=e[34457]&&(e[34457]=0),t=0,w&&(e[w>>2]=E)}else e:{A:{if(s){if(r=e[s>>2]){xt(e[r+4>>2]),t=e[s>>2];break A}if(t=Ct(16),e[s>>2]=t,t)break A;t=48}else t=268436223;break e}e[t>>2]=1,e[t+4>>2]=Ji(137584),r=e[s>>2],e[r+12>>2]=83969,e[r+8>>2]=m,t=268436223}if(J=i+16|0,r=t,!t){if(w=e[c+12>>2],e[50754]=w,e[50759]=0,e[50760]=134217728/(0|w),e[50762]=0,e[50763]=0,e[50765]=2147483647,e[50781]=100,e[50779]=32,e[50761]=(w<<6)/(0|w),t=e[26385],e[50784]=e[26384],e[50785]=t,t=e[26387],e[50786]=e[26386],e[50787]=t,t=e[26389],e[50788]=e[26388],e[50789]=t,t=e[26391],e[50790]=e[26390],e[50791]=t,t=e[26393],e[50792]=e[26392],e[50793]=t,t=e[26395],e[50794]=e[26394],e[50795]=t,t=e[26397],e[50796]=e[26396],e[50797]=t,e[50798]=e[26398],E=(0|(t=(0|(s=z(w,60)))/12800|0))>=128?128:t,e[50799]=E,e[50800]=(0|E)/2,!((0|w)==22050|(0|s)<12800)){if(w=1&(t=(0|E)<=1?1:E),ce=+(0|E),m=0,(0|E)>=2)for(E=2147483646&t,t=0;Z=m+132160|0,f=127*(1-Da(6.283185307179586*+(0|m)/ce)),P=Ne(f)<2147483648?~~f:-2147483648,g[0|Z]=P,Z=132160+(s=1|m)|0,f=127*(1-Da(6.283185307179586*+(0|s)/ce)),P=Ne(f)<2147483648?~~f:-2147483648,g[0|Z]=P,m=m+2|0,(0|E)!=(0|(t=t+2|0)););w&&(t=m+132160|0,f=127*(1-Da(6.283185307179586*+(0|m)/ce)),Z=Ne(f)<2147483648?~~f:-2147483648,g[0|t]=Z)}if(e[50801]=105792,e[56797]=rs(),e[55964]=38,e[55921]=1,e[55918]=22050,e[56606]=0,e[55960]=110928,e[55958]=0,e[55959]=1074266112,e[55956]=100,e[55922]=20,e[55923]=220,e[55916]=1,e[55917]=0,Ki(),e[56244]=0,e[56245]=0,e[55928]=0,e[55926]=0,e[55927]=0,e[55924]=0,e[56246]=0,e[56247]=0,e[56260]=0,e[56261]=0,e[56262]=0,e[56263]=0,e[56276]=0,e[56277]=0,e[56278]=0,e[56279]=0,e[55974]=0,e[55975]=0,e[55972]=0,e[55973]=0,ce=-3.141592653589793/+(0|(t=e[55918])),D[27967]=ce,s=(0|z(t,630))/1e4|0,e[55920]=s,t=(0|z(t,950))/1e4|0,e[55919]=t,f=-2*ce,D[27968]=f,ce=(Ke=Pt(ce*+(0|s)))*-Ke,D[28129]=ce,f=Ke*Da(f*+(0|t)),f+=f,D[28128]=f,D[28127]=1-f-ce,e[55990]=0,e[55991]=0,e[55988]=0,e[55989]=0,e[56006]=0,e[56007]=0,e[56004]=0,e[56005]=0,e[56022]=0,e[56023]=0,e[56020]=0,e[56021]=0,e[56038]=0,e[56039]=0,e[56036]=0,e[56037]=0,e[56054]=0,e[56055]=0,e[56052]=0,e[56053]=0,e[56070]=0,e[56071]=0,e[56068]=0,e[56069]=0,e[56086]=0,e[56087]=0,e[56084]=0,e[56085]=0,e[56102]=0,e[56103]=0,e[56100]=0,e[56101]=0,e[56118]=0,e[56119]=0,e[56116]=0,e[56117]=0,e[56134]=0,e[56135]=0,e[56132]=0,e[56133]=0,e[56150]=0,e[56151]=0,e[56148]=0,e[56149]=0,e[56166]=0,e[56167]=0,e[56164]=0,e[56165]=0,e[56182]=0,e[56183]=0,e[56180]=0,e[56181]=0,e[56198]=0,e[56199]=0,e[56196]=0,e[56197]=0,e[56214]=0,e[56215]=0,e[56212]=0,e[56213]=0,e[56230]=0,e[56231]=0,e[56228]=0,e[56229]=0,e[56639]=59,e[56640]=59,e[56629]=0,e[56630]=59,e[56619]=89,e[56620]=160,e[56609]=280,e[56610]=688,e[56611]=1064,e[56621]=70,e[56631]=59,e[56612]=2806,e[56613]=3260,e[56622]=160,e[56623]=200,e[56632]=59,e[56633]=59,e[56641]=89,e[56642]=149,e[56643]=200,e[56644]=200,e[56634]=59,e[56635]=59,e[56624]=200,e[56625]=500,e[56614]=3700,e[56615]=6500,e[56645]=500,e[56646]=0,e[56616]=7e3,e[56626]=500,e[56636]=0,e[56647]=0,e[56637]=0,e[56627]=500,e[56617]=8e3,e[56669]=89,e[56648]=0,e[56638]=0,e[56628]=89,e[56618]=280,e[56657]=62,e[56655]=0,e[56656]=0,e[56653]=50,e[56654]=0,e[56651]=0,e[56652]=0,e[56649]=0,e[56650]=40,e[56607]=1e3,e[56608]=59,J=i=J-416|0,e[i+16>>2]=137584,e[i+20>>2]=47,e[i+24>>2]=85952,DA(t=i+240|0,85699,i+16|0),o=ka(t,86034)){if(Jt(i+240|0,170,o))for(w=5|(t=i+240|0),E=10|t;l[i+240|0]!=47&&(e[i+240>>2]!=1701736308?va(i+240|0,86614,9)||(e[i+4>>2]=i+32,e[i>>2]=i+239,(0|ut(E,86829,i))==2&&(s=e[34064],e[(Y=136272+(s<<4)|0)>>2]=g[i+239|0],t=Ji(i+32|0),e[34064]=s+1,e[Y+12>>2]=t,e[Y+4>>2]=0)):(J=t=J-48|0,e[32960]=-1,e[32961]=-1,e[32970]=-1,e[32971]=-1,e[32968]=-1,e[32969]=-1,e[32966]=-1,e[32967]=-1,e[32964]=-1,e[32965]=-1,e[32962]=-1,e[32963]=-1,e[t+36>>2]=131876,e[t+32>>2]=131872,e[t+28>>2]=131868,e[t+24>>2]=131864,e[t+20>>2]=131860,e[t+16>>2]=131856,e[t+12>>2]=131852,e[t+8>>2]=131848,e[t+4>>2]=131844,e[t>>2]=131840,ut(w,84222,t),J=t+48|0)),Jt(i+240|0,170,o););ra(o)}J=i+416|0,e[50297]=0,e[50298]=0,e[50301]=0,e[50302]=0,e[50299]=0,e[50300]=0,wi(0,85698),e[36425]=0,e[36424]=0,e[36426]=0,e[36427]=-1,ja(),Kt(0),a=e[25690],e[34062]=a,p=e[25689],i=e[25688],e[34060]=i,e[34061]=p,ee=e[25687],o=e[25686],e[34058]=o,e[34059]=ee,he=e[25685],Y=e[25684],e[34056]=Y,e[34057]=he,Qe=e[25683],w=e[25682],e[34054]=w,e[34055]=Qe,Ve=e[25681],E=e[25680],e[34052]=E,e[34053]=Ve,P=e[25679],s=e[25678],e[34050]=s,e[34051]=P,Z=e[25677],t=e[25676],e[34048]=t,e[34049]=Z,e[33729]=t,e[33730]=Z,e[33731]=s,e[33732]=P,e[33733]=E,e[33734]=Ve,e[33735]=w,e[33736]=Qe,e[33737]=Y,e[33738]=he,e[33739]=o,e[33740]=ee,e[33741]=i,e[33742]=p,e[33743]=a,Cr(1,175),Cr(2,100),Cr(6,e[47200]),Cr(5,e[47201]),Cr(7,0),e[47198]=0,e[47197]=0,f=+Ue()/1e3,s=It(t=Ne(f)<9223372036854776e3?~~f>>>0:0,0,1103515245,0),t=$,t=(s=s+12345|0)>>>0<12345?t+1|0:t,e[33209]=Wn(s,t)}if(J=c+16|0,r){Z=e[30450],Qe=e[Be+12>>2],c=48+(p=J-560|0)|0,J=a=(J=p)-16|0;e:{switch(0|sa(r-268435967|0,24)){case 0:ar(c,84133,512);break e;case 1:ar(c,84580,512);break e;case 2:ar(c,84747,512);break e;case 3:ar(c,85084,512);break e;case 4:ar(c,85251,512);break e;case 5:ar(c,85380,512);break e;case 6:ar(c,85607,512);break e;case 7:ar(c,85722,512);break e;case 8:ar(c,85913,512);break e;case 9:ar(c,86046,512);break e;case 10:ar(c,86153,512);break e;case 11:ar(c,86678,512);break e;case 12:ar(c,86773,512);break e;case 14:ar(c,86958,512);break e;case 15:ar(c,87071,512);break e}if(1879048192&r)e[a>>2]=r,ss(c,512,87182,a);else{if(m=0,i=M[123728+((r>>>0<=153?r:0)<<1)>>1]+121804|0,r=e[e[56841]+20>>2]){Ve=e[r+4>>2],ee=e[r>>2],he=e[ee>>2]+1794895138|0,P=Gs(e[ee+8>>2],he),s=Gs(e[ee+12>>2],he),t=Gs(e[ee+16>>2],he);A:if(!(Ve>>>2>>>0<=P>>>0||3&(t|s)|(r=Ve-(P<<2)|0)>>>0<=s>>>0|t>>>0>=r>>>0))for(w=t>>>2|0,E=s>>>2|0;;){if(Y=Gs(e[(r=((t=(s=(o=P>>>1|0)+rA|0)<<1)+E<<2)+ee|0)>>2],he),(r=Gs(e[r+4>>2],he))>>>0>=Ve>>>0|Y>>>0>=Ve-r>>>0|l[(r+Y|0)+ee|0])break A;if(!(r=Br(i,r+ee|0))){if(t=Gs(e[(r=(t+w<<2)+ee|0)>>2],he),(r=Gs(e[r+4>>2],he))>>>0>=Ve>>>0|t>>>0>=Ve-r>>>0)break A;m=l[(t+r|0)+ee|0]?0:r+ee|0;break A}if((0|P)==1)break A;P=(r=(0|r)<0)?o:P-o|0,rA=r?rA:s}}if((r=HA(t=m||i))>>>0>=512){wt(c,t,511),g[c+511|0]=0;break e}wt(c,t,r+1|0)}}J=a+16|0;e:if(Qe){A:switch(e[Qe>>2]){case 0:e[p+16>>2]=e[Qe+4>>2],e[p+20>>2]=p+48,fr(Z,87384,p+16|0);break e;case 1:break A;default:break e}t=e[Qe+12>>2],r=e[Qe+8>>2],e[p+36>>2]=e[Qe+4>>2],$=r,e[p+40>>2]=t,e[p+44>>2]=$,e[p+32>>2]=p+48,fr(Z,87521,p+32|0)}else e[p>>2]=p+48,fr(Z,87700,p);J=p+560|0,(0|Be)!=-12&&(r=e[Be+12>>2])&&(xt(e[r+4>>2]),xt(e[Be+12>>2]),e[Be+12>>2]=0)}r=e[24806],e[34389]=0,e[32538]=r,r=(1e3+((r=z(e[50754],100))-((0|r)%1e3|0)|0)|0)/500|0,e[34390]=r,r=Kr(e[34391],r),e[34392]=r,r&&(e[34391]=r,e[34393]=40,(r=Kr(e[34388],1440))&&(e[34388]=r)),e[47198]=0,J=Be+16|0,t=e[50754],e[33208]=t}return e[A+4>>2]=t,e[A>>2]=KA(),0|A},Y:function(A,t,r){A|=0,t|=0,r|=0,e[34440]=r,Qn(3,e[A+12>>2]),Qn(1,e[A+8>>2]),(A=e[A+16>>2])?Ta(A):ni(1024),dA(t),e[34440]=0},Z:function(A,t,r){return A|=0,t|=0,r|=0,e[34440]=0,(A=ka(r,1032))?(e[47195]=A,e[47197]=130,A||(e[47195]=e[30450]),dA(t),e[47195]=0,e[47197]=0,e[47195]=e[30450],ra(A),0):-1},_:function(A){return 36},$:function(A,t,r){var a;return A|=0,t|=0,J=a=J-32|0,(r|=0)?(e[a+24>>2]=0,e[a+28>>2]=0,e[a+16>>2]=0,e[a+20>>2]=0,e[a+12>>2]=r,e[a+8>>2]=t,g[a+21|0]=0,t=Ta(a+8|0)):t=ni(t),e[A+16>>2]=201188,J=a+32|0,0|t},aa:function(A,t,r,a){var s;return A|=0,t|=0,J=s=J-32|0,(r|=0)|(a|=0)?(e[s+24>>2]=0,e[s+28>>2]=0,e[s+16>>2]=0,e[s+20>>2]=0,e[s+12>>2]=r,e[s+8>>2]=t,g[s+22|0]=0,g[s+20|0]=a,t=Ta(s+8|0)):t=ni(t),e[A+16>>2]=201188,J=s+32|0,0|t},ba:function(A,t,r,a,s){var i;return A|=0,t|=0,J=i=J-32|0,(a|=0)|(s|=0)|(r|=0)?(e[i+24>>2]=0,e[i+28>>2]=0,e[i+16>>2]=0,e[i+20>>2]=0,e[i+12>>2]=r,e[i+8>>2]=t,g[i+21|0]=s,g[i+20|0]=a,t=Ta(i+8|0)):t=ni(t),e[A+16>>2]=201188,J=i+32|0,0|t},ca:function(A,t,r,a,s,i){var o;return A|=0,t|=0,J=o=J-32|0,(a|=0)|(s|=0)|(i|=0)|(r|=0)?(e[o+24>>2]=0,e[o+28>>2]=0,e[o+16>>2]=0,e[o+20>>2]=0,e[o+12>>2]=r,e[o+8>>2]=t,g[o+22|0]=i,g[o+21|0]=s,g[o+20|0]=a,t=Ta(o+8|0)):t=ni(t),e[A+16>>2]=201188,J=o+32|0,0|t},da:function(A,t){return t|=0,e[e[(A|=0)>>2]+(t<<2)>>2]},ea:function(A,t,r){t|=0,r|=0,e[e[(A|=0)>>2]+(t<<2)>>2]=r},fa:Q0,ga:Ca,ha:D0,ia:Ts,ja:function(A,t){t|=0,e[12+(A|=0)>>2]=t},ka:Di,la:function(){return 0},ma:function(){return 1},na:function(){return 2},oa:function(){return 3},pa:function(){return 4},qa:function(){return 5},ra:function(){return 6},sa:function(){return 7},ta:function(){return 8},ua:ct,va:function(){return 227192},wa:xt,xa:Ct,ya:function(A){return(A|=0)?0|!!(0|sr(A,125228)):0}}}(d)}(C)},instantiate:function(I,C){return{then:function(d){var k=new u2.Module(I);d({instance:new u2.Instance(k,C)})}}},RuntimeError:Error};typeof u2!="object"&&i0("no native wasm support detected");var Cd=!1;function sg(I,C){I||i0(C)}var cs,n2,cc,mr,Ea,bd,Id,Ad=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function i2(I,C,d){for(var k=C+d,T=C;I[T]&&!(T>=k);)++T;if(T-C>16&&I.buffer&&Ad)return Ad.decode(I.subarray(C,T));for(var L="";C<T;){var N=I[C++];if(128&N){var j=63&I[C++];if((224&N)!=192){var q=63&I[C++];if((N=(240&N)==224?(15&N)<<12|j<<6|q:(7&N)<<18|j<<12|q<<6|63&I[C++])<65536)L+=String.fromCharCode(N);else{var W=N-65536;L+=String.fromCharCode(55296|W>>10,56320|1023&W)}}else L+=String.fromCharCode((31&N)<<6|j)}else L+=String.fromCharCode(N)}return L}function o2(I,C){return I?i2(n2,I,C):""}function pg(I,C,d,k){if(!(k>0))return 0;for(var T=d,L=d+k-1,N=0;N<I.length;++N){var j=I.charCodeAt(N);if(j>=55296&&j<=57343&&(j=65536+((1023&j)<<10)|1023&I.charCodeAt(++N)),j<=127){if(d>=L)break;C[d++]=j}else if(j<=2047){if(d+1>=L)break;C[d++]=192|j>>6,C[d++]=128|63&j}else if(j<=65535){if(d+2>=L)break;C[d++]=224|j>>12,C[d++]=128|j>>6&63,C[d++]=128|63&j}else{if(d+3>=L)break;C[d++]=240|j>>18,C[d++]=128|j>>12&63,C[d++]=128|j>>6&63,C[d++]=128|63&j}}return C[d]=0,d-T}function wd(I){for(var C=0,d=0;d<I.length;++d){var k=I.charCodeAt(d);k<=127?C++:k<=2047?C+=2:k>=55296&&k<=57343?(C+=4,++d):C+=3}return C}var a0,ig=pe.INITIAL_MEMORY||16777216;a0=(ug=pe.wasmMemory?pe.wasmMemory:new u2.Memory({initial:ig/65536,maximum:ig/65536})).buffer,pe.HEAP8=cs=new Int8Array(a0),pe.HEAP16=cc=new Int16Array(a0),pe.HEAP32=mr=new Int32Array(a0),pe.HEAPU8=n2=new Uint8Array(a0),pe.HEAPU16=new Uint16Array(a0),pe.HEAPU32=Ea=new Uint32Array(a0),pe.HEAPF32=bd=new Float32Array(a0),pe.HEAPF64=Id=new Float64Array(a0),ig=ug.buffer.byteLength;var td=[],kd=[],rd=[],xd=!1;function vd(I){kd.unshift(I)}var Lt,da,uo=0,E1=null;function Bd(I){uo++,pe.monitorRunDependencies&&pe.monitorRunDependencies(uo)}function yd(I){if(uo--,pe.monitorRunDependencies&&pe.monitorRunDependencies(uo),uo==0&&E1){var C=E1;E1=null,C()}}function i0(I){throw pe.onAbort&&pe.onAbort(I),g2(I="Aborted("+I+")"),Cd=!0,I+=". Build with -sASSERTIONS for more info.",new u2.RuntimeError(I)}function yh(I){this.name="ExitStatus",this.message="Program terminated with exit("+I+")",this.status=I}function ng(I){for(;I.length>0;)I.shift()(pe)}function Eh(I,C="i8"){switch(C.endsWith("*")&&(C="*"),C){case"i1":case"i8":return cs[0|I];case"i16":return cc[I>>1];case"i32":case"i64":return mr[I>>2];case"float":return bd[I>>2];case"double":return Id[I>>3];case"*":return Ea[I>>2];default:i0("invalid type for getValue: "+C)}return null}function Mh(I){this.excPtr=I,this.ptr=I-24,this.set_type=function(C){Ea[this.ptr+4>>2]=C},this.get_type=function(){return Ea[this.ptr+4>>2]},this.set_destructor=function(C){Ea[this.ptr+8>>2]=C},this.get_destructor=function(){return Ea[this.ptr+8>>2]},this.set_refcount=function(C){mr[this.ptr>>2]=C},this.set_caught=function(C){C=C?1:0,cs[this.ptr+12|0]=C},this.get_caught=function(){return cs[this.ptr+12|0]!=0},this.set_rethrown=function(C){C=C?1:0,cs[this.ptr+13|0]=C},this.get_rethrown=function(){return cs[this.ptr+13|0]!=0},this.init=function(C,d){this.set_adjusted_ptr(0),this.set_type(C),this.set_destructor(d),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var C=mr[this.ptr>>2];mr[this.ptr>>2]=C+1},this.release_ref=function(){var C=mr[this.ptr>>2];return mr[this.ptr>>2]=C-1,C===1},this.set_adjusted_ptr=function(C){Ea[this.ptr+16>>2]=C},this.get_adjusted_ptr=function(){return Ea[this.ptr+16>>2]},this.get_exception_ptr=function(){if(Gf(this.get_type()))return Ea[this.excPtr>>2];var C=this.get_adjusted_ptr();return C!==0?C:this.excPtr}}var Dr={isAbs:I=>I.charAt(0)==="/",splitPath:I=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(I).slice(1),normalizeArray:(I,C)=>{for(var d=0,k=I.length-1;k>=0;k--){var T=I[k];T==="."?I.splice(k,1):T===".."?(I.splice(k,1),d++):d&&(I.splice(k,1),d--)}if(C)for(;d;d--)I.unshift("..");return I},normalize:I=>{var C=Dr.isAbs(I),d=I.substr(-1)==="/";return(I=Dr.normalizeArray(I.split("/").filter(k=>!!k),!C).join("/"))||C||(I="."),I&&d&&(I+="/"),(C?"/":"")+I},dirname:I=>{var C=Dr.splitPath(I),d=C[0],k=C[1];return d||k?(k&&(k=k.substr(0,k.length-1)),d+k):"."},basename:I=>{if(I==="/")return"/";var C=(I=(I=Dr.normalize(I)).replace(/\/$/,"")).lastIndexOf("/");return C===-1?I:I.substr(C+1)},join:function(){var I=Array.prototype.slice.call(arguments);return Dr.normalize(I.join("/"))},join2:(I,C)=>Dr.normalize(I+"/"+C)},U0={resolve:function(){for(var I="",C=!1,d=arguments.length-1;d>=-1&&!C;d--){var k=d>=0?arguments[d]:ae.cwd();if(typeof k!="string")throw new TypeError("Arguments to path.resolve must be strings");if(!k)return"";I=k+"/"+I,C=Dr.isAbs(k)}return(C?"/":"")+(I=Dr.normalizeArray(I.split("/").filter(T=>!!T),!C).join("/"))||"."},relative:(I,C)=>{function d(W){for(var F=0;F<W.length&&W[F]==="";F++);for(var X=W.length-1;X>=0&&W[X]==="";X--);return F>X?[]:W.slice(F,X-F+1)}I=U0.resolve(I).substr(1),C=U0.resolve(C).substr(1);for(var k=d(I.split("/")),T=d(C.split("/")),L=Math.min(k.length,T.length),N=L,j=0;j<L;j++)if(k[j]!==T[j]){N=j;break}var q=[];for(j=N;j<k.length;j++)q.push("..");return(q=q.concat(T.slice(N))).join("/")}};function Ed(I,C,d){var k=wd(I)+1,T=new Array(k),L=pg(I,T,0,T.length);return C&&(T.length=L),T}var go={ttys:[],init:function(){},shutdown:function(){},register:function(I,C){go.ttys[I]={input:[],output:[],ops:C},ae.registerDevice(I,go.stream_ops)},stream_ops:{open:function(I){var C=go.ttys[I.node.rdev];if(!C)throw new ae.ErrnoError(43);I.tty=C,I.seekable=!1},close:function(I){I.tty.ops.fsync(I.tty)},fsync:function(I){I.tty.ops.fsync(I.tty)},read:function(I,C,d,k,T){if(!I.tty||!I.tty.ops.get_char)throw new ae.ErrnoError(60);for(var L=0,N=0;N<k;N++){var j;try{j=I.tty.ops.get_char(I.tty)}catch{throw new ae.ErrnoError(29)}if(j===void 0&&L===0)throw new ae.ErrnoError(6);if(j==null)break;L++,C[d+N]=j}return L&&(I.node.timestamp=Date.now()),L},write:function(I,C,d,k,T){if(!I.tty||!I.tty.ops.put_char)throw new ae.ErrnoError(60);try{for(var L=0;L<k;L++)I.tty.ops.put_char(I.tty,C[d+L])}catch{throw new ae.ErrnoError(29)}return k&&(I.node.timestamp=Date.now()),L}},default_tty_ops:{put_char:function(I,C){C===null||C===10?(lc(i2(I.output,0)),I.output=[]):C!=0&&I.output.push(C)},fsync:function(I){I.output&&I.output.length>0&&(lc(i2(I.output,0)),I.output=[])}},default_tty1_ops:{put_char:function(I,C){C===null||C===10?(g2(i2(I.output,0)),I.output=[]):C!=0&&I.output.push(C)},fsync:function(I){I.output&&I.output.length>0&&(g2(i2(I.output,0)),I.output=[])}}};function Md(I){i0()}var Xt={ops_table:null,mount:function(I){return Xt.createNode(null,"/",16895,0)},createNode:function(I,C,d,k){if(ae.isBlkdev(d)||ae.isFIFO(d))throw new ae.ErrnoError(63);Xt.ops_table||(Xt.ops_table={dir:{node:{getattr:Xt.node_ops.getattr,setattr:Xt.node_ops.setattr,lookup:Xt.node_ops.lookup,mknod:Xt.node_ops.mknod,rename:Xt.node_ops.rename,unlink:Xt.node_ops.unlink,rmdir:Xt.node_ops.rmdir,readdir:Xt.node_ops.readdir,symlink:Xt.node_ops.symlink},stream:{llseek:Xt.stream_ops.llseek}},file:{node:{getattr:Xt.node_ops.getattr,setattr:Xt.node_ops.setattr},stream:{llseek:Xt.stream_ops.llseek,read:Xt.stream_ops.read,write:Xt.stream_ops.write,allocate:Xt.stream_ops.allocate,mmap:Xt.stream_ops.mmap,msync:Xt.stream_ops.msync}},link:{node:{getattr:Xt.node_ops.getattr,setattr:Xt.node_ops.setattr,readlink:Xt.node_ops.readlink},stream:{}},chrdev:{node:{getattr:Xt.node_ops.getattr,setattr:Xt.node_ops.setattr},stream:ae.chrdev_stream_ops}});var T=ae.createNode(I,C,d,k);return ae.isDir(T.mode)?(T.node_ops=Xt.ops_table.dir.node,T.stream_ops=Xt.ops_table.dir.stream,T.contents={}):ae.isFile(T.mode)?(T.node_ops=Xt.ops_table.file.node,T.stream_ops=Xt.ops_table.file.stream,T.usedBytes=0,T.contents=null):ae.isLink(T.mode)?(T.node_ops=Xt.ops_table.link.node,T.stream_ops=Xt.ops_table.link.stream):ae.isChrdev(T.mode)&&(T.node_ops=Xt.ops_table.chrdev.node,T.stream_ops=Xt.ops_table.chrdev.stream),T.timestamp=Date.now(),I&&(I.contents[C]=T,I.timestamp=T.timestamp),T},getFileDataAsTypedArray:function(I){return I.contents?I.contents.subarray?I.contents.subarray(0,I.usedBytes):new Uint8Array(I.contents):new Uint8Array(0)},expandFileStorage:function(I,C){var d=I.contents?I.contents.length:0;if(!(d>=C)){C=Math.max(C,d*(d<1048576?2:1.125)>>>0),d!=0&&(C=Math.max(C,256));var k=I.contents;I.contents=new Uint8Array(C),I.usedBytes>0&&I.contents.set(k.subarray(0,I.usedBytes),0)}},resizeFileStorage:function(I,C){if(I.usedBytes!=C)if(C==0)I.contents=null,I.usedBytes=0;else{var d=I.contents;I.contents=new Uint8Array(C),d&&I.contents.set(d.subarray(0,Math.min(C,I.usedBytes))),I.usedBytes=C}},node_ops:{getattr:function(I){var C={};return C.dev=ae.isChrdev(I.mode)?I.id:1,C.ino=I.id,C.mode=I.mode,C.nlink=1,C.uid=0,C.gid=0,C.rdev=I.rdev,ae.isDir(I.mode)?C.size=4096:ae.isFile(I.mode)?C.size=I.usedBytes:ae.isLink(I.mode)?C.size=I.link.length:C.size=0,C.atime=new Date(I.timestamp),C.mtime=new Date(I.timestamp),C.ctime=new Date(I.timestamp),C.blksize=4096,C.blocks=Math.ceil(C.size/C.blksize),C},setattr:function(I,C){C.mode!==void 0&&(I.mode=C.mode),C.timestamp!==void 0&&(I.timestamp=C.timestamp),C.size!==void 0&&Xt.resizeFileStorage(I,C.size)},lookup:function(I,C){throw ae.genericErrors[44]},mknod:function(I,C,d,k){return Xt.createNode(I,C,d,k)},rename:function(I,C,d){if(ae.isDir(I.mode)){var k;try{k=ae.lookupNode(C,d)}catch{}if(k)for(var T in k.contents)throw new ae.ErrnoError(55)}delete I.parent.contents[I.name],I.parent.timestamp=Date.now(),I.name=d,C.contents[d]=I,C.timestamp=I.parent.timestamp,I.parent=C},unlink:function(I,C){delete I.contents[C],I.timestamp=Date.now()},rmdir:function(I,C){var d=ae.lookupNode(I,C);for(var k in d.contents)throw new ae.ErrnoError(55);delete I.contents[C],I.timestamp=Date.now()},readdir:function(I){var C=[".",".."];for(var d in I.contents)I.contents.hasOwnProperty(d)&&C.push(d);return C},symlink:function(I,C,d){var k=Xt.createNode(I,C,41471,0);return k.link=d,k},readlink:function(I){if(!ae.isLink(I.mode))throw new ae.ErrnoError(28);return I.link}},stream_ops:{read:function(I,C,d,k,T){var L=I.node.contents;if(T>=I.node.usedBytes)return 0;var N=Math.min(I.node.usedBytes-T,k);if(N>8&&L.subarray)C.set(L.subarray(T,T+N),d);else for(var j=0;j<N;j++)C[d+j]=L[T+j];return N},write:function(I,C,d,k,T,L){if(!k)return 0;var N=I.node;if(N.timestamp=Date.now(),C.subarray&&(!N.contents||N.contents.subarray)){if(L)return N.contents=C.subarray(d,d+k),N.usedBytes=k,k;if(N.usedBytes===0&&T===0)return N.contents=C.slice(d,d+k),N.usedBytes=k,k;if(T+k<=N.usedBytes)return N.contents.set(C.subarray(d,d+k),T),k}if(Xt.expandFileStorage(N,T+k),N.contents.subarray&&C.subarray)N.contents.set(C.subarray(d,d+k),T);else for(var j=0;j<k;j++)N.contents[T+j]=C[d+j];return N.usedBytes=Math.max(N.usedBytes,T+k),k},llseek:function(I,C,d){var k=C;if(d===1?k+=I.position:d===2&&ae.isFile(I.node.mode)&&(k+=I.node.usedBytes),k<0)throw new ae.ErrnoError(28);return k},allocate:function(I,C,d){Xt.expandFileStorage(I.node,C+d),I.node.usedBytes=Math.max(I.node.usedBytes,C+d)},mmap:function(I,C,d,k,T){if(!ae.isFile(I.node.mode))throw new ae.ErrnoError(43);var L,N,j=I.node.contents;if(2&T||j.buffer!==cs.buffer){if((d>0||d+C<j.length)&&(j=j.subarray?j.subarray(d,d+C):Array.prototype.slice.call(j,d,d+C)),N=!0,!(L=Md()))throw new ae.ErrnoError(48);cs.set(j,L)}else N=!1,L=j.byteOffset;return{ptr:L,allocated:N}},msync:function(I,C,d,k,T){return Xt.stream_ops.write(I,C,0,k,d,!1),0}}},ae={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(I,C={})=>{if(!(I=U0.resolve(I)))return{path:"",node:null};if((C=Object.assign({follow_mount:!0,recurse_count:0},C)).recurse_count>8)throw new ae.ErrnoError(32);for(var d=I.split("/").filter(W=>!!W),k=ae.root,T="/",L=0;L<d.length;L++){var N=L===d.length-1;if(N&&C.parent)break;if(k=ae.lookupNode(k,d[L]),T=Dr.join2(T,d[L]),ae.isMountpoint(k)&&(!N||N&&C.follow_mount)&&(k=k.mounted.root),!N||C.follow)for(var j=0;ae.isLink(k.mode);){var q=ae.readlink(T);if(T=U0.resolve(Dr.dirname(T),q),k=ae.lookupPath(T,{recurse_count:C.recurse_count+1}).node,j++>40)throw new ae.ErrnoError(32)}}return{path:T,node:k}},getPath:I=>{for(var C;;){if(ae.isRoot(I)){var d=I.mount.mountpoint;return C?d[d.length-1]!=="/"?d+"/"+C:d+C:d}C=C?I.name+"/"+C:I.name,I=I.parent}},hashName:(I,C)=>{for(var d=0,k=0;k<C.length;k++)d=(d<<5)-d+C.charCodeAt(k)|0;return(I+d>>>0)%ae.nameTable.length},hashAddNode:I=>{var C=ae.hashName(I.parent.id,I.name);I.name_next=ae.nameTable[C],ae.nameTable[C]=I},hashRemoveNode:I=>{var C=ae.hashName(I.parent.id,I.name);if(ae.nameTable[C]===I)ae.nameTable[C]=I.name_next;else for(var d=ae.nameTable[C];d;){if(d.name_next===I){d.name_next=I.name_next;break}d=d.name_next}},lookupNode:(I,C)=>{var d=ae.mayLookup(I);if(d)throw new ae.ErrnoError(d,I);for(var k=ae.hashName(I.id,C),T=ae.nameTable[k];T;T=T.name_next){var L=T.name;if(T.parent.id===I.id&&L===C)return T}return ae.lookup(I,C)},createNode:(I,C,d,k)=>{var T=new ae.FSNode(I,C,d,k);return ae.hashAddNode(T),T},destroyNode:I=>{ae.hashRemoveNode(I)},isRoot:I=>I===I.parent,isMountpoint:I=>!!I.mounted,isFile:I=>(61440&I)==32768,isDir:I=>(61440&I)==16384,isLink:I=>(61440&I)==40960,isChrdev:I=>(61440&I)==8192,isBlkdev:I=>(61440&I)==24576,isFIFO:I=>(61440&I)==4096,isSocket:I=>!(49152&~I),flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:I=>{var C=ae.flagModes[I];if(C===void 0)throw new Error("Unknown file open mode: "+I);return C},flagsToPermissionString:I=>{var C=["r","w","rw"][3&I];return 512&I&&(C+="w"),C},nodePermissions:(I,C)=>ae.ignorePermissions||(!C.includes("r")||292&I.mode)&&(!C.includes("w")||146&I.mode)&&(!C.includes("x")||73&I.mode)?0:2,mayLookup:I=>ae.nodePermissions(I,"x")||(I.node_ops.lookup?0:2),mayCreate:(I,C)=>{try{return ae.lookupNode(I,C),20}catch{}return ae.nodePermissions(I,"wx")},mayDelete:(I,C,d)=>{var k;try{k=ae.lookupNode(I,C)}catch(L){return L.errno}var T=ae.nodePermissions(I,"wx");if(T)return T;if(d){if(!ae.isDir(k.mode))return 54;if(ae.isRoot(k)||ae.getPath(k)===ae.cwd())return 10}else if(ae.isDir(k.mode))return 31;return 0},mayOpen:(I,C)=>I?ae.isLink(I.mode)?32:ae.isDir(I.mode)&&(ae.flagsToPermissionString(C)!=="r"||512&C)?31:ae.nodePermissions(I,ae.flagsToPermissionString(C)):44,MAX_OPEN_FDS:4096,nextfd:(I=0,C=ae.MAX_OPEN_FDS)=>{for(var d=I;d<=C;d++)if(!ae.streams[d])return d;throw new ae.ErrnoError(33)},getStream:I=>ae.streams[I],createStream:(I,C,d)=>{ae.FSStream||(ae.FSStream=function(){this.shared={}},ae.FSStream.prototype={},Object.defineProperties(ae.FSStream.prototype,{object:{get:function(){return this.node},set:function(T){this.node=T}},isRead:{get:function(){return(2097155&this.flags)!=1}},isWrite:{get:function(){return!!(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}},flags:{get:function(){return this.shared.flags},set:function(T){this.shared.flags=T}},position:{get:function(){return this.shared.position},set:function(T){this.shared.position=T}}})),I=Object.assign(new ae.FSStream,I);var k=ae.nextfd(C,d);return I.fd=k,ae.streams[k]=I,I},closeStream:I=>{ae.streams[I]=null},chrdev_stream_ops:{open:I=>{var C=ae.getDevice(I.node.rdev);I.stream_ops=C.stream_ops,I.stream_ops.open&&I.stream_ops.open(I)},llseek:()=>{throw new ae.ErrnoError(70)}},major:I=>I>>8,minor:I=>255&I,makedev:(I,C)=>I<<8|C,registerDevice:(I,C)=>{ae.devices[I]={stream_ops:C}},getDevice:I=>ae.devices[I],getMounts:I=>{for(var C=[],d=[I];d.length;){var k=d.pop();C.push(k),d.push.apply(d,k.mounts)}return C},syncfs:(I,C)=>{typeof I=="function"&&(C=I,I=!1),ae.syncFSRequests++,ae.syncFSRequests>1&&g2("warning: "+ae.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var d=ae.getMounts(ae.root.mount),k=0;function T(N){return ae.syncFSRequests--,C(N)}function L(N){if(N)return L.errored?void 0:(L.errored=!0,T(N));++k>=d.length&&T(null)}d.forEach(N=>{if(!N.type.syncfs)return L(null);N.type.syncfs(N,I,L)})},mount:(I,C,d)=>{var k,T=d==="/",L=!d;if(T&&ae.root)throw new ae.ErrnoError(10);if(!T&&!L){var N=ae.lookupPath(d,{follow_mount:!1});if(d=N.path,k=N.node,ae.isMountpoint(k))throw new ae.ErrnoError(10);if(!ae.isDir(k.mode))throw new ae.ErrnoError(54)}var j={type:I,opts:C,mountpoint:d,mounts:[]},q=I.mount(j);return q.mount=j,j.root=q,T?ae.root=q:k&&(k.mounted=j,k.mount&&k.mount.mounts.push(j)),q},unmount:I=>{var C=ae.lookupPath(I,{follow_mount:!1});if(!ae.isMountpoint(C.node))throw new ae.ErrnoError(28);var d=C.node,k=d.mounted,T=ae.getMounts(k);Object.keys(ae.nameTable).forEach(N=>{for(var j=ae.nameTable[N];j;){var q=j.name_next;T.includes(j.mount)&&ae.destroyNode(j),j=q}}),d.mounted=null;var L=d.mount.mounts.indexOf(k);d.mount.mounts.splice(L,1)},lookup:(I,C)=>I.node_ops.lookup(I,C),mknod:(I,C,d)=>{var k=ae.lookupPath(I,{parent:!0}).node,T=Dr.basename(I);if(!T||T==="."||T==="..")throw new ae.ErrnoError(28);var L=ae.mayCreate(k,T);if(L)throw new ae.ErrnoError(L);if(!k.node_ops.mknod)throw new ae.ErrnoError(63);return k.node_ops.mknod(k,T,C,d)},create:(I,C)=>(C=C!==void 0?C:438,C&=4095,C|=32768,ae.mknod(I,C,0)),mkdir:(I,C)=>(C=C!==void 0?C:511,C&=1023,C|=16384,ae.mknod(I,C,0)),mkdirTree:(I,C)=>{for(var d=I.split("/"),k="",T=0;T<d.length;++T)if(d[T]){k+="/"+d[T];try{ae.mkdir(k,C)}catch(L){if(L.errno!=20)throw L}}},mkdev:(I,C,d)=>(d===void 0&&(d=C,C=438),C|=8192,ae.mknod(I,C,d)),symlink:(I,C)=>{if(!U0.resolve(I))throw new ae.ErrnoError(44);var d=ae.lookupPath(C,{parent:!0}).node;if(!d)throw new ae.ErrnoError(44);var k=Dr.basename(C),T=ae.mayCreate(d,k);if(T)throw new ae.ErrnoError(T);if(!d.node_ops.symlink)throw new ae.ErrnoError(63);return d.node_ops.symlink(d,k,I)},rename:(I,C)=>{var d,k,T=Dr.dirname(I),L=Dr.dirname(C),N=Dr.basename(I),j=Dr.basename(C);if(d=ae.lookupPath(I,{parent:!0}).node,k=ae.lookupPath(C,{parent:!0}).node,!d||!k)throw new ae.ErrnoError(44);if(d.mount!==k.mount)throw new ae.ErrnoError(75);var q,W=ae.lookupNode(d,N),F=U0.relative(I,L);if(F.charAt(0)!==".")throw new ae.ErrnoError(28);if((F=U0.relative(C,T)).charAt(0)!==".")throw new ae.ErrnoError(55);try{q=ae.lookupNode(k,j)}catch{}if(W!==q){var X=ae.isDir(W.mode),R=ae.mayDelete(d,N,X);if(R)throw new ae.ErrnoError(R);if(R=q?ae.mayDelete(k,j,X):ae.mayCreate(k,j))throw new ae.ErrnoError(R);if(!d.node_ops.rename)throw new ae.ErrnoError(63);if(ae.isMountpoint(W)||q&&ae.isMountpoint(q))throw new ae.ErrnoError(10);if(k!==d&&(R=ae.nodePermissions(d,"w")))throw new ae.ErrnoError(R);ae.hashRemoveNode(W);try{d.node_ops.rename(W,k,j)}catch(re){throw re}finally{ae.hashAddNode(W)}}},rmdir:I=>{var C=ae.lookupPath(I,{parent:!0}).node,d=Dr.basename(I),k=ae.lookupNode(C,d),T=ae.mayDelete(C,d,!0);if(T)throw new ae.ErrnoError(T);if(!C.node_ops.rmdir)throw new ae.ErrnoError(63);if(ae.isMountpoint(k))throw new ae.ErrnoError(10);C.node_ops.rmdir(C,d),ae.destroyNode(k)},readdir:I=>{var C=ae.lookupPath(I,{follow:!0}).node;if(!C.node_ops.readdir)throw new ae.ErrnoError(54);return C.node_ops.readdir(C)},unlink:I=>{var C=ae.lookupPath(I,{parent:!0}).node;if(!C)throw new ae.ErrnoError(44);var d=Dr.basename(I),k=ae.lookupNode(C,d),T=ae.mayDelete(C,d,!1);if(T)throw new ae.ErrnoError(T);if(!C.node_ops.unlink)throw new ae.ErrnoError(63);if(ae.isMountpoint(k))throw new ae.ErrnoError(10);C.node_ops.unlink(C,d),ae.destroyNode(k)},readlink:I=>{var C=ae.lookupPath(I).node;if(!C)throw new ae.ErrnoError(44);if(!C.node_ops.readlink)throw new ae.ErrnoError(28);return U0.resolve(ae.getPath(C.parent),C.node_ops.readlink(C))},stat:(I,C)=>{var d=ae.lookupPath(I,{follow:!C}).node;if(!d)throw new ae.ErrnoError(44);if(!d.node_ops.getattr)throw new ae.ErrnoError(63);return d.node_ops.getattr(d)},lstat:I=>ae.stat(I,!0),chmod:(I,C,d)=>{var k;if(!(k=typeof I=="string"?ae.lookupPath(I,{follow:!d}).node:I).node_ops.setattr)throw new ae.ErrnoError(63);k.node_ops.setattr(k,{mode:4095&C|-4096&k.mode,timestamp:Date.now()})},lchmod:(I,C)=>{ae.chmod(I,C,!0)},fchmod:(I,C)=>{var d=ae.getStream(I);if(!d)throw new ae.ErrnoError(8);ae.chmod(d.node,C)},chown:(I,C,d,k)=>{var T;if(!(T=typeof I=="string"?ae.lookupPath(I,{follow:!k}).node:I).node_ops.setattr)throw new ae.ErrnoError(63);T.node_ops.setattr(T,{timestamp:Date.now()})},lchown:(I,C,d)=>{ae.chown(I,C,d,!0)},fchown:(I,C,d)=>{var k=ae.getStream(I);if(!k)throw new ae.ErrnoError(8);ae.chown(k.node,C,d)},truncate:(I,C)=>{if(C<0)throw new ae.ErrnoError(28);var d;if(!(d=typeof I=="string"?ae.lookupPath(I,{follow:!0}).node:I).node_ops.setattr)throw new ae.ErrnoError(63);if(ae.isDir(d.mode))throw new ae.ErrnoError(31);if(!ae.isFile(d.mode))throw new ae.ErrnoError(28);var k=ae.nodePermissions(d,"w");if(k)throw new ae.ErrnoError(k);d.node_ops.setattr(d,{size:C,timestamp:Date.now()})},ftruncate:(I,C)=>{var d=ae.getStream(I);if(!d)throw new ae.ErrnoError(8);if(!(2097155&d.flags))throw new ae.ErrnoError(28);ae.truncate(d.node,C)},utime:(I,C,d)=>{var k=ae.lookupPath(I,{follow:!0}).node;k.node_ops.setattr(k,{timestamp:Math.max(C,d)})},open:(I,C,d)=>{if(I==="")throw new ae.ErrnoError(44);var k;if(d=d===void 0?438:d,d=64&(C=typeof C=="string"?ae.modeStringToFlags(C):C)?4095&d|32768:0,typeof I=="object")k=I;else{I=Dr.normalize(I);try{k=ae.lookupPath(I,{follow:!(131072&C)}).node}catch{}}var T=!1;if(64&C)if(k){if(128&C)throw new ae.ErrnoError(20)}else k=ae.mknod(I,d,0),T=!0;if(!k)throw new ae.ErrnoError(44);if(ae.isChrdev(k.mode)&&(C&=-513),65536&C&&!ae.isDir(k.mode))throw new ae.ErrnoError(54);if(!T){var L=ae.mayOpen(k,C);if(L)throw new ae.ErrnoError(L)}512&C&&!T&&ae.truncate(k,0),C&=-131713;var N=ae.createStream({node:k,path:ae.getPath(k),flags:C,seekable:!0,position:0,stream_ops:k.stream_ops,ungotten:[],error:!1});return N.stream_ops.open&&N.stream_ops.open(N),!pe.logReadFiles||1&C||(ae.readFiles||(ae.readFiles={}),I in ae.readFiles||(ae.readFiles[I]=1)),N},close:I=>{if(ae.isClosed(I))throw new ae.ErrnoError(8);I.getdents&&(I.getdents=null);try{I.stream_ops.close&&I.stream_ops.close(I)}catch(C){throw C}finally{ae.closeStream(I.fd)}I.fd=null},isClosed:I=>I.fd===null,llseek:(I,C,d)=>{if(ae.isClosed(I))throw new ae.ErrnoError(8);if(!I.seekable||!I.stream_ops.llseek)throw new ae.ErrnoError(70);if(d!=0&&d!=1&&d!=2)throw new ae.ErrnoError(28);return I.position=I.stream_ops.llseek(I,C,d),I.ungotten=[],I.position},read:(I,C,d,k,T)=>{if(k<0||T<0)throw new ae.ErrnoError(28);if(ae.isClosed(I))throw new ae.ErrnoError(8);if((2097155&I.flags)==1)throw new ae.ErrnoError(8);if(ae.isDir(I.node.mode))throw new ae.ErrnoError(31);if(!I.stream_ops.read)throw new ae.ErrnoError(28);var L=T!==void 0;if(L){if(!I.seekable)throw new ae.ErrnoError(70)}else T=I.position;var N=I.stream_ops.read(I,C,d,k,T);return L||(I.position+=N),N},write:(I,C,d,k,T,L)=>{if(k<0||T<0)throw new ae.ErrnoError(28);if(ae.isClosed(I))throw new ae.ErrnoError(8);if(!(2097155&I.flags))throw new ae.ErrnoError(8);if(ae.isDir(I.node.mode))throw new ae.ErrnoError(31);if(!I.stream_ops.write)throw new ae.ErrnoError(28);I.seekable&&1024&I.flags&&ae.llseek(I,0,2);var N=T!==void 0;if(N){if(!I.seekable)throw new ae.ErrnoError(70)}else T=I.position;var j=I.stream_ops.write(I,C,d,k,T,L);return N||(I.position+=j),j},allocate:(I,C,d)=>{if(ae.isClosed(I))throw new ae.ErrnoError(8);if(C<0||d<=0)throw new ae.ErrnoError(28);if(!(2097155&I.flags))throw new ae.ErrnoError(8);if(!ae.isFile(I.node.mode)&&!ae.isDir(I.node.mode))throw new ae.ErrnoError(43);if(!I.stream_ops.allocate)throw new ae.ErrnoError(138);I.stream_ops.allocate(I,C,d)},mmap:(I,C,d,k,T)=>{if(2&k&&!(2&T)&&(2097155&I.flags)!=2)throw new ae.ErrnoError(2);if((2097155&I.flags)==1)throw new ae.ErrnoError(2);if(!I.stream_ops.mmap)throw new ae.ErrnoError(43);return I.stream_ops.mmap(I,C,d,k,T)},msync:(I,C,d,k,T)=>I.stream_ops.msync?I.stream_ops.msync(I,C,d,k,T):0,munmap:I=>0,ioctl:(I,C,d)=>{if(!I.stream_ops.ioctl)throw new ae.ErrnoError(59);return I.stream_ops.ioctl(I,C,d)},readFile:(I,C={})=>{if(C.flags=C.flags||0,C.encoding=C.encoding||"binary",C.encoding!=="utf8"&&C.encoding!=="binary")throw new Error('Invalid encoding type "'+C.encoding+'"');var d,k=ae.open(I,C.flags),T=ae.stat(I).size,L=new Uint8Array(T);return ae.read(k,L,0,T,0),C.encoding==="utf8"?d=i2(L,0):C.encoding==="binary"&&(d=L),ae.close(k),d},writeFile:(I,C,d={})=>{d.flags=d.flags||577;var k=ae.open(I,d.flags,d.mode);if(typeof C=="string"){var T=new Uint8Array(wd(C)+1),L=pg(C,T,0,T.length);ae.write(k,T,0,L,void 0,d.canOwn)}else{if(!ArrayBuffer.isView(C))throw new Error("Unsupported data type");ae.write(k,C,0,C.byteLength,void 0,d.canOwn)}ae.close(k)},cwd:()=>ae.currentPath,chdir:I=>{var C=ae.lookupPath(I,{follow:!0});if(C.node===null)throw new ae.ErrnoError(44);if(!ae.isDir(C.node.mode))throw new ae.ErrnoError(54);var d=ae.nodePermissions(C.node,"x");if(d)throw new ae.ErrnoError(d);ae.currentPath=C.path},createDefaultDirectories:()=>{ae.mkdir("/tmp"),ae.mkdir("/home"),ae.mkdir("/home/web_user")},createDefaultDevices:()=>{ae.mkdir("/dev"),ae.registerDevice(ae.makedev(1,3),{read:()=>0,write:(I,C,d,k,T)=>k}),ae.mkdev("/dev/null",ae.makedev(1,3)),go.register(ae.makedev(5,0),go.default_tty_ops),go.register(ae.makedev(6,0),go.default_tty1_ops),ae.mkdev("/dev/tty",ae.makedev(5,0)),ae.mkdev("/dev/tty1",ae.makedev(6,0)),ae.mkdir("/dev/shm"),ae.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{ae.mkdir("/proc");var I=ae.mkdir("/proc/self");ae.mkdir("/proc/self/fd"),ae.mount({mount:()=>{var C=ae.createNode(I,"fd",16895,73);return C.node_ops={lookup:(d,k)=>{var T=+k,L=ae.getStream(T);if(!L)throw new ae.ErrnoError(8);var N={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>L.path}};return N.parent=N,N}},C}},{},"/proc/self/fd")},createStandardStreams:()=>{pe.stdin?ae.createDevice("/dev","stdin",pe.stdin):ae.symlink("/dev/tty","/dev/stdin"),pe.stdout?ae.createDevice("/dev","stdout",null,pe.stdout):ae.symlink("/dev/tty","/dev/stdout"),pe.stderr?ae.createDevice("/dev","stderr",null,pe.stderr):ae.symlink("/dev/tty1","/dev/stderr"),ae.open("/dev/stdin",0),ae.open("/dev/stdout",1),ae.open("/dev/stderr",1)},ensureErrnoError:()=>{ae.ErrnoError||(ae.ErrnoError=function(I,C){this.node=C,this.setErrno=function(d){this.errno=d},this.setErrno(I),this.message="FS error"},ae.ErrnoError.prototype=new Error,ae.ErrnoError.prototype.constructor=ae.ErrnoError,[44].forEach(I=>{ae.genericErrors[I]=new ae.ErrnoError(I),ae.genericErrors[I].stack="<generic error, no stack>"}))},staticInit:()=>{ae.ensureErrnoError(),ae.nameTable=new Array(4096),ae.mount(Xt,{},"/"),ae.createDefaultDirectories(),ae.createDefaultDevices(),ae.createSpecialDirectories(),ae.filesystems={MEMFS:Xt}},init:(I,C,d)=>{ae.init.initialized=!0,ae.ensureErrnoError(),pe.stdin=I||pe.stdin,pe.stdout=C||pe.stdout,pe.stderr=d||pe.stderr,ae.createStandardStreams()},quit:()=>{ae.init.initialized=!1;for(var I=0;I<ae.streams.length;I++){var C=ae.streams[I];C&&ae.close(C)}},getMode:(I,C)=>{var d=0;return I&&(d|=365),C&&(d|=146),d},findObject:(I,C)=>{var d=ae.analyzePath(I,C);return d.exists?d.object:null},analyzePath:(I,C)=>{try{I=(k=ae.lookupPath(I,{follow:!C})).path}catch{}var d={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var k=ae.lookupPath(I,{parent:!0});d.parentExists=!0,d.parentPath=k.path,d.parentObject=k.node,d.name=Dr.basename(I),k=ae.lookupPath(I,{follow:!C}),d.exists=!0,d.path=k.path,d.object=k.node,d.name=k.node.name,d.isRoot=k.path==="/"}catch(T){d.error=T.errno}return d},createPath:(I,C,d,k)=>{I=typeof I=="string"?I:ae.getPath(I);for(var T=C.split("/").reverse();T.length;){var L=T.pop();if(L){var N=Dr.join2(I,L);try{ae.mkdir(N)}catch{}I=N}}return N},createFile:(I,C,d,k,T)=>{var L=Dr.join2(typeof I=="string"?I:ae.getPath(I),C),N=ae.getMode(k,T);return ae.create(L,N)},createDataFile:(I,C,d,k,T,L)=>{var N=C;I&&(I=typeof I=="string"?I:ae.getPath(I),N=C?Dr.join2(I,C):I);var j=ae.getMode(k,T),q=ae.create(N,j);if(d){if(typeof d=="string"){for(var W=new Array(d.length),F=0,X=d.length;F<X;++F)W[F]=d.charCodeAt(F);d=W}ae.chmod(q,146|j);var R=ae.open(q,577);ae.write(R,d,0,d.length,0,L),ae.close(R),ae.chmod(q,j)}return q},createDevice:(I,C,d,k)=>{var T=Dr.join2(typeof I=="string"?I:ae.getPath(I),C),L=ae.getMode(!!d,!!k);ae.createDevice.major||(ae.createDevice.major=64);var N=ae.makedev(ae.createDevice.major++,0);return ae.registerDevice(N,{open:j=>{j.seekable=!1},close:j=>{k&&k.buffer&&k.buffer.length&&k(10)},read:(j,q,W,F,X)=>{for(var R=0,re=0;re<F;re++){var be;try{be=d()}catch{throw new ae.ErrnoError(29)}if(be===void 0&&R===0)throw new ae.ErrnoError(6);if(be==null)break;R++,q[W+re]=be}return R&&(j.node.timestamp=Date.now()),R},write:(j,q,W,F,X)=>{for(var R=0;R<F;R++)try{k(q[W+R])}catch{throw new ae.ErrnoError(29)}return F&&(j.node.timestamp=Date.now()),R}}),ae.mkdev(T,L,N)},forceLoadFile:I=>{if(I.isDevice||I.isFolder||I.link||I.contents)return!0;throw typeof XMLHttpRequest<"u"?new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."):new Error("Cannot load without read() or XMLHttpRequest.")},createLazyFile:(I,C,d,k,T)=>{function L(){this.lengthKnown=!1,this.chunks=[]}if(L.prototype.get=function(X){if(!(X>this.length-1||X<0)){var R=X%this.chunkSize,re=X/this.chunkSize|0;return this.getter(re)[R]}},L.prototype.setDataGetter=function(X){this.getter=X},L.prototype.cacheLength=function(){var X=new XMLHttpRequest;if(X.open("HEAD",d,!1),X.send(null),!(X.status>=200&&X.status<300||X.status===304))throw new Error("Couldn't load "+d+". Status: "+X.status);var R,re=Number(X.getResponseHeader("Content-length")),be=(R=X.getResponseHeader("Accept-Ranges"))&&R==="bytes",xe=(R=X.getResponseHeader("Content-Encoding"))&&R==="gzip",ye=1048576;be||(ye=re);var se=this;se.setDataGetter(ne=>{var we=ne*ye,g=(ne+1)*ye-1;if(g=Math.min(g,re-1),se.chunks[ne]===void 0&&(se.chunks[ne]=((b,e)=>{if(b>e)throw new Error("invalid range ("+b+", "+e+") or no bytes requested!");if(e>re-1)throw new Error("only "+re+" bytes available! programmer error!");var l=new XMLHttpRequest;if(l.open("GET",d,!1),re!==ye&&l.setRequestHeader("Range","bytes="+b+"-"+e),l.responseType="arraybuffer",l.overrideMimeType&&l.overrideMimeType("text/plain; charset=x-user-defined"),l.send(null),!(l.status>=200&&l.status<300||l.status===304))throw new Error("Couldn't load "+d+". Status: "+l.status);return l.response!==void 0?new Uint8Array(l.response||[]):Ed(l.responseText||"",!0)})(we,g)),se.chunks[ne]===void 0)throw new Error("doXHR failed!");return se.chunks[ne]}),!xe&&re||(ye=re=1,re=this.getter(0).length,ye=re,lc("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=re,this._chunkSize=ye,this.lengthKnown=!0},typeof XMLHttpRequest<"u"){if(!Bh)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var N=new L;Object.defineProperties(N,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var j={isDevice:!1,contents:N}}else j={isDevice:!1,url:d};var q=ae.createFile(I,C,j,k,T);j.contents?q.contents=j.contents:j.url&&(q.contents=null,q.url=j.url),Object.defineProperties(q,{usedBytes:{get:function(){return this.contents.length}}});var W={};function F(X,R,re,be,xe){var ye=X.node.contents;if(xe>=ye.length)return 0;var se=Math.min(ye.length-xe,be);if(ye.slice)for(var ne=0;ne<se;ne++)R[re+ne]=ye[xe+ne];else for(ne=0;ne<se;ne++)R[re+ne]=ye.get(xe+ne);return se}return Object.keys(q.stream_ops).forEach(X=>{var R=q.stream_ops[X];W[X]=function(){return ae.forceLoadFile(q),R.apply(null,arguments)}}),W.read=(X,R,re,be,xe)=>(ae.forceLoadFile(q),F(X,R,re,be,xe)),W.mmap=(X,R,re,be,xe)=>{ae.forceLoadFile(q);var ye=Md();if(!ye)throw new ae.ErrnoError(48);return F(X,cs,ye,R,re),{ptr:ye,allocated:!0}},q.stream_ops=W,q},indexedDB:()=>window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,DB_NAME:()=>"EM_FS_"+window.location.pathname,DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(I,C,d)=>{C=C||(()=>{}),d=d||(()=>{});var k=ae.indexedDB();try{var T=k.open(ae.DB_NAME(),ae.DB_VERSION)}catch(L){return d(L)}T.onupgradeneeded=()=>{lc("creating db"),T.result.createObjectStore(ae.DB_STORE_NAME)},T.onsuccess=()=>{var L=T.result.transaction([ae.DB_STORE_NAME],"readwrite"),N=L.objectStore(ae.DB_STORE_NAME),j=0,q=0,W=I.length;function F(){q==0?C():d()}I.forEach(X=>{var R=N.put(ae.analyzePath(X).object.contents,X);R.onsuccess=()=>{++j+q==W&&F()},R.onerror=()=>{q++,j+q==W&&F()}}),L.onerror=d},T.onerror=d},loadFilesFromDB:(I,C,d)=>{C=C||(()=>{}),d=d||(()=>{});var k=ae.indexedDB();try{var T=k.open(ae.DB_NAME(),ae.DB_VERSION)}catch(L){return d(L)}T.onupgradeneeded=d,T.onsuccess=()=>{var L=T.result;try{var N=L.transaction([ae.DB_STORE_NAME],"readonly")}catch(R){return void d(R)}var j=N.objectStore(ae.DB_STORE_NAME),q=0,W=0,F=I.length;function X(){W==0?C():d()}I.forEach(R=>{var re=j.get(R);re.onsuccess=()=>{ae.analyzePath(R).exists&&ae.unlink(R),ae.createDataFile(Dr.dirname(R),Dr.basename(R),re.result,!0,!0,!0),++q+W==F&&X()},re.onerror=()=>{W++,q+W==F&&X()}}),N.onerror=d},T.onerror=d}},Ur={DEFAULT_POLLMASK:5,calculateAt:function(I,C,d){if(Dr.isAbs(C))return C;var k;if(k=I===-100?ae.cwd():Ur.getStreamFromFD(I).path,C.length==0){if(!d)throw new ae.ErrnoError(44);return k}return Dr.join2(k,C)},doStat:function(I,C,d){try{var k=I(C)}catch(j){if(j&&j.node&&Dr.normalize(C)!==Dr.normalize(ae.getPath(j.node)))return-54;throw j}mr[d>>2]=k.dev,mr[d+8>>2]=k.ino,mr[d+12>>2]=k.mode,Ea[d+16>>2]=k.nlink,mr[d+20>>2]=k.uid,mr[d+24>>2]=k.gid,mr[d+28>>2]=k.rdev,da=[k.size>>>0,(Lt=k.size,+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[d+40>>2]=da[0],mr[d+44>>2]=da[1],mr[d+48>>2]=4096,mr[d+52>>2]=k.blocks;var T=k.atime.getTime(),L=k.mtime.getTime(),N=k.ctime.getTime();return da=[Math.floor(T/1e3)>>>0,(Lt=Math.floor(T/1e3),+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[d+56>>2]=da[0],mr[d+60>>2]=da[1],Ea[d+64>>2]=T%1e3*1e3,da=[Math.floor(L/1e3)>>>0,(Lt=Math.floor(L/1e3),+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[d+72>>2]=da[0],mr[d+76>>2]=da[1],Ea[d+80>>2]=L%1e3*1e3,da=[Math.floor(N/1e3)>>>0,(Lt=Math.floor(N/1e3),+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[d+88>>2]=da[0],mr[d+92>>2]=da[1],Ea[d+96>>2]=N%1e3*1e3,da=[k.ino>>>0,(Lt=k.ino,+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[d+104>>2]=da[0],mr[d+108>>2]=da[1],0},doMsync:function(I,C,d,k,T){if(!ae.isFile(C.node.mode))throw new ae.ErrnoError(43);if(2&k)return 0;var L=n2.slice(I,I+d);ae.msync(C,L,T,d,k)},varargs:void 0,get:function(){return Ur.varargs+=4,mr[Ur.varargs-4>>2]},getStr:function(I){return o2(I)},getStreamFromFD:function(I){var C=ae.getStream(I);if(!C)throw new ae.ErrnoError(8);return C}},og={};function M1(){if(!M1.strings){var I={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:fg||"./this.program"};for(var C in og)og[C]===void 0?delete I[C]:I[C]=og[C];var d=[];for(var C in I)d.push(C+"="+I[C]);M1.strings=d}return M1.strings}var ad=function(I,C,d,k){I||(I=this),this.parent=I,this.mount=I.mount,this.mounted=null,this.id=ae.nextInode++,this.name=C,this.mode=d,this.node_ops={},this.stream_ops={},this.rdev=k};Object.defineProperties(ad.prototype,{read:{get:function(){return!(365&~this.mode)},set:function(I){I?this.mode|=365:this.mode&=-366}},write:{get:function(){return!(146&~this.mode)},set:function(I){I?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return ae.isDir(this.mode)}},isDevice:{get:function(){return ae.isChrdev(this.mode)}}}),ae.FSNode=ad,ae.staticInit(),pe.FS_createPath=ae.createPath,pe.FS_createDataFile=ae.createDataFile,pe.FS_unlink=ae.unlink,pe.FS_createLazyFile=ae.createLazyFile,pe.FS_createDevice=ae.createDevice;var Gh={g:function(I,C,d,k){i0("Assertion failed: "+o2(I)+", at: "+[C?o2(C):"unknown filename",d,k?o2(k):"unknown function"])},u:function(I,C,d){throw new Mh(I).init(C,d),I},d:function(I,C,d){Ur.varargs=d;try{var k=Ur.getStreamFromFD(I);switch(C){case 0:return(T=Ur.get())<0?-28:ae.createStream(k,T).fd;case 1:case 2:case 6:case 7:return 0;case 3:return k.flags;case 4:var T=Ur.get();return k.flags|=T,0;case 5:return T=Ur.get(),cc[T+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return mr[Mf()>>2]=28,-1}}catch(L){if(ae===void 0||!(L instanceof ae.ErrnoError))throw L;return-L.errno}},q:function(I,C,d){try{var k=Ur.getStreamFromFD(I);k.getdents||(k.getdents=ae.readdir(k.path));for(var T=280,L=0,N=ae.llseek(k,0,1),j=Math.floor(N/T);j<k.getdents.length&&L+T<=d;){var q,W,F=k.getdents[j];if(F===".")q=k.node.id,W=4;else if(F==="..")q=ae.lookupPath(k.path,{parent:!0}).node.id,W=4;else{var X=ae.lookupNode(k.node,F);q=X.id,W=ae.isChrdev(X.mode)?2:ae.isDir(X.mode)?4:ae.isLink(X.mode)?10:8}da=[q>>>0,(Lt=q,+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[C+L>>2]=da[0],mr[C+L+4>>2]=da[1],da=[(j+1)*T>>>0,(Lt=(j+1)*T,+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[C+L+8>>2]=da[0],mr[C+L+12>>2]=da[1],cc[C+L+16>>1]=280,cs[C+L+18|0]=W,pg(F,n2,C+L+19,256),L+=T,j+=1}return ae.llseek(k,j*T,0),L}catch(R){if(ae===void 0||!(R instanceof ae.ErrnoError))throw R;return-R.errno}},h:function(I,C,d){Ur.varargs=d;try{var k=Ur.getStreamFromFD(I);switch(C){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return k.tty?0:-59;case 21519:if(!k.tty)return-59;var T=Ur.get();return mr[T>>2]=0,0;case 21520:return k.tty?-28:-59;case 21531:return T=Ur.get(),ae.ioctl(k,C,T);default:return-28}}catch(L){if(ae===void 0||!(L instanceof ae.ErrnoError))throw L;return-L.errno}},e:function(I,C,d,k){Ur.varargs=k;try{C=Ur.getStr(C),C=Ur.calculateAt(I,C);var T=k?Ur.get():0;return ae.open(C,d,T).fd}catch(L){if(ae===void 0||!(L instanceof ae.ErrnoError))throw L;return-L.errno}},o:function(I){try{return I=Ur.getStr(I),ae.rmdir(I),0}catch(C){if(ae===void 0||!(C instanceof ae.ErrnoError))throw C;return-C.errno}},n:function(I,C){try{return I=Ur.getStr(I),Ur.doStat(ae.stat,I,C)}catch(d){if(ae===void 0||!(d instanceof ae.ErrnoError))throw d;return-d.errno}},p:function(I,C,d){try{return C=Ur.getStr(C),C=Ur.calculateAt(I,C),d===0?ae.unlink(C):d===512?ae.rmdir(C):i0("Invalid flags passed to unlinkat"),0}catch(k){if(ae===void 0||!(k instanceof ae.ErrnoError))throw k;return-k.errno}},i:function(){return!0},l:function(){i0("")},f:function(){return Date.now()},j:function(I,C,d){n2.copyWithin(I,C,C+d)},m:function(I){n2.length,i0("OOM")},r:function(I,C){var d=0;return M1().forEach(function(k,T){var L=C+d;Ea[I+4*T>>2]=L,function(N,j){for(var q=0;q<N.length;++q)cs[0|j++]=N.charCodeAt(q);cs[0|j]=0}(k,L),d+=k.length+1}),0},s:function(I,C){var d=M1();Ea[I>>2]=d.length;var k=0;return d.forEach(function(T){k+=T.length+1}),Ea[C>>2]=k,0},b:function(I){try{var C=Ur.getStreamFromFD(I);return ae.close(C),0}catch(d){if(ae===void 0||!(d instanceof ae.ErrnoError))throw d;return d.errno}},t:function(I,C,d,k){try{var T=function(L,N,j){for(var q=0,W=0;W<j;W++){var F=Ea[N>>2],X=Ea[N+4>>2];N+=8;var R=ae.read(L,cs,F,X,void 0);if(R<0)return-1;if(q+=R,R<X)break}return q}(Ur.getStreamFromFD(I),C,d);return Ea[k>>2]=T,0}catch(L){if(ae===void 0||!(L instanceof ae.ErrnoError))throw L;return L.errno}},k:function(I,C,d,k,T){try{var L=(q=d)+2097152>>>0<4194305-!!(j=C)?(j>>>0)+4294967296*q:NaN;if(isNaN(L))return 61;var N=Ur.getStreamFromFD(I);return ae.llseek(N,L,k),da=[N.position>>>0,(Lt=N.position,+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[T>>2]=da[0],mr[T+4>>2]=da[1],N.getdents&&L===0&&k===0&&(N.getdents=null),0}catch(W){if(ae===void 0||!(W instanceof ae.ErrnoError))throw W;return W.errno}var j,q},c:function(I,C,d,k){try{var T=function(L,N,j){for(var q=0,W=0;W<j;W++){var F=Ea[N>>2],X=Ea[N+4>>2];N+=8;var R=ae.write(L,cs,F,X,void 0);if(R<0)return-1;q+=R}return q}(Ur.getStreamFromFD(I),C,d);return Ea[k>>2]=T,0}catch(L){if(ae===void 0||!(L instanceof ae.ErrnoError))throw L;return L.errno}},a:ug};(function(){var I,C={a:Gh};function d(k,T){var L=k.exports;pe.asm=L,pe.asm.ua,vd(pe.asm.v),yd()}if(Bd(),pe.instantiateWasm)try{return pe.instantiateWasm(C,d)}catch(k){return g2("Module.instantiateWasm callback failed with error: "+k),!1}I=function(k){d(k.instance)},async function(){return[]}().then(function(k){return u2.instantiate(k,C)}).then(function(k){return k}).then(I,function(k){g2("failed to asynchronously prepare wasm: "+k),i0(k)})})(),pe.___wasm_call_ctors=function(){return(pe.___wasm_call_ctors=pe.asm.v).apply(null,arguments)};var Gd=pe._emscripten_bind_VoidPtr___destroy___0=function(){return(Gd=pe._emscripten_bind_VoidPtr___destroy___0=pe.asm.w).apply(null,arguments)},Dd=pe._emscripten_bind_espeak_VOICE_get_name_0=function(){return(Dd=pe._emscripten_bind_espeak_VOICE_get_name_0=pe.asm.x).apply(null,arguments)},Qd=pe._emscripten_bind_espeak_VOICE_set_name_1=function(){return(Qd=pe._emscripten_bind_espeak_VOICE_set_name_1=pe.asm.y).apply(null,arguments)},Td=pe._emscripten_bind_espeak_VOICE_get_languages_1=function(){return(Td=pe._emscripten_bind_espeak_VOICE_get_languages_1=pe.asm.z).apply(null,arguments)},Pd=pe._emscripten_bind_espeak_VOICE_get_identifier_0=function(){return(Pd=pe._emscripten_bind_espeak_VOICE_get_identifier_0=pe.asm.A).apply(null,arguments)},zd=pe._emscripten_bind_espeak_VOICE_set_identifier_1=function(){return(zd=pe._emscripten_bind_espeak_VOICE_set_identifier_1=pe.asm.B).apply(null,arguments)},Sd=pe._emscripten_bind_espeak_VOICE_get_gender_0=function(){return(Sd=pe._emscripten_bind_espeak_VOICE_get_gender_0=pe.asm.C).apply(null,arguments)},Fd=pe._emscripten_bind_espeak_VOICE_set_gender_1=function(){return(Fd=pe._emscripten_bind_espeak_VOICE_set_gender_1=pe.asm.D).apply(null,arguments)},Nd=pe._emscripten_bind_espeak_VOICE_get_age_0=function(){return(Nd=pe._emscripten_bind_espeak_VOICE_get_age_0=pe.asm.E).apply(null,arguments)},Od=pe._emscripten_bind_espeak_VOICE_set_age_1=function(){return(Od=pe._emscripten_bind_espeak_VOICE_set_age_1=pe.asm.F).apply(null,arguments)},Ld=pe._emscripten_bind_espeak_VOICE_get_variant_0=function(){return(Ld=pe._emscripten_bind_espeak_VOICE_get_variant_0=pe.asm.G).apply(null,arguments)},Yd=pe._emscripten_bind_espeak_VOICE_set_variant_1=function(){return(Yd=pe._emscripten_bind_espeak_VOICE_set_variant_1=pe.asm.H).apply(null,arguments)},Hd=pe._emscripten_bind_espeak_VOICE_get_xx1_0=function(){return(Hd=pe._emscripten_bind_espeak_VOICE_get_xx1_0=pe.asm.I).apply(null,arguments)},Rd=pe._emscripten_bind_espeak_VOICE_set_xx1_1=function(){return(Rd=pe._emscripten_bind_espeak_VOICE_set_xx1_1=pe.asm.J).apply(null,arguments)},Vd=pe._emscripten_bind_espeak_VOICE_get_score_0=function(){return(Vd=pe._emscripten_bind_espeak_VOICE_get_score_0=pe.asm.K).apply(null,arguments)},Wd=pe._emscripten_bind_espeak_VOICE_set_score_1=function(){return(Wd=pe._emscripten_bind_espeak_VOICE_set_score_1=pe.asm.L).apply(null,arguments)},jd=pe._emscripten_bind_espeak_VOICE_get_spare_0=function(){return(jd=pe._emscripten_bind_espeak_VOICE_get_spare_0=pe.asm.M).apply(null,arguments)},Ud=pe._emscripten_bind_espeak_VOICE_set_spare_1=function(){return(Ud=pe._emscripten_bind_espeak_VOICE_set_spare_1=pe.asm.N).apply(null,arguments)},Kd=pe._emscripten_bind_espeak_VOICE___destroy___0=function(){return(Kd=pe._emscripten_bind_espeak_VOICE___destroy___0=pe.asm.O).apply(null,arguments)},Zd=pe._emscripten_bind_espeak_EVENT_get_type_0=function(){return(Zd=pe._emscripten_bind_espeak_EVENT_get_type_0=pe.asm.P).apply(null,arguments)},Xd=pe._emscripten_bind_espeak_EVENT_get_unique_identifier_0=function(){return(Xd=pe._emscripten_bind_espeak_EVENT_get_unique_identifier_0=pe.asm.Q).apply(null,arguments)},qd=pe._emscripten_bind_espeak_EVENT_get_text_position_0=function(){return(qd=pe._emscripten_bind_espeak_EVENT_get_text_position_0=pe.asm.R).apply(null,arguments)},Jd=pe._emscripten_bind_espeak_EVENT_get_length_0=function(){return(Jd=pe._emscripten_bind_espeak_EVENT_get_length_0=pe.asm.S).apply(null,arguments)},_d=pe._emscripten_bind_espeak_EVENT_get_audio_position_0=function(){return(_d=pe._emscripten_bind_espeak_EVENT_get_audio_position_0=pe.asm.T).apply(null,arguments)},$d=pe._emscripten_bind_espeak_EVENT_get_sample_0=function(){return($d=pe._emscripten_bind_espeak_EVENT_get_sample_0=pe.asm.U).apply(null,arguments)},ef=pe._emscripten_bind_espeak_EVENT_get_user_data_0=function(){return(ef=pe._emscripten_bind_espeak_EVENT_get_user_data_0=pe.asm.V).apply(null,arguments)},Af=pe._emscripten_bind_espeak_EVENT___destroy___0=function(){return(Af=pe._emscripten_bind_espeak_EVENT___destroy___0=pe.asm.W).apply(null,arguments)},tf=pe._emscripten_bind_eSpeakNGWorker_eSpeakNGWorker_0=function(){return(tf=pe._emscripten_bind_eSpeakNGWorker_eSpeakNGWorker_0=pe.asm.X).apply(null,arguments)},rf=pe._emscripten_bind_eSpeakNGWorker_synth__2=function(){return(rf=pe._emscripten_bind_eSpeakNGWorker_synth__2=pe.asm.Y).apply(null,arguments)},af=pe._emscripten_bind_eSpeakNGWorker_synth_ipa__2=function(){return(af=pe._emscripten_bind_eSpeakNGWorker_synth_ipa__2=pe.asm.Z).apply(null,arguments)},sf=pe._emscripten_bind_eSpeakNGWorker_getSizeOfEventStruct__0=function(){return(sf=pe._emscripten_bind_eSpeakNGWorker_getSizeOfEventStruct__0=pe.asm._).apply(null,arguments)},nf=pe._emscripten_bind_eSpeakNGWorker_set_voice_2=function(){return(nf=pe._emscripten_bind_eSpeakNGWorker_set_voice_2=pe.asm.$).apply(null,arguments)},of=pe._emscripten_bind_eSpeakNGWorker_set_voice_3=function(){return(of=pe._emscripten_bind_eSpeakNGWorker_set_voice_3=pe.asm.aa).apply(null,arguments)},lf=pe._emscripten_bind_eSpeakNGWorker_set_voice_4=function(){return(lf=pe._emscripten_bind_eSpeakNGWorker_set_voice_4=pe.asm.ba).apply(null,arguments)},cf=pe._emscripten_bind_eSpeakNGWorker_set_voice_5=function(){return(cf=pe._emscripten_bind_eSpeakNGWorker_set_voice_5=pe.asm.ca).apply(null,arguments)},gf=pe._emscripten_bind_eSpeakNGWorker_get_voices_1=function(){return(gf=pe._emscripten_bind_eSpeakNGWorker_get_voices_1=pe.asm.da).apply(null,arguments)},uf=pe._emscripten_bind_eSpeakNGWorker_set_voices_2=function(){return(uf=pe._emscripten_bind_eSpeakNGWorker_set_voices_2=pe.asm.ea).apply(null,arguments)},df=pe._emscripten_bind_eSpeakNGWorker_get_samplerate_0=function(){return(df=pe._emscripten_bind_eSpeakNGWorker_get_samplerate_0=pe.asm.fa).apply(null,arguments)},ff=pe._emscripten_bind_eSpeakNGWorker_get_rate_0=function(){return(ff=pe._emscripten_bind_eSpeakNGWorker_get_rate_0=pe.asm.ga).apply(null,arguments)},pf=pe._emscripten_bind_eSpeakNGWorker_set_rate_1=function(){return(pf=pe._emscripten_bind_eSpeakNGWorker_set_rate_1=pe.asm.ha).apply(null,arguments)},hf=pe._emscripten_bind_eSpeakNGWorker_get_pitch_0=function(){return(hf=pe._emscripten_bind_eSpeakNGWorker_get_pitch_0=pe.asm.ia).apply(null,arguments)},mf=pe._emscripten_bind_eSpeakNGWorker_set_pitch_1=function(){return(mf=pe._emscripten_bind_eSpeakNGWorker_set_pitch_1=pe.asm.ja).apply(null,arguments)},Cf=pe._emscripten_bind_eSpeakNGWorker___destroy___0=function(){return(Cf=pe._emscripten_bind_eSpeakNGWorker___destroy___0=pe.asm.ka).apply(null,arguments)},bf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED=function(){return(bf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED=pe.asm.la).apply(null,arguments)},If=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD=function(){return(If=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD=pe.asm.ma).apply(null,arguments)},wf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE=function(){return(wf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE=pe.asm.na).apply(null,arguments)},kf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK=function(){return(kf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK=pe.asm.oa).apply(null,arguments)},xf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY=function(){return(xf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY=pe.asm.pa).apply(null,arguments)},vf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END=function(){return(vf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END=pe.asm.qa).apply(null,arguments)},Bf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED=function(){return(Bf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED=pe.asm.ra).apply(null,arguments)},yf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME=function(){return(yf=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME=pe.asm.sa).apply(null,arguments)},Ef=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE=function(){return(Ef=pe._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE=pe.asm.ta).apply(null,arguments)},Mf=pe.___errno_location=function(){return(Mf=pe.___errno_location=pe.asm.va).apply(null,arguments)};pe._free=function(){return(pe._free=pe.asm.wa).apply(null,arguments)},pe._malloc=function(){return(pe._malloc=pe.asm.xa).apply(null,arguments)};var gc,Gf=pe.___cxa_is_pointer_type=function(){return(Gf=pe.___cxa_is_pointer_type=pe.asm.ya).apply(null,arguments)};function Df(I){function C(){gc||(gc=!0,pe.calledRun=!0,Cd||(xd=!0,pe.noFSInit||ae.init.initialized||ae.init(),ae.ignorePermissions=!1,ng(kd),pe.onRuntimeInitialized&&pe.onRuntimeInitialized(),function(){if(pe.postRun)for(typeof pe.postRun=="function"&&(pe.postRun=[pe.postRun]);pe.postRun.length;)d=pe.postRun.shift(),rd.unshift(d);var d;ng(rd)}()))}uo>0||(function(){if(pe.preRun)for(typeof pe.preRun=="function"&&(pe.preRun=[pe.preRun]);pe.preRun.length;)d=pe.preRun.shift(),td.unshift(d);var d;ng(td)}(),uo>0||(pe.setStatus?(pe.setStatus("Running..."),setTimeout(function(){setTimeout(function(){pe.setStatus("")},1),C()},1)):C()))}if(pe.___start_em_js=132724,pe.___stop_em_js=132822,pe.addRunDependency=Bd,pe.removeRunDependency=yd,pe.FS_createPath=ae.createPath,pe.FS_createDataFile=ae.createDataFile,pe.FS_createLazyFile=ae.createLazyFile,pe.FS_createDevice=ae.createDevice,pe.FS_unlink=ae.unlink,E1=function I(){gc||Df(),gc||(E1=I)},pe.preInit)for(typeof pe.preInit=="function"&&(pe.preInit=[pe.preInit]);pe.preInit.length>0;)pe.preInit.pop()();function zs(){}function uc(I){return(I||zs).__cache__}function l2(I,C){var d=uc(C),k=d[I];return k||((k=Object.create((C||zs).prototype)).ptr=I,d[I]=k)}Df(),zs.prototype=Object.create(zs.prototype),zs.prototype.constructor=zs,zs.prototype.__class__=zs,zs.__cache__={},pe.WrapperObject=zs,pe.getCache=uc,pe.wrapPointer=l2,pe.castObject=function(I,C){return l2(I.ptr,C)},pe.NULL=l2(0),pe.destroy=function(I){if(!I.__destroy__)throw"Error: Cannot destroy object. (Did you create it yourself?)";I.__destroy__(),delete uc(I.__class__)[I.ptr]},pe.compare=function(I,C){return I.ptr===C.ptr},pe.getPointer=function(I){return I.ptr},pe.getClass=function(I){return I.__class__};var vr={buffer:0,size:0,pos:0,temps:[],needed:0,prepare:function(){if(vr.needed){for(var I=0;I<vr.temps.length;I++)pe._free(vr.temps[I]);vr.temps.length=0,pe._free(vr.buffer),vr.buffer=0,vr.size+=vr.needed,vr.needed=0}vr.buffer||(vr.size+=128,vr.buffer=pe._malloc(vr.size),sg(vr.buffer)),vr.pos=0},alloc:function(I,C){sg(vr.buffer);var d,k=C.BYTES_PER_ELEMENT,T=I.length*k;return T=T+7&-8,vr.pos+T>=vr.size?(sg(T>0),vr.needed+=T,d=pe._malloc(T),vr.temps.push(d)):(d=vr.buffer+vr.pos,vr.pos+=T),d},copy:function(I,C,d){switch(d>>>=0,C.BYTES_PER_ELEMENT){case 2:d>>>=1;break;case 4:d>>>=2;break;case 8:d>>>=3}for(var k=0;k<I.length;k++)C[d+k]=I[k]}};function co(I){if(typeof I=="string"){var C=Ed(I),d=vr.alloc(C,cs);return vr.copy(C,cs,d),d}return I}function s0(){throw"cannot construct a VoidPtr, no constructor in IDL"}function ot(){throw"cannot construct a espeak_VOICE, no constructor in IDL"}function Ar(){throw"cannot construct a espeak_EVENT, no constructor in IDL"}function Vt(){this.ptr=tf(),uc(Vt)[this.ptr]=this}s0.prototype=Object.create(zs.prototype),s0.prototype.constructor=s0,s0.prototype.__class__=s0,s0.__cache__={},pe.VoidPtr=s0,s0.prototype.__destroy__=s0.prototype.__destroy__=function(){var I=this.ptr;Gd(I)},ot.prototype=Object.create(zs.prototype),ot.prototype.constructor=ot,ot.prototype.__class__=ot,ot.__cache__={},pe.espeak_VOICE=ot,ot.prototype.get_name=ot.prototype.get_name=function(){var I=this.ptr;return o2(Dd(I))},ot.prototype.set_name=ot.prototype.set_name=function(I){var C=this.ptr;vr.prepare(),I=I&&typeof I=="object"?I.ptr:co(I),Qd(C,I)},Object.defineProperty(ot.prototype,"name",{get:ot.prototype.get_name,set:ot.prototype.set_name}),ot.prototype.get_languages=ot.prototype.get_languages=function(I){var C=this.ptr;return I&&typeof I=="object"&&(I=I.ptr),Td(C,I)},Object.defineProperty(ot.prototype,"languages",{get:ot.prototype.get_languages}),ot.prototype.get_identifier=ot.prototype.get_identifier=function(){var I=this.ptr;return o2(Pd(I))},ot.prototype.set_identifier=ot.prototype.set_identifier=function(I){var C=this.ptr;vr.prepare(),I=I&&typeof I=="object"?I.ptr:co(I),zd(C,I)},Object.defineProperty(ot.prototype,"identifier",{get:ot.prototype.get_identifier,set:ot.prototype.set_identifier}),ot.prototype.get_gender=ot.prototype.get_gender=function(){var I=this.ptr;return Sd(I)},ot.prototype.set_gender=ot.prototype.set_gender=function(I){var C=this.ptr;I&&typeof I=="object"&&(I=I.ptr),Fd(C,I)},Object.defineProperty(ot.prototype,"gender",{get:ot.prototype.get_gender,set:ot.prototype.set_gender}),ot.prototype.get_age=ot.prototype.get_age=function(){var I=this.ptr;return Nd(I)},ot.prototype.set_age=ot.prototype.set_age=function(I){var C=this.ptr;I&&typeof I=="object"&&(I=I.ptr),Od(C,I)},Object.defineProperty(ot.prototype,"age",{get:ot.prototype.get_age,set:ot.prototype.set_age}),ot.prototype.get_variant=ot.prototype.get_variant=function(){var I=this.ptr;return Ld(I)},ot.prototype.set_variant=ot.prototype.set_variant=function(I){var C=this.ptr;I&&typeof I=="object"&&(I=I.ptr),Yd(C,I)},Object.defineProperty(ot.prototype,"variant",{get:ot.prototype.get_variant,set:ot.prototype.set_variant}),ot.prototype.get_xx1=ot.prototype.get_xx1=function(){var I=this.ptr;return Hd(I)},ot.prototype.set_xx1=ot.prototype.set_xx1=function(I){var C=this.ptr;I&&typeof I=="object"&&(I=I.ptr),Rd(C,I)},Object.defineProperty(ot.prototype,"xx1",{get:ot.prototype.get_xx1,set:ot.prototype.set_xx1}),ot.prototype.get_score=ot.prototype.get_score=function(){var I=this.ptr;return Vd(I)},ot.prototype.set_score=ot.prototype.set_score=function(I){var C=this.ptr;I&&typeof I=="object"&&(I=I.ptr),Wd(C,I)},Object.defineProperty(ot.prototype,"score",{get:ot.prototype.get_score,set:ot.prototype.set_score}),ot.prototype.get_spare=ot.prototype.get_spare=function(){var I=this.ptr;return jd(I)},ot.prototype.set_spare=ot.prototype.set_spare=function(I){var C=this.ptr;I&&typeof I=="object"&&(I=I.ptr),Ud(C,I)},Object.defineProperty(ot.prototype,"spare",{get:ot.prototype.get_spare,set:ot.prototype.set_spare}),ot.prototype.__destroy__=ot.prototype.__destroy__=function(){var I=this.ptr;Kd(I)},Ar.prototype=Object.create(zs.prototype),Ar.prototype.constructor=Ar,Ar.prototype.__class__=Ar,Ar.__cache__={},pe.espeak_EVENT=Ar,Ar.prototype.get_type=Ar.prototype.get_type=function(){var I=this.ptr;return Zd(I)},Object.defineProperty(Ar.prototype,"type",{get:Ar.prototype.get_type}),Ar.prototype.get_unique_identifier=Ar.prototype.get_unique_identifier=function(){var I=this.ptr;return Xd(I)},Object.defineProperty(Ar.prototype,"unique_identifier",{get:Ar.prototype.get_unique_identifier}),Ar.prototype.get_text_position=Ar.prototype.get_text_position=function(){var I=this.ptr;return qd(I)},Object.defineProperty(Ar.prototype,"text_position",{get:Ar.prototype.get_text_position}),Ar.prototype.get_length=Ar.prototype.get_length=function(){var I=this.ptr;return Jd(I)},Object.defineProperty(Ar.prototype,"length",{get:Ar.prototype.get_length}),Ar.prototype.get_audio_position=Ar.prototype.get_audio_position=function(){var I=this.ptr;return _d(I)},Object.defineProperty(Ar.prototype,"audio_position",{get:Ar.prototype.get_audio_position}),Ar.prototype.get_sample=Ar.prototype.get_sample=function(){var I=this.ptr;return $d(I)},Object.defineProperty(Ar.prototype,"sample",{get:Ar.prototype.get_sample}),Ar.prototype.get_user_data=Ar.prototype.get_user_data=function(){var I=this.ptr;return ef(I)},Object.defineProperty(Ar.prototype,"user_data",{get:Ar.prototype.get_user_data}),Ar.prototype.__destroy__=Ar.prototype.__destroy__=function(){var I=this.ptr;Af(I)},Vt.prototype=Object.create(zs.prototype),Vt.prototype.constructor=Vt,Vt.prototype.__class__=Vt,Vt.__cache__={},pe.eSpeakNGWorker=Vt,Vt.prototype.synth_=Vt.prototype.synth_=function(I,C){var d=this.ptr;vr.prepare(),I=I&&typeof I=="object"?I.ptr:co(I),C&&typeof C=="object"&&(C=C.ptr),rf(d,I,C)},Vt.prototype.synth_ipa_=Vt.prototype.synth_ipa_=function(I,C){var d=this.ptr;return vr.prepare(),I=I&&typeof I=="object"?I.ptr:co(I),C=C&&typeof C=="object"?C.ptr:co(C),af(d,I,C)},Vt.prototype.getSizeOfEventStruct_=Vt.prototype.getSizeOfEventStruct_=function(){var I=this.ptr;return sf(I)},Vt.prototype.set_voice=Vt.prototype.set_voice=function(I,C,d,k,T){var L=this.ptr;return vr.prepare(),I=I&&typeof I=="object"?I.ptr:co(I),C=C&&typeof C=="object"?C.ptr:co(C),d&&typeof d=="object"&&(d=d.ptr),k&&typeof k=="object"&&(k=k.ptr),T&&typeof T=="object"&&(T=T.ptr),d===void 0?nf(L,I,C):k===void 0?of(L,I,C,d):T===void 0?lf(L,I,C,d,k):cf(L,I,C,d,k,T)},Vt.prototype.get_voices=Vt.prototype.get_voices=function(I){var C=this.ptr;return I&&typeof I=="object"&&(I=I.ptr),l2(gf(C,I),ot)},Vt.prototype.set_voices=Vt.prototype.set_voices=function(I,C){var d=this.ptr;vr.prepare(),I&&typeof I=="object"&&(I=I.ptr),C&&typeof C=="object"&&(C=C.ptr),uf(d,I,C)},Object.defineProperty(Vt.prototype,"voices",{get:Vt.prototype.get_voices,set:Vt.prototype.set_voices}),Vt.prototype.get_samplerate=Vt.prototype.get_samplerate=function(){var I=this.ptr;return df(I)},Object.defineProperty(Vt.prototype,"samplerate",{get:Vt.prototype.get_samplerate}),Vt.prototype.get_rate=Vt.prototype.get_rate=function(){var I=this.ptr;return ff(I)},Vt.prototype.set_rate=Vt.prototype.set_rate=function(I){var C=this.ptr;I&&typeof I=="object"&&(I=I.ptr),pf(C,I)},Object.defineProperty(Vt.prototype,"rate",{get:Vt.prototype.get_rate,set:Vt.prototype.set_rate}),Vt.prototype.get_pitch=Vt.prototype.get_pitch=function(){var I=this.ptr;return hf(I)},Vt.prototype.set_pitch=Vt.prototype.set_pitch=function(I){var C=this.ptr;I&&typeof I=="object"&&(I=I.ptr),mf(C,I)},Object.defineProperty(Vt.prototype,"pitch",{get:Vt.prototype.get_pitch,set:Vt.prototype.set_pitch}),Vt.prototype.__destroy__=Vt.prototype.__destroy__=function(){var I=this.ptr;Cf(I)},function(){function I(){pe.espeakEVENT_LIST_TERMINATED=bf(),pe.espeakEVENT_WORD=If(),pe.espeakEVENT_SENTENCE=wf(),pe.espeakEVENT_MARK=kf(),pe.espeakEVENT_PLAY=xf(),pe.espeakEVENT_END=vf(),pe.espeakEVENT_MSG_TERMINATED=Bf(),pe.espeakEVENT_PHONEME=yf(),pe.espeakEVENT_SAMPLERATE=Ef()}xd?I():vd(I)}(),Vt.prototype.list_voices=function(){for(var I,C=[],d=this.get_voices(I=0);d.ptr!=0;d=this.get_voices(++I)){let j=function(q){for(var W="",F=q,X=d.get_languages(F++);X!=0;)W+=String.fromCharCode(X),X=d.get_languages(F++);return W};for(var k={name:d.get_name(),identifier:d.get_identifier(),languages:[]},T=0,L=d.get_languages(T);L!=0;){var N={priority:L,name:j(++T)};k.languages.push(N),T+=N.name.length+1,L=d.get_languages(T)}C.push(k)}return C};var Dh=["list_terminated","word","sentence","mark","play","end","msg_terminated","phoneme","samplerate"];Vt.prototype.synthesize=function(I,C){var d=this.getSizeOfEventStruct_(),k=addFunction(function(T,L,N){for(var j=new Float32Array(2*L),q=0;q<L;q++)j[2*q]=Math.max(-1,Math.min(1,Eh(T+2*q,"i16")/32768)),j[2*q+1]=j[2*q];var W=[];for(T=N,ev=l2(T,Ar);ev.get_type()!=pe.espeakEVENT_LIST_TERMINATED;ev=l2(T+=d,Ar))W.push({type:Dh[ev.get_type()],text_position:ev.get_text_position(),word_length:ev.get_length(),audio_position:ev.get_audio_position()});return C(j,W)?1:0});this.synth_(I,k),removeFunction(k)},Vt.prototype.synthesize_ipa=function(I,C){var d="espeak-ng-ipa-tmp-"+Math.random().toString().substring(2),k="",T=this.synth_ipa_(I,d);return T==0&&(k=ae.readFile(d,{encoding:"utf8"})),ae.unlink(d),{code:T,ipa:k}};const Qf=new Promise(I=>{pe.calledRun?I(new pe.eSpeakNGWorker):pe.onRuntimeInitialized=()=>I(new pe.eSpeakNGWorker)}),Qh=["en"],Th=Qf.then(I=>{const C=I.list_voices().map(({name:k,identifier:T,languages:L})=>({name:k,identifier:T,languages:L.filter(N=>Qh.includes(N.name.split("-")[0]))})).filter(k=>k.languages.length>0),d=new Set;for(const k of C){d.add(k.identifier);for(const T of k.languages)d.add(T.name)}return{voices:C,identifiers:d}});function Ph(I){if(I.includes("."))return I;if(I.includes(":")){let[L,N]=I.split(":").map(Number);return N===0?`${L} o'clock`:N<10?`${L} oh ${N}`:`${L} ${N}`}let C=parseInt(I.slice(0,4),10);if(C<1100||C%1e3<10)return I;let d=I.slice(0,2),k=parseInt(I.slice(2,4),10),T=I.endsWith("s")?"s":"";if(C%1e3>=100&&C%1e3<=999){if(k===0)return`${d} hundred${T}`;if(k<10)return`${d} oh ${k}${T}`}return`${d} ${k}${T}`}function zh(I){const C=I[0]==="$"?"dollar":"pound";if(isNaN(Number(I.slice(1))))return`${I.slice(1)} ${C}s`;if(!I.includes(".")){let L=I.slice(1)==="1"?"":"s";return`${I.slice(1)} ${C}${L}`}const[d,k]=I.slice(1).split("."),T=parseInt(k.padEnd(2,"0"),10);return`${d} ${C}${d==="1"?"":"s"} and ${T} ${I[0]==="$"?T===1?"cent":"cents":T===1?"penny":"pence"}`}function Sh(I){let[C,d]=I.split(".");return`${C} point ${d.split("").join(" ")}`}const Fh=new RegExp(`(\\s*[${sd=';:,.!?¡¿—…"«»“”(){}[]',sd.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}]+\\s*)+`,"g");var sd;async function id(I,C="a",d=!0){d&&(I=function(j){return j.replace(/[‘’]/g,"'").replace(/«/g,"“").replace(/»/g,"”").replace(/[“”]/g,'"').replace(/\(/g,"«").replace(/\)/g,"»").replace(/、/g,", ").replace(/。/g,". ").replace(/！/g,"! ").replace(/，/g,", ").replace(/：/g,": ").replace(/；/g,"; ").replace(/？/g,"? ").replace(/[^\S \n]/g," ").replace(/  +/," ").replace(/(?<=\n) +(?=\n)/g,"").replace(/\bD[Rr]\.(?= [A-Z])/g,"Doctor").replace(/\b(?:Mr\.|MR\.(?= [A-Z]))/g,"Mister").replace(/\b(?:Ms\.|MS\.(?= [A-Z]))/g,"Miss").replace(/\b(?:Mrs\.|MRS\.(?= [A-Z]))/g,"Mrs").replace(/\betc\.(?! [A-Z])/gi,"etc").replace(/\b(y)eah?\b/gi,"$1e'a").replace(/\d*\.\d+|\b\d{4}s?\b|(?<!:)\b(?:[1-9]|1[0-2]):[0-5]\d\b(?!:)/g,Ph).replace(/(?<=\d),(?=\d)/g,"").replace(/[$£]\d+(?:\.\d+)?(?: hundred| thousand| (?:[bm]|tr)illion)*\b|[$£]\d+\.\d\d?\b/gi,zh).replace(/\d*\.\d+/g,Sh).replace(/(?<=\d)-(?=\d)/g," to ").replace(/(?<=\d)S/g," S").replace(/(?<=[BCDFGHJ-NP-TV-Z])'?s\b/g,"'S").replace(/(?<=X')S\b/g,"s").replace(/(?:[A-Za-z]\.){2,} [a-z]/g,q=>q.replace(/\./g,"-")).replace(/(?<=[A-Z])\.(?=[A-Z])/gi,"-").trim()}(I));const k=function(j,q){const W=[];let F=0;for(const X of j.matchAll(q)){const R=X[0];F<X.index&&W.push({match:!1,text:j.slice(F,X.index)}),R.length>0&&W.push({match:!0,text:R}),F=X.index+R.length}return F<j.length&&W.push({match:!1,text:j.slice(F)}),W}(I,Fh),T=C==="a"?"en-us":"en";let N=(await Promise.all(k.map(async({match:j,text:q})=>j?q:(await(async(W,F="en-us")=>{const X=await Qf,{identifiers:R}=await Th;if(!R.has(F))throw new Error(`Invalid language identifier: "${F}". Should be one of: ${Array.from(R).toSorted().join(", ")}.`);return X.set_voice(F),X.synthesize_ipa(W).ipa?.split(`
`).filter(re=>re.length>0)??[]})(q,T)).join(" ")))).join("").replace(/kəkˈoːɹoʊ/g,"kˈoʊkəɹoʊ").replace(/kəkˈɔːɹəʊ/g,"kˈəʊkəɹəʊ").replace(/ʲ/g,"j").replace(/r/g,"ɹ").replace(/x/g,"k").replace(/ɬ/g,"l").replace(/(?<=[a-zɹː])(?=hˈʌndɹɪd)/g," ").replace(/ z(?=[;:,.!?¡¿—…"«»“” ]|$)/g,"z");return C==="a"&&(N=N.replace(/(?<=nˈaɪn)ti(?!ː)/g,"di")),N.trim()}function lg(I,C=!0){return".!?…。？！".includes(I)||C&&I===`
`}function Nh(I){return`"')]}」』`.includes(I)}function Oh(I,C){let d=C;for(;d<I.length&&!/\s/.test(I[d]);)++d;return I.substring(C,d)}const Lh=new Set(["mr","mrs","ms","dr","prof","sr","jr","sgt","col","gen","rep","sen","gov","lt","maj","capt","st","mt","etc","co","inc","ltd","dept","vs","p","pg","jan","feb","mar","apr","jun","jul","aug","sep","sept","oct","nov","dec","sun","mon","tu","tue","tues","wed","th","thu","thur","thurs","fri","sat"]);function Yh(I){return I=I.replace(/['’]s$/i,"").replace(/\.+$/,""),Lh.has(I.toLowerCase())}const Tf=new Map([[")","("],["]","["],["}","{"],["》","《"],["〉","〈"],["›","‹"],["»","«"],["〉","〈"],["」","「"],["』","『"],["〕","〔"],["】","【"]]),Hh=new Set(Tf.values());function Rh(I,C,d,k){if(I==='"'||I==="'")return I==="'"&&d>0&&d<k.length-1&&/[A-Za-z]/.test(k[d-1])&&/[A-Za-z]/.test(k[d+1])?void 0:void(C.length&&C.at(-1)===I?C.pop():C.push(I));if(Hh.has(I))return void C.push(I);const T=Tf.get(I);T&&C.length&&C.at(-1)===T&&C.pop()}class nd{constructor(){this._buffer="",this._sentences=[],this._resolver=null,this._closed=!1}push(...C){for(const d of C)this._buffer+=d,this._process()}close(){if(this._closed)throw new Error("Stream is already closed.");this._closed=!0,this.flush()}flush(){const C=this._buffer.trim();C.length>0&&this._sentences.push(C),this._buffer="",this._resolve()}_resolve(){this._resolver&&(this._resolver(),this._resolver=null)}_process(){let C=0;const d=this._buffer,k=d.length;let T=0,L=[];const N=j=>{let q=j;for(;q+1<k&&lg(d[q+1],!1);)++q;for(;q+1<k&&Nh(d[q+1]);)++q;let W=q+1;for(;W<k&&/\s/.test(d[W]);)++W;return{end:q,nextNonSpace:W}};for(;T<k;){const j=d[T];if(Rh(j,L,T,d),L.length===0&&lg(j)){const q=d.slice(C,T);if(/(^|\n)\d+$/.test(q)){++T;continue}const{end:W,nextNonSpace:F}=N(T);if(T===F-1&&j!==`
`){++T;continue}if(F===k)break;let X=T-1;for(;X>=0&&/\S/.test(d[X]);)X--;X=Math.max(C,X+1);const R=Oh(d,X);if(!R){++T;continue}if((/https?[,:]\/\//.test(R)||R.includes("@"))&&!lg(R.at(-1))){T=X+R.length;continue}if(Yh(R)){++T;continue}if(/^([A-Za-z]\.)+$/.test(R)&&F<k&&/[A-Z]/.test(d[F])){++T;continue}if(j==="."&&F<k&&/[a-z]/.test(d[F])){++T;continue}const re=d.substring(C,W+1).trim();if(re==="..."||re==="…"){++T;continue}re&&this._sentences.push(re),T=C=W+1}else++T}this._buffer=d.substring(C),this._sentences.length>0&&this._resolve()}async*[Symbol.asyncIterator](){if(this._resolver)throw new Error("Another iterator is already active.");for(;;)if(this._sentences.length>0)yield this._sentences.shift();else{if(this._closed)break;await new Promise(C=>{this._resolver=C})}}[Symbol.iterator](){this.flush();const C=this._sentences[Symbol.iterator]();return this._sentences=[],C}get sentences(){return this._sentences}}var cg={};const v1=Object.freeze({af_heart:{name:"Heart",language:"en-us",gender:"Female",traits:"❤️",targetQuality:"A",overallGrade:"A"},af_alloy:{name:"Alloy",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C"},af_aoede:{name:"Aoede",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_bella:{name:"Bella",language:"en-us",gender:"Female",traits:"🔥",targetQuality:"A",overallGrade:"A-"},af_jessica:{name:"Jessica",language:"en-us",gender:"Female",targetQuality:"C",overallGrade:"D"},af_kore:{name:"Kore",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_nicole:{name:"Nicole",language:"en-us",gender:"Female",traits:"🎧",targetQuality:"B",overallGrade:"B-"},af_nova:{name:"Nova",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C"},af_river:{name:"River",language:"en-us",gender:"Female",targetQuality:"C",overallGrade:"D"},af_sarah:{name:"Sarah",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_sky:{name:"Sky",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C-"},am_adam:{name:"Adam",language:"en-us",gender:"Male",targetQuality:"D",overallGrade:"F+"},am_echo:{name:"Echo",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_eric:{name:"Eric",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_fenrir:{name:"Fenrir",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_liam:{name:"Liam",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_michael:{name:"Michael",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_onyx:{name:"Onyx",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_puck:{name:"Puck",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_santa:{name:"Santa",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D-"},bf_emma:{name:"Emma",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"B",overallGrade:"B-"},bf_isabella:{name:"Isabella",language:"en-gb",gender:"Female",targetQuality:"B",overallGrade:"C"},bm_george:{name:"George",language:"en-gb",gender:"Male",targetQuality:"B",overallGrade:"C"},bm_lewis:{name:"Lewis",language:"en-gb",gender:"Male",targetQuality:"C",overallGrade:"D+"},bf_alice:{name:"Alice",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"C",overallGrade:"D"},bf_lily:{name:"Lily",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"C",overallGrade:"D"},bm_daniel:{name:"Daniel",language:"en-gb",gender:"Male",traits:"🚹",targetQuality:"C",overallGrade:"D"},bm_fable:{name:"Fable",language:"en-gb",gender:"Male",traits:"🚹",targetQuality:"B",overallGrade:"C"}}),gg=new Map;async function Vh(I){if(gg.has(I))return gg.get(I);const C=new Float32Array(await async function(d){if(cg?.readFile){const j=typeof __dirname<"u"?__dirname:import.meta.dirname,q=cg.resolve(j,`../voices/${d}.bin`),{buffer:W}=await cg.readFile(q);return W}const k=`https://huggingface.co/onnx-community/Kokoro-82M-v1.0-ONNX/resolve/main/voices/${d}.bin`;let T;try{T=await caches.open("kokoro-voices");const j=await T.match(k);if(j)return await j.arrayBuffer()}catch(j){console.warn("Unable to open cache",j)}const L=await fetch(k),N=await L.arrayBuffer();if(T)try{await T.put(k,new Response(N,{headers:L.headers}))}catch(j){console.warn("Unable to cache file",j)}return N}(I));return gg.set(I,C),C}class hg{constructor(C,d){this.model=C,this.tokenizer=d}static async from_pretrained(C,{dtype:d="fp32",device:k=null,progress_callback:T=null}={}){const L=vh.from_pretrained(C,{progress_callback:T,dtype:d,device:k}),N=kh.from_pretrained(C,{progress_callback:T}),j=await Promise.all([L,N]);return new hg(...j)}get voices(){return v1}list_voices(){console.table(v1)}_validate_voice(C){if(!v1.hasOwnProperty(C))throw console.error(`Voice "${C}" not found. Available voices:`),console.table(v1),new Error(`Voice "${C}" not found. Should be one of: ${Object.keys(v1).join(", ")}.`);return C.at(0)}async generate(C,{voice:d="af_heart",speed:k=1}={}){const T=this._validate_voice(d),L=await id(C,T),{input_ids:N}=this.tokenizer(L,{truncation:!0});return this.generate_from_ids(N,{voice:d,speed:k})}async generate_from_ids(C,{voice:d="af_heart",speed:k=1}={}){const T=256*Math.min(Math.max(C.dims.at(-1)-2,0),509),L=(await Vh(d)).slice(T,T+256),N={input_ids:C,style:new _u("float32",L,[1,256]),speed:new _u("float32",[k],[1])},{waveform:j}=await this.model(N);return new xh(j.data,24e3)}async*stream(C,{voice:d="af_heart",speed:k=1,split_pattern:T=null}={}){const L=this._validate_voice(d);let N;if(C instanceof nd)N=C;else{if(typeof C!="string")throw new Error("Invalid input type. Expected string or TextSplitterStream.");{N=new nd;const j=T?C.split(T).map(q=>q.trim()).filter(q=>q.length>0):[C];N.push(...j)}}for await(const j of N){const q=await id(j,L),{input_ids:W}=this.tokenizer(q,{truncation:!0}),F=await this.generate_from_ids(W,{voice:d,speed:k});yield{text:j,phonemes:q,audio:F}}}}const Wh="onnx-community/Kokoro-82M-v1.0-ONNX",Pf=await hg.from_pretrained(Wh,{dtype:"fp32",device:"webgpu"}),zf=document.querySelector("#tts #voices"),dc=document.querySelector("#tts");function jh(){const I=Pf.voices,C=Object.entries(I).map(([d,k])=>`<option value="${d}" ${d==="bm_george"?"selected":""}>${k.name} ${k.traits?`- ${k.traits}`:""}</option>`).join("");zf.innerHTML=C}jh();const Uh=dc?.querySelector("#text")?.value,od=dc?.querySelector("#audio"),ld=dc?.querySelector(".stats");async function Kh(){ld.textContent="Generating...";const I=performance.now(),C=await Pf.generate(Uh,{voice:zf?.value||"af_heart"}),d=performance.now(),k=C.toBlob(),T=URL.createObjectURL(k);ld.textContent=`Done in ~${Math.round(d-I)}ms`,od.src=T,od.play()}const Zh=dc?.querySelector("#generate");Zh?.addEventListener("click",Kh);
